

  might avoid issues
 But we can also just decide to synchronize and
  contact all copyright holders on record if/when the occasion arises


			Linus Torvalds

----------------------------------------

		    GNU GENERAL PUBLIC LICENSE
		       Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc
  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it


  When we speak of free software, we are referring to freedom, not
price
  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things


  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights

These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it


  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have
  You must make sure that they, too, receive or can get the
source code
  And you must show them these terms so they know their
rights


  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software
  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations


  Finally, any free program is threatened constantly by software
patents
  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary
  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all


  The precise terms and conditions for copying, distribution and
modification follow
 This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License


Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope

Whether that is true depends on what the Program does


  1
 You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program
 You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change
  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement
)

These requirements apply to the modified work as a whole
  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works


Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program


In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License


  3
  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above
)

The source code for a work means the preferred form of the work for
making modifications to it
  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable


  4
 You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License
  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License

However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance


  5
  However, nothing else grants you permission to modify or
distribute the Program or its derivative works

You are not responsible for enforcing compliance by third parties to
this License


  7
 If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License


If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances


It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices
  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice


This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License
 If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded
  In such case, this License incorporates
the limitation as if written in the body of this License


  10
  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this


			    NO WARRANTY

  11
 BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW
  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU
  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION
 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES
  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found


    <one line to give the program's name and a brief idea of what it does


    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE


    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc
,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

    Gnomovision version 69, Copyright (C) year name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'
  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program
, hereby disclaims all copyright interest in the program
  `Gnomovision' (which makes passes at compilers) written by James Hacker
  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library
  If this is what you want to do, use the GNU Lesser General
Public License instead of this License
NET][dotnet] that runs
on Windows, macOS, and Linux

Compare to Git's [built-in credential helpers][git-tools-credential-storage]
(Windows: wincred, macOS: osxkeychain, Linux: gnome-keyring/libsecret), which
provide single-factor authentication support for username/password only
NET Framework-based
[Git Credential Manager for Windows][gcm-for-windows] and the Java-based
[Git Credential Manager for Mac and Linux][gcm-for-mac-and-linux]
x

  The initial major version of Git is not supported or tested with GCM


- Git 2
2

  This version of Git introduced a breaking change with parsing credential
  configuration that GCM relies on
 This issue was fixed in commit
  [`12294990`][gcm-commit-12294990] of the Git project, and released in Git
  2
27
0


## How to use

Once it's installed and configured, Git Credential Manager is called implicitly
by Git
 You don't have to do anything special, and GCM isn't intended to be
called directly by the user
 (This
process will look slightly different for each Git host, and even in some cases,
whether you've connected to an on-premises or cloud-hosted Git host
) Later Git
commands in the same repository will re-use existing credentials or tokens that
GCM has stored for as long as they're valid


Read full command line usage [here][gcm-usage]


### Configuring a proxy

See detailed information [here][gcm-http-proxy]


## Additional Resources

See the [documentation index][docs-index] for links to additional resources


## Experimental Features

- [Windows broker (experimental)][gcm-windows-broker]

## Contributing

This project welcomes contributions and suggestions

See the [contributing guide][gcm-contributing] to get started


This project follows [GitHub's Open Source Code of Conduct][gcm-coc]

When using GitHub logos, please be sure to follow the
[GitHub logo guidelines][github-logos]


[azure-devops]: https://dev
com/
[azure-devops-ssh]: https://docs
microsoft
com/en-us/azure/devops/repos/git/use-ssh-keys-to-authenticate?view=azure-devops
[bitbucket]: https://bitbucket
org
[bitbucket-ssh]: https://confluence
atlassian
com/bitbucket/ssh-keys-935365775
html
[build-status-badge]: https://github
com/GitCredentialManager/git-credential-manager/actions/workflows/continuous-integration
md
[dotnet]: https://dotnet
microsoft
microsoft
com/en-us/dotnet/core/install/linux
[git-credential-helper]: https://git-scm
com/GitCredentialManager/git-credential-manager
[gcm-coc]: CODE_OF_CONDUCT
com/git/git/commit/12294990c90e043862be9eb7eb22c3784b526340
[gcm-contributing]: CONTRIBUTING
md
[gcm-credstores]: https://github
com/microsoft/Git-Credential-Manager-for-Windows
[gcm-http-proxy]: https://github
md#http-proxy
[gcm-license]: LICENSE
[gcm-usage]: https://github
com/GitCredentialManager/git-credential-manager/blob/release/docs/usage
md
[gcm-windows-broker]: https://github
com/GitCredentialManager/git-credential-manager/blob/release/docs/windows-broker
com
[github-ssh]: https://help
github
com/en/articles/connecting-to-github-with-ssh
[github-logos]: https://github
com/logos
[install]: https://github
com/GitCredentialManager/git-credential-manager/blob/release/docs/install
md
[ms-package-repos]: https://packages
com/GitCredentialManager/git-credential-manager/actions/workflows/continuous-integration
yml


































































# Git Large File Storage

[![CI status][ci_badge]][ci_url]

[ci_badge]: https://github
com/git-lfs/git-lfs/workflows/CI/badge
svg
[ci_url]: https://github
com/git-lfs/git-lfs/actions?query=workflow%3ACI

[Git LFS](https://git-lfs
github
md) for managing large files with Git
 Check out the [website](http://git-lfs
github


* **Linux users**
 Debian and RPM packages are available from
  [PackageCloud](https://packagecloud
sh) bottles are distributed, and can
  be installed via `brew install git-lfs`
org/)
 Alternatively, you can
  install a recent version of Git LFS from the [Chocolatey](https://chocolatey
org/) package manager

* **Binary packages**
com/git-lfs/git-lfs/releases) are
available for Linux, macOS, Windows, and FreeBSD

* **Building from source**
 [This repository](https://github
git) can also be
built from source using the latest version of [Go](https://golang
com/git-lfs/git-lfs/wiki/Installation#source)


Note that Debian and RPM packages are built for all OSes for amd64 and i386

For arm64, only Debian packages for the latest Debian release are built due to the cost of building in emulation


### Installing

#### From binary

The [binary packages](https://github
com/git-lfs/git-lfs/releases) include a script which will:

- Install Git LFS binaries onto the system `$PATH`
- Run `git lfs install` to
perform required global configuration changes


```ShellSession
$ 
/install
sh
```

#### From source

- Ensure you have the latest version of Go, GNU make, and a standard Unix-compatible build environment installed

- On Windows, install `goversioninfo` with `go install github
com/josephspurrier/goversioninfo/cmd/goversioninfo@latest`

- Git LFS requires global configuration changes once per-machine
 This can be done by
running:

```ShellSession
$ git lfs install
```

#### Verifying releases

Releases are signed with the OpenPGP key of one of the core team members
  To
get these keys, you can run the following command, which will print them to
standard output:

```ShellSession
$ curl -L https://api
github
com/repos/git-lfs/git-lfs/tarball/core-gpg-keys | tar -Ozxf -
```

Once you have the keys, you can download the `sha256sums
10
0
tar
gz | shasum -a 256 -c
```

For the convenience of distributors, we also provide a wider variety of signed
hashes in the `hashes
asc` file
  Those hashes are in the tagged BSD format, but
can be verified with Perl's `shasum` or the GNU hash utilities, just like the
ones in `sha256sums
asc`


## Example Usage

To begin using Git LFS within a Git repository that is not already configured
for Git LFS, you can indicate which files you would like Git LFS to manage

This can be done by running the following _from within a Git repository_:

```bash
$ git lfs track "*
psd"
```

(Where `*
psd` is the pattern of filenames that you wish to track
com/docs/gitattributes))


> *Note:* the quotation marks surrounding the pattern are important to
> prevent the glob pattern from being expanded by the shell


After any invocation of `git-lfs-track(1)` or `git-lfs-untrack(1)`, you _must
commit changes to your `
psd files using Git LFS"
```

You can now interact with your Git repository as usual, and Git LFS will take
care of managing your large files
psd
$ git commit -m "add psd"
```

> _Tip:_ if you have large files already in your repository's history, `git lfs
> track` will _not_ track them retroactively
 For example:
>
> ```
> $ git lfs migrate import --include="*
psd" --everything
> ```
>
> **Note that this will rewrite history and change all of the Git object IDs in your
> repository, just like the export version of this command
**
>
> For more information, read [`git-lfs-migrate(1)`](https://github
com/git-lfs/git-lfs/blob/main/docs/man/git-lfs-migrate
adoc)


You can confirm that Git LFS is managing your PSD file:

```bash
$ git lfs ls-files
3c2f7aedfb * my
2 KB/s
# 



To https://github
com/git-lfs/git-lfs-test
   67fcf6a

47b2002  main -> main
```

Note: Git LFS requires at least Git 1
8
2 on Linux or 1
8
5 on macOS


### Uninstalling

If you've decided that Git LFS isn't right for you, you can convert your
repository back to a plain Git repository with `git lfs migrate` as well
  For
example:

```ShellSession
$ git lfs migrate export --include="*
com/git-lfs/git-lfs/wiki/Limitations)


Git LFS source code utilizes Go modules in its build system, and therefore this
project contains a `go
mod` file with a defined Go module path
  However, we
do not maintain a stable Go language API or ABI, as Git LFS is intended to be
used solely as a compiled binary utility


## Need Help?

You can get help on specific commands directly:

```bash
$ git lfs help <subcommand>
```

The [official documentation](docs) has command references and specifications for
the tool
com/git-lfs/git-lfs/blob/main/docs/man/git-lfs-faq


If you have a question on how to use Git LFS, aren't sure about something, or
are looking for input from others on tips about best practices or use cases,
feel free to
[start a discussion](https://github


You can always [open an issue](https://github
com/git-lfs/git-lfs/issues), and
one of the Core Team members will respond to you
 The output of `git lfs env`, which displays helpful information about your
   Git repository useful in debugging

2
 Any failed commands re-run with `GIT_TRACE=1` in the environment, which
   displays additional information pertaining to why a command crashed


## Contributing

See [CONTRIBUTING
md](CONTRIBUTING
md) for info on working on Git LFS and
sending patches
com/git-lfs/git-lfs/wiki/Implementations)


See also [SECURITY
md](SECURITY
md) for info on how to submit reports
of security vulnerabilities


## Core Team

These are the humans that form the Git LFS core team, which runs the project


In alphabetical order:

| [@bk2204][bk2204-user] | [@chrisd8088][chrisd8088-user] | [@larsxschneider][larsxschneider-user] |
| :---: | :---: | :---: |
| [![][bk2204-img]][bk2204-user] | [![][chrisd8088-img]][chrisd8088-user] | [![][larsxschneider-img]][larsxschneider-user] |
| [PGP 0223B187][bk2204-pgp] | [PGP 088335A9][chrisd8088-pgp] | [PGP A5795889][larsxschneider-pgp] |

[bk2204-img]: https://avatars1
githubusercontent
com/u/497054?s=100&v=4
[chrisd8088-img]: https://avatars1
githubusercontent
githubusercontent
com/u/477434?s=100&v=4
[bk2204-user]: https://github
com/chrisd8088
[larsxschneider-user]: https://github
ubuntu
com/pks/lookup?op=get&search=0x88ace9b29196305ba9947552f1ba225c0223b187
[chrisd8088-pgp]: https://keyserver
com/pks/lookup?op=get&search=0x86cd3297749375bcf8206715f54fe648088335a9
[larsxschneider-pgp]: https://keyserver
ubuntu
com/pks/lookup?op=get&search=0xaa3b3450295830d2de6db90caba67be5a5795889

### Alumni

These are the humans that have in the past formed the Git LFS core team, or
have otherwise contributed a significant amount to the project
 Git LFS would
not be possible without them
com/u/7596961?v=3&s=100
[PastelMobileSuit-img]: https://avatars2
githubusercontent
githubusercontent
githubusercontent
com/u/142735?v=3&s=100
[technoweenie-img]: https://avatars3
com/u/21?v=3&s=100
[ttaylorr-img]: https://avatars2
com/andyneff
[PastelMobileSuit-user]: https://github
com/rubyist
[technoweenie-user]: https://github
com/ttaylorr





















# c-ares license

Copyright (c) 2007 - 2018, Daniel Stenberg with many contributors, see AUTHORS
file


Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting documentation, and that
the name of M
T
 not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission

M
T
 makes no representations about the suitability of this software for any
purpose
  It is provided "as is" without express or implied warranty






























































































































































































































































-------------------------------------------------------------------------------
-- Copyright 2020,2021 Thomas E
 Dickey                                      --
-- Copyright 1998-2012,2018 Free Software Foundation, Inc
                   --
--                                                                           --
-- Permission is hereby granted, free of charge, to any person obtaining a   --
-- copy of this software and associated documentation files (the             --
-- "Software"), to deal in the Software without restriction, including       --
-- without limitation the rights to use, copy, modify, merge, publish,       --
-- distribute, distribute with modifications, sublicense, and/or sell copies --
-- of the Software, and to permit persons to whom the Software is furnished  --
-- to do so, subject to the following conditions:                            --
--                                                                           --
-- The above copyright notice and this permission notice shall be included   --
-- in all copies or substantial portions of the Software
                    --
--                                                                           --
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS   --
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                --
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 IN --
-- NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,       --
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR     --
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE --
-- USE OR OTHER DEALINGS IN THE SOFTWARE
29 2021/06/17 21:20:30 tom Exp $









*uganda
txt*    For Vim version 8
  You can use and copy it as much as you like, but you are
encouraged to make a donation for needy children in Uganda
iccf
nl/

You can also sponsor the development of Vim
  See |sponsor|
  The money goes to Uganda anyway


The Open Publication License applies to the Vim documentation, see
|manual-copyright|


=== begin of license ===

VIM LICENSE

I)  There are no restrictions on distributing unmodified copies of Vim except
    that they must include this license text


II) It is allowed to distribute a modified (or extended) version of Vim,
    including executables and/or source code, when the following four
    conditions are met:
    1) This license text must be included unmodified

    2) The modified Vim must be distributed in one of the following five ways:
       a) If you make changes to Vim yourself, you must clearly describe in
	  the distribution how to contact you
  What the
	  maintainer will do with your changes and under what license they
	  will be distributed is negotiable

	  The current maintainer is Bram Moolenaar <Bram@vim
  If this
	  changes it will be announced in appropriate places (most likely
	  vim
org and/or comp
  When it is completely
	  impossible to contact the maintainer, the obligation to send him
	  your changes ceases
  Once the maintainer has confirmed that he has
	  received your changes they will not have to be sent again

       b) If you have received a modified Vim that was distributed as
	  mentioned under a) you are allowed to further distribute it
	  unmodified, as mentioned at I)
  If you make additional changes the
	  text under a) applies to those changes

       c) Provide all the changes, including source code, with every copy of
	  the modified Vim you distribute
  You can choose what license to use for new code you
	  add
  The changes and their license must not restrict others from
	  making their own changes to the official version of Vim

	  - You keep the changes for at least three years after last
	    distributing the corresponding modified Vim
  When the maintainer
	    or someone who you distributed the modified Vim to asks you (in
	    any way) for the changes within this period, you must make them
	    available to him

	  - You clearly describe in the distribution how to contact you
  This
	    contact information must remain valid for at least three years
	    after last distributing the corresponding modified Vim, or as long
	    as possible

       e) When the GNU General Public License (GPL) applies to the changes,
	  you can distribute the modified Vim under the GNU GPL version 2 or
	  any later version

    4) The contact information as required under 2)a) and 2)d) must not be
       removed or changed, except that the person himself can make
       corrections


III) If you distribute a modified version of Vim, you are encouraged to use
     the Vim license for your changes and make them available to the
     maintainer, including the source code

     If the number of changes is small (e
g
, a modified Makefile) e-mailing a
     context diff will do
org>

IV)  It is not allowed to remove this license from the distribution of the Vim
     sources, parts of it or from a modified version


- If you want to support further Vim development consider becoming a
  |sponsor|
  The money goes to Uganda anyway


- According to Richard Stallman the Vim license is GNU GPL compatible


- If you link Vim with a library that goes under the GNU GPL, this limits
  further distribution to the GNU GPL


- If you distribute a modified version of Vim, you can include your name and
  contact information with the "--with-modified-by" configure argument or the
  MODIFIED_BY define


==============================================================================
Kibaale Children's Centre		*kcc* *Kibaale*  *charity*

Kibaale Children's Centre (KCC) is located in Kibaale, a small town in the
south of Uganda, near Tanzania, in East Africa
  Although people are poor, there
usually is enough food
  But this district is suffering from AIDS more than
any other part of the world
  Estimations are
that in the past 10 to 30% of the Ugandans are infected with HIV
  Because
parents die, there are many orphans


The children need a lot of help
  The KCC is working hard to provide the needy
with food, medical care and education
  Food and medical care to keep them
healthy now, and education so that they can take care of themselves in the
future
  KCC works on a Christian base, but help is given to children of any
religion
  This has been
neglected in the past years with president Idi Amin and the following civil
wars
  There is
also help for people who are ill and hungry, but the primary goal is to
prevent people from getting ill and to teach them how to grow healthy food


Most of the orphans are living in an extended family
  An uncle or older
sister is taking care of them
  Clothes, medical
care and schooling is beyond its reach
  A child can be financially adopted


Besides helping the child directly, the environment where the child grows up
needs to be improved
  KCC helps schools to improve their teaching methods

There is a demonstration school at the centre and teacher trainings are given
  I helped setting up a
production site for cement slabs
  These are used to build a good latrine
  Since 2020 a maternity ward was added and 24/7 service is
available
  Immunization
programs are carried out and help is provided when an epidemic is breaking out
(measles and cholera have been a problem)

							*donate*
Summer 1994 to summer 1995 I spent a whole year at the centre, working as a
volunteer
  I have helped to expand the centre and worked in the area of water
and sanitation
  I learned that the help that the KCC provides really helps

When I came back to Holland, I wanted to continue supporting KCC
  To do this
I'm raising funds and organizing the sponsorship program
  Sponsor a child in primary school: 17 euro a month (or more)

2
  Sponsor a child in secondary school: 25 euro a month (or more)

3
  Sponsor the clinic: Any amount a month or quarter
4
  A one-time donation

Compared with other organizations that do child sponsorship the amounts are
very low
  This is because the money goes directly to the centre
  Less than
5% is used for administration
  I trust the people that are working
at the centre, I know them personally
  The centre is
visited about once a year to check the progress (at our own cost)
  I have
visited the centre myself many times, starting in 1993
  The visit reports are
on the ICCF web site


If you have any further questions, send me e-mail: <Bram@vim


The address of the centre is:
			Kibaale Children's Centre
			p



USA:		The methods mentioned below can be used
  They take care of the
		Canadian sponsors for the children in Kibaale
  Kuwasha
		forwards 100% of the money to the project in Uganda
  You can
		send them a one time donation directly
  Look on their site for information about
		sponsorship: https://www
net/
		If you make a donation to Kuwasha you will receive a tax
		receipt which can be submitted with your tax return


Holland:	Transfer to the account of "Stichting ICCF Holland" in
		Amersfoort
  ING bank, IBAN: NL95 INGB 0004 5487 74

Germany:	It is possible to make donations that allow for a tax return

		Check the ICCF web site for the latest information:
			https://iccf-holland
html

Europe:		Use a bank transfer if possible

		Any other method should work
  Ask for information about
		sponsorship


Credit Card:	You can use PayPal to send money with a Credit card
  It's
		really simple to use
  Use this link to find more info:
		    https://www
com/en_US/mrb/pal=XAC62PML3GF8Q
		The e-mail address for sending the money to is:
		    Bram@iccf-holland
org

Others:		Transfer to this account if possible:
		    ING bank: 	IBAN: NL95 INGB 0004 5487 74
				Swift code: INGBNL2A
		    under the name "stichting ICCF Holland", Amersfoort
		Checks are not accepted



 vim:tw=78:ts=8:noet:ft=help:norl:








































































































































































































































The autoload directory is for standard Vim autoload scripts


These are functions used by plugins and for general use
  They will be loaded
automatically when the function is invoked
  See ":help autoload"


gzip
vim and macmap
vim	HTML
javascriptcomplete
vim  Javascript
phpcomplete
vim	Python
rubycomplete
vim	Ruby
syntaxcomplete


The colorschemes were updated for the Vim 9 release
  If you don't like the
changes you can find the old ones here:
https://github
 Define a new Normal color and set the 'background' option accordingly
 >

	set background={light or dark}
	highlight clear
	highlight Normal 


	




2
 >

	highlight clear Normal
	set background&
	highlight clear
	if &background == "light"
	  highlight Error 


	  



	else
	  highlight Error 




	endif

You can use `:highlight clear` to reset everything to the defaults, and then
change the groups that you want differently

Note that `:highlight clear` uses the value of 'background', thus set it
before this command
, bold) might be set in the defaults that you want
removed in your color scheme
  Use something like "gui=NONE" to remove the
attributes


In case you want to set 'background' depending on the colorscheme selected,
this autocmd might be useful: >

     autocmd SourcePre */colors/blue_sky
vim set background=dark

Replace "blue_sky" with the name of the colorscheme


In case you want to tweak a colorscheme after it was loaded, check out the
ColorScheme autocommand event


To clean up just before loading another colorscheme, use the ColorSchemePre
autocommand event
  For example: >

	let g:term_ansi_colors = 
g
vim/colors/mine
vim",
and use ":runtime" to load the original colorscheme: >

	" load the "evening" colorscheme
	runtime colors/evening


You can use ":highlight" to find out the current colors
  Exception: the
ctermfg and ctermbg values are numbers, which are only valid for the current
terminal
  See
`:help cterm-colors` 


The default color settings can be found in the source file src/syntax
c

Search for "highlight_init"


If you think you have a color scheme that is good enough to be used by others,
please check the following items:

- Source the $VIMRUNTIME/colors/tools/check_colors
vim script to check for
  common mistakes


- Does it work in a color terminal as well as in the GUI? Is it consistent?

- Is "g:colors_name" set to a meaningful value?  In case of doubt you can do
  it this way: >

  	let g:colors_name = expand('<sfile>:t:r')

- Is 'background' either used or appropriately set to "light" or "dark"?

- Try setting 'hlsearch' and searching for a pattern, is the match easy to
  spot?

- Split a window with ":split" and ":vsplit"
  Are the status lines and
  vertical separators clearly visible?

- In the GUI, is it easy to find the cursor, also in a file with lots of
  syntax highlighting?

- In general, test your color scheme against as many filetypes, Vim features,
  environments, etc


- Do not use hard coded escape sequences, these will not work in other
  terminals
  Always use #RRGGBB for the GUI
  Names are more portable
  than numbers, though


- When targetting 256 colors terminals, prefer colors 16-255 to colors 0-15
  for the same reason
) are not
  universally supported
  Don't count on any of them
com/lifepillar/vim-colortemplate)
  It is therefore highly
recommended


If you would like your color scheme to be distributed with Vim, make sure
that:

- it satisfies the guidelines above,
- it was made with colortemplate,

and join us at vim/colorschemes: (https://github



vim: set ft=help :



This directory contains Vim scripts to be used with a specific compiler

They are used with the ":compiler" command


These scripts usually set options, for example 'errorformat'

See ":help write-compiler-plugin"




The ftplugin directory is for Vim plugin scripts that are only used for a
specific filetype

For example, these are all loaded for the "c" filetype:

	c
vim
	c/settings
vim

Note that the "_" in "c_extra


The filetype plugins are only loaded when the ":filetype plugin" command has
been used


The default filetype plugin files contain settings that 95% of the users will
want to use
  They do not contain personal preferences, like the value of
'shiftwidth'


If you want to do additional settings, or overrule the default filetype
plugin, you can create your own plugin file
  Looking at the existing files should give you
inspiration


If you have remarks about an existing file, send them to the maintainer of
that file
  Only when you get no response send a message to Bram@vim
org

	if exists("b:did_indent")
	  finish
	endif
	let b:did_indent = 1

Always use ":setlocal" to set 'indentexpr'
  This avoids it being carried over
to other buffers


You normally set 'indentexpr' to evaluate a function and then define that
function
  That function only needs to be defined once for as long as Vim is
running
  Add a test if the function exists and use ":finish", like this:
	if exists("*GetMyIndent")
	  finish
	endif

The user may have several options set unlike you, try to write the file such
that it works with any option settings
  Also be aware of certain features not
being compiled in


To test the indent file, see testdir/README
txt



keymap files for Vim

One of these files is loaded when the 'keymap' option is set


The name of the file consists of these parts:

	{language}[-{layout}][_{encoding}]
vim

{language}	Name of the language (e


{encoding}	Optional: character encoding for which this keymap works

		When omitted the "normal" encoding for the language is
		assumed


Each file starts with a header, naming the maintainer and the date when it was
last changed
  If you find a problem in a keymap file, check if you have the
most recent version























































Language files for Vim: Translated menus

The contents of each menu file is a sequence of lines with "menutrans"
commands
  Read one of the existing files to get an idea of how this works


More information in the on-line help:

	:help multilang-menus
	:help :menutrans
	:help 'langmenu'
	:help :language

The "$VIMRUNTIME/menu
vim" file will search for a menu translation file
  This
depends on the value of the "v:lang" variable
 "


The file name is always lower case
  It is the full name as the ":language"
command shows (the LC_MESSAGES value)
950

and use the menu translation file:

	$VIMRUNTIME/lang/menu_chinese(taiwan)_taiwan
950
Big5"
	sh/bash/ksh:	export LANG="zh_TW
Big5"

and the menu translation file is:

	$VIMRUNTIME/lang/menu_zh_tw
big5
vim

The menu translation file should set the "did_menu_trans" variable so that Vim
will not load another file

For UTF-8 menu files which only use latin1 characters, you can rely on Vim
doing the conversion
  Let the UTF-8 menu file source the latin1 menu file,
and put "scriptencoding latin1" in that one
g



































To run the maze macros with Vim:

	vim -u maze_mac maze_5
mac" loads the maze macros and skips loading your 
vimrc, which
may contain settings and mappings that get in the way
 It will solve any maze produced by maze
c
that was posted to the net recently


Just follow this recipe and SEE FOR YOURSELF

	1
vi
uu" to
		produce the file "maze
vi
c"
	3
out and input a small number (for example 10 if
		you are on a fast machine, 3-5 if slow) which
		is the size of the maze to produce
	4
 include the macros with the vi command:
		:so maze
macros
	6
 type the letter "g" (for "go") and watch vi solve the maze
	7
 when vi solves the maze, you will see why it lies
	8
 now look at maze
vi
c file to compile, get a new compiler,
try maze
ansi
c which was also posted to the net

If you can get it to compile but the maze comes out looking like a fence
and not a maze and you are using SysV or DOS replace the "27" on the
last line of maze
cwi
caltech
edu (Bill T
ansi


Any donations should be in unmarked small denomination bills :^)=
otca
oz
otca
au!gregm
|||| OTC ||	    Snail:  OTC R&D GPO Box 7000, Sydney 2001, Australia
		    Phone:  +61 2 287 3139    Fax: +61 2 287 3299




The macros in the maze, hanoi and urm directories can be used to test Vim for
vi compatibility

life	Macros that run Conway's game of life

urm	Macros that simulate a simple computer: "Universal Register Machine"



The other files contain some handy utilities
  They also serve as examples for
how to use Vi and Vim functionality


less
sh + less
vim	make Vim work like less (or more)



The following have been moved to an optional package

The URM macro package was written by Rudolf Koenig ("Rudi")
(rudolf@koeniglich
de) for hpux-vi in August 1991
vim<RETURN>
in vim:		 *	(to load the registers and boot the URM-machine :-)
in vim:		 g	(for 'go') and watch the fun
 Per default, 3 and 4
			are multiplied
 Watch the Program counter, it is
			visible as a komma moving around


This is a "standard URM" (Universal register machine)  interpreter

Here it proves that vim is a general problem solver (if you bring enough
patience)


The interpreter begins with register 1 (not 0), without macros and more-lines
capability
)

The registers are the first few lines, beginning with a '>' 

The program is the first line after the registers

You should always initialize the registers required by the program


Output register:	line 2
Input registers:	line 2 to 


 		("dot blank")  halt the machine


Examples:

Add register 2 to register 3:
	(a2;s3)3

Multiply register 2 with register 3:
	(a4;a5;s2)2; ((a2;s4)4; s3; (a1;a4;s5)5; (a5;s1)1)3


There are more (complicated) examples in the file examples



























The plugin directory is for standard Vim plugin scripts

Look in the file for hints on how it can be disabled without deleting it


getscriptPlugin
vim  get latest version of Vim scripts
gzip
vim	     edit compressed files
logiPat
vim	     logical operators on patterns
manpager
vim	     using Vim as manpager
matchparen
vim	     highlight paren matching the one under the cursor
netrwPlugin
vim	     convert a file with syntax highlighting to HTML
vimballPlugin
vim    create and unpack 
vba files
zipPlugin
vim	     edit zip archives

Note: the explorer
vim plugin is no longer here, the netrw


These scripts are not for a language, but are used by Vim itself:

syntax
vim	Used for the ":syntax on" command
  Uses synload
vim


manual
vim	Used for the ":syntax manual" command
  Uses synload
vim	Contains autocommands to load a language file when a certain
		file name (extension) is used
  And sets up the Syntax menu
		for the GUI
  Undo the loading of
		synload



A few special files:

2html
vim	Converts any highlighted file to HTML (GUI only)

colortest
vim	View the current highlight settings
txt"


If you make a new syntax file which would be useful for others, please send it
to Bram@vim
  Include instructions for detecting the file type for this
language, by file name extension or by checking a few lines in the file

And please write the file in a portable way, see ":help 44


If you have remarks about an existing file, send them to the maintainer of
that file


For further info see ":help syntax" in Vim


ccfilter*:	C program to filter the output of a few compilers to a common
		QuickFix format


efm_filter
*:	Perl script to filter compiler messages to QuickFix format


efm_perl
pl:	Perl script to filter error messages from the Perl interpreter
		for use with Vim quickfix mode


mve


pltags


vim132:		Shell script to edit in 132 column mode on vt100 compatible
		terminals


vimm:		Shell script to start Vim on a DEC terminal with mouse
		enabled


vimspell
c:  Example for a client program that communicates with a Vim
		   server through the X-Windows interface
vim	Vim script to generate tables for src/mbyte
c


[xxd can be found in the src directory]


Tutor is a "hands on" tutorial for new users of the Vim editor


Most new users can get through it in less than one hour
 The result
is that you can do a simple editing task using the Vim editor
  It will make a
scratch copy of the tutor first


I have considered adding more advanced lessons but have not found the
time
 Please let me know how you like it and send any improvements you
make
colorado
edu bware@slate
mines
colorado
edu bware@mines
xx and tutor
utf-8 files are translated files (where xx is the
language code)
xx might be latin1 or other traditional
encoding
xx

If you need another encoding, you can also prepare a file named tutor
xx
vim file
xx from tutor

See the Makefile for detail
  (For some languages, tutor
xx
utf-8 is created
from tutor
]









