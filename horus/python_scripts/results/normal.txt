















 Note that the only valid version of the GPL as far as this project
 is concerned is _this_ particular version of the license (ie v2, not
 v2
x or whatever), unless explicitly otherwise stated


 HOWEVER, in order to allow a migration to GPLv3 if that seems like
 a good idea, I also ask that people involved with the project make
 their preferences known
 In particular, if you trust me to make that
 decision, you might note so in your copyright message, ie something
 like

	This file is licensed under the GPL v2, or a later version
	at the discretion of Linus


  might avoid issues


			Linus Torvalds

----------------------------------------

		    GNU GENERAL PUBLIC LICENSE
		       Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc


			    Preamble

  The licenses for most software are designed to take away your
freedom to share and change it
  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users
  (Some other Free Software Foundation software is covered by
the GNU Lesser General Public License instead
)  You can apply it to
your programs, too


  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights

These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it


  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have
  You must make sure that they, too, receive or can get the
source code
  And you must show them these terms so they know their
rights


  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software


  Finally, any free program is threatened constantly by software
patents
  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary
  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all
  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language
  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program)
 You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program


    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License
)

These requirements apply to the modified work as a whole


In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License


  3
  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable
  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable


  4
 You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License

However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance


  5
  These actions are
prohibited by law if you do not accept this License


  6
 Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions
  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein

You are not responsible for enforcing compliance by third parties to
this License


  7
  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all
  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program


If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances


This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License


  8
 If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded
 The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time
  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns
  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation
  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation


  10
  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this
 BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW
  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION
 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES


		     END OF TERMS AND CONDITIONS

	    How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms


  To do so, attach the following notices to the program


    <one line to give the program's name and a brief idea of what it does


    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE
  See the
    GNU General Public License for more details


    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc
,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


Also add information on how to contact you by electronic and paper mail


If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

    Gnomovision version 69, Copyright (C) year name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'
  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program


You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary


  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

This General Public License does not permit incorporating your program into
proprietary programs
  If this is what you want to do, use the GNU Lesser General
Public License instead of this License



# Git Credential Manager

[![Build Status][build-status-badge]][workflow-status]

---

[Git Credential Manager][gcm] (GCM) is a secure
[Git credential helper][git-credential-helper] built on [
NET][dotnet] that runs
on Windows, macOS, and Linux
 It aims to provide a consistent and secure
authentication experience, including multi-factor auth, to every major source
control hosting service and platform


GCM replaces both the 
NET Framework-based
[Git Credential Manager for Windows][gcm-for-windows] and the Java-based
[Git Credential Manager for Mac and Linux][gcm-for-mac-and-linux]


- Git 1
x

  The initial major version of Git is not supported or tested with GCM
26
2

  This version of Git introduced a breaking change with parsing credential
  configuration that GCM relies on
 This issue was fixed in commit
  [`12294990`][gcm-commit-12294990] of the Git project, and released in Git
  2
27
 For example, when pushing (`git push`) to
[Azure DevOps][azure-devops], [Bitbucket][bitbucket], or [GitHub][github], a
window will automatically open and walk you through the sign-in process


### Configuring a proxy

See detailed information [here][gcm-http-proxy]

See the [contributing guide][gcm-contributing] to get started


## License

We're [MIT][gcm-license] licensed
azure
microsoft
com/en-us/azure/devops/repos/git/use-ssh-keys-to-authenticate?view=azure-devops
[bitbucket]: https://bitbucket
org
[bitbucket-ssh]: https://confluence
atlassian
com/bitbucket/ssh-keys-935365775
com/GitCredentialManager/git-credential-manager/blob/release/docs/README
com
[dotnet-distributions]: https://learn
microsoft
com/git/git/commit/12294990c90e043862be9eb7eb22c3784b526340
[gcm-contributing]: CONTRIBUTING
md
[gcm-credstores]: https://github
com/GitCredentialManager/git-credential-manager/blob/release/docs/credstores
md
[gcm-for-mac-and-linux]: https://github
md
[gcm-windows-broker]: https://github
md
[git-tools-credential-storage]: https://git-scm
com/book/en/v2/Git-Tools-Credential-Storage
[github]: https://github
github
com/GitCredentialManager/git-credential-manager/blob/release/docs/install
md
[ms-package-repos]: https://packages
com/repos/
[workflow-status]: https://github
com/GitCredentialManager/git-credential-manager/actions/workflows/continuous-integration
yml


































































# Git Large File Storage

[![CI status][ci_badge]][ci_url]

[ci_badge]: https://github
com/git-lfs/git-lfs/workflows/CI/badge
github
md) for managing large files with Git
 Check out the [website](http://git-lfs
github
com)
for an overview of features


## Getting Started

### Downloading

You can install the Git LFS client in several different ways, depending on your
setup and preferences


* **Linux users**
 Debian and RPM packages are available from
  [PackageCloud](https://packagecloud
io/github/git-lfs/install)

* **macOS users**
 [Homebrew](https://brew
sh) bottles are distributed, and can
  be installed via `brew install git-lfs`

* **Windows users**
 Git LFS is included in the distribution of
  [Git for Windows](https://gitforwindows
org/)
org/) package manager

* **Binary packages**
 In addition, [binary packages](https://github
com/git-lfs/git-lfs/releases) are
available for Linux, macOS, Windows, and FreeBSD

* **Building from source**
com/git-lfs/git-lfs
git) can also be
built from source using the latest version of [Go](https://golang
org), and the
available instructions in our
[Wiki](https://github


Note that Debian and RPM packages are built for all OSes for amd64 and i386

For arm64, only Debian packages for the latest Debian release are built due to the cost of building in emulation


### Installing

#### From binary

The [binary packages](https://github
sh
```

#### From source

- Ensure you have the latest version of Go, GNU make, and a standard Unix-compatible build environment installed

- On Windows, install `goversioninfo` with `go install github
com/josephspurrier/goversioninfo/cmd/goversioninfo@latest`

- Run `make`

- Git LFS requires global configuration changes once per-machine
 This can be done by
running:

```ShellSession
$ git lfs install
```

#### Verifying releases

Releases are signed with the OpenPGP key of one of the core team members
  To
get these keys, you can run the following command, which will print them to
standard output:

```ShellSession
$ curl -L https://api
github
asc` file and verify
the file you want like so:

```ShellSession
$ gpg -d sha256sums
asc | grep git-lfs-linux-amd64-v2
10
0
tar
  Those hashes are in the tagged BSD format, but
can be verified with Perl's `shasum` or the GNU hash utilities, just like the
ones in `sha256sums

This can be done by running the following _from within a Git repository_:

```bash
$ git lfs track "*
 You can read
more about this pattern syntax
[here](https://git-scm
com/docs/gitattributes))


After any invocation of `git-lfs-track(1)` or `git-lfs-untrack(1)`, you _must
commit changes to your `
gitattributes` file_
 This can be done by running:

```bash
$ git add 
gitattributes
$ git commit -m "track *
psd files using Git LFS"
```

You can now interact with your Git repository as usual, and Git LFS will take
care of managing your large files
 For example, changing a file named `my
psd`
(tracked above via `*
psd`):

```bash
$ git add my
 To migrate existing large files
> in your history to use Git LFS, use `git lfs migrate`
 For example:
>
> ```
> $ git lfs migrate import --include="*
psd" --everything
> ```
>
> **Note that this will rewrite history and change all of the Git object IDs in your
> repository, just like the export version of this command
com/git-lfs/git-lfs/blob/main/docs/man/git-lfs-migrate
adoc)
2 KB/s
# 



To https://github
47b2002  main -> main
```

Note: Git LFS requires at least Git 1
8
5 on macOS


### Uninstalling

If you've decided that Git LFS isn't right for you, you can convert your
repository back to a plain Git repository with `git lfs migrate` as well
  For
example:

```ShellSession
$ git lfs migrate export --include="*
psd" --everything
```

**Note that this will rewrite history and change all of the Git object IDs in your
repository, just like the import version of this command
**

If there's some reason that things aren't working out for you, please let us
know in an issue, and we'll definitely try to help or get it fixed
com/git-lfs/git-lfs/wiki/Limitations)
mod` file with a defined Go module path
  However, we
do not maintain a stable Go language API or ABI, as Git LFS is intended to be
used solely as a compiled binary utility


## Need Help?

You can get help on specific commands directly:

```bash
$ git lfs help <subcommand>
```

The [official documentation](docs) has command references and specifications for
the tool
  There's also a [FAQ](https://github
com/git-lfs/git-lfs/blob/main/docs/man/git-lfs-faq
adoc)
shipped with Git LFS which answers some common questions


If you have a question on how to use Git LFS, aren't sure about something, or
are looking for input from others on tips about best practices or use cases,
feel free to
[start a discussion](https://github


You can always [open an issue](https://github
 Please be sure to include:

1
 The output of `git lfs env`, which displays helpful information about your
   Git repository useful in debugging
 Any failed commands re-run with `GIT_TRACE=1` in the environment, which
   displays additional information pertaining to why a command crashed
md](CONTRIBUTING
com/git-lfs/git-lfs/wiki/Implementations)
md](SECURITY
md) for info on how to submit reports
of security vulnerabilities


## Core Team

These are the humans that form the Git LFS core team, which runs the project
com/bk2204
[chrisd8088-user]: https://github
ubuntu
com/pks/lookup?op=get&search=0x88ace9b29196305ba9947552f1ba225c0223b187
[chrisd8088-pgp]: https://keyserver
com/pks/lookup?op=get&search=0x86cd3297749375bcf8206715f54fe648088335a9
[larsxschneider-pgp]: https://keyserver
ubuntu
com/pks/lookup?op=get&search=0xaa3b3450295830d2de6db90caba67be5a5795889

### Alumni

These are the humans that have in the past formed the Git LFS core team, or
have otherwise contributed a significant amount to the project


In alphabetical order:

| [@andyneff][andyneff-user] | [@PastelMobileSuit][PastelMobileSuit-user] | [@rubyist][rubyist-user] | [@sinbad][sinbad-user] | [@technoweenie][technoweenie-user] | [@ttaylorr][ttaylorr-user] |
| :---: | :---: | :---: | :---: | :---: | :---: |
| [![][andyneff-img]][andyneff-user] | [![][PastelMobileSuit-img]][PastelMobileSuit-user] | [![][rubyist-img]][rubyist-user] | [![][sinbad-img]][sinbad-user] | [![][technoweenie-img]][technoweenie-user] | [![][ttaylorr-img]][ttaylorr-user] |

[andyneff-img]: https://avatars1
githubusercontent
com/u/7596961?v=3&s=100
[PastelMobileSuit-img]: https://avatars2
githubusercontent
com/u/37254014?s=100&v=4
[rubyist-img]: https://avatars1
githubusercontent
githubusercontent
com/u/142735?v=3&s=100
[technoweenie-img]: https://avatars3
com/u/21?v=3&s=100
[ttaylorr-img]: https://avatars2
githubusercontent
com/u/443245?s=100&v=4
[andyneff-user]: https://github
com/PastelMobileSuit
[sinbad-user]: https://github
com/sinbad
[rubyist-user]: https://github
com/ttaylorr





















# c-ares license

Copyright (c) 2007 - 2018, Daniel Stenberg with many contributors, see AUTHORS
file


Copyright 1998 by the Massachusetts Institute of Technology


Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting documentation, and that
the name of M
T
 not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission

M
T
 makes no representations about the suitability of this software for any
purpose
  It is provided "as is" without express or implied warranty






























































































































































































































































-------------------------------------------------------------------------------
-- Copyright 2020,2021 Thomas E
                   --
--                                                                           --
-- Permission is hereby granted, free of charge, to any person obtaining a   --
-- copy of this software and associated documentation files (the             --
-- "Software"), to deal in the Software without restriction, including       --
-- without limitation the rights to use, copy, modify, merge, publish,       --
-- distribute, distribute with modifications, sublicense, and/or sell copies --
-- of the Software, and to permit persons to whom the Software is furnished  --
-- to do so, subject to the following conditions:                            --
--                                                                           --
-- The above copyright notice and this permission notice shall be included   --
-- in all copies or substantial portions of the Software
                                    --
--                                                                           --
-- Except as contained in this notice, the name(s) of the above copyright    --
-- holders shall not be used in advertising or otherwise to promote the      --
-- sale, use or other dealings in this Software without prior written        --
-- authorization
                                                            --
-------------------------------------------------------------------------------
-- $Id: README,v 1
txt*    For Vim version 8
2
  Last change: 2022 Mar 02


		  VIM REFERENCE MANUAL    by Bram Moolenaar


			*uganda* *Uganda* *copying* *copyright* *license*
SUMMARY
								*iccf* *ICCF*
Vim is Charityware
  You can use and copy it as much as you like, but you are
encouraged to make a donation for needy children in Uganda
  Please see |kcc|
below or visit the ICCF web site, available at these URLs:

	https://iccf-holland
org/
	https://www
org/iccf/
	https://www
iccf
nl/

You can also sponsor the development of Vim
  Vim sponsors can vote for
features


=== begin of license ===

VIM LICENSE

I)  There are no restrictions on distributing unmodified copies of Vim except
    that they must include this license text


II) It is allowed to distribute a modified (or extended) version of Vim,
    including executables and/or source code, when the following four
    conditions are met:
    1) This license text must be included unmodified

    2) The modified Vim must be distributed in one of the following five ways:
       a) If you make changes to Vim yourself, you must clearly describe in
	  the distribution how to contact you
  When the maintainer asks you
	  (in any way) for a copy of the modified Vim you distributed, you
	  must make your changes, including source code, available to the
	  maintainer without fee
  What the
	  maintainer will do with your changes and under what license they
	  will be distributed is negotiable

	  The current maintainer is Bram Moolenaar <Bram@vim
  If this
	  changes it will be announced in appropriate places (most likely
	  vim
net, www
  When it is completely
	  impossible to contact the maintainer, the obligation to send him
	  your changes ceases

       b) If you have received a modified Vim that was distributed as
	  mentioned under a) you are allowed to further distribute it
	  unmodified, as mentioned at I)

       c) Provide all the changes, including source code, with every copy of
	  the modified Vim you distribute
  The changes and their license must not restrict others from
	  making their own changes to the official version of Vim

	  - You keep the changes for at least three years after last
	    distributing the corresponding modified Vim

	  - You clearly describe in the distribution how to contact you
  This
	    contact information must remain valid for at least three years
	    after last distributing the corresponding modified Vim, or as long
	    as possible

    3) A message must be added, at least in the output of the ":version"
       command and in the intro screen, such that the user of the modified Vim
       is able to see that it was modified
  When distributing as mentioned
       under 2)e) adding the message is only required for as far as this does
       not conflict with the license used for the changes

    4) The contact information as required under 2)a) and 2)d) must not be
       removed or changed, except that the person himself can make
       corrections
  The preferred way to do this is
     by e-mail or by uploading the files to a server and e-mailing the URL
g
  The e-mail address to be used is
     <maintainer@vim
org>

IV)  It is not allowed to remove this license from the distribution of the Vim
     sources, parts of it or from a modified version
  You may use this
     license for previous Vim releases instead of the license that they came
     with, at your option


=== end of license ===

Note:

- If you are happy with Vim, please express that by reading the rest of this
  file and consider helping needy children in Uganda


- If you want to support further Vim development consider becoming a
  |sponsor|
  The money goes to Uganda anyway


- If you link Vim with a library that goes under the GNU GPL, this limits
  further distribution to the GNU GPL
  Also when you didn't actually change
  anything in Vim


- Once a change is included that goes under the GNU GPL, this forces all
  further changes to also be made under the GNU GPL or a compatible license


==============================================================================
Kibaale Children's Centre		*kcc* *Kibaale*  *charity*

Kibaale Children's Centre (KCC) is located in Kibaale, a small town in the
south of Uganda, near Tanzania, in East Africa
  The population is mostly farmers
  But this district is suffering from AIDS more than
any other part of the world
  Some say that it started there
  Estimations are
that in the past 10 to 30% of the Ugandans are infected with HIV
  Because
parents die, there are many orphans
  In this district about 60,000 children
have lost one or both parents, out of a population of 350,000


The children need a lot of help
  The KCC is working hard to provide the needy
with food, medical care and education
  Food and medical care to keep them
healthy now, and education so that they can take care of themselves in the
future
  Now that the government is stable again, the children and parents have
to learn how to take care of themselves and how to avoid infections
  An uncle or older
sister is taking care of them
  Because these families are big and the income
(if any) is low, a child is lucky if it gets healthy food
  Clothes, medical
care and schooling is beyond its reach
  A child can be financially adopted

For a few dollars a month KCC sees to it that the child gets indispensable
items, is healthy, goes to school and KCC takes care of anything else that
needs to be done for the child and the family that supports it


Besides helping the child directly, the environment where the child grows up
needs to be improved

There is a demonstration school at the centre and teacher trainings are given

They are sold below cost price


There is a clinic at the project, which provides children and their family
medical help
  When needed, transport to a hospital is offered
  I learned that the help that the KCC provides really helps
  To do this
I'm raising funds and organizing the sponsorship program
  Please consider one
of these possibilities:

1
  Sponsor a child in primary school: 17 euro a month (or more)
  A one-time donation

Compared with other organizations that do child sponsorship the amounts are
very low
  This is because the money goes directly to the centre
  I trust the people that are working
at the centre, I know them personally
  Furthermore, the centre has been
co-sponsored and inspected by World Vision, Save the Children Fund and is now
under the supervision of Pacific Academy Outreach Society
  The centre is
visited about once a year to check the progress (at our own cost)
  I have
visited the centre myself many times, starting in 1993
  The visit reports are
on the ICCF web site


If you have any further questions, send me e-mail: <Bram@vim
org>


The address of the centre is:
			Kibaale Children's Centre
			p
o
 box 1658
			Masaka, Uganda, East Africa

Sending money:						*iccf-donations*

Check the ICCF web site for the latest information!  See |iccf| for the URL



USA:		The methods mentioned below can be used

		If you must send a check send it to our Canadian partner:
		https://www
kuwasha
  They take care of the
		Canadian sponsors for the children in Kibaale
  Kuwasha
		forwards 100% of the money to the project in Uganda

		Please send me a note so that I know what has been donated
		because of Vim
  Look on their site for information about
		sponsorship: https://www
kuwasha
net/
		If you make a donation to Kuwasha you will receive a tax
		receipt which can be submitted with your tax return


Holland:	Transfer to the account of "Stichting ICCF Holland" in
		Amersfoort
  This will allow for tax deduction if you live in
		Holland
  ING bank, IBAN: NL95 INGB 0004 5487 74

Germany:	It is possible to make donations that allow for a tax return

		Check the ICCF web site for the latest information:
			https://iccf-holland
html

Europe:		Use a bank transfer if possible

		Any other method should work
  Ask for information about
		sponsorship


Credit Card:	You can use PayPal to send money with a Credit card
  This is
		the most widely used Internet based payment system
  It's
		really simple to use
  Use this link to find more info:
		    https://www
paypal
org

Others:		Transfer to this account if possible:
		    ING bank: 	IBAN: NL95 INGB 0004 5487 74
				Swift code: INGBNL2A
		    under the name "stichting ICCF Holland", Amersfoort
		Checks are not accepted



 vim:tw=78:ts=8:noet:ft=help:norl:








































































































































































































































The autoload directory is for standard Vim autoload scripts
  They will be loaded
automatically when the function is invoked


gzip
vim		browsing tar files
zip
vim		browsing zip files
paste
vim	common code for mswin
vim, menu
vim and macmap
vim		C
csscomplete
vim		HTML / CSS
htmlcomplete
vim		PHP
pythoncomplete
vim	Python
rubycomplete
vim	from syntax highlighting
xmlcomplete
  They appear in the
"Edit/Color Scheme" menu in the GUI
com/vim/colorschemes/tree/master/legacy_colors


Hints for writing a color scheme file:

There are two basic ways to define a color scheme:

1
 Define a new Normal color and set the 'background' option accordingly
 >

	set background={light or dark}
	highlight clear
	highlight Normal 



	




2
 >

	highlight clear Normal
	set background&
	highlight clear
	if &background == "light"
	  highlight Error 



	  



	else
	  highlight Error 



	  


  This will also work for groups
that are added in later versions of Vim

Note that `:highlight clear` uses the value of 'background', thus set it
before this command

Some attributes (e
, bold) might be set in the defaults that you want
removed in your color scheme
  Use something like "gui=NONE" to remove the
attributes


In case you want to set 'background' depending on the colorscheme selected,
this autocmd might be useful: >

     autocmd SourcePre */colors/blue_sky


In case you want to tweak a colorscheme after it was loaded, check out the
ColorScheme autocommand event


To clean up just before loading another colorscheme, use the ColorSchemePre
autocommand event
  For example: >

	let g:term_ansi_colors = 


g
  Exception: the
ctermfg and ctermbg values are numbers, which are only valid for the current
terminal
c


If you think you have a color scheme that is good enough to be used by others,
please check the following items:

- Source the $VIMRUNTIME/colors/tools/check_colors


- Does it work in a color terminal as well as in the GUI? Is it consistent?

- Is "g:colors_name" set to a meaningful value?  In case of doubt you can do
  it this way: >

  	let g:colors_name = expand('<sfile>:t:r')

- Is 'background' either used or appropriately set to "light" or "dark"?

- Try setting 'hlsearch' and searching for a pattern, is the match easy to
  spot?

- Split a window with ":split" and ":vsplit"
  Are the status lines and
  vertical separators clearly visible?

- In the GUI, is it easy to find the cursor, also in a file with lots of
  syntax highlighting?

- In general, test your color scheme against as many filetypes, Vim features,
  environments, etc


- Do not use hard coded escape sequences, these will not work in other
  terminals
  Always use #RRGGBB for the GUI


- When targetting 8-16 colors terminals, don't count on "darkblue" to be blue
  and dark, or on "2" to be even vaguely reddish
  Names are more portable
  than numbers, though


- Typographic attributes (bold, italic, underline, reverse, etc
  Don't count on any of them
com/lifepillar/vim-colortemplate)
  It is therefore highly
recommended


If you would like your color scheme to be distributed with Vim, make sure
that:

- it satisfies the guidelines above,
- it was made with colortemplate,

and join us at vim/colorschemes: (https://github
com/vim/colorschemes)



vim: set ft=help :



This directory contains Vim scripts to be used with a specific compiler


If you think a compiler plugin you have written is useful for others, please
send it to Bram@vim




The ftplugin directory is for Vim plugin scripts that are only used for a
specific filetype


All files ending in 

For example, these are all loaded for the "c" filetype:

	c
vim
	c_extra
vim" is required to separate the filetype name
from the following arbitrary name


The filetype plugins are only loaded when the ":filetype plugin" command has
been used


The default filetype plugin files contain settings that 95% of the users will
want to use
  They do not contain personal preferences, like the value of
'shiftwidth'
  See ":help ftplugin" in Vim
  Looking at the existing files should give you
inspiration


If you make a new indent file which would be useful for others, please send it
to Bram@vim
org
  Include instructions for detecting the file type for this
language, by file name extension or by checking a few lines in the file


If you have remarks about an existing file, send them to the maintainer of
that file
org
org
  This avoids it being carried over
to other buffers


To trigger the indenting after typing a word like "endif", add the word to the
'indentkeys' option with "+="
  That function only needs to be defined once for as long as Vim is
running
  Add a test if the function exists and use ":finish", like this:
	if exists("*GetMyIndent")
	  finish
	endif

The user may have several options set unlike you, try to write the file such
that it works with any option settings


To test the indent file, see testdir/README
txt



keymap files for Vim

One of these files is loaded when the 'keymap' option is set
vim

{language}	Name of the language (e
, "hebrew", "greek")

{layout}	Optional: name of the keyboard layout (e
g
, "spanish",
		"russian3")
  When omitted the layout of the standard
		US-english keyboard is assumed


{encoding}	Optional: character encoding for which this keymap works
  If you find a problem in a keymap file, check if you have the
most recent version
  If necessary, report a problem to the maintainer


The format of the keymap lines below "loadkeymap" is explained in the Vim help
files, see ":help keymap-file-format"























































Language files for Vim: Translated menus

The contents of each menu file is a sequence of lines with "menutrans"
commands
  Read one of the existing files to get an idea of how this works
vim" file will search for a menu translation file


	"menu_" 
vim"

When the 'menutrans' option is set, its value will be used instead of v:lang


The file name is always lower case
  It is the full name as the ":language"
command shows (the LC_MESSAGES value)


For example, to use the Big5 (Taiwan) menus on MS-Windows the $LANG will be

	Chinese(Taiwan)_Taiwan
950

and use the menu translation file:

	$VIMRUNTIME/lang/menu_chinese(taiwan)_taiwan
vim

On Unix you should set $LANG, depending on your shell:

	csh/tcsh:	setenv LANG "zh_TW
big5



AUTOMATIC CONVERSION

When Vim was compiled with multi-byte support, conversion between latin1 and
UTF-8 will always be possible
  Other conversions depend on the iconv
library, which is not always available

For UTF-8 menu files which only use latin1 characters, you can rely on Vim
doing the conversion

Other conversions may not always be available (e
g
, between iso-8859-# and
MS-Windows codepages), thus the converted menu file must be available
mac" loads the maze macros and skips loading your 
vimrc, which
may contain settings and mappings that get in the way



The original README:

To prove that you can do anything in vi, I wrote a couple of macros that
allows vi to solve mazes
 It will solve any maze produced by maze
c
that was posted to the net recently


Just follow this recipe and SEE FOR YOURSELF

	1
 run uudecode on the file "maze
vi
uu" to
		produce the file "maze
vi
macros"
	(If you can't wait to see the action, jump to step 4)
	2
 compile maze
c with "cc -o maze maze
c"
	3
out and input a small number (for example 10 if
		you are on a fast machine, 3-5 if slow) which
		is the size of the maze to produce
	4
 edit the maze (vi maze
vi
macros
	6
 when vi solves the maze, you will see why it lies
	8
vi
macros and all will be revealed

Tested on a sparc, a sun and a pyramid (although maze
c will not compile
on the pyramid)
ansi
c which was also posted to the net
nl) for maze

Thanks to antonyc@nntp-server
edu (Bill T
c


Any donations should be in unmarked small denomination bills :^)=


		   ACSnet:  gregm@otc
oz
au
Greg McFarlane	     UUCP:  {uunet,mcvax}!otc
otca
oz
au!gregm
|||| OTC ||	    Snail:  OTC R&D GPO Box 7000, Sydney 2001, Australia
		    Phone:  +61 2 287 3139    Fax: +61 2 287 3299




The macros in the maze, hanoi and urm directories can be used to test Vim for
vi compatibility


hanoi	Macros that solve the tower of hanoi problem

life	Macros that run Conway's game of life

maze	Macros that solve a maze (amazing!)

urm	Macros that simulate a simple computer: "Universal Register Machine"



The other files contain some handy utilities
  They also serve as examples for
how to use Vi and Vim functionality


less
sh + less
vim	make Vim work like less (or more)



The following have been moved to an optional package
  Add the command to your
vimrc file to use the package:

packadd! dvorak		" Dvorak keyboard support; adds mappings

packadd! editexisting	" when editing a file that is already edited with
			" another Vim instance, go to that Vim instance

packadd! justify	" justifying text


packadd! matchit	" makes the % command work better

packadd! shellmenu	" menus for editing shell scripts in the GUI version

packadd! swapmouse	" swap left and right mouse buttons

This is another proof that Vim is perfectly compatible with Vi


Getting started:

type
in your shell:	 vim urm<RETURN>
in vim:		 :so urm
 Per default, 3 and 4
			are multiplied
 Watch the Program counter, it is
			visible as a komma moving around


This is a "standard URM" (Universal register machine)  interpreter
)

The registers are the first few lines, beginning with a '>' 

The program is the first line after the registers

You should always initialize the registers required by the program


Output register:	line 2
Input registers:	line 2 to 
 		("dot blank")  halt the machine


Examples:

Add register 2 to register 3:
	(a2;s3)3



























The plugin directory is for standard Vim plugin scripts


All files here ending in 
vim will be sourced by Vim when it starts up
vim  get latest version of Vim scripts
gzip
vim	     edit compressed files
logiPat
vim	     logical operators on patterns
manpager
vim	     using Vim as manpager
matchparen
vim	     edit files over a network and browse (remote) directories
rrhelper
vim	     used for --remote-wait editing
spellfile
vim	     download a spellfile when it's missing
tarPlugin
vim	     edit (compressed) tar files
tohtml
vim	     convert a file with syntax highlighting to HTML
vimballPlugin
vim    create and unpack 
vim	     edit zip archives

Note: the explorer
vim plugin is no longer here, the netrw
vim plugin has
taken over browsing directories (also for remote directories)






This directory contains Vim scripts for syntax highlighting


These scripts are not for a language, but are used by Vim itself:

syntax
vim	Used for the ":syntax on" command
  Uses synload


manual
vim	Used for the ":syntax manual" command


synload
  And sets up the Syntax menu
		for the GUI


nosyntax
  Undo the loading of
		synload
vim
vim	Converts any highlighted file to HTML (GUI only)

colortest
vim	Check for color names and actual color on screen
vim	View the current highlight settings

whitespace



If you want to write a syntax file, read the docs at ":help usr_44


If you make a new syntax file which would be useful for others, please send it
to Bram@vim

And please write the file in a portable way, see ":help 44
12"


If you have remarks about an existing file, send them to the maintainer of
that file
  Only when you get no response send a message to Bram@vim


If you are the maintainer of a syntax file and make improvements, send the new
version to Bram@vim
org



Some tools that can be used with Vim:

blink


efm_perl
pl:	Perl script to filter error messages from the Perl interpreter
		for use with Vim quickfix mode


mve
*		Awk script to filter error messages to QuickFix format


pltags
pl:	Perl script to create a tags file from Perl scripts


shtags
*:	Perl script to create a tags file from a shell script


vim132:		Shell script to edit in 132 column mode on vt100 compatible
		terminals


vimm:		Shell script to start Vim on a DEC terminal with mouse
		enabled


vimspell
*:	Shell script for highlighting spelling mistakes
c:  Example for a client program that communicates with a Vim
		   server through the X-Windows interface
vim	Vim script to generate tables for src/mbyte
c


[xxd can be found in the src directory]


Tutor is a "hands on" tutorial for new users of the Vim editor


Tutor is a file that contains the tutorial lessons


On Unix you can also use the "vimtutor" program
colorado
edu bware@mines
bitnet


Translation
-----------

The tutor
xx
xx might be latin1 or other traditional
encoding
  If you don't need a translation with such traditional encoding,
you just need to prepare the tutor
xx
utf-8 file
xx
enc
(replace enc with the actual encoding name)
  You might also need to adjust the
tutor

The "make" command can be used for creating tutor
xx
utf-8

See the Makefile for detail
xx
utf-8 is created
from tutor
]









