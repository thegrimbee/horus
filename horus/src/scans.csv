App,Level_0,Level_1,Level_2
7-Zip,"
  7-Zip
  ~~~~~
  License for use and distribution
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  7-Zip Copyright (C) 1999-2023 Igor Pavlov


  The licenses for files are:

    1) 7z
dll:
         - The ""GNU LGPL"" as main license for most of the code
         - The ""GNU LGPL"" with ""unRAR license restriction"" for some code
         - The ""BSD 3-clause License"" for some code
    2) All other files: the ""GNU LGPL""


  Redistributions in binary form must reproduce related license information from this file


  Note:
    You can use 7-Zip on any computer, including a computer in a commercial
    organization
 You don't need to register or pay for 7-Zip



  GNU LGPL information
  --------------------

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2
  See the GNU
    Lesser General Public License for more details


    You can receive a copy of the GNU Lesser General Public License from
    http://www
gnu
org/




  BSD 3-clause License
  --------------------

    The ""BSD 3-clause License"" is used for the code in 7z

    That code was derived from the code in the ""LZFSE compression library"" developed by Apple Inc,
    that also uses the ""BSD 3-clause License"":

    ----
    Copyright (c) 2015-2016, Apple Inc


    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    1
  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer
        in the documentation and/or other materials provided with the distribution


    3
  Neither the name of the copyright holder(s) nor the names of any contributors may be used to endorse or promote products derived
        from this software without specific prior written permission
 IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE

    ----




  unRAR license restriction
  -------------------------

    The decompression engine for RAR archives was developed using source
    code of unRAR program

    All copyrights to original unRAR code are owned by Alexander Roshal



  --
  Igor Pavlov

7-Zip 23
01
-----------

7-Zip is a file archiver for Windows


7-Zip Copyright (C) 1999-2023 Igor Pavlov


The main features of 7-Zip: 

  - High compression ratio in the new 7z format
  - Supported formats:
     - Packing / unpacking: 7z, XZ, BZIP2, GZIP, TAR, ZIP and WIM

  - Fast compression and decompression
  - Self-extracting capability for 7z format
  - Strong AES-256 encryption in 7z and ZIP formats
  - Integration with Windows Shell
  - Powerful File Manager
  - Powerful command line version
  - Localizations for 90 languages


7-Zip is free software distributed under the GNU LGPL (except for unRar code)

Read License
exe      - 7-Zip File Manager
  7-zip
exe        - Command line version
  7z
dll        - 7-Zip engine module
  7z
sfx     - SFX module (Console version)

  License
txt   - License information
  readme
txt    - This file
  History
txt   - History of 7-Zip
  7-zip
chm     - User's Manual in HTML Help format
  descript
ttt   - English (base) localization file
  Lang\*
txt    - Localization files


---
End of document

","1 of the License, or (at your option) any later version


    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE
dll that implements LZFSE data decompression
  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer


    2


    The license for original unRAR code has the following restriction:

      The unRAR sources cannot be used to re-create the RAR compression algorithm,
      which is proprietary
 Distribution of modified unRAR sources in separate form
      or as a part of other software is permitted, provided that it is clearly
      stated in the documentation and source comments that the code may
      not be used to develop a RAR (WinRAR) compatible archiver

     - Unpacking only: APFS, AR, ARJ, Base64, CAB, CHM, CPIO, CramFS, DMG, EXT, FAT, GPT, HFS,
                       IHEX, ISO, LZH, LZMA, MBR, MSI, NSIS, NTFS, QCOW2, RAR, 
                       RPM, SquashFS, UDF, UEFI, VDI, VHD, VHDX, VMDK, XAR and Z



  This distribution package contains the following files:

  7zFM
dll     - Plugin for Windows Shell
  7-zip32
dll   - Plugin for Windows Shell (32-bit plugin for 64-bit system) 
  7zg"," All rights reserved


    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED
txt for more information about license
exe       - GUI module
  7z
sfx        - SFX module (Windows version)
  7zCon
ion  - Description for files

  Lang\en"
4KDownload,"

",,
Adobe,,,"

"
BraveSoftware,,,"




































































































































"
Git,"

  might avoid issues
 But we can also just decide to synchronize and
  contact all copyright holders on record if/when the occasion arises


			Linus Torvalds

----------------------------------------

		    GNU GENERAL PUBLIC LICENSE
		       Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc
  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it


  When we speak of free software, we are referring to freedom, not
price
  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things


  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights

These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it


  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have
  You must make sure that they, too, receive or can get the
source code
  And you must show them these terms so they know their
rights


  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software
  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations


  Finally, any free program is threatened constantly by software
patents
  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary
  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all


  The precise terms and conditions for copying, distribution and
modification follow
 This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License


Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope

Whether that is true depends on what the Program does


  1
 You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program
 You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change
  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement
)

These requirements apply to the modified work as a whole
  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works


Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program


In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License


  3
  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above
)

The source code for a work means the preferred form of the work for
making modifications to it
  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable


  4
 You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License
  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License

However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance


  5
  However, nothing else grants you permission to modify or
distribute the Program or its derivative works

You are not responsible for enforcing compliance by third parties to
this License


  7
 If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License


If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances


It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices
  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice


This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License
 If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded
  In such case, this License incorporates
the limitation as if written in the body of this License


  10
  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this


			    NO WARRANTY

  11
 BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW
  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU
  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION
 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES
  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the ""copyright"" line and a pointer to where the full notice is found


    <one line to give the program's name and a brief idea of what it does


    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE


    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc
,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

    Gnomovision version 69, Copyright (C) year name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'
  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program
, hereby disclaims all copyright interest in the program
  `Gnomovision' (which makes passes at compilers) written by James Hacker
  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library
  If this is what you want to do, use the GNU Lesser General
Public License instead of this License
NET][dotnet] that runs
on Windows, macOS, and Linux

Compare to Git's [built-in credential helpers][git-tools-credential-storage]
(Windows: wincred, macOS: osxkeychain, Linux: gnome-keyring/libsecret), which
provide single-factor authentication support for username/password only
NET Framework-based
[Git Credential Manager for Windows][gcm-for-windows] and the Java-based
[Git Credential Manager for Mac and Linux][gcm-for-mac-and-linux]
x

  The initial major version of Git is not supported or tested with GCM


- Git 2
2

  This version of Git introduced a breaking change with parsing credential
  configuration that GCM relies on
 This issue was fixed in commit
  [`12294990`][gcm-commit-12294990] of the Git project, and released in Git
  2
27
0


## How to use

Once it's installed and configured, Git Credential Manager is called implicitly
by Git
 You don't have to do anything special, and GCM isn't intended to be
called directly by the user
 (This
process will look slightly different for each Git host, and even in some cases,
whether you've connected to an on-premises or cloud-hosted Git host
) Later Git
commands in the same repository will re-use existing credentials or tokens that
GCM has stored for as long as they're valid


Read full command line usage [here][gcm-usage]


### Configuring a proxy

See detailed information [here][gcm-http-proxy]


## Additional Resources

See the [documentation index][docs-index] for links to additional resources


## Experimental Features

- [Windows broker (experimental)][gcm-windows-broker]

## Contributing

This project welcomes contributions and suggestions

See the [contributing guide][gcm-contributing] to get started


This project follows [GitHub's Open Source Code of Conduct][gcm-coc]

When using GitHub logos, please be sure to follow the
[GitHub logo guidelines][github-logos]


[azure-devops]: https://dev
com/
[azure-devops-ssh]: https://docs
microsoft
com/en-us/azure/devops/repos/git/use-ssh-keys-to-authenticate?view=azure-devops
[bitbucket]: https://bitbucket
org
[bitbucket-ssh]: https://confluence
atlassian
com/bitbucket/ssh-keys-935365775
html
[build-status-badge]: https://github
com/GitCredentialManager/git-credential-manager/actions/workflows/continuous-integration
md
[dotnet]: https://dotnet
microsoft
microsoft
com/en-us/dotnet/core/install/linux
[git-credential-helper]: https://git-scm
com/GitCredentialManager/git-credential-manager
[gcm-coc]: CODE_OF_CONDUCT
com/git/git/commit/12294990c90e043862be9eb7eb22c3784b526340
[gcm-contributing]: CONTRIBUTING
md
[gcm-credstores]: https://github
com/microsoft/Git-Credential-Manager-for-Windows
[gcm-http-proxy]: https://github
md#http-proxy
[gcm-license]: LICENSE
[gcm-usage]: https://github
com/GitCredentialManager/git-credential-manager/blob/release/docs/usage
md
[gcm-windows-broker]: https://github
com/GitCredentialManager/git-credential-manager/blob/release/docs/windows-broker
com
[github-ssh]: https://help
github
com/en/articles/connecting-to-github-with-ssh
[github-logos]: https://github
com/logos
[install]: https://github
com/GitCredentialManager/git-credential-manager/blob/release/docs/install
md
[ms-package-repos]: https://packages
com/GitCredentialManager/git-credential-manager/actions/workflows/continuous-integration
yml


































































# Git Large File Storage

[![CI status][ci_badge]][ci_url]

[ci_badge]: https://github
com/git-lfs/git-lfs/workflows/CI/badge
svg
[ci_url]: https://github
com/git-lfs/git-lfs/actions?query=workflow%3ACI

[Git LFS](https://git-lfs
github
md) for managing large files with Git
 Check out the [website](http://git-lfs
github


* **Linux users**
 Debian and RPM packages are available from
  [PackageCloud](https://packagecloud
sh) bottles are distributed, and can
  be installed via `brew install git-lfs`
org/)
 Alternatively, you can
  install a recent version of Git LFS from the [Chocolatey](https://chocolatey
org/) package manager

* **Binary packages**
com/git-lfs/git-lfs/releases) are
available for Linux, macOS, Windows, and FreeBSD

* **Building from source**
 [This repository](https://github
git) can also be
built from source using the latest version of [Go](https://golang
com/git-lfs/git-lfs/wiki/Installation#source)


Note that Debian and RPM packages are built for all OSes for amd64 and i386

For arm64, only Debian packages for the latest Debian release are built due to the cost of building in emulation


### Installing

#### From binary

The [binary packages](https://github
com/git-lfs/git-lfs/releases) include a script which will:

- Install Git LFS binaries onto the system `$PATH`
- Run `git lfs install` to
perform required global configuration changes


```ShellSession
$ 
/install
sh
```

#### From source

- Ensure you have the latest version of Go, GNU make, and a standard Unix-compatible build environment installed

- On Windows, install `goversioninfo` with `go install github
com/josephspurrier/goversioninfo/cmd/goversioninfo@latest`

- Git LFS requires global configuration changes once per-machine
 This can be done by
running:

```ShellSession
$ git lfs install
```

#### Verifying releases

Releases are signed with the OpenPGP key of one of the core team members
  To
get these keys, you can run the following command, which will print them to
standard output:

```ShellSession
$ curl -L https://api
github
com/repos/git-lfs/git-lfs/tarball/core-gpg-keys | tar -Ozxf -
```

Once you have the keys, you can download the `sha256sums
10
0
tar
gz | shasum -a 256 -c
```

For the convenience of distributors, we also provide a wider variety of signed
hashes in the `hashes
asc` file
  Those hashes are in the tagged BSD format, but
can be verified with Perl's `shasum` or the GNU hash utilities, just like the
ones in `sha256sums
asc`


## Example Usage

To begin using Git LFS within a Git repository that is not already configured
for Git LFS, you can indicate which files you would like Git LFS to manage

This can be done by running the following _from within a Git repository_:

```bash
$ git lfs track ""*
psd""
```

(Where `*
psd` is the pattern of filenames that you wish to track
com/docs/gitattributes))


> *Note:* the quotation marks surrounding the pattern are important to
> prevent the glob pattern from being expanded by the shell


After any invocation of `git-lfs-track(1)` or `git-lfs-untrack(1)`, you _must
commit changes to your `
psd files using Git LFS""
```

You can now interact with your Git repository as usual, and Git LFS will take
care of managing your large files
psd
$ git commit -m ""add psd""
```

> _Tip:_ if you have large files already in your repository's history, `git lfs
> track` will _not_ track them retroactively
 For example:
>
> ```
> $ git lfs migrate import --include=""*
psd"" --everything
> ```
>
> **Note that this will rewrite history and change all of the Git object IDs in your
> repository, just like the export version of this command
**
>
> For more information, read [`git-lfs-migrate(1)`](https://github
com/git-lfs/git-lfs/blob/main/docs/man/git-lfs-migrate
adoc)


You can confirm that Git LFS is managing your PSD file:

```bash
$ git lfs ls-files
3c2f7aedfb * my
2 KB/s
# 



To https://github
com/git-lfs/git-lfs-test
   67fcf6a

47b2002  main -> main
```

Note: Git LFS requires at least Git 1
8
2 on Linux or 1
8
5 on macOS


### Uninstalling

If you've decided that Git LFS isn't right for you, you can convert your
repository back to a plain Git repository with `git lfs migrate` as well
  For
example:

```ShellSession
$ git lfs migrate export --include=""*
com/git-lfs/git-lfs/wiki/Limitations)


Git LFS source code utilizes Go modules in its build system, and therefore this
project contains a `go
mod` file with a defined Go module path
  However, we
do not maintain a stable Go language API or ABI, as Git LFS is intended to be
used solely as a compiled binary utility


## Need Help?

You can get help on specific commands directly:

```bash
$ git lfs help <subcommand>
```

The [official documentation](docs) has command references and specifications for
the tool
com/git-lfs/git-lfs/blob/main/docs/man/git-lfs-faq


If you have a question on how to use Git LFS, aren't sure about something, or
are looking for input from others on tips about best practices or use cases,
feel free to
[start a discussion](https://github


You can always [open an issue](https://github
com/git-lfs/git-lfs/issues), and
one of the Core Team members will respond to you
 The output of `git lfs env`, which displays helpful information about your
   Git repository useful in debugging

2
 Any failed commands re-run with `GIT_TRACE=1` in the environment, which
   displays additional information pertaining to why a command crashed


## Contributing

See [CONTRIBUTING
md](CONTRIBUTING
md) for info on working on Git LFS and
sending patches
com/git-lfs/git-lfs/wiki/Implementations)


See also [SECURITY
md](SECURITY
md) for info on how to submit reports
of security vulnerabilities


## Core Team

These are the humans that form the Git LFS core team, which runs the project


In alphabetical order:

| [@bk2204][bk2204-user] | [@chrisd8088][chrisd8088-user] | [@larsxschneider][larsxschneider-user] |
| :---: | :---: | :---: |
| [![][bk2204-img]][bk2204-user] | [![][chrisd8088-img]][chrisd8088-user] | [![][larsxschneider-img]][larsxschneider-user] |
| [PGP 0223B187][bk2204-pgp] | [PGP 088335A9][chrisd8088-pgp] | [PGP A5795889][larsxschneider-pgp] |

[bk2204-img]: https://avatars1
githubusercontent
com/u/497054?s=100&v=4
[chrisd8088-img]: https://avatars1
githubusercontent
githubusercontent
com/u/477434?s=100&v=4
[bk2204-user]: https://github
com/chrisd8088
[larsxschneider-user]: https://github
ubuntu
com/pks/lookup?op=get&search=0x88ace9b29196305ba9947552f1ba225c0223b187
[chrisd8088-pgp]: https://keyserver
com/pks/lookup?op=get&search=0x86cd3297749375bcf8206715f54fe648088335a9
[larsxschneider-pgp]: https://keyserver
ubuntu
com/pks/lookup?op=get&search=0xaa3b3450295830d2de6db90caba67be5a5795889

### Alumni

These are the humans that have in the past formed the Git LFS core team, or
have otherwise contributed a significant amount to the project
 Git LFS would
not be possible without them
com/u/7596961?v=3&s=100
[PastelMobileSuit-img]: https://avatars2
githubusercontent
githubusercontent
githubusercontent
com/u/142735?v=3&s=100
[technoweenie-img]: https://avatars3
com/u/21?v=3&s=100
[ttaylorr-img]: https://avatars2
com/andyneff
[PastelMobileSuit-user]: https://github
com/rubyist
[technoweenie-user]: https://github
com/ttaylorr





















# c-ares license

Copyright (c) 2007 - 2018, Daniel Stenberg with many contributors, see AUTHORS
file


Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting documentation, and that
the name of M
T
 not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission

M
T
 makes no representations about the suitability of this software for any
purpose
  It is provided ""as is"" without express or implied warranty






























































































































































































































































-------------------------------------------------------------------------------
-- Copyright 2020,2021 Thomas E
 Dickey                                      --
-- Copyright 1998-2012,2018 Free Software Foundation, Inc
                   --
--                                                                           --
-- Permission is hereby granted, free of charge, to any person obtaining a   --
-- copy of this software and associated documentation files (the             --
-- ""Software""), to deal in the Software without restriction, including       --
-- without limitation the rights to use, copy, modify, merge, publish,       --
-- distribute, distribute with modifications, sublicense, and/or sell copies --
-- of the Software, and to permit persons to whom the Software is furnished  --
-- to do so, subject to the following conditions:                            --
--                                                                           --
-- The above copyright notice and this permission notice shall be included   --
-- in all copies or substantial portions of the Software
                    --
--                                                                           --
-- THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS   --
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                --
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 IN --
-- NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,       --
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR     --
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE --
-- USE OR OTHER DEALINGS IN THE SOFTWARE
29 2021/06/17 21:20:30 tom Exp $









*uganda
txt*    For Vim version 8
  You can use and copy it as much as you like, but you are
encouraged to make a donation for needy children in Uganda
iccf
nl/

You can also sponsor the development of Vim
  See |sponsor|
  The money goes to Uganda anyway


The Open Publication License applies to the Vim documentation, see
|manual-copyright|


=== begin of license ===

VIM LICENSE

I)  There are no restrictions on distributing unmodified copies of Vim except
    that they must include this license text


II) It is allowed to distribute a modified (or extended) version of Vim,
    including executables and/or source code, when the following four
    conditions are met:
    1) This license text must be included unmodified

    2) The modified Vim must be distributed in one of the following five ways:
       a) If you make changes to Vim yourself, you must clearly describe in
	  the distribution how to contact you
  What the
	  maintainer will do with your changes and under what license they
	  will be distributed is negotiable

	  The current maintainer is Bram Moolenaar <Bram@vim
  If this
	  changes it will be announced in appropriate places (most likely
	  vim
org and/or comp
  When it is completely
	  impossible to contact the maintainer, the obligation to send him
	  your changes ceases
  Once the maintainer has confirmed that he has
	  received your changes they will not have to be sent again

       b) If you have received a modified Vim that was distributed as
	  mentioned under a) you are allowed to further distribute it
	  unmodified, as mentioned at I)
  If you make additional changes the
	  text under a) applies to those changes

       c) Provide all the changes, including source code, with every copy of
	  the modified Vim you distribute
  You can choose what license to use for new code you
	  add
  The changes and their license must not restrict others from
	  making their own changes to the official version of Vim

	  - You keep the changes for at least three years after last
	    distributing the corresponding modified Vim
  When the maintainer
	    or someone who you distributed the modified Vim to asks you (in
	    any way) for the changes within this period, you must make them
	    available to him

	  - You clearly describe in the distribution how to contact you
  This
	    contact information must remain valid for at least three years
	    after last distributing the corresponding modified Vim, or as long
	    as possible

       e) When the GNU General Public License (GPL) applies to the changes,
	  you can distribute the modified Vim under the GNU GPL version 2 or
	  any later version

    4) The contact information as required under 2)a) and 2)d) must not be
       removed or changed, except that the person himself can make
       corrections


III) If you distribute a modified version of Vim, you are encouraged to use
     the Vim license for your changes and make them available to the
     maintainer, including the source code

     If the number of changes is small (e
g
, a modified Makefile) e-mailing a
     context diff will do
org>

IV)  It is not allowed to remove this license from the distribution of the Vim
     sources, parts of it or from a modified version


- If you want to support further Vim development consider becoming a
  |sponsor|
  The money goes to Uganda anyway


- According to Richard Stallman the Vim license is GNU GPL compatible


- If you link Vim with a library that goes under the GNU GPL, this limits
  further distribution to the GNU GPL


- If you distribute a modified version of Vim, you can include your name and
  contact information with the ""--with-modified-by"" configure argument or the
  MODIFIED_BY define


==============================================================================
Kibaale Children's Centre		*kcc* *Kibaale*  *charity*

Kibaale Children's Centre (KCC) is located in Kibaale, a small town in the
south of Uganda, near Tanzania, in East Africa
  Although people are poor, there
usually is enough food
  But this district is suffering from AIDS more than
any other part of the world
  Estimations are
that in the past 10 to 30% of the Ugandans are infected with HIV
  Because
parents die, there are many orphans


The children need a lot of help
  The KCC is working hard to provide the needy
with food, medical care and education
  Food and medical care to keep them
healthy now, and education so that they can take care of themselves in the
future
  KCC works on a Christian base, but help is given to children of any
religion
  This has been
neglected in the past years with president Idi Amin and the following civil
wars
  There is
also help for people who are ill and hungry, but the primary goal is to
prevent people from getting ill and to teach them how to grow healthy food


Most of the orphans are living in an extended family
  An uncle or older
sister is taking care of them
  Clothes, medical
care and schooling is beyond its reach
  A child can be financially adopted


Besides helping the child directly, the environment where the child grows up
needs to be improved
  KCC helps schools to improve their teaching methods

There is a demonstration school at the centre and teacher trainings are given
  I helped setting up a
production site for cement slabs
  These are used to build a good latrine
  Since 2020 a maternity ward was added and 24/7 service is
available
  Immunization
programs are carried out and help is provided when an epidemic is breaking out
(measles and cholera have been a problem)

							*donate*
Summer 1994 to summer 1995 I spent a whole year at the centre, working as a
volunteer
  I have helped to expand the centre and worked in the area of water
and sanitation
  I learned that the help that the KCC provides really helps

When I came back to Holland, I wanted to continue supporting KCC
  To do this
I'm raising funds and organizing the sponsorship program
  Sponsor a child in primary school: 17 euro a month (or more)

2
  Sponsor a child in secondary school: 25 euro a month (or more)

3
  Sponsor the clinic: Any amount a month or quarter
4
  A one-time donation

Compared with other organizations that do child sponsorship the amounts are
very low
  This is because the money goes directly to the centre
  Less than
5% is used for administration
  I trust the people that are working
at the centre, I know them personally
  The centre is
visited about once a year to check the progress (at our own cost)
  I have
visited the centre myself many times, starting in 1993
  The visit reports are
on the ICCF web site


If you have any further questions, send me e-mail: <Bram@vim


The address of the centre is:
			Kibaale Children's Centre
			p



USA:		The methods mentioned below can be used
  They take care of the
		Canadian sponsors for the children in Kibaale
  Kuwasha
		forwards 100% of the money to the project in Uganda
  You can
		send them a one time donation directly
  Look on their site for information about
		sponsorship: https://www
net/
		If you make a donation to Kuwasha you will receive a tax
		receipt which can be submitted with your tax return


Holland:	Transfer to the account of ""Stichting ICCF Holland"" in
		Amersfoort
  ING bank, IBAN: NL95 INGB 0004 5487 74

Germany:	It is possible to make donations that allow for a tax return

		Check the ICCF web site for the latest information:
			https://iccf-holland
html

Europe:		Use a bank transfer if possible

		Any other method should work
  Ask for information about
		sponsorship


Credit Card:	You can use PayPal to send money with a Credit card
  It's
		really simple to use
  Use this link to find more info:
		    https://www
com/en_US/mrb/pal=XAC62PML3GF8Q
		The e-mail address for sending the money to is:
		    Bram@iccf-holland
org

Others:		Transfer to this account if possible:
		    ING bank: 	IBAN: NL95 INGB 0004 5487 74
				Swift code: INGBNL2A
		    under the name ""stichting ICCF Holland"", Amersfoort
		Checks are not accepted



 vim:tw=78:ts=8:noet:ft=help:norl:








































































































































































































































The autoload directory is for standard Vim autoload scripts


These are functions used by plugins and for general use
  They will be loaded
automatically when the function is invoked
  See "":help autoload""


gzip
vim and macmap
vim	HTML
javascriptcomplete
vim  Javascript
phpcomplete
vim	Python
rubycomplete
vim	Ruby
syntaxcomplete


The colorschemes were updated for the Vim 9 release
  If you don't like the
changes you can find the old ones here:
https://github
 Define a new Normal color and set the 'background' option accordingly
 >

	set background={light or dark}
	highlight clear
	highlight Normal 


	




2
 >

	highlight clear Normal
	set background&
	highlight clear
	if &background == ""light""
	  highlight Error 


	  



	else
	  highlight Error 




	endif

You can use `:highlight clear` to reset everything to the defaults, and then
change the groups that you want differently

Note that `:highlight clear` uses the value of 'background', thus set it
before this command
, bold) might be set in the defaults that you want
removed in your color scheme
  Use something like ""gui=NONE"" to remove the
attributes


In case you want to set 'background' depending on the colorscheme selected,
this autocmd might be useful: >

     autocmd SourcePre */colors/blue_sky
vim set background=dark

Replace ""blue_sky"" with the name of the colorscheme


In case you want to tweak a colorscheme after it was loaded, check out the
ColorScheme autocommand event


To clean up just before loading another colorscheme, use the ColorSchemePre
autocommand event
  For example: >

	let g:term_ansi_colors = 
g
vim/colors/mine
vim"",
and use "":runtime"" to load the original colorscheme: >

	"" load the ""evening"" colorscheme
	runtime colors/evening


You can use "":highlight"" to find out the current colors
  Exception: the
ctermfg and ctermbg values are numbers, which are only valid for the current
terminal
  See
`:help cterm-colors` 


The default color settings can be found in the source file src/syntax
c

Search for ""highlight_init""


If you think you have a color scheme that is good enough to be used by others,
please check the following items:

- Source the $VIMRUNTIME/colors/tools/check_colors
vim script to check for
  common mistakes


- Does it work in a color terminal as well as in the GUI? Is it consistent?

- Is ""g:colors_name"" set to a meaningful value?  In case of doubt you can do
  it this way: >

  	let g:colors_name = expand('<sfile>:t:r')

- Is 'background' either used or appropriately set to ""light"" or ""dark""?

- Try setting 'hlsearch' and searching for a pattern, is the match easy to
  spot?

- Split a window with "":split"" and "":vsplit""
  Are the status lines and
  vertical separators clearly visible?

- In the GUI, is it easy to find the cursor, also in a file with lots of
  syntax highlighting?

- In general, test your color scheme against as many filetypes, Vim features,
  environments, etc


- Do not use hard coded escape sequences, these will not work in other
  terminals
  Always use #RRGGBB for the GUI
  Names are more portable
  than numbers, though


- When targetting 256 colors terminals, prefer colors 16-255 to colors 0-15
  for the same reason
) are not
  universally supported
  Don't count on any of them
com/lifepillar/vim-colortemplate)
  It is therefore highly
recommended


If you would like your color scheme to be distributed with Vim, make sure
that:

- it satisfies the guidelines above,
- it was made with colortemplate,

and join us at vim/colorschemes: (https://github



vim: set ft=help :



This directory contains Vim scripts to be used with a specific compiler

They are used with the "":compiler"" command


These scripts usually set options, for example 'errorformat'

See "":help write-compiler-plugin""




The ftplugin directory is for Vim plugin scripts that are only used for a
specific filetype

For example, these are all loaded for the ""c"" filetype:

	c
vim
	c/settings
vim

Note that the ""_"" in ""c_extra


The filetype plugins are only loaded when the "":filetype plugin"" command has
been used


The default filetype plugin files contain settings that 95% of the users will
want to use
  They do not contain personal preferences, like the value of
'shiftwidth'


If you want to do additional settings, or overrule the default filetype
plugin, you can create your own plugin file
  Looking at the existing files should give you
inspiration


If you have remarks about an existing file, send them to the maintainer of
that file
  Only when you get no response send a message to Bram@vim
org

	if exists(""b:did_indent"")
	  finish
	endif
	let b:did_indent = 1

Always use "":setlocal"" to set 'indentexpr'
  This avoids it being carried over
to other buffers


You normally set 'indentexpr' to evaluate a function and then define that
function
  That function only needs to be defined once for as long as Vim is
running
  Add a test if the function exists and use "":finish"", like this:
	if exists(""*GetMyIndent"")
	  finish
	endif

The user may have several options set unlike you, try to write the file such
that it works with any option settings
  Also be aware of certain features not
being compiled in


To test the indent file, see testdir/README
txt



keymap files for Vim

One of these files is loaded when the 'keymap' option is set


The name of the file consists of these parts:

	{language}[-{layout}][_{encoding}]
vim

{language}	Name of the language (e


{encoding}	Optional: character encoding for which this keymap works

		When omitted the ""normal"" encoding for the language is
		assumed


Each file starts with a header, naming the maintainer and the date when it was
last changed
  If you find a problem in a keymap file, check if you have the
most recent version























































Language files for Vim: Translated menus

The contents of each menu file is a sequence of lines with ""menutrans""
commands
  Read one of the existing files to get an idea of how this works


More information in the on-line help:

	:help multilang-menus
	:help :menutrans
	:help 'langmenu'
	:help :language

The ""$VIMRUNTIME/menu
vim"" file will search for a menu translation file
  This
depends on the value of the ""v:lang"" variable
 ""


The file name is always lower case
  It is the full name as the "":language""
command shows (the LC_MESSAGES value)
950

and use the menu translation file:

	$VIMRUNTIME/lang/menu_chinese(taiwan)_taiwan
950
Big5""
	sh/bash/ksh:	export LANG=""zh_TW
Big5""

and the menu translation file is:

	$VIMRUNTIME/lang/menu_zh_tw
big5
vim

The menu translation file should set the ""did_menu_trans"" variable so that Vim
will not load another file

For UTF-8 menu files which only use latin1 characters, you can rely on Vim
doing the conversion
  Let the UTF-8 menu file source the latin1 menu file,
and put ""scriptencoding latin1"" in that one
g



































To run the maze macros with Vim:

	vim -u maze_mac maze_5
mac"" loads the maze macros and skips loading your 
vimrc, which
may contain settings and mappings that get in the way
 It will solve any maze produced by maze
c
that was posted to the net recently


Just follow this recipe and SEE FOR YOURSELF

	1
vi
uu"" to
		produce the file ""maze
vi
c""
	3
out and input a small number (for example 10 if
		you are on a fast machine, 3-5 if slow) which
		is the size of the maze to produce
	4
 include the macros with the vi command:
		:so maze
macros
	6
 type the letter ""g"" (for ""go"") and watch vi solve the maze
	7
 when vi solves the maze, you will see why it lies
	8
 now look at maze
vi
c file to compile, get a new compiler,
try maze
ansi
c which was also posted to the net

If you can get it to compile but the maze comes out looking like a fence
and not a maze and you are using SysV or DOS replace the ""27"" on the
last line of maze
cwi
caltech
edu (Bill T
ansi


Any donations should be in unmarked small denomination bills :^)=
otca
oz
otca
au!gregm
|||| OTC ||	    Snail:  OTC R&D GPO Box 7000, Sydney 2001, Australia
		    Phone:  +61 2 287 3139    Fax: +61 2 287 3299




The macros in the maze, hanoi and urm directories can be used to test Vim for
vi compatibility

life	Macros that run Conway's game of life

urm	Macros that simulate a simple computer: ""Universal Register Machine""



The other files contain some handy utilities
  They also serve as examples for
how to use Vi and Vim functionality


less
sh + less
vim	make Vim work like less (or more)



The following have been moved to an optional package

The URM macro package was written by Rudolf Koenig (""Rudi"")
(rudolf@koeniglich
de) for hpux-vi in August 1991
vim<RETURN>
in vim:		 *	(to load the registers and boot the URM-machine :-)
in vim:		 g	(for 'go') and watch the fun
 Per default, 3 and 4
			are multiplied
 Watch the Program counter, it is
			visible as a komma moving around


This is a ""standard URM"" (Universal register machine)  interpreter

Here it proves that vim is a general problem solver (if you bring enough
patience)


The interpreter begins with register 1 (not 0), without macros and more-lines
capability
)

The registers are the first few lines, beginning with a '>' 

The program is the first line after the registers

You should always initialize the registers required by the program


Output register:	line 2
Input registers:	line 2 to 


 		(""dot blank"")  halt the machine


Examples:

Add register 2 to register 3:
	(a2;s3)3

Multiply register 2 with register 3:
	(a4;a5;s2)2; ((a2;s4)4; s3; (a1;a4;s5)5; (a5;s1)1)3


There are more (complicated) examples in the file examples



























The plugin directory is for standard Vim plugin scripts

Look in the file for hints on how it can be disabled without deleting it


getscriptPlugin
vim  get latest version of Vim scripts
gzip
vim	     edit compressed files
logiPat
vim	     logical operators on patterns
manpager
vim	     using Vim as manpager
matchparen
vim	     highlight paren matching the one under the cursor
netrwPlugin
vim	     convert a file with syntax highlighting to HTML
vimballPlugin
vim    create and unpack 
vba files
zipPlugin
vim	     edit zip archives

Note: the explorer
vim plugin is no longer here, the netrw


These scripts are not for a language, but are used by Vim itself:

syntax
vim	Used for the "":syntax on"" command
  Uses synload
vim


manual
vim	Used for the "":syntax manual"" command
  Uses synload
vim	Contains autocommands to load a language file when a certain
		file name (extension) is used
  And sets up the Syntax menu
		for the GUI
  Undo the loading of
		synload



A few special files:

2html
vim	Converts any highlighted file to HTML (GUI only)

colortest
vim	View the current highlight settings
txt""


If you make a new syntax file which would be useful for others, please send it
to Bram@vim
  Include instructions for detecting the file type for this
language, by file name extension or by checking a few lines in the file

And please write the file in a portable way, see "":help 44


If you have remarks about an existing file, send them to the maintainer of
that file


For further info see "":help syntax"" in Vim


ccfilter*:	C program to filter the output of a few compilers to a common
		QuickFix format


efm_filter
*:	Perl script to filter compiler messages to QuickFix format


efm_perl
pl:	Perl script to filter error messages from the Perl interpreter
		for use with Vim quickfix mode


mve


pltags


vim132:		Shell script to edit in 132 column mode on vt100 compatible
		terminals


vimm:		Shell script to start Vim on a DEC terminal with mouse
		enabled


vimspell
c:  Example for a client program that communicates with a Vim
		   server through the X-Windows interface
vim	Vim script to generate tables for src/mbyte
c


[xxd can be found in the src directory]


Tutor is a ""hands on"" tutorial for new users of the Vim editor


Most new users can get through it in less than one hour
 The result
is that you can do a simple editing task using the Vim editor
  It will make a
scratch copy of the tutor first


I have considered adding more advanced lessons but have not found the
time
 Please let me know how you like it and send any improvements you
make
colorado
edu bware@slate
mines
colorado
edu bware@mines
xx and tutor
utf-8 files are translated files (where xx is the
language code)
xx might be latin1 or other traditional
encoding
xx

If you need another encoding, you can also prepare a file named tutor
xx
vim file
xx from tutor

See the Makefile for detail
  (For some languages, tutor
xx
utf-8 is created
from tutor
]









","















 Note that the only valid version of the GPL as far as this project
 is concerned is _this_ particular version of the license (ie v2, not
 v2
2 or v3
x or whatever), unless explicitly otherwise stated


 HOWEVER, in order to allow a migration to GPLv3 if that seems like
 a good idea, I also ask that people involved with the project make
 their preferences known
 In particular, if you trust me to make that
 decision, you might note so in your copyright message, ie something
 like

	This file is licensed under the GPL v2, or a later version
	at the discretion of Linus
,
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed


			    Preamble

  The licenses for most software are designed to take away your
freedom to share and change it
  (Some other Free Software Foundation software is covered by
the GNU Lesser General Public License instead
)  You can apply it to
your programs, too


  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software
  The ""Program"", below,
refers to any such program or work, and a ""work based on the Program""
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language
)  Each licensee is addressed as ""you""


You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee


  2


    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License


    c) If the modified program normally reads commands interactively
    when run, you must cause it, when started running for such
    interactive use in the most ordinary way, to print or display an
    announcement including an appropriate copyright notice and a
    notice that there is no warranty (or else, saying that you provide
    a warranty) and that users may redistribute the program under
    these conditions, and telling the user how to view a copy of this
    License
  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it
 You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

    a) Accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of Sections
    1 and 2 above on a medium customarily used for software interchange; or,

    b) Accompany it with a written offer, valid for at least three
    years, to give any third party, for a charge no more than your
    cost of physically performing source distribution, a complete
    machine-readable copy of the corresponding source code, to be
    distributed under the terms of Sections 1 and 2 above on a medium
    customarily used for software interchange; or,

    c) Accompany it with the information you received as to the offer
    to distribute corresponding source code
  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable


If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code
  These actions are
prohibited by law if you do not accept this License
  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it


  6
  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein
  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all
  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program


  8
 The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time
  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns


Each version is given a distinguishing version number
  If the Program
specifies a version number of this License which applies to it and ""any
later version"", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation
  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation
 If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission
  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally


		     END OF TERMS AND CONDITIONS

	    How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms
>
    Copyright (C) <year>  <name of author>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version
  See the
    GNU General Public License for more details


Also add information on how to contact you by electronic and paper mail


The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License


You should also get your employer (if you work as a programmer) or your
school, if any, to sign a ""copyright disclaimer"" for the program, if
necessary


  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

This General Public License does not permit incorporating your program into
proprietary programs



# Git Credential Manager

[![Build Status][build-status-badge]][workflow-status]

---

[Git Credential Manager][gcm] (GCM) is a secure
[Git credential helper][git-credential-helper] built on [


GCM supports (in alphabetical order) [Azure DevOps][azure-devops], Azure DevOps
Server (formerly Team Foundation Server), Bitbucket, GitHub, and GitLab


GCM replaces both the 


## Install

See the [installation instructions][install] for the current version of GCM for
install options for your operating system


## Current status

Git Credential Manager is currently available for Windows, macOS, and Linux\*

GCM only works with HTTP(S) remotes; you can still use Git with SSH:

- [Azure DevOps SSH][azure-devops-ssh]
- [GitHub SSH][github-ssh]
- [Bitbucket SSH][bitbucket-ssh]

Feature|Windows|macOS|Linux\*
-|:-:|:-:|:-:
Installer/uninstaller|&#10003;|&#10003;|&#10003;
Secure platform credential storage [(see more)][gcm-credstores]|&#10003;|&#10003;|&#10003;
Multi-factor authentication support for Azure DevOps|&#10003;|&#10003;|&#10003;
Two-factor authentication support for GitHub|&#10003;|&#10003;|&#10003;
Two-factor authentication support for Bitbucket|&#10003;|&#10003;|&#10003;
Two-factor authentication support for GitLab|&#10003;|&#10003;|&#10003;
Windows Integrated Authentication (NTLM/Kerberos) support|&#10003;|_N/A_|_N/A_
Basic HTTP authentication support|&#10003;|&#10003;|&#10003;
Proxy support|&#10003;|&#10003;|&#10003;
`amd64` support|&#10003;|&#10003;|&#10003;
`x86` support|&#10003;|_N/A_|&#10007;
`arm64` support|best effort|&#10003;|best effort, no packages
`armhf` support|_N/A_|_N/A_|best effort, no packages

(\*) GCM guarantees support only for [the Linux distributions that are officially
supported by dotnet][dotnet-distributions]


## Supported Git versions

Git Credential Manager tries to be compatible with the broadest set of Git
versions (within reason)
 However there are some know problematic releases of
Git that are not compatible
26
 For example, when pushing (`git push`) to
[Azure DevOps][azure-devops], [Bitbucket][bitbucket], or [GitHub][github], a
window will automatically open and walk you through the sign-in process


## License

We're [MIT][gcm-license] licensed
azure
svg
[docs-index]: https://github
com/GitCredentialManager/git-credential-manager/blob/release/docs/README
com/docs/gitcredentials
[gcm]: https://github
com/GitCredentialManager/git-credential-manager/blob/release/docs/credstores
md
[gcm-for-mac-and-linux]: https://github
com/microsoft/Git-Credential-Manager-for-Mac-and-Linux
[gcm-for-windows]: https://github
md
[git-tools-credential-storage]: https://git-scm
com/book/en/v2/Git-Tools-Credential-Storage
[github]: https://github
microsoft
com/repos/
[workflow-status]: https://github
com)
for an overview of features


## Getting Started

### Downloading

You can install the Git LFS client in several different ways, depending on your
setup and preferences
io/github/git-lfs/install)

* **macOS users**
 [Homebrew](https://brew
 In addition, [binary packages](https://github
org), and the
available instructions in our
[Wiki](https://github
asc` file and verify
the file you want like so:

```ShellSession
$ gpg -d sha256sums
asc | grep git-lfs-linux-amd64-v2
 You can read
more about this pattern syntax
[here](https://git-scm
gitattributes` file_
gitattributes
$ git commit -m ""track *
 For example, changing a file named `my
psd`
(tracked above via `*
 To migrate existing large files
> in your history to use Git LFS, use `git lfs migrate`
psd"" --everything
```

**Note that this will rewrite history and change all of the Git object IDs in your
repository, just like the import version of this command


## Limitations

Git LFS maintains a list of currently known limitations, which you can find and
edit [here](https://github
  Please do not import the `git-lfs`
module into other Go code and do not rely on it as a source code dependency
  There's also a [FAQ](https://github
adoc)
shipped with Git LFS which answers some common questions
 Related projects are listed on the [Implementations wiki
page](https://github
com/u/28857117?s=100&v=4
[larsxschneider-img]: https://avatars1


In alphabetical order:

| [@andyneff][andyneff-user] | [@PastelMobileSuit][PastelMobileSuit-user] | [@rubyist][rubyist-user] | [@sinbad][sinbad-user] | [@technoweenie][technoweenie-user] | [@ttaylorr][ttaylorr-user] |
| :---: | :---: | :---: | :---: | :---: | :---: |
| [![][andyneff-img]][andyneff-user] | [![][PastelMobileSuit-img]][PastelMobileSuit-user] | [![][rubyist-img]][rubyist-user] | [![][sinbad-img]][sinbad-user] | [![][technoweenie-img]][technoweenie-user] | [![][ttaylorr-img]][ttaylorr-user] |

[andyneff-img]: https://avatars1
githubusercontent
com/u/37254014?s=100&v=4
[rubyist-img]: https://avatars1
githubusercontent
com/u/443245?s=100&v=4
[andyneff-user]: https://github
com/sinbad
[rubyist-user]: https://github


Copyright 1998 by the Massachusetts Institute of Technology
I
I
                                    --
--                                                                           --
-- Except as contained in this notice, the name(s) of the above copyright    --
-- holders shall not be used in advertising or otherwise to promote the      --
-- sale, use or other dealings in this Software without prior written        --
-- authorization
                                                            --
-------------------------------------------------------------------------------
-- $Id: README,v 1
2
  Last change: 2022 Mar 02


		  VIM REFERENCE MANUAL    by Bram Moolenaar


			*uganda* *Uganda* *copying* *copyright* *license*
SUMMARY
								*iccf* *ICCF*
Vim is Charityware
  Please see |kcc|
below or visit the ICCF web site, available at these URLs:

	https://iccf-holland
org/
	https://www
vim
org/iccf/
	https://www
  Vim sponsors can vote for
features
  You can also distribute
    unmodified parts of Vim, likewise unrestricted except that they must
    include this license text
  You are also allowed to include executables
    that you made from the unmodified Vim sources, plus your own usage
    examples and Vim scripts
org>
net, www
vim

       d) When you have a modified Vim which includes changes as mentioned
	  under c), you can distribute it without the source code for the
	  changes if the following three conditions are met:
	  - The license that applies to the changes permits you to distribute
	    the changes to the Vim maintainer without fee or restriction, and
	    permits the Vim maintainer to include the changes in the official
	    version of Vim without fee or restriction

    3) A message must be added, at least in the output of the "":version""
       command and in the intro screen, such that the user of the modified Vim
       is able to see that it was modified
  When distributing as mentioned
       under 2)e) adding the message is only required for as far as this does
       not conflict with the license used for the changes
  The preferred way to do this is
     by e-mail or by uploading the files to a server and e-mailing the URL


=== end of license ===

Note:

- If you are happy with Vim, please express that by reading the rest of this
  file and consider helping needy children in Uganda

  A few minor changes have been made since he checked it, but that should not
  make a difference
  Also when you didn't actually change
  anything in Vim


- Once a change is included that goes under the GNU GPL, this forces all
  further changes to also be made under the GNU GPL or a compatible license
  The area is known as Rakai
District
  The population is mostly farmers
  Some say that it started there
  In this district about 60,000 children
have lost one or both parents, out of a population of 350,000
  Now that the government is stable again, the children and parents have
to learn how to take care of themselves and how to avoid infections
  Because these families are big and the income
(if any) is low, a child is lucky if it gets healthy food
  To help these needy children, a
sponsorship program was put into place

For a few dollars a month KCC sees to it that the child gets indispensable
items, is healthy, goes to school and KCC takes care of anything else that
needs to be done for the child and the family that supports it

Health workers are being trained, hygiene education is carried out and
households are stimulated to build a proper latrine

They are sold below cost price


There is a clinic at the project, which provides children and their family
medical help
  When needed, transport to a hospital is offered
  This is possible because this is a small
organization that works with volunteers
  If you would like to sponsor a
child, you should have the intention to do this for at least one year


How do you know that the money will be spent right?  First of all you have my
personal guarantee as the author of Vim
org>
o
kuwasha

		Please send me a note so that I know what has been donated
		because of Vim
kuwasha
  This will allow for tax deduction if you live in
		Holland
org/germany
  See ""Others"" below for the
		swift code and IBAN number
  This is
		the most widely used Internet based payment system
paypal
vim	for editing compressed files
netrw*
vim	browsing (remote) directories and editing remote files
tar
vim		browsing tar files
zip
vim, menu
vim
spellfile
vim	downloading of a missing spell file

Omni completion files:
ccomplete
vim		C
csscomplete
vim		HTML / CSS
htmlcomplete
vim		PHP
pythoncomplete
vim	from syntax highlighting
xmlcomplete
vim		XML (uses files in the xml directory)




README
txt for color scheme files

These files are used for the `:colorscheme` command
  They appear in the
""Edit/Color Scheme"" menu in the GUI
com/vim/colorschemes/tree/master/legacy_colors


Hints for writing a color scheme file:

There are two basic ways to define a color scheme:

1
 Use the default Normal color and automatically adjust to the value of
   'background'

  This will also work for groups
that are added in later versions of Vim

Some attributes (e
g

	augroup MyColorscheme
	  au!
	  au ColorSchemePre * unlet g:term_ansi_colors
	  au ColorSchemePre * au! MyColorscheme
	augroup END

To customize a colorscheme use another name, e
  ""~/
vim
	"" change the color of statements
	hi Statement ctermfg=Blue guifg=Blue

To see which highlight group is used where, see `:help highlight-groups` and
`:help group-name` 
  Use the color names instead for better portability
 as possible


- Is ""g:terminal_ansi_colors"" set to a list of 16 #RRGGBB values?

- Try to keep your color scheme simple by avoiding unnecessary logic and
  refraining from adding options
  The best color scheme is one that only
  requires: >

  	colorscheme foobar

The color schemes distributed with Vim are built with lifepillar/colortemplate
(https://github


If you want to write your own compiler plugin, have a look at the other files
for how to do it, the format is simple


If you think a compiler plugin you have written is useful for others, please
send it to Bram@vim
vim in this directory and subdirectories will be sourced
by Vim when it detects the filetype that matches the name of the file or
subdirectory
vim
	c_extra
vim"" is required to separate the filetype name
from the following arbitrary name
  See "":help ftplugin"" in Vim





This directory contains files to automatically compute the indent for a
type of file


If you want to add your own indent file for your personal use, read the docs
at "":help indent-expression""


If you make a new indent file which would be useful for others, please send it
to Bram@vim
org

And please stick to the rules below
org


If you are the maintainer of an indent file and make improvements, e-mail the
new version to Bram@vim



Rules for making an indent file:

You should use this check for ""b:did_indent"":

	"" Only load this indent file when no other was loaded yet
g
, ""hebrew"", ""greek"")

{layout}	Optional: name of the keyboard layout (e
g
  When omitted the layout of the standard
		US-english keyboard is assumed
  If necessary, report a problem to the maintainer


The format of the keymap lines below ""loadkeymap"" is explained in the Vim help
files, see "":help keymap-file-format""
 v:lang 
vim""

When the 'menutrans' option is set, its value will be used instead of v:lang


For example, to use the Big5 (Taiwan) menus on MS-Windows the $LANG will be

	Chinese(Taiwan)_Taiwan
vim

On Unix you should set $LANG, depending on your shell:

	csh/tcsh:	setenv LANG ""zh_TW



AUTOMATIC CONVERSION

When Vim was compiled with multi-byte support, conversion between latin1 and
UTF-8 will always be possible
  Other conversions depend on the iconv
library, which is not always available
, between iso-8859-# and
MS-Windows codepages), thus the converted menu file must be available
78
	press ""g""

The ""-u maze



The original README:

To prove that you can do anything in vi, I wrote a couple of macros that
allows vi to solve mazes
 run uudecode on the file ""maze
macros
macros""
	(If you can't wait to see the action, jump to step 4)
	2
 compile maze
c with ""cc -o maze maze
 run maze > maze
 edit the maze (vi maze
macros and all will be revealed

Tested on a sparc, a sun and a pyramid (although maze
c will not compile
on the pyramid)


Anyone who can't get the maze
c by ""11""
Thanks to John Tromp (tromp@piring
c

Thanks to antonyc@nntp-server
 Cat) for maze
au
Greg McFarlane	     UUCP:  {uunet,mcvax}!otc
oz

maze	Macros that solve a maze (amazing!)
  Add the command to your
vimrc file to use the package:

packadd! dvorak		"" Dvorak keyboard support; adds mappings

packadd! editexisting	"" when editing a file that is already edited with
			"" another Vim instance, go to that Vim instance

packadd! justify	"" justifying text


Getting started:

type
in your shell:	 vim urm<RETURN>
in vim:		 :so urm
 The URM
concept is used in theoretical computer science to aid in theorem proving
  A dot marks the end of a program
 (Bug: there must be a space
after the dot


Commands:
a<n>		increment register <n>
s<n>		decrement register <n>
<x>;<y>		execute command <x> and then <y>
(<x>)<n>	execute command <x> while register <n> is nonzero


Note, undo may take a while after a division


All files here ending in 
vim will be sourced by Vim when it starts up
vim	     edit files over a network and browse (remote) directories
rrhelper
vim	     used for --remote-wait editing
spellfile
vim	     edit (compressed) tar files
tohtml
vim plugin has
taken over browsing directories (also for remote directories)






This directory contains Vim scripts for syntax highlighting
vim


synload


nosyntax
vim	Used for the "":syntax off"" command
vim	Check for color names and actual color on screen

hitest

whitespace
vim  View Tabs and Spaces



If you want to write a syntax file, read the docs at "":help usr_44
org
  Only when you get no response send a message to Bram@vim


If you are the maintainer of a syntax file and make improvements, send the new
version to Bram@vim
org



Some tools that can be used with Vim:

blink
c:	C program to make the cursor blink in an xterm
*		Awk script to filter error messages to QuickFix format
pl:	Perl script to create a tags file from Perl scripts


ref:		Shell script for the K command
*:	Perl script to create a tags file from a shell script
*:	Shell script for highlighting spelling mistakes


vim_vs_net
cmd: MS-Windows command file to use Vim with MS Visual Studio 7 and
		later


xcmdsrv_client


unicode


Tutor is a file that contains the tutorial lessons
 You can simply
execute ""vim tutor"" and then follow the instructions in the lessons

The lessons tell you to modify the file, so DON'T DO THIS ON YOUR
ORIGINAL COPY


On Unix you can also use the ""vimtutor"" program


Bob Ware, Colorado School of Mines, Golden, Co 80401, USA
(303) 273-3987
bware@mines
bitnet


Translation
-----------

The tutor
xx
  The encoding of tutor
  If you don't need a translation with such traditional encoding,
you just need to prepare the tutor
utf-8 file
enc
(replace enc with the actual encoding name)
  You might also need to adjust the
tutor
xx
utf-8
xx for historical reasons
)

[This file was modified for Vim by Bram Moolenaar et al","  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users


		    GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0
  (Hereinafter, translation is included without limitation in
the term ""modification""
  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program)
 You are not required to accept this License, since you have not
signed it
 Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions


  9


  12


  To do so, attach the following notices to the program

    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details
  Here is a sample; alter the names:

  Yoyodyne, Inc
 It aims to provide a consistent and secure
authentication experience, including multi-factor auth, to every major source
control hosting service and platform


- Git 1
yml/badge
com
[dotnet-distributions]: https://learn
md
[gcm-commit-12294990]: https://github
com/GitCredentialManager/git-credential-manager/blob/release/docs/netconfig
com) is a command line extension and
[specification](docs/spec


The client is written in Go, with pre-compiled binaries available for Mac,
Windows, Linux, and FreeBSD

* **Windows users**
 Git LFS is included in the distribution of
  [Git for Windows](https://gitforwindows
com/git-lfs/git-lfs

- Run `make`

- Place the `git-lfs` binary, which can be found in `bin`, on your systemâ€™s executable `$PATH` or equivalent
 This can be done by running:

```bash
$ git add 
psd`):

```bash
$ git add my
psd
```

Once you've made your commits, push your files to the Git remote:

```bash
$ git push origin main
Uploading LFS objects: 100% (1/1), 810 B, 1
**

If there's some reason that things aren't working out for you, please let us
know in an issue, and we'll definitely try to help or get it fixed
com/git-lfs/git-lfs/discussions)
 Please be sure to include:

1
com/bk2204
[chrisd8088-user]: https://github
com/larsxschneider
[bk2204-pgp]: https://keyserver
ubuntu
com/u/143?v=3&s=100
[sinbad-img]: https://avatars1
githubusercontent
com/PastelMobileSuit
[sinbad-user]: https://github
com/technoweenie
[ttaylorr-user]: https://github
  When the maintainer asks you
	  (in any way) for a copy of the modified Vim you distributed, you
	  must make your changes, including source code, available to the
	  maintainer without fee
  The maintainer reserves the right to
	  include your changes in the official version of Vim
  If there has been no negotiation
	  then this license, or a later version, also applies to your changes
sf
editors)
  This may be done in the form of a
	  context diff
  The e-mail address to be used is
     <maintainer@vim
  You may use this
     license for previous Vim releases instead of the license that they came
     with, at your option
  Although AIDS
is now mostly under control, the problems are still continuing


The key to solving the problems in this area is education
  Please consider one
of these possibilities:

1
  Furthermore, the centre has been
co-sponsored and inspected by World Vision, Save the Children Fund and is now
under the supervision of Pacific Academy Outreach Society
 box 1658
			Masaka, Uganda, East Africa

Sending money:						*iccf-donations*

Check the ICCF web site for the latest information!  See |iccf| for the URL

		If you must send a check send it to our Canadian partner:
		https://www
net/

Canada:		Contact Kuwasha in Surrey, Canada
vim		browsing zip files
paste
vim	common code for mswin



	  




- When targetting 8-16 colors terminals, don't count on ""darkblue"" to be blue
  and dark, or on ""2"" to be even vaguely reddish


- Typographic attributes (bold, italic, underline, reverse, etc
com/vim/colorschemes)
org


All files ending in 
  Include instructions for detecting the file type for this
language, by file name extension or by checking a few lines in the file


To trigger the indenting after typing a word like ""endif"", add the word to the
'indentkeys' option with ""+=""
, ""spanish"",
		""russian3"")

		Use the value the 'encoding' option: lower case only, use '-'
		instead of '_'


	""menu_"" 

Other conversions may not always be available (e
out)
	5
vi
nl) for maze
c


		   ACSnet:  gregm@otc
  They have been written for vi to show its unlimited
possibilities
	The life macros can be used for performance comparisons


hanoi	Macros that solve the tower of hanoi problem


packadd! matchit	"" makes the % command work better

packadd! shellmenu	"" menus for editing shell scripts in the GUI version

packadd! swapmouse	"" swap left and right mouse buttons

This is another proof that Vim is perfectly compatible with Vi
vim	     download a spellfile when it's missing
tarPlugin
vim
12""
org


shtags

The ""make"" command can be used for creating tutor"
JetBrains,,,
AMD," 

This file shows how to run the AMDRyzenMasterCLI and 
contains a summary of what you will find in each of the files that make up the application

/////////////////////////////////////////////////////////////////////////////////

HOW TO RUN:

Step1:-
Start a command prompt as an administrator


Step2:-
Ensure that Device
dll and Platform
dll is in same folder with AMDRyzenMasterCLI
exe


Step3:-
Run AMDRyzenMasterCLI


Example: 

AMDRyzenMasterCLI
exe -h[--help]	// Shows usage
AMDRyzenMasterCLI
vcxproj
    This file contains build configuration for this application
cpp
    This is the main application source file
Contains list of APIs supported and basic check
    of arguments


sampleApp
hpp
    This file contains required header files
cpp
     This is file which contains invocation of the APIs


apiCalls
cpp

Utility
cpp
     This file contains helper functions
hpp
     This file includes header files required for Utility
cpp 

To check API name with function index and number or arguments required:

( 1 )COMMAND : AMDRyzenMasterCLI
exe -l

OUTPUT:

============================================================
>AMDRyzenMasterCLI
exe -l
 ---------------------------------------------------------------
 | Func |    Supported                          |   Number of  |
 | Index|    Functions                          |   arguments  |
 ---------------------------------------------------------------
   1  GetBaseFamily  	   				0
   2  GetExtendedFamily    				0
   3  GetFamily 	   				0
   4  GetBaseModel 	   				0
   5  GetExtendedModel     				0
   6  GetStepping	   				0
   7  GetModel		   				0
   8  GetPackage	   				0
   
	
		   				

   
	
		   				

   
	
		   				

   
	
		   				
 
  181     SetMemCtrlAddrCmdSetup                        1
  182     SetMemCtrlCsOdtSetup                          1
  183     EnableDisablePBOAdvanced                      2
  184     SetCLDO_VDDP                                  1
List of APIs  
=========================================================================
 *------------------------------------------------------------------
|NOTES:								        					   |
|-> Return value specifies,				    					   |
|	-1 -> Failure												   |
|	0  -> Success 							                       |
|	1  -> Invalid value						                       |
|	2  -> BIOS function not implemented							   |
|																   |
| * Function names are not case sensitive
					   |
| *	Functions can be called by ""FUNCTION_INDEX"" also,		   |
|   for ""FUNCTION_INDEX"" please check output of ""AMDRyzenMasterCLI
exe -l"" |
*------------------------------------------------------------------
============================================================================================
To call all Get APIs and retrieve all information

- API      	: GetAllInfo
- Usage    	: AMDRyzenMasterCLI
exe --api GetAllInfo
- Examples 	: AMDRyzenMasterCLI
exe --api GetAllInfo
		  AMDRyzenMasterCLI
exe -a 49 
		  AMDRyzenMasterCLI
exe --api getallinfo	

============================================================================================
- API      	: GetBaseFamily
- Usage    	: AMDRyzenMasterCLI
exe --api GetBaseFamily
			  AMDRyzenMasterCLI
exe -a 1 
			  AMDRyzenMasterCLI
exe --api GetCurrentFID 0
				- Gets the current FID value of P0 P-state definition register
			: AMDRyzenMasterCLI
exe --api GetCurrentFID 1
				- Gets the current FID value of P1 P-state definition register
- Note		: Applicable to GetCurrentVIDIndex and GetCurrentDID 
============================================================================================
============================================================================================
- API      	: SetCurrentFID
- Usage    	: AMDRyzenMasterCLI
exe --api SetCurrentFID <P-state_Index> <FID_Value>
- Examples 	: AMDRyzenMasterCLI
exe --api SetCurrentFID 0 140
				- Sets current FID value to 140 of P0 P-state definition register
			: AMDRyzenMasterCLI
exe --api SetCurrentFID 1 144
				- Sets current FID value to 144 of P1 P-state definition register
- Note		: Applicable to SetCurrentDID, SetCurrentVIDIndex
============================================================================================
============================================================================================
- API      	: SetCorePark
- Usage    	: AMDRyzenMasterCLI
exe --api GetFrequencybyFID 140
				- Gets operating frequency based on FID value set as 140 and the current DID value
exe --api GetVoltagebyVID
- Examples 	: AMDRyzenMasterCLI
exe --api GetVoltagebyVID 44
				- At CPU Voltage Index as 44,gets the CPU voltage

============================================================================================
============================================================================================
- API      	: SetCurrentVoltage
- Usage    	: AMDRyzenMasterCLI
27V

			: AMDRyzenMasterCLI
29V
exe --api GetVIDbyVoltage <CPU_voltage_value>
- Examples 	: AMDRyzenMasterCLI
exe --api GetVIDbyVoltage 1
275 V 
25V
 
============================================================================================
============================================================================================
- API      	: SetMemVDDIO
- Usage    	: AMDRyzenMasterCLI
exe --api SetMemVDDIO <memory_VDDIO>
- Examples 	: AMDRyzenMasterCLI
exe --api SetMemVDDIO 1200
				- Sets memory VDDIO voltage supply to 1200 millivolts

============================================================================================
============================================================================================
- API      	: SetMemVTT
- Usage    	: AMDRyzenMasterCLI
exe --api SetCurrentMemClock <memory_clock_value>
- Examples 	: AMDRyzenMasterCLI
exe --api SetCurrentMemClock 1200
				- Sets memory clock frequency to 1200 MHz
============================================================================================
============================================================================================
- API      	: SetMemCtrlTcl
- Usage    	: AMDRyzenMasterCLI
exe --api SetMemCtrlTcl <CAS_latency_value>
- Examples 	: AMDRyzenMasterCLI
exe --api SetVDDCR_SOC <VDDCR SOC value>
- Examples 	: AMDRyzenMasterCLI
2
				- Set VDDCR SOC Voltage to 1
2 volt
exe --api SetCurrentPState <P-state_Index>
- Examples 	: AMDRyzenMasterCLI
exe --api SetCurrentPState 1
				- Sets the new P-state to 1 for the processor
exe -a GetMinMaxStepBuffer <Parameters enum value>
- Example	: 
	       	Parameter value:		
				0->VDDIO
				1->VTT
				2->MemClock
				3->Tcl
				4->Trcdrd
				5->Trcdwr
				6->Tras
				7->Trp
				8->ProcODT
				9->Trc
				10->Tcwl
				11->SMT
				12->DownCoreConfig
				13->MemoryInterLeaveMode
				

				47->AddrCmdSetup
				48->CLDO_VDDP
				
			To get Min,Max and step size for VDDIO
       		AMDRyzenMasterCLI
exe -a GetFIDDIDStockValues
- Example	: To get stock value of FID and DID values
	          AMDRyzenMasterCLI
exe -a GetFIDDIDStockValues
===========================================================================================
- API		: DisablePROCHOT
- Usage		: AMDRyzenMasterCLI","exe with proper arguments
exe --api[-A] GetBaseFamily      //To Run any function
AMDRyzenMasterCLI
hpp
     Declaration of all functions which are implemented in apiCalls


Utility
exe --api GetBaseFamily
- Examples 	: AMDRyzenMasterCLI
exe --api getbasefamily 
			  AMDRyzenMasterCLI
exe -a gEtbaseFamiLy
				- Gets the current base family value

		
- Note		: Applicable to below mentioned functions:
			GetExtendedFamily , GetFamily  , GetBaseModel , GetExtendedModel , GetStepping , GetModel , GetPackage , GetRevision
			GetInstructionSets , GetCurrentFrequency , GetL1DataCache , GetL1InstructionCache , GetL2Cache , GetL3Cache
			IsOverClockable , GetCurrentPState , GetCorePark , GetPstateMaxVal , GetCurPstateLimit , GetName
			GetDescription , GetVendor , GetRole , GetClassName , GetType , GetIndex , GetCurrentVoltage , GetMemVDDIO , GetMemVTT
			GetCurrentMemClock , GetMemCtrlTcl , GetMemCtrlTrcdrd , GetMemCtrlTrcdwr , GetMemCtrlTras , GetCurrentTemperature
			GetMemCtrlTrp , GetVDDCR_SOC , IsTSCPatchApplied ,GetMemCtrlTrc ,GetMemCtrlProcODT , GetMemCtrlTcwl,GetCPUOCBiosLimits,
			,IsSMTToggleAvailable,IsDisableProcHOTAvailable,
			GetMemoryInterleaveMode,GetBIOSInfo,GetPerformanceOfCore,GetBoardEDCLimit,GetBoardTDCLimit,GetBoardcHTCLimit

============================================================================================
- API      	: GetCurrentFID
- Usage    	: AMDRyzenMasterCLI
exe --api GetCurrentFID <P-state_Index>
- Examples 	: AMDRyzenMasterCLI
exe --api SetCorePark 0 4
				- To disable 4 cores
		
- Note 		: valid value of <Number_of_core_to_be_disabled> 
				
============================================================================================
============================================================================================
- API      	: GetFrequencybyFID
- Usage    	: AMDRyzenMasterCLI
exe --api GetFrequencybyFID <FID_Value>
- Examples 	: AMDRyzenMasterCLI

- Note		: Applicable to GetFrequencybyDID
============================================================================================
============================================================================================
- API      	: GetVoltagebyVID
- Usage    	: AMDRyzenMasterCLI
27
				- Sets CPU voltage to 1
exe --api SetCurrentVoltage 1
29
				- - Sets CPU voltage to 1
275
				- Gets VID value at CPU voltage of 1

			: AMDRyzenMasterCLI
exe --api GetVIDbyVoltage 1
25
				- Gets VID value at CPU voltage of 1
exe --api SetMemVTT <VTT_value>
- Examples 	: AMDRyzenMasterCLI
exe --api SetMemVTT 600
				- Sets electrical terminal voltage (VTT) for DDR4 memory
exe --api SetMemCtrlTcl 17
				- Sets memory CAS latency to 17 clock cycle
 
- Note		: Applicable to 
			  SetMemCtrlTrcdrd , SetMemCtrlTrcdwr , SetMemCtrlTras , SetMemCtrlTrp 
============================================================================================
============================================================================================
- API      	: SetVDDCR_SOC
- Usage    	: AMDRyzenMasterCLI
exe --api SetVDDCR_SOC 1

============================================================================================
============================================================================================
- API      	: SetCurrentPState
- Usage    	: AMDRyzenMasterCLI
 
			: AMDRyzenMasterCLI
exe --api SetCurrentPState 2
				- Sets the new P-state to 2 for the processor
				|value|P-State|
				-  0   â€“> P0
				-  1   â€“> P1
				-  2   â€“> P2
===========================================================================================
- API		: GetMinMaxStepBuffer
- Usage		: AMDRyzenMasterCLI
exe -a GetMinMaxStepBuffer 0
			
===========================================================================================
- API		: GetFIDDIDStockValues
- Usage		: AMDRyzenMasterCLI
exe -a DisablePROCHOT
- Example	: To disable ProcHot
		  AMDRyzenMasterCLI
exe -a DisablePROCHOT
- Note		:ProcHot will be disabled after next overclocking request
===========================================================================================







","

ï»¿========================================================================
    CONSOLE APPLICATION : AMDRyzenMasterCLI Project Overview
========================================================================

The AMDRyzenMasterCLI application demonstrates the usage of Overclocking SDK APIs
exe -L[--list] 		       //To show list of supported APIs

/////////////////////////////////////////////////////////////////////////////////

AMDRyzenMasterCLI


sampleApp


apiCalls
exe --api SetCorePark <Die number> <Number_of_core_to_be_disabled>
- Examples 	: AMDRyzenMasterCLI
exe --api SetCurrentVoltage <CPU_voltage_to_be_set>
- Examples 	: AMDRyzenMasterCLI
exe --api SetCurrentVoltage 1

============================================================================================
============================================================================================
- API      	: GetVIDbyVoltage
- Usage    	: AMDRyzenMasterCLI
 
============================================================================================
============================================================================================
- API      	: SetCurrentMemClock
- Usage    	: AMDRyzenMasterCLI

				

				"
obs-studio,", 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed


Preamble

The licenses for most software are designed to take away your freedom to share and change it
 (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead


When we speak of free software, we are referring to freedom, not price
 Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things
 These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it
 You must make sure that they, too, receive or can get the source code


Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software
 If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations


Finally, any free program is threatened constantly by software patents


GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

0
 The ""Program"", below, refers to any such program or work, and a ""work based on the Program"" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language
 (Hereinafter, translation is included without limitation in the term ""modification""
) Each licensee is addressed as ""you""


Activities other than copying, distribution and modification are not covered by this License; they are outside its scope


1
 You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program


You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee
 You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:

a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change


b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License


c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License
 (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement
 But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it


Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program


3
 You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:

a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,

b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,

c) Accompany it with the information you received as to the offer to distribute corresponding source code
 (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above
 However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable


If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code


4
 You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License
 Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License
 However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance


5
 You are not required to accept this License, since you have not signed it
 However, nothing else grants you permission to modify or distribute the Program or its derivative works
 These actions are prohibited by law if you do not accept this License
 Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it


6
 Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions
 You are not responsible for enforcing compliance by third parties to this License


7
 If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License
 If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all
 For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program


If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances
 Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice


This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License
 If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded
 In such case, this License incorporates the limitation as if written in the body of this License
 The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time


Each version is given a distinguishing version number
 If the Program specifies a version number of this License which applies to it and ""any later version"", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation
 If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation


10
 For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this
 Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally


NO WARRANTY

11
 THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU
 SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION


12","































































GNU GENERAL PUBLIC LICENSE Version 2, June 1991

Copyright (C) 1989, 1991 Free Software Foundation, Inc
 By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users
 This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it


For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have
 And you must show them these terms so they know their rights
 To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all
 This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License
 Whether that is true depends on what the Program does


2
)

These requirements apply to the modified work as a whole


In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License
 For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable
 You may not impose any further restrictions on the recipients' exercise of the rights granted herein


It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices


8


9
 Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns
 If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission
 BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW
 EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES





















",") You can apply it to your programs, too


To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights


We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software
 We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary


The precise terms and conditions for copying, distribution and modification follow
 The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program)
 If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works
)

The source code for a work means the preferred form of the work for making modifications to it"
Steam,"



































































































































































































































































































































Welcome to the Deep Rock Galactic modding readme!
To install mods, open the game and go to the modding tab on the esc menu
 Click subscribe to install a mod

More info can be found here: https://drg
io/ 
If you want to make mods for the game, info can be found here: https://drg
mod","
From there click the install button and browse to the mods you want to install
io/guides 
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",mod
ModifiableWindowsApps,,,"

"
Notepad++,"



",,
n,"



",,
WondershareUpdate,,"



",
Windows Mail,"

",,
Hewlett-Packard,,"

",
EasyAntiCheat_EOS,"

",,
Gpg4win,,"



",
t,,,"



"
WinDirStat,"




",,
Microsoft Update Health Tools,"



",,
Windows Photo Viewer,"






",,
WinRAR,"



",,
Riot Vanguard,"
  7-Zip
  ~~~~~
  License for use and distribution
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  7-Zip Copyright (C) 1999-2023 Igor Pavlov


  The licenses for files are:

    1) 7z
dll:
         - The ""GNU LGPL"" as main license for most of the code
         - The ""GNU LGPL"" with ""unRAR license restriction"" for some code
         - The ""BSD 3-clause License"" for some code
    2) All other files: the ""GNU LGPL""


  Redistributions in binary form must reproduce related license information from this file


  Note:
    You can use 7-Zip on any computer, including a computer in a commercial
    organization
 You don't need to register or pay for 7-Zip


    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE
org/




  BSD 3-clause License
  --------------------

    The ""BSD 3-clause License"" is used for the code in 7z
dll that implements LZFSE data decompression


    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    1
  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer
  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer
        in the documentation and/or other materials provided with the distribution


    3


    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED
 IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE


    The license for original unRAR code has the following restriction:

      The unRAR sources cannot be used to re-create the RAR compression algorithm,
      which is proprietary
 Distribution of modified unRAR sources in separate form
      or as a part of other software is permitted, provided that it is clearly
      stated in the documentation and source comments that the code may
      not be used to develop a RAR (WinRAR) compatible archiver



  --
  Igor Pavlov

7-Zip 23
01
-----------

7-Zip is a file archiver for Windows


7-Zip Copyright (C) 1999-2023 Igor Pavlov


The main features of 7-Zip: 

  - High compression ratio in the new 7z format
  - Supported formats:
     - Packing / unpacking: 7z, XZ, BZIP2, GZIP, TAR, ZIP and WIM

     - Unpacking only: APFS, AR, ARJ, Base64, CAB, CHM, CPIO, CramFS, DMG, EXT, FAT, GPT, HFS,
                       IHEX, ISO, LZH, LZMA, MBR, MSI, NSIS, NTFS, QCOW2, RAR, 
                       RPM, SquashFS, UDF, UEFI, VDI, VHD, VHDX, VMDK, XAR and Z

  - Fast compression and decompression
  - Self-extracting capability for 7z format
  - Strong AES-256 encryption in 7z and ZIP formats
  - Integration with Windows Shell
  - Powerful File Manager
  - Powerful command line version
  - Localizations for 90 languages


7-Zip is free software distributed under the GNU LGPL (except for unRar code)

Read License



  This distribution package contains the following files:

  7zFM
exe      - 7-Zip File Manager
  7-zip
dll     - Plugin for Windows Shell
  7-zip32
dll   - Plugin for Windows Shell (32-bit plugin for 64-bit system) 
  7zg
exe       - GUI module
  7z
dll        - 7-Zip engine module
  7z
sfx     - SFX module (Console version)

  License
txt   - History of 7-Zip
  7-zip
ttt   - English (base) localization file
  Lang\*
txt    - Localization files


---
End of document

","


  GNU LGPL information
  --------------------

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2
1 of the License, or (at your option) any later version
  See the GNU
    Lesser General Public License for more details


    You can receive a copy of the GNU Lesser General Public License from
    http://www
gnu

    That code was derived from the code in the ""LZFSE compression library"" developed by Apple Inc,
    that also uses the ""BSD 3-clause License"":

    ----
    Copyright (c) 2015-2016, Apple Inc
 All rights reserved


    2
  Neither the name of the copyright holder(s) nor the names of any contributors may be used to endorse or promote products derived
        from this software without specific prior written permission

    ----




  unRAR license restriction
  -------------------------

    The decompression engine for RAR archives was developed using source
    code of unRAR program

    All copyrights to original unRAR code are owned by Alexander Roshal
txt for more information about license
exe        - Command line version
  7z
sfx        - SFX module (Windows version)
  7zCon
txt   - License information
  readme
txt    - This file
  History
chm     - User's Manual in HTML Help format
  descript
ion  - Description for files

  Lang\en",
Windows Media Player,"










",,
Windows Defender,,"










",
Realtek,,"






",
HPPrintScanDoctor,"






",,
,,,
InstallShield Installation Information,,,"




"
OpenSSL-Win64,"




",,
Windows Kits,"










What is Notepad++?
******************

Notepad++ is a free (as in ""free speech"" and also as in ""free beer"") source code editor and Notepad replacement (https://npp-user-manual
org/docs/other-resources/#notepad-replacement) that supports several programming languages and natural languages
 Running in the MS Windows environment, its use is governed by GPL (GNU General Public License)
 Due to its poor performance, I began an investigation to find another solution (in C++ instead of in Java) in September 2003
 On the 25th November 2003 it was made available on Sourceforge, hence the birth of Notepad++

From the zip/7z package:
	Unzip all the files into a directory you want then launch ""notepad++
exe""


	
Web sites:
***********

Notepad++ official site:
	https://notepad-plus-plus
org/

Notepad++ project site:
	https://github
org/

Notepad++ forum:
	https://community
notepad-plus-plus
org/


Author:
*******

Don Ho <don
h@free
com/gup4win/wingup)

WinGUp has been built for Notepad++'s need, but keep its functionality generic for being able to be used on any Windows application
 With new built-in Plugins Admin in Notepad++, a more specific updater for Notepad++ is necessary



What is WinGup?
---------------

WinGup is a Generic Updater running under Windows environment

The aim of WinGup is to provide a ready to use and configurable updater
which downloads a update package then installs it
 By using cURL library
and TinyXml module, WinGup is capable to deal with http protocol and process XML data




Who will need it?
-----------------

Being LGPLed, WinGup can be integrated in both commercial (or close source) and open source project

So if you run a commercial or open a source project under MS Windows and you release your program at
regular intervals, then you may need WinGup to notice your users the new update




What do you need to use it?
---------------------------

A url to provide the update information to your WinGup and an another url location
to store your update package, that's it!



How is WinGup easy to use?
--------------------------

All you have to do is point WinGup to your url update page (by modifying gup
xml), 
then work on your pointed url update page (see getDownLoadUrl
php comes with the release)
to make sure it responds to your WinGup with the correct xml data
 Open VS2017 Native Tool Command for 32/64 bits
bat`
    2
 compile cURL by using one of the following commands, according the mode and archetecture of wingup you want to build

       - x64 release: `nmake /f Makefile
vc mode=dll vc=15 RTLIBCFG=static MACHINE=x64`
       - x64 debug: `nmake /f Makefile
vc mode=dll vc=15 RTLIBCFG=static DEBUG=yes MACHINE=x64`
       - x86 release: `nmake /f Makefile
vc mode=dll vc=15 RTLIBCFG=static MACHINE=x86`
       - x86 debug: `nmake /f Makefile
vc mode=dll vc=15 RTLIBCFG=static DEBUG=yes MACHINE=x86`
       - ARM64 release: `nmake /f Makefile
vc mode=dll vc=15 RTLIBCFG=static MACHINE=ARM64`

 * Step 2: Open [`vcproj\GUP
sln`](https://github
sln) with VS2017

 
 * Step 3: Build WinGup like a normal Visual Studio project



To whom should you say ""thank you""?
-----------------------------------

Don HO
<don
fr>


","


Why another source code editor?
*******************************

The company I worked for used JEXT (another open source code editor in Java) as the production tool
 I found Scintilla and built a prototype
 This solution was not accepted
 I removed the specific part and continued to develop it in my leisure time



How to install:
***************

From the installer:
	Just follow the installation instructions
com/notepad-plus-plus/notepad-plus-plus/

Notepad++ user manual:
	https://npp-user-manual
org/author/


What is WinGup for Notepad++?
--------------------------

This project is the fork of [WinGUp](https://github



Why WinGup?
-----------

Originally WinGup was made for the need of Notepad++ (a generic source code editor under MS Windows)

So here it is, with LGPL license to have no (almost not) restriction for integration in any project




How does it work?
-----------------

WinGup can be launched by your program or manually
 It reads from a xml configuration file
for getting the current version of your program and url where WinGup gets update information,
checks the url (with given current version) to get the update package location,
downloads the update package, then run the update package (it should be a msi or an exe) in question




How to build it?
----------------

 * Step 1: You have to build cURL before building WinGup:

    1
 go to curl winbuild directory:<br/>
       `cd <your wingup source path>\curl\winbuild`
    3
com/gup4win/wingup/blob/master/vcproj/GUP
h@free","fr>
	https://notepad-plus-plus
 Hence this fork from the original WinGUp

During its conception, the idea came up in my mind: if it can fit Notepad++, it can fit for any Windows program
 If you want to build for ARM, open a cmd, and run the following command:<br/>
    `C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsamd64_arm64"
Microsoft SDKs,"










What is Notepad++?
******************

Notepad++ is a free (as in ""free speech"" and also as in ""free beer"") source code editor and Notepad replacement (https://npp-user-manual
org/docs/other-resources/#notepad-replacement) that supports several programming languages and natural languages
 Running in the MS Windows environment, its use is governed by GPL (GNU General Public License)



Why another source code editor?
*******************************

The company I worked for used JEXT (another open source code editor in Java) as the production tool
 On the 25th November 2003 it was made available on Sourceforge, hence the birth of Notepad++



How to install:
***************

From the installer:
	Just follow the installation instructions

From the zip/7z package:
	Unzip all the files into a directory you want then launch ""notepad++


	
Web sites:
***********

Notepad++ official site:
	https://notepad-plus-plus
com/notepad-plus-plus/notepad-plus-plus/

Notepad++ user manual:
	https://npp-user-manual
org/

Notepad++ forum:
	https://community
org/


Author:
*******

Don Ho <don
fr>
	https://notepad-plus-plus
org/author/


What is WinGup for Notepad++?
--------------------------

This project is the fork of [WinGUp](https://github
com/gup4win/wingup)

The aim of WinGup is to provide a ready to use and configurable updater
which downloads a update package then installs it
 By using cURL library
and TinyXml module, WinGup is capable to deal with http protocol and process XML data

So here it is, with LGPL license to have no (almost not) restriction for integration in any project




How does it work?
-----------------

WinGup can be launched by your program or manually
 It reads from a xml configuration file
for getting the current version of your program and url where WinGup gets update information,
checks the url (with given current version) to get the update package location,
downloads the update package, then run the update package (it should be a msi or an exe) in question




Who will need it?
-----------------

Being LGPLed, WinGup can be integrated in both commercial (or close source) and open source project

So if you run a commercial or open a source project under MS Windows and you release your program at
regular intervals, then you may need WinGup to notice your users the new update
xml), 
then work on your pointed url update page (see getDownLoadUrl
php comes with the release)
to make sure it responds to your WinGup with the correct xml data




How to build it?
----------------

 * Step 1: You have to build cURL before building WinGup:

    1
 Open VS2017 Native Tool Command for 32/64 bits
 If you want to build for ARM, open a cmd, and run the following command:<br/>
    `C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsamd64_arm64
bat`
    2
 go to curl winbuild directory:<br/>
       `cd <your wingup source path>\curl\winbuild`
    3
vc mode=dll vc=15 RTLIBCFG=static DEBUG=yes MACHINE=x86`
       - ARM64 release: `nmake /f Makefile
vc mode=dll vc=15 RTLIBCFG=static MACHINE=ARM64`

 * Step 2: Open [`vcproj\GUP
sln) with VS2017

 
 * Step 3: Build WinGup like a normal Visual Studio project



To whom should you say ""thank you""?
-----------------------------------

Don HO
<don
h@free
fr>


"," Due to its poor performance, I began an investigation to find another solution (in C++ instead of in Java) in September 2003
 I found Scintilla and built a prototype
 I removed the specific part and continued to develop it in my leisure time
exe""
notepad-plus-plus

WinGUp has been built for Notepad++'s need, but keep its functionality generic for being able to be used on any Windows application
 With new built-in Plugins Admin in Notepad++, a more specific updater for Notepad++ is necessary
 Hence this fork from the original WinGUp



What is WinGup?
---------------

WinGup is a Generic Updater running under Windows environment



Why WinGup?
-----------

Originally WinGup was made for the need of Notepad++ (a generic source code editor under MS Windows)

During its conception, the idea came up in my mind: if it can fit Notepad++, it can fit for any Windows program




What do you need to use it?
---------------------------

A url to provide the update information to your WinGup and an another url location
to store your update package, that's it!



How is WinGup easy to use?
--------------------------

All you have to do is point WinGup to your url update page (by modifying gup
 compile cURL by using one of the following commands, according the mode and archetecture of wingup you want to build

       - x64 release: `nmake /f Makefile
vc mode=dll vc=15 RTLIBCFG=static MACHINE=x64`
       - x64 debug: `nmake /f Makefile
vc mode=dll vc=15 RTLIBCFG=static DEBUG=yes MACHINE=x64`
       - x86 release: `nmake /f Makefile
sln`](https://github
com/gup4win/wingup/blob/master/vcproj/GUP"," This solution was not accepted
org/

Notepad++ project site:
	https://github
h@free
vc mode=dll vc=15 RTLIBCFG=static MACHINE=x86`
       - x86 debug: `nmake /f Makefile"
Examsoft,"
        ZLIB version 1
3 for AS400 installation instructions

I) From an AS400 *SAVF file:

1)      Unpacking archive to an AS400 save file

On the AS400:

_       Create the ZLIB AS400 library:

        CRTLIB LIB(ZLIB) TYPE(PROD) TEXT('ZLIB compression API library')

_       Create a work save file, for example:

                CRTSAVF FILE(ZLIB/ZLIBSAVF)

On a PC connected to the target AS400:

_       Unpack the save file image to a PC file ""ZLIBSAVF""
_       Upload this file into the save file on the AS400, for example
                using ftp in BINARY mode


_       Compile this member with:

        CRTCLPGM PGM(ZLIB/COMPILE) SRCFILE(ZLIB/TOOLS) SRCMBR(COMPILE)


4)      Compile and generate the service program:

_       This can now be done by executing:

        CALL PGM(ZLIB/COMPILE)



II) From the original source distribution:

1)      On the AS400, create the source library:

        CRTLIB LIB(ZLIB) TYPE(PROD) TEXT('ZLIB compression API library')

2)      Create the source files:

        CRTSRCPF FILE(ZLIB/SOURCES) RCDLEN(112) TEXT('ZLIB library modules')
        CRTSRCPF FILE(ZLIB/H)       RCDLEN(112) TEXT('ZLIB library includes')
        CRTSRCPF FILE(ZLIB/TOOLS)   RCDLEN(112) TEXT('ZLIB library control utilities')

3)      From the machine hosting the distribution files, upload them (with
                FTP in text mode, for example) according to the following table:

    Original    AS400   AS400    AS400 AS400
    file        file    member   type  description
                SOURCES                Original ZLIB C subprogram sources
    adler32
c           ADLER32  C     ZLIB - Compute the Adler-32 checksum of a dta strm
    compress
c          COMPRESS C     ZLIB - Compress a memory buffer
    crc32
c             CRC32    C     ZLIB - Compute the CRC-32 of a data stream
    deflate
c           DEFLATE  C     ZLIB - Compress data using the deflation algorithm
    gzio
gz files
    infback
 literals & length/distance pairs
    inflate
c           INFLATE  C     ZLIB - Interface to inflate modules
    inftrees
c             TREES    C     ZLIB - Output deflated data using Huffman coding
    uncompr
c             ZUTIL    C     ZLIB - Target dependent utility functions
                H                      Original ZLIB C and ILE/RPG include files
    crc32
h           DEFLATE  C     ZLIB - Internal compression state
    inffast
h           INFFAST  C     ZLIB - Header to use inffast
c
    inffixed
h          INFFIXED C     ZLIB - Table for decoding fixed codes
    inflate
h           INFLATE  C     ZLIB - Internal inflate state definitions
    inftrees
h          INFTREES C     ZLIB - Header to use inftrees
c
    trees
h             TREES    C     ZLIB - Created automatically with -DGEN_TREES_H
    zconf
INC RPGLE ZLIB - Compression library ILE RPG user interface
    zutil
txt    README   TXT   Installation instructions

4)      Continue as in I)3)





Notes:  For AS400 ILE RPG programmers, a /copy member defining the ZLIB
                API prototypes for ILE RPG can be found in ZLIB/H(ZLIB

                Please read comments in this member for more information


        Always open zipped files in binary mode



                        ZLib for Ada thick binding (ZLib
Ada)
                        Release 1
Ada is a thick binding interface to the popular ZLib data
compression library, available at http://www
gzip

It provides Ada-style access to the ZLib C library
Read generic routine have a initialization requirement
  for Read_Last parameter now


- Added Is_Open routines to ZLib and ZLib
Streams packages


- Add pragma Assert to check Stream_Element is 8 bit


- Fix definition of ULong (changed to unsigned_long), fix regression on 64 bits
  computers
 Patch provided by Pascal Obry


- Add Status_Error exception definition


- Add pragma Assertion that Ada
Stream_Element size is 8 bit



        How to build ZLib
Ada
 Make the directory of ZLib
Ada sources current and
issue the command:

  gnatmake test -largs -L<directory where libz
a is> -lz

Or use the GNAT project file build for GNAT 3
gpr -L<directory where libz
Ada under Aonix ObjectAda for Win32 7
2
2

1
 Make a project with all *
 Rename libz
a to z
lib

4
 Add the library z
lib to the project
 Build the executable using test



        How to use ZLib
Ada

The source files test
adb are small demo programs that show
the main functionality of ZLib
Ada


The routines from the package specifications are commented



Homepage: http://zlib-ada
org>, Steve Sangwine <sjs@essex
ac


The original ZLib unit is Copyright (c) 1997,99 Borland Corp
0
  There are a series of bugs
and security problems associated with that old zlib version, and
we recommend the users to update their ZLib unit
1


- The new Z_RLE strategy has its corresponding symbolic constant



Suggestions for improvements
============================

Currently, the ZLib unit provides only a limited wrapper around
the zlib library, and much of the original zlib functionality is
missing
zip
Checksum
  interface
  Raw deflate streams are used
  in the ZIP file format


- The ability to read and write gzip streams, used in the GZIP
  file format, and normally produced by the gzip program



--
Cosmin Truta <cosmint@cs
ro>


This directory contains a 
Net wrapper class library for the ZLib1
dll

The wrapper includes support for inflating/deflating memory buffers, 

Net streaming wrappers for the gz streams part of zlib, and wrappers
for the checksum parts of zlib

readme
txt            - This file

DotZLib
chm           - Class library documentation
DotZLib
sln           - Microsoft Visual Studio 2003 solution file

DotZLib\*
cs          - Source files for the class library

Unit tests:
-----------
The file DotZLib/UnitTests
cs contains unit tests for use with NUnit 2
1 or higher



Build instructions:
-------------------

1
 Using Visual Studio
Net and build from there
dll)
   will be found 
/DotZLib/bin/release or 
/DotZLib/bin/debug, depending on 
   you are building the release or debug version of the library
cs for instructions on how to include unit tests in the
   build
 Using NAnt:
   Open a command prompt with access to the build environment and run nant
   in the same directory as the DotZLib
build file

   You can define 2 properties on the nant command-line to control the build:
   debug={true|false} to toggle between release/debug builds (default=true)

   Output file (DotZLib
/DotZLib/bin/debug, depending on whether you are building the release 
   or debug version of the library



---------------------------------
Copyright (c) Henrik Ravn 2004

Use, modification and distribution are subject to the Boost Software License, Version 1
org/LICENSE_1_0
txt)




Summary
-------
This directory contains ASM implementations of the functions
longest_match() and inflate_fast(), for 64 bits x86 (both AMD64 and Intel EM64t),
for use with Microsoft Macro Assembler (x64) for AMD64 and Microsoft C++ 64 bits
asm and inffas8664
 Include inffas8664
obj as object to link
bat with Microsoft Macro Assembler (x64) for AMD64 (ml64
com/whdc/devtools/ddk/default
mspx for low price)



Summary
-------
This directory contains ASM implementations of the functions
longest_match() and inflate_fast()



Use instructions
----------------
Copy these files into the zlib source directory, then run the
appropriate makefile, as suggested below



Build instructions
------------------
* With Microsoft C and MASM:
nmake -f win32/Makefile
msc LOC=""-DASMV -DASMINF"" OBJA=""gvmat32c
obj inffas32
bor LOCAL_ZLIB=""-DASMV -DASMINF"" OBJA=""gvmat32c
obj gvmat32
obj inffas32
obj"" OBJPA=""+gvmat32c
obj+gvmat32
obj""




This directory contains a Pascal (Delphi, Kylix) interface to the
zlib data compression library
mak     makefile for Borland C++
example
pas     usage example of zlib
zlibpas
pas     the Pascal interface to zlib
readme
txt      this file


Compatibility notes
===================

- Although the name ""zlib"" would have been more normal for the
  zlibpas unit, this name is already taken by Borland's ZLib unit

  It would have been more appropriate for that unit to have a name
  like ""ZStreams"", or something similar


- The C and zlib-supplied types int, uInt, long, uLong, etc
), to avoid namespace pollution
  Even if there is a 32-bit Cardinal type, there is no
  real need for unsigned int in zlib under a 32-bit environment


- Except for the callbacks, the zlib function interfaces are
  assuming the calling convention normally used in Pascal
  (__pascal for DOS and Windows16, __fastcall for Windows32)

  Since the cdecl keyword is used, the old Turbo Pascal does
  not work with this interface
  Besides,
    gzprintf(gzFile file, const char *format, 





Legal issues
============

The zlibpas interface is:
  Copyright (C) 1995-2003 Jean-loup Gailly and Mark Adler

  Copyright (C) 1998 by Bob Dellaca


The example program is:
  Copyright (C) 1995-2003 by Jean-loup Gailly

  Copyright (C) 1998,1999,2000 by Jacques Nomssi Nzali

  Copyright (C) 2003 by Cosmin Truta


  This software is provided 'as-is', without any express or implied
  warranty
  In no event will the author be held liable for any damages
  arising from the use of this software
 The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software
 This notice may not be removed or altered from any source distribution





Building instructions for the DLL versions of Zlib 1
0/7
1, and Visual C++ 


You don't need to build these projects yourself
winimage
com/zLibDll

More information can be found at this site



Build instructions for Visual Studio 7
winimage
com/zLibDll/crtdll
zip
  Unzip crtdll
zip to extract crtdll
lib on contrib\vstudio\vc7
x
  (Visual Studio 
Net 2002 or 2003)


Build instructions for Visual Studio 2005 (32 bits or 64 bits)
--------------------------------------------------------------
- Uncompress current zlib, including all contrib/* files
- For 32 bits only: download the crtdll library from
    http://www
winimage
zip
  Unzip crtdll
sln with Microsoft Visual C++ 8

Using you can get the free 64 bits compiler from Platform SDK, 
  which is NOT a beta, and compile using the Visual studio 2005 IDE
see http://www
dll in your application, you must define the
  macro ZLIB_WINAPI when compiling your application's source files



Additional notes
----------------
- This DLL, named zlibwapi
dll, is compatible to the old zlib
dll built
  by Gilles Vollant from the zlib 1
1
x sources, and distributed at
    http://www
winimage
 If your application needs that
  particular build of zlib
dll, you can rename zlibwapi
dll to zlib
dll


- The new DLL was renamed because there exist several incompatible
  versions of zlib
dll on the Internet


- There is also an official DLL build of zlib, named zlib1
dll


- There used to be a ZLIB_DLL macro in zlib 1
1
 To avoid compatibility problems, do
  not define it here
com





Microsoft Developer Studio Project Files, Format Version 6

Copyright (C) 2004 Cosmin Truta

For conditions of distribution and use, see copyright notice in zlib
h
dll        DLL build (debug version)
* Win32_DLL_ASM_Release\zlib1
lib         static build (debug version)
* Win32_LIB_ASM_Release\zlib
lib     static build using ASM code (debug version)


For more information regarding the DLL builds, please see the DLL FAQ
in 
\

\win32\DLL_FAQ
txt



To build and test:

1) On the main menu, select ""File | Open Workspace""
dsw""


2) Select ""Build | Set Active Configuration""


3) Select ""Build | Clean""


4) Select ""Build | Build 

 (F7)""
  Ignore warning messages about
   not being able to find certain include files (e
 alloc
h)


5) If you built one of the sample programs (example or minigzip),
   select ""Build | Execute 



   Make note of the configuration names used in your project

   Usually, these names are ""Win32 Release"" and ""Win32 Debug""


'""

   For each configuration of your project:
   3
1) Choose the zlib configuration you wish to use

   3
3) Set the new zlib configuration name to the name used by
        the configuration from the current iteration


4) Select ""Build | Set Active Configuration""

   Choose the configuration you wish to build

 (F7)""


6) If you built an executable program, select
   ""Build | Execute 


 (Ctrl+F5)""



Note:

To build the ASM-enabled code, you need Microsoft Assembler
(ML
EXE)
  You can get it by downloading and installing the
latest Processor Pack for Visual C++ 6
























","2



2)      Populating the ZLIB AS400 source library

On the AS400:

_       Extract the saved objects into the ZLIB AS400 library using:

RSTOBJ OBJ(*ALL) SAVLIB(ZLIB) DEV(*SAVF) SAVF(ZLIB/ZLIBSAVF) RSTLIB(ZLIB)


3)      Customize installation:

_       Edit CL member ZLIB/TOOLS(COMPILE) and change parameters if needed,
                according to the comments
c              GZIO     C     ZLIB - IO on 
c           INFBACK  C     ZLIB - Inflate using a callback interface
    inffast
c           INFFAST  C     ZLIB - Fast proc
c          INFTREES C     ZLIB - Generate Huffman trees for efficient decode
    trees
h              ZLIB     C     ZLIB - Compression library C user interface
    as400/zlib
clp   COMPILE  CLP   Compile sources & generate service program
    as400/readme
INC)


        Remember that most foreign textual data are ASCII coded: this
                implementation does not handle conversion from/to ASCII, so
                text data code conversions must be done explicitely
org/zlib/



        Here are the main changes since ZLib
Ada 1
2:

- Attension: ZLib
 It is a bit incompartible with previous version,
  but extends functionality, we could use new parameters Allow_Read_Some and
  Flush now


- Fix extraction to buffer with exact known decompressed size
 Error reported by
  Steve Sangwine
Streams
Ada under GNAT

You should have the ZLib library already build on your computer, before
building ZLib
a is>


        How to build ZLib
ads and *
adb files from the distribution

2
 Build the libz
a library from the ZLib C sources

3
lib library from the ObjectAda distribution to the project

6
adb as a main procedure
adb and read
sourceforge
net/
Author: Dmitriy Anisimkov <anisimkov@yahoo
com>

Contributors: Pascal Obry <pascal@obry
uk>






Overview
========

This directory contains an update to the ZLib interface unit,
distributed by Borland as a Delphi supplemental component
,
and is based on zlib version 1
4



Summary of modifications
========================

- Improved makefile, adapted to zlib version 1
2


- Some field types from TZStreamRec are changed from Integer to
  Longint, for consistency with the zlib
h header, and for 64-bit
  readiness
  As a result,
  the original C sources of zlib can be compiled out of the box,
  and linked to the ZLib unit
  Handling compressed file formats like ZIP/GZIP or PNG
cannot be implemented without having this functionality

Applications that handle these formats are either using their own,
duplicated code, or not using the ZLib unit at all
util


- The ability to select a different compression strategy, useful
  to PNG and MNG image compression, and to multimedia compression
  in general
  Besides the compression level

    TCompressionLevel = (clNone, clFastest, clDefault, clMax);

  which, in fact, could have used the 'z' prefix and avoided
  TColor-like symbols

    TCompressionLevel = (zcNone, zcFastest, zcDefault, zcMax);

  there could be a compression strategy

    TCompressionStrategy = (zsDefault, zsFiltered, zsHuffmanOnly, zsRle);

- ZIP and GZIP stream handling via TStreams
 See DotZLib/UnitTests
cs for examples
txt       - License file
build         - NAnt build file
DotZLib
sln in VS
 Output file (DotZLib

   
2

   nunit={true|false} to include or esclude unit tests (default=true)
dll) will be found in either 
/DotZLib/bin/release 
   or 


   Examples: 
     nant -D:debug=false -D:nunit=false
       will build a release mode version of the library without unit tests
 
(See accompanying file LICENSE_1_0
boost


gvmat64
asm is written by Gilles Vollant (2005), by using Brian Raiter 686/32 bits
   assembly optimized version from Jean-loup Gailly original longest_match function

inffasx64
c were written by Chris Anderson, by optimizing
   original function from Mark Adler

Use instructions
----------------
Copy these files into the zlib source directory


define ASMV and ASMINF in your project
c in your source tree,
and inffasx64
obj and gvmat64



Build instructions
------------------
run bld_64
exe)

ml64
exe is given with Visual Studio 2005, Windows 2003 server DDK

You can get Windows 2003 server DDK with ml64 and cl for AMD64 from 
  http://www
microsoft
obj gvmat32
obj""

* With Borland C and TASM:
make -f win32/Makefile
obj+inffas32



Directory listing
=================

zlibd32

  This is somehow unfortunate, because that unit is not a genuine
  interface to the full-fledged zlib functionality, but a suite of
  class wrappers around zlib streams
  Other essential features,
  such as checksums, are missing
 are
  translated directly into Pascal types of similar sizes (Integer,
  LongInt, etc
  In particular,
  there is no conversion of unsigned int into a Pascal unsigned
  integer
  The Word type is non-portable and has the same size
  (16 bits) both in a 16-bit and in a 32-bit environment, unlike
  Integer
)
  cannot be translated into Pascal
 If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required

  2
 Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software
3
========================================================

This directory contains projects that build zlib and minizip using
Microsoft Visual C++ 7
 You can download the
binaries from:
  http://www
x (32 bits)
--------------------------------------------------
- Uncompress current zlib, including all contrib/* files
- Download the crtdll library from
    http://www
sln with Microsoft Visual C++ 7
com/zLibDll/crtdll
zip to extract crtdll
lib on contrib\vstudio\vc8

- Open contrib\vstudio\vc8\zlibvc
0

Build instructions for Visual Studio 2005 64 bits, PSDK compiler
----------------------------------------------------------------
at the time of writing this text file, Visual Studio 2005 (and 
  Microsoft Visual C++ 8
0) is on the beta 2 stage
winimage
com/misc/sdk64onvs2005/ for instruction

- Uncompress current zlib, including all contrib/* files
- start Visual Studio 2005 from a platform SDK command prompt, using
  the /useenv switch
- Open contrib\vstudio\vc8\zlibvc
sln with Microsoft Visual C++ 8
com/zLibDll
  It uses the WINAPI calling convention for the exported functions, and
  includes the minizip functionality
 See the file
  win32\DLL_FAQ
x, but now this symbol
  has a slightly different effect



Gilles Vollant
info@winimage
00 for zlib


Copyright (C) 2000-2004 Simon-Pierre Cadieux



This project builds the zlib binaries as follows:

* Win32_DLL_Release\zlib1
dll   DLL build using ASM code
* Win32_DLL_ASM_Debug\zlib1d
dll    DLL build using ASM code (debug version)
* Win32_LIB_Release\zlib
lib        static build
* Win32_LIB_Debug\zlibd
lib    static build using ASM code
* Win32_LIB_ASM_Debug\zlibd


   Open ""zlib
g
 (Ctrl+F5)""



To use:

1) Select ""Project | Settings (Alt+F7)""

   Right-click on the root item ""Workspace '

   Switch on the checkbox ""Dependency of:"", and select the name
   of your project
  Open ""zlib


3) Select ""Build | Configurations""

   3


5) Select ""Build | Build 

0","c           UNCOMPR  C     ZLIB - Decompress a memory buffer
    zutil
h             CRC32    C     ZLIB - CRC32 tables
    deflate
h             ZCONF    C     ZLIB - Compression library configuration
    zlib
inc      ZLIB
h             ZUTIL    C     ZLIB - Internal interface and configuration
                TOOLS                  Building source software & AS/400 README
    as400/bndsrc        BNDSRC         Entry point exportation list
    as400/compile
3

ZLib
15 or later:

  gnatmake -Pzlib

5
 Add the libc


- The zlib_version constant is updated


- The allocation and deallocation functions and function types
  (TAlloc, TFree, zlibAllocMem and zlibFreeMem) are now cdecl,
  and _malloc and _free are added as C RTL stubs


Here are a few suggestions:

- Checksum class wrappers around adler32() and crc32(), similar
  to the Java classes that implement the java


- The ability to read and write raw deflate streams, without the
  zlib stream header and trailer
ubbcluj


Directory structure:
--------------------

LICENSE_1_0

To include unit tests in the build, define nunit before building
Net 2003:
   Open DotZLib
 Check 
   DotZLib/UnitTests

   Also the target clean will remove binaries

     nant
       will build a debug version of the library with unit tests 
     nant clean
       will remove all previously built files
0
txt or copy at http://www


- The gz* function interfaces are not translated, to avoid
  interfacing problems with the C runtime library

  Copyright (C) 2003 by Cosmin Truta


  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1

  3
2

- Open contrib\vstudio\vc7\zlibvc
0


Important
---------
- To use zlibwapi
 This one
  is exporting the functions using the CDECL convention
txt found in this zlib distribution
dll       DLL build
* Win32_DLL_Debug\zlib1d

   Choose the configuration you wish to build



2) In the Workspace window, select the ""FileView"" tab

   Select ""Insert Project into Workspace""
dsp""
2) Click on ""Add"""
GnuWin32,"









































__Build Status:__ [![Build status](https://build
org/project
html?projectId=Pester&tab=projectOverview&guest=1)

Pester 3


---

Pester
=======
Pester provides a framework for **running unit tests to execute and validate PowerShell commands from within PowerShell**
 This can include functions, cmdlets, modules and scripts
 Pester can be run in *ad-hoc* style in a console or **it can be integrated into the build scripts of a continuous integration (CI) system**


**Pester also contains a powerful set of mocking functions** in which tests mimic any command functionality within the tested PowerShell code


A Pester Test
-------------
BuildChanges
ps1

```powershell

function Build ($version) {
  write-host ""A build was run for version: $version""
}

function BuildIfChanged {
  $thisVersion=Get-Version
  $nextVersion=Get-NextVersion
  if($thisVersion -ne $nextVersion) {Build $nextVersion}
  return $nextVersion
}
```

BuildChanges
ps1

```powershell
$here = Split-Path -Parent $MyInvocation
MyCommand
MyCommand
', '
1}
    Mock Get-NextVersion {return 1
2}

    $result = BuildIfChanged

      It ""Builds the next version"" {
          Assert-VerifiableMocks
      }
      It ""Returns the next version number"" {
          $result | Should Be 1
1}
    Mock Get-NextVersion -MockWith {return 1
1}
      }
    }
}
```

Running Tests
-------------
    C:\PS> Invoke-Pester

This will run all tests inside of files named `*
Tests
ps1` recursively from the current directory and print a report of all failing and passing test results to the console
 If you want to run multiple tests, you can pass a string array into the `-TestName` parameter, similar to the following example:

    C:\PS> Invoke-Pester -TestName BuildIfChanged, BaconShouldBeCrispy

Continuous Integration with Pester
-----------------------------------

Pester integrates well with almost any build automation solution
  Currently, this parameter allows you to produce NUnit-style XML output, which any modern CI solution should be able to read

- The `-PassThru` parameter can be used if your CI solution supports running PowerShell code directly
  After Pester finishes running, check the FailedCount property on the object to determine whether any tests failed, and take action from there

- The `-EnableExit` switch causes Pester to exit the current PowerShell session with an error code
 This error code will be the number of failed tests; 0 indicates success


As an example, there is also a file named `Pester
  By wrapping a call to `Invoke-Pester` in a batch file, and making sure that batch file returns a non-zero exit code if any tests fail, you can still use Pester even when limited to cmd


Whenever possible, it's better to run Invoke-Pester directly (either in an interactive PowerShell session, or using CI software that supports running PowerShell steps in jobs)
 This is the method that we test and support in our releases
powershellmagazine
com/pester/Pester/wiki)
* [Google Discussion Group](https://groups
google
com/forum/?fromgroups#!forum/pester)
* `C:\PS> Import-Module 
com/PowerShell/PowerShell-Tests)
* Note: The following two links were for Pester v1
0
  The syntax shown, particularly for performing assertions with Should, is no longer applicable to later versions of Pester

    * [powershell-bdd-testing-pester-screencast](http://scottmuc
com/blog/development/powershell-bdd-testing-pester-screencast/)
    * [pester-bdd-for-the-system-administrator](http://scottmuc","powershell
org/guestAuth/app/rest/builds/buildType:(id:Pester_TestPester)/statusIcon)](https://build
powershell
0 has been released!  To see a list of changes in this version, refer to the [What's New in Pester 3
0?](https://github
com/pester/Pester/wiki/What's-New-in-Pester-3
 Pester consists of a simple set of functions that expose a testing domain-specific language (DSL) for isolating, running, evaluating and reporting the results of PowerShell commands


Pester tests can execute any command or script that is accessible to a Pester test file
Tests
Path) -replace '\
Tests\
 ""$here\$sut""

Describe ""BuildIfChanged"" {
  Context ""When there are changes"" {
    Mock Get-Version {return 1
2}
    Mock Build {} -Verifiable -ParameterFilter {$version -eq 1
1}
    Mock Build {}

    $result = BuildIfChanged

      It ""Should not build the next version"" {
          Assert-MockCalled Build -Times 0 -ParameterFilter {$version -eq 1


    C:\PS> Invoke-Pester -TestName BuildIfChanged

You can also run specific tests by using the `-TestName` parameter of the `Invoke-Pester` command
  There are several options for this integration:

- The `-OutputFile` parameter allows you to export data about the test execution
bat` in the `bin` folder which shows how you might integrate with a CI solution that does not support running PowerShell directly
exe commands in your CI jobs


For Further Learning:
-----------------------------------
* [Getting started with Pester](http://www
powershellmagazine
com/2014/03/12/get-started-with-pester-powershell-unit-testing-framework/)
* [Testing your scripts with Pester, Assertions and more](http://www
com/2014/03/27/testing-your-powershell-scripts-with-pester-assertions-and-more/)
* [Pester Wiki](https://github
/pester
 [See the PowerShell-Tests repository
](https://github
com/blog/development/pester-bdd-for-the-system-administrator/)








","0) Wiki page
Path
$sut = (Split-Path -Leaf $MyInvocation
'

2
      }
    }
  Context ""When there are no changes"" {
    Mock Get-Version -MockWith {return 1
 The above example runs all tests with a `Describe` block named `BuildIfChanged`
psm1; Get-Help about_pester`
* Microsoft's PowerShell test suite itself is being converted into Pester tests"
Google,"org/guestAuth/app/rest/builds/buildType:(id:Pester_TestPester)/statusIcon)](https://build
powershell
0 has been released!  To see a list of changes in this version, refer to the [What's New in Pester 3
0?](https://github
com/pester/Pester/wiki/What's-New-in-Pester-3
0) Wiki page


---

Pester
=======
Pester provides a framework for **running unit tests to execute and validate PowerShell commands from within PowerShell**


Pester tests can execute any command or script that is accessible to a Pester test file
 This can include functions, cmdlets, modules and scripts


**Pester also contains a powerful set of mocking functions** in which tests mimic any command functionality within the tested PowerShell code
ps1

```powershell

function Build ($version) {
  write-host ""A build was run for version: $version""
}

function BuildIfChanged {
  $thisVersion=Get-Version
  $nextVersion=Get-NextVersion
  if($thisVersion -ne $nextVersion) {Build $nextVersion}
  return $nextVersion
}
```

BuildChanges
MyCommand
Path
$sut = (Split-Path -Leaf $MyInvocation
MyCommand
Tests\
'

1}
    Mock Get-NextVersion {return 1
2}
    Mock Build {} -Verifiable -ParameterFilter {$version -eq 1
1}
    Mock Get-NextVersion -MockWith {return 1
1}
      }
    }
}
```

Running Tests
-------------
    C:\PS> Invoke-Pester

This will run all tests inside of files named `*
ps1` recursively from the current directory and print a report of all failing and passing test results to the console


    C:\PS> Invoke-Pester -TestName BuildIfChanged

You can also run specific tests by using the `-TestName` parameter of the `Invoke-Pester` command
 The above example runs all tests with a `Describe` block named `BuildIfChanged`
  There are several options for this integration:

- The `-OutputFile` parameter allows you to export data about the test execution
  Currently, this parameter allows you to produce NUnit-style XML output, which any modern CI solution should be able to read

- The `-EnableExit` switch causes Pester to exit the current PowerShell session with an error code


As an example, there is also a file named `Pester
bat` in the `bin` folder which shows how you might integrate with a CI solution that does not support running PowerShell directly
  By wrapping a call to `Invoke-Pester` in a batch file, and making sure that batch file returns a non-zero exit code if any tests fail, you can still use Pester even when limited to cmd
exe commands in your CI jobs


Whenever possible, it's better to run Invoke-Pester directly (either in an interactive PowerShell session, or using CI software that supports running PowerShell steps in jobs)
 This is the method that we test and support in our releases
powershellmagazine
powershellmagazine
com/pester/Pester/wiki)
* [Google Discussion Group](https://groups
com/PowerShell/PowerShell-Tests)
* Note: The following two links were for Pester v1

    * [powershell-bdd-testing-pester-screencast](http://scottmuc
com/blog/development/powershell-bdd-testing-pester-screencast/)
    * [pester-bdd-for-the-system-administrator](http://scottmuc","









































__Build Status:__ [![Build status](https://build
powershell
html?projectId=Pester&tab=projectOverview&guest=1)

Pester 3
 Pester can be run in *ad-hoc* style in a console or **it can be integrated into the build scripts of a continuous integration (CI) system**


A Pester Test
-------------
BuildChanges
Path) -replace '\
', '
2}

    $result = BuildIfChanged

      It ""Builds the next version"" {
          Assert-VerifiableMocks
      }
      It ""Returns the next version number"" {
          $result | Should Be 1
2
      }
    }
  Context ""When there are no changes"" {
    Mock Get-Version -MockWith {return 1
Tests
 If you want to run multiple tests, you can pass a string array into the `-TestName` parameter, similar to the following example:

    C:\PS> Invoke-Pester -TestName BuildIfChanged, BaconShouldBeCrispy

Continuous Integration with Pester
-----------------------------------

Pester integrates well with almost any build automation solution
  After Pester finishes running, check the FailedCount property on the object to determine whether any tests failed, and take action from there
 This error code will be the number of failed tests; 0 indicates success


For Further Learning:
-----------------------------------
* [Getting started with Pester](http://www
com/2014/03/12/get-started-with-pester-powershell-unit-testing-framework/)
* [Testing your scripts with Pester, Assertions and more](http://www
com/2014/03/27/testing-your-powershell-scripts-with-pester-assertions-and-more/)
* [Pester Wiki](https://github
com/forum/?fromgroups#!forum/pester)
* `C:\PS> Import-Module 
psm1; Get-Help about_pester`
* Microsoft's PowerShell test suite itself is being converted into Pester tests
 [See the PowerShell-Tests repository
](https://github
0
  The syntax shown, particularly for performing assertions with Should, is no longer applicable to later versions of Pester
com/blog/development/pester-bdd-for-the-system-administrator/)








","org/project
 Pester consists of a simple set of functions that expose a testing domain-specific language (DSL) for isolating, running, evaluating and reporting the results of PowerShell commands
Tests
ps1

```powershell
$here = Split-Path -Parent $MyInvocation
 ""$here\$sut""

Describe ""BuildIfChanged"" {
  Context ""When there are changes"" {
    Mock Get-Version {return 1
1}
    Mock Build {}

    $result = BuildIfChanged

      It ""Should not build the next version"" {
          Assert-MockCalled Build -Times 0 -ParameterFilter {$version -eq 1

- The `-PassThru` parameter can be used if your CI solution supports running PowerShell code directly
google
/pester"
WindowsPowerShell,"









































__Build Status:__ [![Build status](https://build
powershell
org/guestAuth/app/rest/builds/buildType:(id:Pester_TestPester)/statusIcon)](https://build
powershell
org/project
html?projectId=Pester&tab=projectOverview&guest=1)

Pester 3
0 has been released!  To see a list of changes in this version, refer to the [What's New in Pester 3
0?](https://github


---

Pester
=======
Pester provides a framework for **running unit tests to execute and validate PowerShell commands from within PowerShell**
 Pester consists of a simple set of functions that expose a testing domain-specific language (DSL) for isolating, running, evaluating and reporting the results of PowerShell commands
 Pester can be run in *ad-hoc* style in a console or **it can be integrated into the build scripts of a continuous integration (CI) system**


**Pester also contains a powerful set of mocking functions** in which tests mimic any command functionality within the tested PowerShell code
Tests
MyCommand
Path
$sut = (Split-Path -Leaf $MyInvocation
MyCommand
Tests\
'

 ""$here\$sut""

Describe ""BuildIfChanged"" {
  Context ""When there are changes"" {
    Mock Get-Version {return 1
2}

    $result = BuildIfChanged

      It ""Builds the next version"" {
          Assert-VerifiableMocks
      }
      It ""Returns the next version number"" {
          $result | Should Be 1
2
      }
    }
  Context ""When there are no changes"" {
    Mock Get-Version -MockWith {return 1
1}
    Mock Get-NextVersion -MockWith {return 1
1}
      }
    }
}
```

Running Tests
-------------
    C:\PS> Invoke-Pester

This will run all tests inside of files named `*


    C:\PS> Invoke-Pester -TestName BuildIfChanged

You can also run specific tests by using the `-TestName` parameter of the `Invoke-Pester` command
  After Pester finishes running, check the FailedCount property on the object to determine whether any tests failed, and take action from there
exe commands in your CI jobs


Whenever possible, it's better to run Invoke-Pester directly (either in an interactive PowerShell session, or using CI software that supports running PowerShell steps in jobs)
 This is the method that we test and support in our releases


For Further Learning:
-----------------------------------
* [Getting started with Pester](http://www
powershellmagazine
com/2014/03/12/get-started-with-pester-powershell-unit-testing-framework/)
* [Testing your scripts with Pester, Assertions and more](http://www
com/2014/03/27/testing-your-powershell-scripts-with-pester-assertions-and-more/)
* [Pester Wiki](https://github
com/pester/Pester/wiki)
* [Google Discussion Group](https://groups
google
/pester
psm1; Get-Help about_pester`
* Microsoft's PowerShell test suite itself is being converted into Pester tests
 [See the PowerShell-Tests repository
](https://github
com/PowerShell/PowerShell-Tests)
* Note: The following two links were for Pester v1
0
  The syntax shown, particularly for performing assertions with Should, is no longer applicable to later versions of Pester

    * [powershell-bdd-testing-pester-screencast](http://scottmuc
com/blog/development/powershell-bdd-testing-pester-screencast/)
    * [pester-bdd-for-the-system-administrator](http://scottmuc","com/pester/Pester/wiki/What's-New-in-Pester-3
0) Wiki page


Pester tests can execute any command or script that is accessible to a Pester test file
 This can include functions, cmdlets, modules and scripts


A Pester Test
-------------
BuildChanges
ps1

```powershell
$here = Split-Path -Parent $MyInvocation
Path) -replace '\
', '
1}
    Mock Get-NextVersion {return 1
2}
    Mock Build {} -Verifiable -ParameterFilter {$version -eq 1
1}
    Mock Build {}

    $result = BuildIfChanged

      It ""Should not build the next version"" {
          Assert-MockCalled Build -Times 0 -ParameterFilter {$version -eq 1
Tests
ps1` recursively from the current directory and print a report of all failing and passing test results to the console
 The above example runs all tests with a `Describe` block named `BuildIfChanged`
  There are several options for this integration:

- The `-OutputFile` parameter allows you to export data about the test execution
  Currently, this parameter allows you to produce NUnit-style XML output, which any modern CI solution should be able to read

- The `-EnableExit` switch causes Pester to exit the current PowerShell session with an error code


As an example, there is also a file named `Pester
bat` in the `bin` folder which shows how you might integrate with a CI solution that does not support running PowerShell directly
  By wrapping a call to `Invoke-Pester` in a batch file, and making sure that batch file returns a non-zero exit code if any tests fail, you can still use Pester even when limited to cmd
powershellmagazine
com/forum/?fromgroups#!forum/pester)
* `C:\PS> Import-Module 
com/blog/development/pester-bdd-for-the-system-administrator/)











","ps1

```powershell

function Build ($version) {
  write-host ""A build was run for version: $version""
}

function BuildIfChanged {
  $thisVersion=Get-Version
  $nextVersion=Get-NextVersion
  if($thisVersion -ne $nextVersion) {Build $nextVersion}
  return $nextVersion
}
```

BuildChanges
 If you want to run multiple tests, you can pass a string array into the `-TestName` parameter, similar to the following example:

    C:\PS> Invoke-Pester -TestName BuildIfChanged, BaconShouldBeCrispy

Continuous Integration with Pester
-----------------------------------

Pester integrates well with almost any build automation solution

- The `-PassThru` parameter can be used if your CI solution supports running PowerShell code directly
 This error code will be the number of failed tests; 0 indicates success"
PCHealthCheck,"

































































",,
Microsoft Visual Studio,"




































































































































",,
Common Files,"NET LIBRARY 
These license terms are an agreement between Microsoft Corporation (or based on where you live, one of its affiliates) and you
 They apply to the software named above, which includes the media on which you received it, if any
 The terms also apply to any Microsoft
  * updates,
  * supplements,
  * Internet-based services, and
  * support services
for this software, unless other terms accompany those items
 If so, those terms apply
 IF YOU DO NOT ACCEPT THEM, DO NOT USE THE SOFTWARE

IF YOU COMPLY WITH THESE LICENSE TERMS, YOU HAVE THE PERPETUAL RIGHTS BELOW
 You may install and use any number of copies of the software to design, develop and test your programs

  b
 Notices, if any, for the third party program are included for your information only

2
 DATA
 The software may collect information about you and your use of the software, and send that to Microsoft
 Microsoft may use this information to improve our products and services
com/fwlink/?LinkId=528096
 Your use of the software operates as your consent to these practices
 DISTRIBUTABLE CODE
 The software is comprised of Distributable Code

    i

      * Third Party Distribution
 You may permit distributors of your programs to copy and distribute the Distributable Code as part of those programs
 For any Distributable Code you distribute, you must
      * add significant primary functionality to it in your programs;
      * require distributors and external end users to agree to terms that protect it at least as much as this agreement;
      * display your valid copyright notice on your programs; and
      * indemnify, defend, and hold harmless Microsoft from any claims, including attorneys' fees, related to the distribution or use of your programs

    iii
 Distribution Restrictions
 An Excluded License is one that requires, as a condition of use, modification or distribution, that
      * the code be disclosed or distributed in source code form; or
      * others have the right to modify it

4
 SCOPE OF LICENSE
 Microsoft reserves all other rights
 Unless applicable law gives you more rights despite this limitation, you may use the software only as expressly permitted in this agreement
 In doing so, you must comply with any technical limitations in the software that only allow you to use it in certain ways
 You may not
  * work around any technical limitations in the software;
  * reverse engineer, decompile or disassemble the software, except and only to the extent that applicable law expressly permits, despite this limitation;
  * publish the software for others to copy;
  * rent, lease or lend the software;
  * transfer the software or this agreement to any third party; or
  * use the software for commercial software hosting services

5
 BACKUP COPY
 You may make one backup copy of the software
 You may use it only to reinstall the software
 Any person that has valid access to your computer or internal network may copy and use the documentation for your internal, reference purposes
 You must comply with all domestic and international export laws and regulations that apply to the software
 These laws include restrictions on destinations, end users and end use
 For additional information, see www
microsoft
com/exporting

8
 Because this software is ""as is,"" we may not provide support services for it
 ENTIRE AGREEMENT

10
 APPLICABLE LAW

  a
 United States
 The laws of the state where you live govern all other claims, including claims under state consumer protection laws, unfair competition laws, and in tort
 If you acquired the software in any other country, the laws of that country apply

11
 LEGAL EFFECT
 This agreement describes certain legal rights
 You may have other rights under the laws of your country
 You may also have rights with respect to the party from whom you acquired the software

12
 DISCLAIMER OF WARRANTY
 THE SOFTWARE IS LICENSED ""AS-IS
"" YOU BEAR THE RISK OF USING IT
 YOU MAY HAVE ADDITIONAL CONSUMER RIGHTS OR STATUTORY GUARANTEES UNDER YOUR LOCAL LAWS WHICH THIS AGREEMENT CANNOT CHANGE

FOR AUSTRALIA - YOU HAVE STATUTORY GUARANTEES UNDER THE AUSTRALIAN CONSUMER LAW AND NOTHING IN THESE TERMS IS INTENDED TO AFFECT THOSE RIGHTS
 LIMITATION ON AND EXCLUSION OF REMEDIES AND DAMAGES
S
00
 YOU CANNOT RECOVER ANY OTHER DAMAGES, INCLUDING CONSEQUENTIAL, LOST PROFITS, SPECIAL, INDIRECT OR INCIDENTAL DAMAGES

This limitation applies to
  * anything related to the software, services, content (including code) on third party Internet sites, or third party programs; and
  * claims for breach of contract, breach of warranty, guarantee or condition, strict liability, negligence, or other tort to the extent permitted by applicable law

It also applies even if Microsoft knew or should have known about the possibility of the damages
 Toute utilisation de ce logiciel est Ã  votre seule risque et pÃ©ril
 Microsoft n'accorde aucune autre garantie expresse
 Vous pouvez bÃ©nÃ©ficier de droits additionnels en vertu du droit local sur la protection des consommateurs, que ce contrat ne peut modifier
 Vous ne pouvez prÃ©tendre Ã  aucune indemnisation pour les autres dommages, y compris les dommages spÃ©ciaux, indirects ou accessoires et pertes de bÃ©nÃ©fices

Elle s'applique Ã©galement, mÃªme si Microsoft connaissait ou devrait connaÃ®tre l'Ã©ventualitÃ© d'un tel dommage

EFFET JURIDIQUE
 Le prÃ©sent contrat dÃ©crit certains droits juridiques
 Vous pourriez avoir d'autres droits prÃ©vus par les lois de votre pays
 Le prÃ©sent contrat ne modifie pas les droits que vous confÃ¨rent les lois de votre pays si celles-ci ne le permettent pas","



MICROSOFT SOFTWARE LICENSE TERMS
MICROSOFT 
 Please read them

BY USING THE SOFTWARE, YOU ACCEPT THESE TERMS

1
 INSTALLATION AND USE RIGHTS
 
  a
 Installation and Use
 Third Party Programs
 The software may include third party programs that Microsoft, not the third party, licenses to you under this agreement
 You can learn more about data collection and use in the help documentation and the privacy statement at https://go

3
 
      * You may copy and distribute the object code form of the software

    ii
 Distribution Requirements
 The software is licensed, not sold

6
 DOCUMENTATION
 EXPORT RESTRICTIONS
 The software is subject to United States export laws and regulations

9
 This agreement, and the terms for supplements, updates, Internet-based services and support services that you use, are the entire agreement for the software and support services

  b
 Outside the United States
 This agreement does not change your rights under the laws of your country if the laws of your country do not permit it to do so
 MICROSOFT GIVES NO EXPRESS WARRANTIES, GUARANTEES OR CONDITIONS
 TO THE EXTENT PERMITTED UNDER YOUR LOCAL LAWS, MICROSOFT EXCLUDES THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT

13
 YOU CAN RECOVER FROM MICROSOFT AND ITS SUPPLIERS ONLY DIRECT DAMAGES UP TO U
 $5
 The above limitation or exclusion may not apply to you because your country may not allow the exclusion or limitation of incidental, consequential or other damages

Remarque : Ce logiciel Ã©tant distribuÃ© au QuÃ©bec, Canada, certaines des clauses dans ce contrat sont fournies ci-dessous en franÃ§ais

EXONÃ‰RATION DE GARANTIE
 La ou elles sont permises par le droit locale, les garanties implicites de qualitÃ© marchande, d'adÃ©quation Ã  un usage particulier et d'absence de contrefaÃ§on sont exclues

LIMITATION DES DOMMAGES-INTÃ‰RÃŠTS ET EXCLUSION DE RESPONSABILITÃ‰ POUR LES DOMMAGES
 Vous pouvez obtenir de Microsoft et de ses fournisseurs une indemnisation en cas de dommages directs uniquement Ã  hauteur de 5,00 $ US
 Si votre pays n'autorise pas l'exclusion ou la limitation de responsabilitÃ© pour les dommages indirects, accessoires ou de quelque nature que ce soit, il se peut que la limitation ou l'exclusion ci-dessus ne s'appliquera pas Ã  votre Ã©gard





































","microsoft
 ADDITIONAL LICENSING REQUIREMENTS AND/OR USE RIGHTS

  a
 ""Distributable Code"" is code that you are permitted to distribute in programs you develop if you comply with the terms below
 Right to Use and Distribute
 You may not
      * alter any copyright, trademark or patent notice in the Distributable Code;
      * use Microsoft's trademarks in your programs' names or in a way that suggests your programs come from or are endorsed by Microsoft;
      * include Distributable Code in malicious, deceptive or unlawful programs; or
      * modify or distribute the source code of any Distributable Code so that any part of it becomes subject to an Excluded License
 This agreement only gives you some rights to use the software

7
 SUPPORT SERVICES
 If you acquired the software in the United States, Washington state law governs the interpretation of this agreement and applies to claims for breach of it, regardless of conflict of laws principles

Please note: As this software is distributed in Quebec, Canada, some of the clauses in this agreement are provided below in French
 Le logiciel visÃ© par une licence est offert Â« tel quel Â»

Cette limitation concerne :
  * tout ce qui est reliÃ© au logiciel, aux services ou au contenu (y compris le code) figurant sur des sites Internet tiers ou dans des programmes tiers ; et
  * les rÃ©clamations au titre de violation de contrat ou de garantie, ou au titre de responsabilitÃ© stricte, de nÃ©gligence ou d'une autre faute dans la limite autorisÃ©e par la loi en vigueur"
Reference Assemblies,"



MICROSOFT SOFTWARE LICENSE TERMS
MICROSOFT 
 Please read them
 They apply to the software named above, which includes the media on which you received it, if any
 The terms also apply to any Microsoft
  * updates,
  * supplements,
  * Internet-based services, and
  * support services
for this software, unless other terms accompany those items
 If so, those terms apply
 IF YOU DO NOT ACCEPT THEM, DO NOT USE THE SOFTWARE

IF YOU COMPLY WITH THESE LICENSE TERMS, YOU HAVE THE PERPETUAL RIGHTS BELOW

1
 INSTALLATION AND USE RIGHTS
 Installation and Use
 The software may include third party programs that Microsoft, not the third party, licenses to you under this agreement
 The software may collect information about you and your use of the software, and send that to Microsoft
 You can learn more about data collection and use in the help documentation and the privacy statement at https://go
 Your use of the software operates as your consent to these practices
 The software is comprised of Distributable Code
 ""Distributable Code"" is code that you are permitted to distribute in programs you develop if you comply with the terms below

    i
 Right to Use and Distribute
 
      * You may copy and distribute the object code form of the software

      * Third Party Distribution
 You may permit distributors of your programs to copy and distribute the Distributable Code as part of those programs
 Distribution Requirements
 For any Distributable Code you distribute, you must
      * add significant primary functionality to it in your programs;
      * require distributors and external end users to agree to terms that protect it at least as much as this agreement;
      * display your valid copyright notice on your programs; and
      * indemnify, defend, and hold harmless Microsoft from any claims, including attorneys' fees, related to the distribution or use of your programs

    iii
 Distribution Restrictions
 You may not
      * alter any copyright, trademark or patent notice in the Distributable Code;
      * use Microsoft's trademarks in your programs' names or in a way that suggests your programs come from or are endorsed by Microsoft;
      * include Distributable Code in malicious, deceptive or unlawful programs; or
      * modify or distribute the source code of any Distributable Code so that any part of it becomes subject to an Excluded License
 An Excluded License is one that requires, as a condition of use, modification or distribution, that
      * the code be disclosed or distributed in source code form; or
      * others have the right to modify it
 This agreement only gives you some rights to use the software
 Microsoft reserves all other rights
 Unless applicable law gives you more rights despite this limitation, you may use the software only as expressly permitted in this agreement
 In doing so, you must comply with any technical limitations in the software that only allow you to use it in certain ways

5
 BACKUP COPY
 You may make one backup copy of the software
 You may use it only to reinstall the software

6
 DOCUMENTATION

7
 You must comply with all domestic and international export laws and regulations that apply to the software
microsoft
com/exporting
 Because this software is ""as is,"" we may not provide support services for it
 ENTIRE AGREEMENT
 This agreement, and the terms for supplements, updates, Internet-based services and support services that you use, are the entire agreement for the software and support services

  a
 The laws of the state where you live govern all other claims, including claims under state consumer protection laws, unfair competition laws, and in tort

  b
 If you acquired the software in any other country, the laws of that country apply

11
 You may also have rights with respect to the party from whom you acquired the software
 This agreement does not change your rights under the laws of your country if the laws of your country do not permit it to do so
 DISCLAIMER OF WARRANTY
 MICROSOFT GIVES NO EXPRESS WARRANTIES, GUARANTEES OR CONDITIONS
 TO THE EXTENT PERMITTED UNDER YOUR LOCAL LAWS, MICROSOFT EXCLUDES THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT

FOR AUSTRALIA - YOU HAVE STATUTORY GUARANTEES UNDER THE AUSTRALIAN CONSUMER LAW AND NOTHING IN THESE TERMS IS INTENDED TO AFFECT THOSE RIGHTS

13
 LIMITATION ON AND EXCLUSION OF REMEDIES AND DAMAGES
 YOU CAN RECOVER FROM MICROSOFT AND ITS SUPPLIERS ONLY DIRECT DAMAGES UP TO U
S
 $5

This limitation applies to
  * anything related to the software, services, content (including code) on third party Internet sites, or third party programs; and
  * claims for breach of contract, breach of warranty, guarantee or condition, strict liability, negligence, or other tort to the extent permitted by applicable law
 The above limitation or exclusion may not apply to you because your country may not allow the exclusion or limitation of incidental, consequential or other damages
 Toute utilisation de ce logiciel est Ã  votre seule risque et pÃ©ril
 Vous pouvez bÃ©nÃ©ficier de droits additionnels en vertu du droit local sur la protection des consommateurs, que ce contrat ne peut modifier

LIMITATION DES DOMMAGES-INTÃ‰RÃŠTS ET EXCLUSION DE RESPONSABILITÃ‰ POUR LES DOMMAGES

Elle s'applique Ã©galement, mÃªme si Microsoft connaissait ou devrait connaÃ®tre l'Ã©ventualitÃ© d'un tel dommage
 Si votre pays n'autorise pas l'exclusion ou la limitation de responsabilitÃ© pour les dommages indirects, accessoires ou de quelque nature que ce soit, il se peut que la limitation ou l'exclusion ci-dessus ne s'appliquera pas Ã  votre Ã©gard

EFFET JURIDIQUE
 Le prÃ©sent contrat dÃ©crit certains droits juridiques
 Vous pourriez avoir d'autres droits prÃ©vus par les lois de votre pays





































","
BY USING THE SOFTWARE, YOU ACCEPT THESE TERMS
 
  a
 You may install and use any number of copies of the software to design, develop and test your programs

  b
 Third Party Programs
 Notices, if any, for the third party program are included for your information only

2
 DATA
 Microsoft may use this information to improve our products and services
microsoft
com/fwlink/?LinkId=528096

3

  a
 DISTRIBUTABLE CODE

    ii

4
 SCOPE OF LICENSE
 The software is licensed, not sold
 You may not
  * work around any technical limitations in the software;
  * reverse engineer, decompile or disassemble the software, except and only to the extent that applicable law expressly permits, despite this limitation;
  * publish the software for others to copy;
  * rent, lease or lend the software;
  * transfer the software or this agreement to any third party; or
  * use the software for commercial software hosting services
 Any person that has valid access to your computer or internal network may copy and use the documentation for your internal, reference purposes
 The software is subject to United States export laws and regulations
 These laws include restrictions on destinations, end users and end use

8
 SUPPORT SERVICES

9
 APPLICABLE LAW
 United States
 If you acquired the software in the United States, Washington state law governs the interpretation of this agreement and applies to claims for breach of it, regardless of conflict of laws principles
 Outside the United States
 LEGAL EFFECT

12
 THE SOFTWARE IS LICENSED ""AS-IS
"" YOU BEAR THE RISK OF USING IT
00

It also applies even if Microsoft knew or should have known about the possibility of the damages

Please note: As this software is distributed in Quebec, Canada, some of the clauses in this agreement are provided below in French

Remarque : Ce logiciel Ã©tant distribuÃ© au QuÃ©bec, Canada, certaines des clauses dans ce contrat sont fournies ci-dessous en franÃ§ais

EXONÃ‰RATION DE GARANTIE
 Microsoft n'accorde aucune autre garantie expresse
 Vous pouvez obtenir de Microsoft et de ses fournisseurs une indemnisation en cas de dommages directs uniquement Ã  hauteur de 5,00 $ US

Cette limitation concerne :
  * tout ce qui est reliÃ© au logiciel, aux services ou au contenu (y compris le code) figurant sur des sites Internet tiers ou dans des programmes tiers ; et
  * les rÃ©clamations au titre de violation de contrat ou de garantie, ou au titre de responsabilitÃ© stricte, de nÃ©gligence ou d'une autre faute dans la limite autorisÃ©e par la loi en vigueur
 Le prÃ©sent contrat ne modifie pas les droits que vous confÃ¨rent les lois de votre pays si celles-ci ne le permettent pas","NET LIBRARY 
These license terms are an agreement between Microsoft Corporation (or based on where you live, one of its affiliates) and you
 ADDITIONAL LICENSING REQUIREMENTS AND/OR USE RIGHTS
 EXPORT RESTRICTIONS
 For additional information, see www

10
 This agreement describes certain legal rights
 You may have other rights under the laws of your country
 YOU MAY HAVE ADDITIONAL CONSUMER RIGHTS OR STATUTORY GUARANTEES UNDER YOUR LOCAL LAWS WHICH THIS AGREEMENT CANNOT CHANGE
 YOU CANNOT RECOVER ANY OTHER DAMAGES, INCLUDING CONSEQUENTIAL, LOST PROFITS, SPECIAL, INDIRECT OR INCIDENTAL DAMAGES
 Le logiciel visÃ© par une licence est offert Â« tel quel Â»
 La ou elles sont permises par le droit locale, les garanties implicites de qualitÃ© marchande, d'adÃ©quation Ã  un usage particulier et d'absence de contrefaÃ§on sont exclues
 Vous ne pouvez prÃ©tendre Ã  aucune indemnisation pour les autres dommages, y compris les dommages spÃ©ciaux, indirects ou accessoires et pertes de bÃ©nÃ©fices"
dotnet,,"






















































































































































































",
NVIDIA Corporation,"






















































































































































































",,
Microsoft OneDrive,"






























































































































",,
Microsoft,"






























































































































",,
HP,"






























































































































































































































































































































































































",,
Microsoft Office,"gnu
org/licenses/lgpl-2
 HISTORY OF THE SOFTWARE
==========================

Python was created in the early 1990s by Guido van Rossum at Stichting
Mathematisch Centrum (CWI, see http://www
cnri
reston
us)
in Reston, Virginia where he released several versions of the
software


In May 2000, Guido and the Python core development team moved to
BeOpen
zope
  In 2001, the Python Software
Foundation (PSF, see http://www
python
org/psf/) was formed, a
non-profit organization created specifically to own Python-related
Intellectual Property
  Zope Corporation is a sponsoring member of
the PSF


All Python releases are Open Source (see http://www
opensource
  Historically, most, but not all, Python
releases have also been GPL-compatible; the table below summarizes
the various releases
0 thru 1
3 thru 1
5
2  1
2         1995-1999   CNRI        yes
    1
6             1
6         2000        BeOpen
6
1           1
6         2001        CNRI        yes (2)
    2
1             2
6
0
1           2
6
1   2001        PSF         yes
    2
1
1           2
1+2
1
1
2           2
1
1       2002        PSF         yes
    2
3           2
2       2002        PSF         yes
    2
2
1           2
2         2002        PSF         yes
    2
2           2
2
1       2002        PSF         yes
    2
3           2
2
2       2003        PSF         yes
    2
2
2       2002-2003   PSF         yes
    2
1           2
3         2002-2003   PSF         yes
    2
2           2
3
3
3
4           2
3       2004        PSF         yes
    2
3
5           2
4       2005        PSF         yes
    2
4             2
4
4
2           2
4
3           2
2       2006        PSF         yes
    2
4           2
4
3       2006        PSF         yes
    2
5             2
4         2006        PSF         yes
    2
5
1           2
5
1       2008        PSF         yes
    2
3           2
5
2       2008        PSF         yes
    2
6             2
5         2008        PSF         yes
    2
6
6
1       2009        PSF         yes
    2
3           2
6
6
6
3       2009        PSF         yes
    2
5           2
6
7             2
6         2010        PSF         yes

Footnotes:

(1) GPL-compatible doesn't mean that we're distributing Python under
    the GPL
  All Python licenses, unlike the GPL, let you distribute
    a modified version without making your changes open source
  The
    GPL-compatible licenses make it possible to combine Python with
    other software that is released under the GPL; the others don't
1 is not GPL-compatible,
    because its license has a choice of law clause
  According to
    CNRI, however, Stallman's lawyer has told CNRI's lawyer that 1
1
    is ""not incompatible"" with the GPL



B


2
 Subject to the terms and conditions of this License Agreement, PSF hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python alone or in any derivative version,
provided, however, that PSF's License Agreement and PSF's notice of copyright,
i
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS


6


7


8
 By copying, installing or otherwise using Python, Licensee
agrees to be bound by the terms and conditions of this License
Agreement



BEOPEN
COM LICENSE AGREEMENT FOR PYTHON 2


2


3
  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED


4


5
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions


6
  As an exception, the ""BeOpen Python"" logos available at
http://www
pythonlabs
html may be used according to the
permissions granted on that web page


7



CNRI LICENSE AGREEMENT FOR PYTHON 1
6
1
---------------------------------------

1
6


2
 Subject to the terms and conditions of this License Agreement, CNRI
hereby grants Licensee a nonexclusive, royalty-free, world-wide
license to reproduce, analyze, test, perform and/or display publicly,
prepare derivative works, distribute, and otherwise use Python 1
6
1
alone or in any derivative version, provided, however, that CNRI's
License Agreement and CNRI's notice of copyright, i
e
6
  Alternately, in lieu of CNRI's License
Agreement, Licensee may substitute the following text (omitting the
quotes): ""Python 1
1 may be located on the Internet using the following
unique, persistent identifier (known as a handle): 1895
22/1013
22/1013""


3
1 or any part thereof, and wants to make
the derivative work available to others as provided herein, then
Licensee hereby agrees to include in any such work a brief summary of
the changes made to Python 1
6


4
 CNRI is making Python 1
6
1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1
6
1,
OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF


6
 This License Agreement shall be governed by the federal
intellectual property law of the United States, including without
limitation the federal copyright law, and, to the extent such
U
S

Notwithstanding the foregoing, with regard to derivative works based
on Python 1
1 that incorporate non-separable material that was
previously distributed under the GNU General Public License (GPL), the
law of the Commonwealth of Virginia shall govern this License
Agreement only as to issues arising under or with respect to
Paragraphs 4, 5, and 7 of this License Agreement
  This
License Agreement does not grant permission to use CNRI trademarks or
trade name in a trademark sense to endorse or promote products or
services of Licensee, or any third party


8


        ACCEPT


CWI LICENSE AGREEMENT FOR PYTHON 0
0 THROUGH 1


Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Stichting Mathematisch
Centrum or CWI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission


STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE



Additional Conditions for this Windows binary build
---------------------------------------------------

This program is linked with and uses Microsoft Distributable Code,
copyrighted by Microsoft Corporation
 The Microsoft Distributable Code
includes the following files:

msvcr90
dll
msvcm90
dll

If you further distribute programs that include the Microsoft
Distributable Code, you must comply with the restrictions on
distribution specified by Microsoft


Redistribution of the Windows binary build of the Python interpreter
complies with this agreement, provided that you do not:

- alter any copyright, trademark or patent notice in Microsoft's
Distributable Code;

- use Microsoft's trademarks in your programs' names or in a way that
suggests your programs come from or are endorsed by Microsoft;

- distribute Microsoft's Distributable Code to run on a platform other
than Microsoft operating systems, run-time technologies or application
platforms; or

- include Microsoft Distributable Code in malicious, deceptive or
unlawful programs


These restrictions apply only to the Microsoft Distributable Code as
defined above, not to Python itself or any programs running on the
Python interpreter
  All
rights reserved


Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1
 Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer


2
 The origin of this software must not be misrepresented; you must 
   not claim that you wrote the original software
  If you use this 
   software in a product, an acknowledgment in the product 
   documentation would be appreciated but is not required
 Altered source versions must be plainly marked as such, and must
   not be misrepresented as being the original software


4
 The name of the author may not be used to endorse or promote 
   products derived from this software without specific prior written 
   permission


THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED
  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
org
bzip2/libbzip2 version 1
0
5 of 10 December 2007

--------------------------------------------------------------------------

This copy of Python includes a copy of Berkeley DB, which is licensed under the following terms:

/*-
 * $Id: LICENSE,v 12
9 2008/02/07 17:12:17 mark Exp $
 */

The following is the license that applies to this copy of the Berkeley DB
software
  For a license to use the Berkeley DB software under conditions
other than those described here, or to purchase support for this software,
please contact Oracle at berkeleydb-info_us@oracle


=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
/*
 * Copyright (c) 1990,2008 Oracle
  All rights reserved

 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1
 Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution
 Redistributions in any form must be accompanied by information on
 *    how to obtain complete source code for the DB software and any
 *    accompanying software that uses the DB software

 *
 * THIS SOFTWARE IS PROVIDED BY ORACLE ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
 * NON-INFRINGEMENT, ARE DISCLAIMED
  IN NO EVENT SHALL ORACLE BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
  All rights reserved
 Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer

 * 3
 Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission
  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE

 */
/*
 * Copyright (c) 1995, 1996
 *	The President and Fellows of Harvard University
  All rights reserved

 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1
 Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution

 * 3
 Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission

 *
 * THIS SOFTWARE IS PROVIDED BY HARVARD AND ITS CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED
  IN NO EVENT SHALL HARVARD OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE

 * 2
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution

 * 3
 Neither the name of the copyright holders nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission
 IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE
e

  See below for the actual license texts
 Actually both licenses are BSD-style
  Open Source licenses
 In case of any license issues related to OpenSSL
  please contact openssl-core@openssl
org


  OpenSSL License
  ---------------

/* ====================================================================
 * Copyright (c) 1998-2008 The OpenSSL Project

 *
 * 3
openssl
org/)""
 *
 * 4
 The names ""OpenSSL Toolkit"" and ""OpenSSL Project"" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission
org
 Products derived from this software may not be called ""OpenSSL""
 *    nor may ""OpenSSL"" appear in their names without prior written
 *    permission of the OpenSSL Project
openssl
org/)""
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED

 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft
com)
com)

 *
 */

 Original SSLeay License
 -----------------------

/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft

 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft
com)

 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to
  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc
, code; not just the SSL code

 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed

 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package

 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1

 * 2
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution

 * 3
com)""
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-)

 * 4
 If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    ""This product includes software written by Tim Hudson (tjh@cryptsoft

 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed
  i
 this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence
, Scriptics Corporation, ActiveState
Corporation and other parties
  The following terms apply to all files
associated with the software unless explicitly disclaimed in
individual files
 No written agreement,
license, or royalty fee is required for any of the authorized uses


IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY
DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE


THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT


GOVERNMENT USE: If you are acquiring this software on behalf of the
U
 government, the Government shall have only ""Restricted Rights""
in the software and related documentation as defined in the Federal 
Acquisition Regulations (FARs) in Clause 52
227
19 (c) (2)
 Government and others acting in its behalf
permission to use and distribute the software in accordance with the
terms specified in this license
 

This copy of Python includes a copy of Tk, which is licensed under the following terms:

This software is copyrighted by the Regents of the University of
California, Sun Microsystems, Inc
, and other parties
  The following
terms apply to all files associated with the software unless explicitly
disclaimed in individual files


The authors hereby grant permission to use, copy, modify, distribute,
and license this software and its documentation for any purpose, provided
that existing copyright notices are retained in all copies and that this
notice is included verbatim in any distributions
S
 government, the Government shall have only ""Restricted Rights""
in the software and related documentation as defined in the Federal 
Acquisition Regulations (FARs) in Clause 52
  If you
are acquiring the software on behalf of the Department of Defense, the
software shall be classified as ""Commercial Computer Software"" and the
Government shall have only ""Restricted Rights"" as defined in Clause
252
227-7013 (c) (1) of DFARs
  Notwithstanding the foregoing, the
authors grant the U
 Government and others acting in its behalf
permission to use and distribute the software in accordance with the
terms specified in this license

Copyright (c) 2004 ActiveState

This software is copyrighted by the above entities
and other parties
  The following terms apply to all files associated
with the software unless explicitly disclaimed in individual files


The authors hereby grant permission to use, copy, modify, distribute,
and license this software and its documentation for any purpose, provided
that existing copyright notices are retained in all copies and that this
notice is included verbatim in any distributions
 No written agreement,
license, or royalty fee is required for any of the authorized uses

Modifications to this software may be copyrighted by their authors
and need not follow the licensing terms described here, provided that
the new terms are clearly indicated on the first page of each file where
they apply


IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY
DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE


THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT
  THIS SOFTWARE
IS PROVIDED ON AN ""AS IS"" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS


GOVERNMENT USE: If you are acquiring this software on behalf of the
U
S
 government, the Government shall have only ""Restricted Rights""
in the software and related documentation as defined in the Federal 
Acquisition Regulations (FARs) in Clause 52
19 (c) (2)
227-7013 (c) (1) of DFARs
 Government and others acting in its behalf
permission to use and distribute the software in accordance with the
terms specified in this license
,
and other parties
 The original license terms of the Tcl/Tk software
distribution is included in the file docs/license


Parts of this software are based on the HTML Library software
copyrighted by Sun Microsystems, Inc
 The original license terms of
the HTML Library software distribution is included in the file
docs/license
html_lib
py files
 The idle_test
subdirectory should contain a test_xyy
 (For test modules, make
'xyz' lower case, and possibly shorten it
) Each file should start with the
something like the following template, with the blanks after after '
' and 'as',
and before and after '_' filled in

---
import unittest
from test
support import requires
import idlelib
TestCase):

    def test_(self):

if __name__ == '__main__':
    unittest


Once test_xyy is written, the following should go at the end of xyy

---
if __name__ == ""__main__"":
    import unittest
    unittest
test_', verbosity=2, exit=False)
---


2
support (test
test_support in 2
7)
 A
test is a gui test if it creates a Tk root or master object either directly
or indirectly by instantiating a tkinter or idle class
 For the benefit of
test processes that either have no graphical environment available or are not
allowed to use it, gui tests must be 'guarded' by ""requires('gui')"" in a
setUp function or method
 This will typically be setUpClass


To avoid interfering with other gui tests, all gui objects must be destroyed
and deleted by the end of the test
  If a widget, such as a Tk root, is created
in a setUpX function, destroy it in the corresponding tearDownX
  For module
and class attributes, also delete the widget
Tk()

    @classmethod
    def tearDownClass(cls):
        cls
root
destroy()
        del cls
requires('gui') causes the test(s) it guards to be skipped if any of
a few conditions are met:
 - The tests are being run by regrtest
py, and it was started without
   enabling the ""gui"" resource with the ""-u"" command line option

 - The tests are being run on Mac OSX in a process that cannot make a window
   manager connection
Tk cannot be successfully instantiated for some reason

 - test
support


Since non-gui tests always run, but gui tests only sometimes, tests of non-gui
operations should best avoid needing a gui
 Methods that make incidental use of
tkinter (tk) variables and messageboxes can do this by using the mock classes in
idle_test/mock_tk
py
 There is also a mock text that will handle some uses of the
tk Text widget



3
py and test_xyz
 In Idle, pressing F5 in an editor window with either loaded will run all
tests in the test_xyz file with the version of Python running Idle
  The test
report and any tracebacks will appear in the Shell window
 The options in these
""if __name__"" statements are appropriate for developers running (as opposed to
importing) either of the files during development: verbosity=2 lists all test
methods in the file; exit=False avoids a spurious sys
exit traceback that would
otherwise occur when running in Idle
py
idle start Idle and idlelib
)

python -m idlelib
xyz  # With the capitalization of the xyz module
python -m idlelib
idle_test
test_xyz

To run all idle_test/test_*
py tests, either interactively
('>>>', with unittest imported) or from a command line, use one of the
following
7, 'test ' (with the space) is 'test
regrtest ';
where present, -v and -ugui can be omitted
idle_test', verbosity=2, exit=False)
python -m unittest -v idlelib
idle_test
python -m test -v -ugui test_idle
python -m test
test_idle

The idle tests are 'discovered' by idlelib
idle_test
__init__
 The third command runs
unittest indirectly through regrtest
 The same happens when the entire test
suite is run with 'python -m test'
 Idle tests must not disturb the environment in a way that
makes other tests fail (issue 18081)
idle_test
test_xyz
Test_case
test_meth


IDLE is Python's Tkinter-based Integrated DeveLopment Environment


IDLE features a multi-window text editor with multiple undo, Python colorizing,
and many other capabilities, e
g
 smart indent, call tips, and autocompletion


The editor has comprehensive search functions, including searching through
multiple files


There is a Python Shell window which features colorizing and command recall


IDLE executes Python code in a separate process, which is restarted for each
Run (F5) initiated from an editor window
  The environment can also be 
restarted from the Shell window without restarting IDLE
  This connection
is not visible on any external interface and no data is sent to or received
from the Internet
)

It is possible to interrupt tightly looping user code, even on Windows


Applications which cannot support subprocesses and/or sockets can still run
IDLE in a single process


IDLE has an integrated debugger with stepping, persistent breakpoints, and call
stack visibility


There is a GUI configuration manager which makes it easy to select fonts,
colors, keybindings, and startup options


IDLE accepts command line arguments
  Try idle -h to see the options
python
org
  You can join at

http://mail
org/mailman/listinfo/idle-dev

















A
 HISTORY OF THE SOFTWARE
==========================

Python was created in the early 1990s by Guido van Rossum at Stichting
Mathematisch Centrum (CWI, see http://www
cwi
nl) in the Netherlands
as a successor of a language called ABC


In 1995, Guido continued his work on Python at the Corporation for
National Research Initiatives (CNRI, see http://www
reston
va
com)
python
  Zope Corporation is a sponsoring member of
the PSF


All Python releases are Open Source (see http://www
opensource
org for
the Open Source Definition)
  Historically, most, but not all, Python
releases have also been GPL-compatible; the table below summarizes
the various releases


    Release         Derived     Year        Owner       GPL-
                    from                                compatible? (1)

    0
9
2              1991-1995   CWI         yes
    1
3 thru 1
5
2         1995-1999   CNRI        yes
    1
com  no
    1
6
6         2001        CNRI        yes (2)
    2
0+1
0
1
1           2
0
1
1
3           2
1
2       2002        PSF         yes
    2
1
1       2001-now    PSF         yes

Footnotes:

(1) GPL-compatible doesn't mean that we're distributing Python under
    the GPL
  All Python licenses, unlike the GPL, let you distribute
    a modified version without making your changes open source


(2) According to Richard Stallman, 1
6
1 is not GPL-compatible,
    because its license has a choice of law clause
6
1
    is ""not incompatible"" with the GPL


Thanks to the many outside volunteers who have worked under Guido's
direction to make these releases possible



B
 Subject to the terms and conditions of this License Agreement, PSF hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python alone or in any derivative version,
provided, however, that PSF's License Agreement and PSF's notice of copyright,
i
e
, ""Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
2011, 2012, 2013, 2014 Python Software Foundation; All Rights Reserved"" are retained
in Python alone or in any derivative version prepared by Licensee


4
 PSF is making Python available to Licensee on an ""AS IS""
basis
  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED


5
 PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON,
OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF


7
  This License Agreement does not grant permission to use PSF
trademarks or trade name in a trademark sense to endorse or promote
products or services of Licensee, or any third party
 By copying, installing or otherwise using Python, Licensee
agrees to be bound by the terms and conditions of this License
Agreement
0
-------------------------------------------

BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1

1
 This LICENSE AGREEMENT is between BeOpen


2


3
  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED


4


5
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions


6
 This License Agreement shall be governed by and interpreted in all
respects by the law of the State of California, excluding conflict of
law provisions
  Nothing in this License Agreement shall be deemed to
create any relationship of agency, partnership, or joint venture
between BeOpen and Licensee
  As an exception, the ""BeOpen Python"" logos available at
http://www
com/logos
html may be used according to the
permissions granted on that web page
6
1
---------------------------------------

1
6
1 software in
source or binary form and its associated documentation


2
 Subject to the terms and conditions of this License Agreement, CNRI
hereby grants Licensee a nonexclusive, royalty-free, world-wide
license to reproduce, analyze, test, perform and/or display publicly,
prepare derivative works, distribute, and otherwise use Python 1
6
e
, ""Copyright (c)
1995-2001 Corporation for National Research Initiatives; All Rights
Reserved"" are retained in Python 1
1 alone or in any derivative
version prepared by Licensee
1 is made available subject to the terms and
conditions in CNRI's License Agreement
  This Agreement together with
Python 1
6
1 may be located on the Internet using the following
unique, persistent identifier (known as a handle): 1895
  This
Agreement may also be obtained from a proxy server on the Internet
using the following URL: http://hdl
22/1013""


3
6
6
1


4
6
1 available to Licensee on an ""AS IS""
basis
  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1
6
 CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
1
6
6
1,
OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF


6
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions


7
S
6
1 that incorporate non-separable material that was
previously distributed under the GNU General Public License (GPL), the
law of the Commonwealth of Virginia shall govern this License
Agreement only as to issues arising under or with respect to
Paragraphs 4, 5, and 7 of this License Agreement


8


        ACCEPT


CWI LICENSE AGREEMENT FOR PYTHON 0
9
2
--------------------------------------------------

Copyright (c) 1991 - 1995, Stichting Mathematisch Centrum Amsterdam,
The Netherlands
  All rights reserved


Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Stichting Mathematisch
Centrum or CWI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission


STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE


















































































































































































","














































































http://www
1
cwi
nl) in the Netherlands
as a successor of a language called ABC
  Guido remains Python's
principal author, although it includes many contributions from others
va
com to form the BeOpen PythonLabs team
  In October of the same
year, the PythonLabs team moved to Digital Creations (now Zope
Corporation, see http://www


    Release         Derived     Year        Owner       GPL-
                    from                                compatible? (1)

    0
2              1991-1995   CWI         yes
    1
5
2       2000        CNRI        no
    2
0             1
com  no
    1
0+1
1   2001        PSF         no
    2
0
1   2001        PSF         yes
    2
1       2001        PSF         yes
    2
1
2
3
1       2002-2003   PSF         yes
    2
3         2004        PSF         yes
    2
1           2
4         2005        PSF         yes
    2
1       2005        PSF         yes
    2
4
4
5         2007        PSF         yes
    2
5
5
1           2
6         2008        PSF         yes
    2
2           2
6
6
2       2009        PSF         yes
    2
4           2
6
4       2010        PSF         yes
    2


(2) According to Richard Stallman, 1
6


Thanks to the many outside volunteers who have worked under Guido's
direction to make these releases possible
 TERMS AND CONDITIONS FOR ACCESSING OR OTHERWISE USING PYTHON
===============================================================

PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2
--------------------------------------------

1
 This LICENSE AGREEMENT is between the Python Software Foundation
(""PSF""), and the Individual or Organization (""Licensee"") accessing and
otherwise using this software (""Python"") in source or binary form and
its associated documentation
e
, ""Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
Python Software Foundation; All Rights Reserved"" are retained in Python alone or
in any derivative version prepared by Licensee


3


4
 PSF is making Python available to Licensee on an ""AS IS""
basis
  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED
 Nothing in this License Agreement shall be deemed to create any
relationship of agency, partnership, or joint venture between PSF and
Licensee
  This License Agreement does not grant permission to use PSF
trademarks or trade name in a trademark sense to endorse or promote
products or services of Licensee, or any third party
0
-------------------------------------------

BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1

1
 This LICENSE AGREEMENT is between BeOpen
 Subject to the terms and conditions of this BeOpen Python License
Agreement, BeOpen hereby grants Licensee a non-exclusive,
royalty-free, world-wide license to reproduce, analyze, test, perform
and/or display publicly, prepare derivative works, distribute, and
otherwise use the Software alone or in any derivative version,
provided, however, that the BeOpen Python License is retained in the
Software, alone or in any derivative version prepared by Licensee
 BeOpen is making the Software available to Licensee on an ""AS IS""
basis
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS
 BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE
SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS
AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY
DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF
  Nothing in this License Agreement shall be deemed to
create any relationship of agency, partnership, or joint venture
between BeOpen and Licensee
  This License Agreement does not grant
permission to use BeOpen trademarks or trade names in a trademark
sense to endorse or promote products or services of Licensee, or any
third party
 By copying, installing or otherwise using the software, Licensee
agrees to be bound by the terms and conditions of this License
Agreement
 This LICENSE AGREEMENT is between the Corporation for National
Research Initiatives, having an office at 1895 Preston White Drive,
Reston, VA 20191 (""CNRI""), and the Individual or Organization
(""Licensee"") accessing and otherwise using Python 1
1 software in
source or binary form and its associated documentation
, ""Copyright (c)
1995-2001 Corporation for National Research Initiatives; All Rights
Reserved"" are retained in Python 1
1 alone or in any derivative
version prepared by Licensee
6
1 is made available subject to the terms and
conditions in CNRI's License Agreement
  This Agreement together with
Python 1
  This
Agreement may also be obtained from a proxy server on the Internet
using the following URL: http://hdl
handle
 In the event Licensee prepares a derivative work that is based on
or incorporates Python 1
6
1
6
1 available to Licensee on an ""AS IS""
basis
  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED


5
 CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
1
6
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions


7
 federal law does not apply, by the law of the Commonwealth of
Virginia, excluding Virginia's conflict of law provisions
  Nothing in this
License Agreement shall be deemed to create any relationship of
agency, partnership, or joint venture between CNRI and Licensee
 By clicking on the ""ACCEPT"" button where indicated, or by copying,
installing or otherwise using Python 1
1, Licensee agrees to be
bound by the terms and conditions of this License Agreement
9
2
--------------------------------------------------

Copyright (c) 1991 - 1995, Stichting Mathematisch Centrum Amsterdam,
The Netherlands
  All rights reserved
dll
msvcp90
 See Microsoft's documentation
(included in its developer tools and on its website at microsoft
com)
for specific details
 The redistribution of the Python interpreter and
libraries is governed by the Python Software License included with this
file, or by other licenses as marked



This copy of Python includes a copy of bzip2, which is licensed under the following terms:


--------------------------------------------------------------------------

This program, ""bzip2"", the associated library ""libbzip2"", and all
documentation, are copyright (C) 1996-2007 Julian R Seward


3


Julian Seward, jseward@bzip

 * 2

 * 3
  The source code
 *    must either be included in the distribution or be available for no
 *    more than the cost of distribution plus a nominal fee, and must be
 *    freely redistributable under reasonable conditions
  For an
 *    executable file, complete source code means the source code for all
 *    modules it contains
  It does not include source code for modules or
 *    files that typically accompany the major components of the operating
 *    system on which the executable file runs

 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1

 * 2
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution

 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED

 * 2

 */
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
/***
 * ASM: a very small and fast Java bytecode manipulation framework
 * Copyright (c) 2000-2005 INRIA, France Telecom
 * All rights reserved

 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1

 */

This copy of Python includes a copy of openssl, which is licensed under the following terms:


  LICENSE ISSUES
  ==============

  The OpenSSL toolkit stays under a dual license, i
 both the conditions of
  the OpenSSL License and the original SSLeay license apply to the toolkit

 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1
 Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer
 
 *
 * 2
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution
 All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    ""This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit
 For written permission, please contact
 *    openssl-core@openssl

 *
 * 5

 *
 * 6
  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE
  This product includes software written by Tim
 * Hudson (tjh@cryptsoft
com)
 * All rights reserved

 * The implementation was written so as to conform with Netscapes SSL
  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft
com)
 Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer
com)""
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED
  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE
e
]
 */


This copy of Python includes a copy of Tcl, which is licensed under the following terms:

This software is copyrighted by the Regents of the University of
California, Sun Microsystems, Inc

Modifications to this software may be copyrighted by their authors
and need not follow the licensing terms described here, provided that
the new terms are clearly indicated on the first page of each file where
they apply
S
  If you
are acquiring the software on behalf of the Department of Defense, the
software shall be classified as ""Commercial Computer Software"" and the
Government shall have only ""Restricted Rights"" as defined in Clause
252
227-7013 (c) (1) of DFARs
  Notwithstanding the foregoing, the
authors grant the U
S
 No written agreement,
license, or royalty fee is required for any of the authorized uses

Modifications to this software may be copyrighted by their authors
and need not follow the licensing terms described here, provided that
the new terms are clearly indicated on the first page of each file where
they apply


IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY
DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE


THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT
  THIS SOFTWARE
IS PROVIDED ON AN ""AS IS"" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS


GOVERNMENT USE: If you are acquiring this software on behalf of the
U
S


This copy of Python includes a copy of Tix, which is licensed under the following terms:

Copyright (c) 1993-1999 Ioi Kim Lam

Copyright (c) 2000-2001 Tix Project Group
227
  If you
are acquiring the software on behalf of the Department of Defense, the
software shall be classified as ""Commercial Computer Software"" and the
Government shall have only ""Restricted Rights"" as defined in Clause
252
  Notwithstanding the foregoing, the
authors grant the U
S
tcltk
IDLE_TEST


1
py for each
 as

class _Test(unittest
py,
with xyz (lowercased) added after 'test_'
main('idlelib

---
    @classmethod
    def setUpClass(cls):
        requires('gui')
        cls
root
---

Support

 - The tests are being run on Windows by a service that is not allowed to
   interact with the graphical environment

 - tkinter
 Running Tests

Assume that xyz
 (The exceptions are that
idlelib and idlelib
PyShell should (issue 18330)
)

>>> unittest
main('idlelib
test_idle
 Normally, neither file should be
changed when working on individual test modules
 So that command must work for buildbots
to stay green


To run an individual Testcase or test method, extend the dotted name given to
unittest on the command line


python -m unittest -v idlelib


IDLE emphasizes a lightweight, clean design with a simple user interface

Although it is suitable for beginners, even advanced users will find that
IDLE has everything they really need to develop pure Python code
  Class browsers and path browsers provide fast access to
code objects from a top level viewpoint without dealing with code folding
  The
magic ""reload/import *"" incantations are no longer required when editing and
testing a module two or three steps down the import chain
  This facility includes a feature
which allows the user to specify additional help sources, either locally or on
the web


IDLE is coded in 100% pure Python, using the Tkinter GUI toolkit (Tk/Tcl)
and is cross-platform, working on Unix, Mac, and Windows



If you find bugs or have suggestions, let us know about them by using the
Python Bug Tracker:

http://sourceforge
net/projects/python

Patches are always appreciated at the Python Patch Tracker, and change
requests should be posted to the RFE Tracker


For further details and links, read the Help files and check the IDLE home
page at

http://www
org/idle/

There is a mail list for IDLE: idle-dev@python
python
  Guido remains Python's
principal author, although it includes many contributions from others
cnri
us)
in Reston, Virginia where he released several versions of the
software


In May 2000, Guido and the Python core development team moved to
BeOpen
com to form the BeOpen PythonLabs team
  In October of the same
year, the PythonLabs team moved to Digital Creations (now Zope
Corporation, see http://www
zope
org/psf/) was formed, a
non-profit organization created specifically to own Python-related
Intellectual Property
0 thru 1
2  1
5
6         2000        BeOpen
1             2
1   2001        PSF         no
    2
0+1
6
1   2001        PSF         yes
    2
1+2
1   2001        PSF         yes
    2
1
2 and above   2
  According to
    CNRI, however, Stallman's lawyer has told CNRI's lawyer that 1
 TERMS AND CONDITIONS FOR ACCESSING OR OTHERWISE USING PYTHON
===============================================================

PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2
--------------------------------------------

1


2


3
 In the event Licensee prepares a derivative work that is based on
or incorporates Python or any part thereof, and wants to make
the derivative work available to others as provided herein, then
Licensee hereby agrees to include in any such work a brief summary of
the changes made to Python
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions
 Nothing in this License Agreement shall be deemed to create any
relationship of agency, partnership, or joint venture between PSF and
Licensee


8



BEOPEN
COM LICENSE AGREEMENT FOR PYTHON 2
com (""BeOpen""), having an
office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the
Individual or Organization (""Licensee"") accessing and otherwise using
this software in source or binary form and its associated
documentation (""the Software"")
 Subject to the terms and conditions of this BeOpen Python License
Agreement, BeOpen hereby grants Licensee a non-exclusive,
royalty-free, world-wide license to reproduce, analyze, test, perform
and/or display publicly, prepare derivative works, distribute, and
otherwise use the Software alone or in any derivative version,
provided, however, that the BeOpen Python License is retained in the
Software, alone or in any derivative version prepared by Licensee
 BeOpen is making the Software available to Licensee on an ""AS IS""
basis
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS
  This License Agreement does not grant
permission to use BeOpen trademarks or trade names in a trademark
sense to endorse or promote products or services of Licensee, or any
third party
pythonlabs
 By copying, installing or otherwise using the software, Licensee
agrees to be bound by the terms and conditions of this License
Agreement



CNRI LICENSE AGREEMENT FOR PYTHON 1
 This LICENSE AGREEMENT is between the Corporation for National
Research Initiatives, having an office at 1895 Preston White Drive,
Reston, VA 20191 (""CNRI""), and the Individual or Organization
(""Licensee"") accessing and otherwise using Python 1
6
  Alternately, in lieu of CNRI's License
Agreement, Licensee may substitute the following text (omitting the
quotes): ""Python 1
6
22/1013
handle
1 or any part thereof, and wants to make
the derivative work available to others as provided herein, then
Licensee hereby agrees to include in any such work a brief summary of
the changes made to Python 1
 CNRI is making Python 1
1 WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS


5
1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1
 This License Agreement shall be governed by the federal
intellectual property law of the United States, including without
limitation the federal copyright law, and, to the extent such
U
  Nothing in this
License Agreement shall be deemed to create any relationship of
agency, partnership, or joint venture between CNRI and Licensee
  This
License Agreement does not grant permission to use CNRI trademarks or
trade name in a trademark sense to endorse or promote products or
services of Licensee, or any third party
 By clicking on the ""ACCEPT"" button where indicated, or by copying,
installing or otherwise using Python 1
6
1, Licensee agrees to be
bound by the terms and conditions of this License Agreement
0 THROUGH 1","html















A


In 1995, Guido continued his work on Python at the Corporation for
National Research Initiatives (CNRI, see http://www
com)
org for
the Open Source Definition)
9
0+1
2             2
1
2
3             2
3
3           2
3
2       2002-2003   PSF         yes
    2
3
3
4
2           2
6
 In the event Licensee prepares a derivative work that is based on
or incorporates Python or any part thereof, and wants to make
the derivative work available to others as provided herein, then
Licensee hereby agrees to include in any such work a brief summary of
the changes made to Python


5
 PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON,
OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions
com (""BeOpen""), having an
office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the
Individual or Organization (""Licensee"") accessing and otherwise using
this software in source or binary form and its associated
documentation (""the Software"")
 This License Agreement shall be governed by and interpreted in all
respects by the law of the State of California, excluding conflict of
law provisions
com/logos
6
net/1895
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1
1 WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS
6
6
 In particular, you must require
distributors and external end users to agree to terms that protect the
Microsoft Distributable Code at least as much as Microsoft's own
requirements for the Distributable Code
com

 */
/*
 * Copyright (c) 1990, 1993, 1994, 1995
 *	The Regents of the University of California
 Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer

 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED
  All rights reserved
 (http://www
 Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    ""This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www

 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used
 All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    ""This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft


The authors hereby grant permission to use, copy, modify, distribute,
and license this software and its documentation for any purpose, provided
that existing copyright notices are retained in all copies and that this
notice is included verbatim in any distributions
  THIS SOFTWARE
IS PROVIDED ON AN ""AS IS"" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS
227
19 (c) (2)
 

----------------------------------------------------------------------

Parts of this software are based on the Tcl/Tk software copyrighted by
the Regents of the University of California, Sun Microsystems, Inc


















































README FOR IDLE TESTS IN IDLELIB
 Test Files

The idle directory, idlelib, has over 60 xyz
main(verbosity=2, exit=2)
---
Idle tests are run with unittest; do not use regrtest's test_main
idle_test
 Gui Tests

Gui tests need 'requires' from test
root = tk
use_resources has been set by something other than
   regrtest
py and does not contain ""gui""
py end with the ""if __name__"" statements given
above
 The following command lines also run
all test methods, including gui tests, in test_xyz
 (Notes: in 2
load_tests,
which is also imported into test


This enhancement has often been requested, and is now finally available


(Personal firewall software may warn about the connection IDLE makes to its
subprocess using this computer's internal loopback interface
  In 2001, the Python Software
Foundation (PSF, see http://www
6             1
2       2000        CNRI        no
    2
0             1
1           1
6
1           2
2           2
1       2002        PSF         yes
    2
  The
    GPL-compatible licenses make it possible to combine Python with
    other software that is released under the GPL; the others don't
 This LICENSE AGREEMENT is between the Python Software Foundation
(""PSF""), and the Individual or Organization (""Licensee"") accessing and
otherwise using this software (""Python"") in source or binary form and
its associated documentation


6
 BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE
SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS
AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY
DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF


7
1
alone or in any derivative version, provided, however, that CNRI's
License Agreement and CNRI's notice of copyright, i
net/1895
 In the event Licensee prepares a derivative work that is based on
or incorporates Python 1
 federal law does not apply, by the law of the Commonwealth of
Virginia, excluding Virginia's conflict of law provisions

Notwithstanding the foregoing, with regard to derivative works based
on Python 1"
mingw-w64,"














































































http://www
gnu
1
cwi
nl) in the Netherlands
as a successor of a language called ABC
  Guido remains Python's
principal author, although it includes many contributions from others
us)
in Reston, Virginia where he released several versions of the
software


In May 2000, Guido and the Python core development team moved to
BeOpen
com to form the BeOpen PythonLabs team
zope
com)
  In 2001, the Python Software
Foundation (PSF, see http://www
python


All Python releases are Open Source (see http://www
opensource
org for
the Open Source Definition)
  Historically, most, but not all, Python
releases have also been GPL-compatible; the table below summarizes
the various releases


    Release         Derived     Year        Owner       GPL-
                    from                                compatible? (1)

    0
0 thru 1
5
5
0             1
6         2000        BeOpen
6
1           1
1             2
6
1   2001        PSF         no
    2
1           2
0+1
6
1   2001        PSF         yes
    2
1
1+2
1   2001        PSF         yes
    2
1
2           2
1
1       2002        PSF         yes
    2
1
3           2
2       2002        PSF         yes
    2
2
1           2
2           2
2
1       2002        PSF         yes
    2
3           2
2
2
1           2
3         2002-2003   PSF         yes
    2
3
2           2
3
1       2002-2003   PSF         yes
    2
3
3           2
2       2002-2003   PSF         yes
    2
3
3
3       2004        PSF         yes
    2
3
4             2
3         2004        PSF         yes
    2
1           2
4         2005        PSF         yes
    2
4
4
2       2006        PSF         yes
    2
4
4           2
4
5             2
4         2006        PSF         yes
    2
5
1           2
5         2007        PSF         yes
    2
5
2           2
5
1       2008        PSF         yes
    2
5
3           2
5
2       2008        PSF         yes
    2
6             2
5         2008        PSF         yes
    2
1           2
6         2008        PSF         yes
    2
6
6
3           2
6
2       2009        PSF         yes
    2
6
6
3       2009        PSF         yes
    2
6
4       2010        PSF         yes
    2
7             2
6         2010        PSF         yes

Footnotes:

(1) GPL-compatible doesn't mean that we're distributing Python under
    the GPL
  All Python licenses, unlike the GPL, let you distribute
    a modified version without making your changes open source
6
1 is not GPL-compatible,
    because its license has a choice of law clause
1
    is ""not incompatible"" with the GPL


Thanks to the many outside volunteers who have worked under Guido's
direction to make these releases possible



B
 TERMS AND CONDITIONS FOR ACCESSING OR OTHERWISE USING PYTHON
===============================================================

PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2
--------------------------------------------

1
 This LICENSE AGREEMENT is between the Python Software Foundation
(""PSF""), and the Individual or Organization (""Licensee"") accessing and
otherwise using this software (""Python"") in source or binary form and
its associated documentation
, ""Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
Python Software Foundation; All Rights Reserved"" are retained in Python alone or
in any derivative version prepared by Licensee


4
  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS
 PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON,
OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF


7
  This License Agreement does not grant permission to use PSF
trademarks or trade name in a trademark sense to endorse or promote
products or services of Licensee, or any third party
 By copying, installing or otherwise using Python, Licensee
agrees to be bound by the terms and conditions of this License
Agreement
COM LICENSE AGREEMENT FOR PYTHON 2
0
-------------------------------------------

BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1

1
 This LICENSE AGREEMENT is between BeOpen
com (""BeOpen""), having an
office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the
Individual or Organization (""Licensee"") accessing and otherwise using
this software in source or binary form and its associated
documentation (""the Software"")


2
 Subject to the terms and conditions of this BeOpen Python License
Agreement, BeOpen hereby grants Licensee a non-exclusive,
royalty-free, world-wide license to reproduce, analyze, test, perform
and/or display publicly, prepare derivative works, distribute, and
otherwise use the Software alone or in any derivative version,
provided, however, that the BeOpen Python License is retained in the
Software, alone or in any derivative version prepared by Licensee


3
 BeOpen is making the Software available to Licensee on an ""AS IS""
basis
  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS


4
 BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE
SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS
AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY
DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions


6
 This License Agreement shall be governed by and interpreted in all
respects by the law of the State of California, excluding conflict of
law provisions
  As an exception, the ""BeOpen Python"" logos available at
http://www
pythonlabs
com/logos


7
 By copying, installing or otherwise using the software, Licensee
agrees to be bound by the terms and conditions of this License
Agreement
6
 This LICENSE AGREEMENT is between the Corporation for National
Research Initiatives, having an office at 1895 Preston White Drive,
Reston, VA 20191 (""CNRI""), and the Individual or Organization
(""Licensee"") accessing and otherwise using Python 1
1 software in
source or binary form and its associated documentation


2
6
1
alone or in any derivative version, provided, however, that CNRI's
License Agreement and CNRI's notice of copyright, i
e
, ""Copyright (c)
1995-2001 Corporation for National Research Initiatives; All Rights
Reserved"" are retained in Python 1
6
1 alone or in any derivative
version prepared by Licensee
  Alternately, in lieu of CNRI's License
Agreement, Licensee may substitute the following text (omitting the
quotes): ""Python 1
1 may be located on the Internet using the following
unique, persistent identifier (known as a handle): 1895
22/1013
  This
Agreement may also be obtained from a proxy server on the Internet
using the following URL: http://hdl
handle
net/1895
22/1013""


3
6
6


4
 CNRI is making Python 1
6
1 available to Licensee on an ""AS IS""
basis
  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED
6
1 WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS
6
1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1
6
1,
OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF


6
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions


7
 This License Agreement shall be governed by the federal
intellectual property law of the United States, including without
limitation the federal copyright law, and, to the extent such
U
S
 federal law does not apply, by the law of the Commonwealth of
Virginia, excluding Virginia's conflict of law provisions
1 that incorporate non-separable material that was
previously distributed under the GNU General Public License (GPL), the
law of the Commonwealth of Virginia shall govern this License
Agreement only as to issues arising under or with respect to
Paragraphs 4, 5, and 7 of this License Agreement
  Nothing in this
License Agreement shall be deemed to create any relationship of
agency, partnership, or joint venture between CNRI and Licensee


8
 By clicking on the ""ACCEPT"" button where indicated, or by copying,
installing or otherwise using Python 1
6
9
0 THROUGH 1
2
--------------------------------------------------

Copyright (c) 1991 - 1995, Stichting Mathematisch Centrum Amsterdam,
The Netherlands
  All rights reserved


Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Stichting Mathematisch
Centrum or CWI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission


STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE



Additional Conditions for this Windows binary build
---------------------------------------------------

This program is linked with and uses Microsoft Distributable Code,
copyrighted by Microsoft Corporation
 See Microsoft's documentation
(included in its developer tools and on its website at microsoft
com)
for specific details



This copy of Python includes a copy of bzip2, which is licensed under the following terms:


--------------------------------------------------------------------------

This program, ""bzip2"", the associated library ""libbzip2"", and all
documentation, are copyright (C) 1996-2007 Julian R Seward


Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1
 Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer


3


4
 The name of the author may not be used to endorse or promote 
   products derived from this software without specific prior written 
   permission


Julian Seward, jseward@bzip
org
bzip2/libbzip2 version 1
0
5 of 10 December 2007

--------------------------------------------------------------------------

This copy of Python includes a copy of Berkeley DB, which is licensed under the following terms:

/*-
 * $Id: LICENSE,v 12
9 2008/02/07 17:12:17 mark Exp $
 */

The following is the license that applies to this copy of the Berkeley DB
software
  For a license to use the Berkeley DB software under conditions
other than those described here, or to purchase support for this software,
please contact Oracle at berkeleydb-info_us@oracle
com

 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1
 Redistributions in any form must be accompanied by information on
 *    how to obtain complete source code for the DB software and any
 *    accompanying software that uses the DB software
  For an
 *    executable file, complete source code means the source code for all
 *    modules it contains
  It does not include source code for modules or
 *    files that typically accompany the major components of the operating
 *    system on which the executable file runs
  IN NO EVENT SHALL ORACLE BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE

 */
/*
 * Copyright (c) 1990, 1993, 1994, 1995
 *	The Regents of the University of California
  All rights reserved

 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1
 Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer

 * 2

 * 3
 Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission

 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED
  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution
 Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission
  IN NO EVENT SHALL HARVARD OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE

 */
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
/***
 * ASM: a very small and fast Java bytecode manipulation framework
 * Copyright (c) 2000-2005 INRIA, France Telecom
 * All rights reserved

 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1
 Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer

 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED

 */

This copy of Python includes a copy of openssl, which is licensed under the following terms:


  LICENSE ISSUES
  ==============

  The OpenSSL toolkit stays under a dual license, i
 both the conditions of
  the OpenSSL License and the original SSLeay license apply to the toolkit

  See below for the actual license texts
org


  OpenSSL License
  ---------------

/* ====================================================================
 * Copyright (c) 1998-2008 The OpenSSL Project

 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1
 
 *
 * 2
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution

 *
 * 3
 All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    ""This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit
 (http://www
openssl
 For written permission, please contact
 *    openssl-core@openssl
org
 Products derived from this software may not be called ""OpenSSL""
 *    nor may ""OpenSSL"" appear in their names without prior written
 *    permission of the OpenSSL Project
 Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    ""This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www
openssl
org/)""
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED

 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft

 *
 */

 Original SSLeay License
 -----------------------

/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft
com)
 * All rights reserved

 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft

 * The implementation was written so as to conform with Netscapes SSL

 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to
  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft
com)

 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used

 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package

 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1
 Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer

 * 2

 * 3
com)""
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-)

 * 4
 If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    ""This product includes software written by Tim Hudson (tjh@cryptsoft
  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE

 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed
  i
 this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence
]
 */


This copy of Python includes a copy of Tcl, which is licensed under the following terms:

This software is copyrighted by the Regents of the University of
California, Sun Microsystems, Inc
, Scriptics Corporation, ActiveState
Corporation and other parties


The authors hereby grant permission to use, copy, modify, distribute,
and license this software and its documentation for any purpose, provided
that existing copyright notices are retained in all copies and that this
notice is included verbatim in any distributions
 No written agreement,
license, or royalty fee is required for any of the authorized uses

Modifications to this software may be copyrighted by their authors
and need not follow the licensing terms described here, provided that
the new terms are clearly indicated on the first page of each file where
they apply


IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY
DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE


THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT
  THIS SOFTWARE
IS PROVIDED ON AN ""AS IS"" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS


GOVERNMENT USE: If you are acquiring this software on behalf of the
U
S
227
  If you
are acquiring the software on behalf of the Department of Defense, the
software shall be classified as ""Commercial Computer Software"" and the
Government shall have only ""Restricted Rights"" as defined in Clause
252
227-7013 (c) (1) of DFARs
  Notwithstanding the foregoing, the
authors grant the U
 Government and others acting in its behalf
permission to use and distribute the software in accordance with the
terms specified in this license


The authors hereby grant permission to use, copy, modify, distribute,
and license this software and its documentation for any purpose, provided
that existing copyright notices are retained in all copies and that this
notice is included verbatim in any distributions
 No written agreement,
license, or royalty fee is required for any of the authorized uses
  THIS SOFTWARE
IS PROVIDED ON AN ""AS IS"" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS
 government, the Government shall have only ""Restricted Rights""
in the software and related documentation as defined in the Federal 
Acquisition Regulations (FARs) in Clause 52
227-7013 (c) (1) of DFARs
  Notwithstanding the foregoing, the
authors grant the U
S
 Government and others acting in its behalf
permission to use and distribute the software in accordance with the
terms specified in this license

Copyright (c) 2000-2001 Tix Project Group

Copyright (c) 2004 ActiveState

This software is copyrighted by the above entities
and other parties
  The following terms apply to all files associated
with the software unless explicitly disclaimed in individual files
227
19 (c) (2)
  If you
are acquiring the software on behalf of the Department of Defense, the
software shall be classified as ""Commercial Computer Software"" and the
Government shall have only ""Restricted Rights"" as defined in Clause
252
S
,
and other parties


Parts of this software are based on the HTML Library software
copyrighted by Sun Microsystems, Inc
 The original license terms of
the HTML Library software distribution is included in the file
docs/license
IDLE_TEST


1
 Test Files

The idle directory, idlelib, has over 60 xyz
py files
 The idle_test
subdirectory should contain a test_xyy
py for each
 (For test modules, make
'xyz' lower case, and possibly shorten it

---
import unittest
from test
support import requires
import idlelib
 as

class _Test(unittest
main(verbosity=2, exit=2)
---
Idle tests are run with unittest; do not use regrtest's test_main
py,
with xyz (lowercased) added after 'test_'
idle_test
 Gui Tests

Gui tests need 'requires' from test
support (test
 A
test is a gui test if it creates a Tk root or master object either directly
or indirectly by instantiating a tkinter or idle class


To avoid interfering with other gui tests, all gui objects must be destroyed
and deleted by the end of the test
  If a widget, such as a Tk root, is created
in a setUpX function, destroy it in the corresponding tearDownX
  For module
and class attributes, also delete the widget

---
    @classmethod
    def setUpClass(cls):
        requires('gui')
        cls
root = tk
Tk()

    @classmethod
    def tearDownClass(cls):
        cls
root
destroy()
        del cls
root
---

Support
requires('gui') causes the test(s) it guards to be skipped if any of
a few conditions are met:
 - The tests are being run by regrtest
py, and it was started without
   enabling the ""gui"" resource with the ""-u"" command line option

 - tkinter
Tk cannot be successfully instantiated for some reason
support
py and does not contain ""gui""


Since non-gui tests always run, but gui tests only sometimes, tests of non-gui
operations should best avoid needing a gui
 Methods that make incidental use of
tkinter (tk) variables and messageboxes can do this by using the mock classes in
idle_test/mock_tk
 There is also a mock text that will handle some uses of the
tk Text widget



3
 Running Tests

Assume that xyz
py and test_xyz
py end with the ""if __name__"" statements given
above
exit traceback that would
otherwise occur when running in Idle
py
idle start Idle and idlelib
idle_test
test_xyz

To run all idle_test/test_*
py tests, either interactively
('>>>', with unittest imported) or from a command line, use one of the
following
 (Notes: in 2
main('idlelib
idle_test', verbosity=2, exit=False)
python -m unittest -v idlelib
idle_test
python -m test -v -ugui test_idle
python -m test
test_idle

The idle tests are 'discovered' by idlelib
idle_test
 The same happens when the entire test
suite is run with 'python -m test'
 So that command must work for buildbots
to stay green
 Idle tests must not disturb the environment in a way that
makes other tests fail (issue 18081)


To run an individual Testcase or test method, extend the dotted name given to
unittest on the command line


python -m unittest -v idlelib
idle_test
test_xyz
Test_case
test_meth


IDLE is Python's Tkinter-based Integrated DeveLopment Environment

Although it is suitable for beginners, even advanced users will find that
IDLE has everything they really need to develop pure Python code


IDLE features a multi-window text editor with multiple undo, Python colorizing,
and many other capabilities, e
g
 smart indent, call tips, and autocompletion
  Class browsers and path browsers provide fast access to
code objects from a top level viewpoint without dealing with code folding


This enhancement has often been requested, and is now finally available
  The
magic ""reload/import *"" incantations are no longer required when editing and
testing a module two or three steps down the import chain


(Personal firewall software may warn about the connection IDLE makes to its
subprocess using this computer's internal loopback interface
  This connection
is not visible on any external interface and no data is sent to or received
from the Internet
)

It is possible to interrupt tightly looping user code, even on Windows


IDLE has an integrated debugger with stepping, persistent breakpoints, and call
stack visibility
  This facility includes a feature
which allows the user to specify additional help sources, either locally or on
the web


IDLE accepts command line arguments



If you find bugs or have suggestions, let us know about them by using the
Python Bug Tracker:

http://sourceforge
net/projects/python

Patches are always appreciated at the Python Patch Tracker, and change
requests should be posted to the RFE Tracker


For further details and links, read the Help files and check the IDLE home
page at

http://www
python
org/idle/

There is a mail list for IDLE: idle-dev@python
org
python
 HISTORY OF THE SOFTWARE
==========================

Python was created in the early 1990s by Guido van Rossum at Stichting
Mathematisch Centrum (CWI, see http://www
  Guido remains Python's
principal author, although it includes many contributions from others


In 1995, Guido continued his work on Python at the Corporation for
National Research Initiatives (CNRI, see http://www
cnri
va
us)
in Reston, Virginia where he released several versions of the
software


In May 2000, Guido and the Python core development team moved to
BeOpen
  In October of the same
year, the PythonLabs team moved to Digital Creations (now Zope
Corporation, see http://www
zope
com)
python
  Zope Corporation is a sponsoring member of
the PSF
opensource
org for
the Open Source Definition)
  Historically, most, but not all, Python
releases have also been GPL-compatible; the table below summarizes
the various releases
2  1
2         1995-1999   CNRI        yes
    1
6         2000        BeOpen
com  no
    1
1           1
6         2001        CNRI        yes (2)
    2
6
1   2001        PSF         no
    2
1           2
6
1   2001        PSF         yes
    2
1
1           2
0
1   2001        PSF         yes
    2
2           2
1
1       2002        PSF         yes
    2
1
1
1
1       2001-now    PSF         yes

Footnotes:

(1) GPL-compatible doesn't mean that we're distributing Python under
    the GPL
  All Python licenses, unlike the GPL, let you distribute
    a modified version without making your changes open source
  The
    GPL-compatible licenses make it possible to combine Python with
    other software that is released under the GPL; the others don't


(2) According to Richard Stallman, 1
6
1 is not GPL-compatible,
    because its license has a choice of law clause
  According to
    CNRI, however, Stallman's lawyer has told CNRI's lawyer that 1
6
1
    is ""not incompatible"" with the GPL


Thanks to the many outside volunteers who have worked under Guido's
direction to make these releases possible
 TERMS AND CONDITIONS FOR ACCESSING OR OTHERWISE USING PYTHON
===============================================================

PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2
--------------------------------------------

1


2
 Subject to the terms and conditions of this License Agreement, PSF hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python alone or in any derivative version,
provided, however, that PSF's License Agreement and PSF's notice of copyright,
i
, ""Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
2011, 2012, 2013, 2014 Python Software Foundation; All Rights Reserved"" are retained
in Python alone or in any derivative version prepared by Licensee


3
 In the event Licensee prepares a derivative work that is based on
or incorporates Python or any part thereof, and wants to make
the derivative work available to others as provided herein, then
Licensee hereby agrees to include in any such work a brief summary of
the changes made to Python
  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions


7
 Nothing in this License Agreement shall be deemed to create any
relationship of agency, partnership, or joint venture between PSF and
Licensee
  This License Agreement does not grant permission to use PSF
trademarks or trade name in a trademark sense to endorse or promote
products or services of Licensee, or any third party
 By copying, installing or otherwise using Python, Licensee
agrees to be bound by the terms and conditions of this License
Agreement



BEOPEN
COM LICENSE AGREEMENT FOR PYTHON 2


2
 Subject to the terms and conditions of this BeOpen Python License
Agreement, BeOpen hereby grants Licensee a non-exclusive,
royalty-free, world-wide license to reproduce, analyze, test, perform
and/or display publicly, prepare derivative works, distribute, and
otherwise use the Software alone or in any derivative version,
provided, however, that the BeOpen Python License is retained in the
Software, alone or in any derivative version prepared by Licensee
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS


4
 This License Agreement shall be governed by and interpreted in all
respects by the law of the State of California, excluding conflict of
law provisions
  Nothing in this License Agreement shall be deemed to
create any relationship of agency, partnership, or joint venture
between BeOpen and Licensee
  This License Agreement does not grant
permission to use BeOpen trademarks or trade names in a trademark
sense to endorse or promote products or services of Licensee, or any
third party
pythonlabs
html may be used according to the
permissions granted on that web page


7
 By copying, installing or otherwise using the software, Licensee
agrees to be bound by the terms and conditions of this License
Agreement



CNRI LICENSE AGREEMENT FOR PYTHON 1
 This LICENSE AGREEMENT is between the Corporation for National
Research Initiatives, having an office at 1895 Preston White Drive,
Reston, VA 20191 (""CNRI""), and the Individual or Organization
(""Licensee"") accessing and otherwise using Python 1
1 software in
source or binary form and its associated documentation


2
e
, ""Copyright (c)
1995-2001 Corporation for National Research Initiatives; All Rights
Reserved"" are retained in Python 1
6
1 alone or in any derivative
version prepared by Licensee
1 is made available subject to the terms and
conditions in CNRI's License Agreement
6
22/1013
  This
Agreement may also be obtained from a proxy server on the Internet
using the following URL: http://hdl
handle


3
 In the event Licensee prepares a derivative work that is based on
or incorporates Python 1
6
1 or any part thereof, and wants to make
the derivative work available to others as provided herein, then
Licensee hereby agrees to include in any such work a brief summary of
the changes made to Python 1
1
  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1
1 WILL NOT
INFRINGE ANY THIRD PARTY RIGHTS


5
6
1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1
6
1,
OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF


6
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions


7
S
 federal law does not apply, by the law of the Commonwealth of
Virginia, excluding Virginia's conflict of law provisions
6
  Nothing in this
License Agreement shall be deemed to create any relationship of
agency, partnership, or joint venture between CNRI and Licensee
  This
License Agreement does not grant permission to use CNRI trademarks or
trade name in a trademark sense to endorse or promote products or
services of Licensee, or any third party


8
 By clicking on the ""ACCEPT"" button where indicated, or by copying,
installing or otherwise using Python 1
6
9
0 THROUGH 1
2
--------------------------------------------------

Copyright (c) 1991 - 1995, Stichting Mathematisch Centrum Amsterdam,
The Netherlands
  All rights reserved


STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE


















































































































































































","html















A
 HISTORY OF THE SOFTWARE
==========================

Python was created in the early 1990s by Guido van Rossum at Stichting
Mathematisch Centrum (CWI, see http://www


In 1995, Guido continued his work on Python at the Corporation for
National Research Initiatives (CNRI, see http://www
cnri
reston
va
org/psf/) was formed, a
non-profit organization created specifically to own Python-related
Intellectual Property
  Zope Corporation is a sponsoring member of
the PSF
9
2              1991-1995   CWI         yes
    1
3 thru 1
2         1995-1999   CNRI        yes
    1
6             1
2       2000        CNRI        no
    2
com  no
    1
6         2001        CNRI        yes (2)
    2
0+1
0
1           2
0
1       2001        PSF         yes
    2
1
1
2         2002        PSF         yes
    2
2
2       2003        PSF         yes
    2
3             2
3
3
5           2
4       2005        PSF         yes
    2
4
2           2
1       2005        PSF         yes
    2
4
3           2
4
6
6
1       2009        PSF         yes
    2
4           2
5           2
6
  The
    GPL-compatible licenses make it possible to combine Python with
    other software that is released under the GPL; the others don't


(2) According to Richard Stallman, 1
6


2
e


3
 In the event Licensee prepares a derivative work that is based on
or incorporates Python or any part thereof, and wants to make
the derivative work available to others as provided herein, then
Licensee hereby agrees to include in any such work a brief summary of
the changes made to Python


5


6
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions


8



BEOPEN


5
  Nothing in this License Agreement shall be deemed to
create any relationship of agency, partnership, or joint venture
between BeOpen and Licensee
html may be used according to the
permissions granted on that web page



CNRI LICENSE AGREEMENT FOR PYTHON 1
1
---------------------------------------

1
6
 Subject to the terms and conditions of this License Agreement, CNRI
hereby grants Licensee a nonexclusive, royalty-free, world-wide
license to reproduce, analyze, test, perform and/or display publicly,
prepare derivative works, distribute, and otherwise use Python 1
6
1 is made available subject to the terms and
conditions in CNRI's License Agreement
 In the event Licensee prepares a derivative work that is based on
or incorporates Python 1
1 or any part thereof, and wants to make
the derivative work available to others as provided herein, then
Licensee hereby agrees to include in any such work a brief summary of
the changes made to Python 1
  BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND
DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1


5
 CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
1

Notwithstanding the foregoing, with regard to derivative works based
on Python 1
6
  This
License Agreement does not grant permission to use CNRI trademarks or
trade name in a trademark sense to endorse or promote products or
services of Licensee, or any third party
1, Licensee agrees to be
bound by the terms and conditions of this License Agreement


        ACCEPT


CWI LICENSE AGREEMENT FOR PYTHON 0
 The Microsoft Distributable Code
includes the following files:

msvcr90
dll
msvcm90
dll

If you further distribute programs that include the Microsoft
Distributable Code, you must comply with the restrictions on
distribution specified by Microsoft


These restrictions apply only to the Microsoft Distributable Code as
defined above, not to Python itself or any programs running on the
Python interpreter
 The redistribution of the Python interpreter and
libraries is governed by the Python Software License included with this
file, or by other licenses as marked
  All
rights reserved


2
 The origin of this software must not be misrepresented; you must 
   not claim that you wrote the original software
  If you use this 
   software in a product, an acknowledgment in the product 
   documentation would be appreciated but is not required
 Altered source versions must be plainly marked as such, and must
   not be misrepresented as being the original software


THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED


=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
/*
 * Copyright (c) 1990,2008 Oracle
  All rights reserved
 Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer

 * 2

 * 3
  The source code
 *    must either be included in the distribution or be available for no
 *    more than the cost of distribution plus a nominal fee, and must be
 *    freely redistributable under reasonable conditions

 */
/*
 * Copyright (c) 1995, 1996
 *	The President and Fellows of Harvard University

 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1

 * 2

 * 3

 *
 * THIS SOFTWARE IS PROVIDED BY HARVARD AND ITS CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED

 * 2
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution

 * 3
 Neither the name of the copyright holders nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission
e
 Actually both licenses are BSD-style
  Open Source licenses
 In case of any license issues related to OpenSSL
  please contact openssl-core@openssl
  All rights reserved
 Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer
org/)""
 *
 * 4
 The names ""OpenSSL Toolkit"" and ""OpenSSL Project"" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission

 *
 * 5

 *
 * 6
  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE
  This product includes software written by Tim
 * Hudson (tjh@cryptsoft
com)
com)
  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc
, code; not just the SSL code
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution
com)""
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED
e
  The following terms apply to all files
associated with the software unless explicitly disclaimed in
individual files
19 (c) (2)
S
 

This copy of Python includes a copy of Tk, which is licensed under the following terms:

This software is copyrighted by the Regents of the University of
California, Sun Microsystems, Inc
, and other parties

Modifications to this software may be copyrighted by their authors
and need not follow the licensing terms described here, provided that
the new terms are clearly indicated on the first page of each file where
they apply


IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY
DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE


THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT


GOVERNMENT USE: If you are acquiring this software on behalf of the
U
S
227
19 (c) (2)
  If you
are acquiring the software on behalf of the Department of Defense, the
software shall be classified as ""Commercial Computer Software"" and the
Government shall have only ""Restricted Rights"" as defined in Clause
252


This copy of Python includes a copy of Tix, which is licensed under the following terms:

Copyright (c) 1993-1999 Ioi Kim Lam


The authors hereby grant permission to use, copy, modify, distribute,
and license this software and its documentation for any purpose, provided
that existing copyright notices are retained in all copies and that this
notice is included verbatim in any distributions
 No written agreement,
license, or royalty fee is required for any of the authorized uses

Modifications to this software may be copyrighted by their authors
and need not follow the licensing terms described here, provided that
the new terms are clearly indicated on the first page of each file where
they apply


IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY
DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE


THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT
  THIS SOFTWARE
IS PROVIDED ON AN ""AS IS"" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS


GOVERNMENT USE: If you are acquiring this software on behalf of the
U
S
  Notwithstanding the foregoing, the
authors grant the U
 

----------------------------------------------------------------------

Parts of this software are based on the Tcl/Tk software copyrighted by
the Regents of the University of California, Sun Microsystems, Inc
 The original license terms of the Tcl/Tk software
distribution is included in the file docs/license
html_lib


















































README FOR IDLE TESTS IN IDLELIB
) Each file should start with the
something like the following template, with the blanks after after '
' and 'as',
and before and after '_' filled in
TestCase):

    def test_(self):

if __name__ == '__main__':
    unittest


Once test_xyy is written, the following should go at the end of xyy

---
if __name__ == ""__main__"":
    import unittest
    unittest
main('idlelib
test_', verbosity=2, exit=False)
---


2
test_support in 2
 For the benefit of
test processes that either have no graphical environment available or are not
allowed to use it, gui tests must be 'guarded' by ""requires('gui')"" in a
setUp function or method

 - The tests are being run on Windows by a service that is not allowed to
   interact with the graphical environment

 - The tests are being run on Mac OSX in a process that cannot make a window
   manager connection

 - test
use_resources has been set by something other than
   regrtest
py
 The options in these
""if __name__"" statements are appropriate for developers running (as opposed to
importing) either of the files during development: verbosity=2 lists all test
methods in the file; exit=False avoids a spurious sys
 The following command lines also run
all test methods, including gui tests, in test_xyz
 (The exceptions are that
idlelib and idlelib
PyShell should (issue 18330)
)

python -m idlelib
xyz  # With the capitalization of the xyz module
python -m idlelib
7, 'test ' (with the space) is 'test
regrtest ';
where present, -v and -ugui can be omitted
)

>>> unittest
load_tests,
which is also imported into test
test_idle
 Normally, neither file should be
changed when working on individual test modules
 The third command runs
unittest indirectly through regrtest


IDLE emphasizes a lightweight, clean design with a simple user interface


There is a Python Shell window which features colorizing and command recall


IDLE executes Python code in a separate process, which is restarted for each
Run (F5) initiated from an editor window


Applications which cannot support subprocesses and/or sockets can still run
IDLE in a single process


There is a GUI configuration manager which makes it easy to select fonts,
colors, keybindings, and startup options


IDLE is coded in 100% pure Python, using the Tkinter GUI toolkit (Tk/Tcl)
and is cross-platform, working on Unix, Mac, and Windows
  Try idle -h to see the options
  You can join at

http://mail
org/mailman/listinfo/idle-dev

















A
cwi
com to form the BeOpen PythonLabs team
  In 2001, the Python Software
Foundation (PSF, see http://www
org/psf/) was formed, a
non-profit organization created specifically to own Python-related
Intellectual Property


All Python releases are Open Source (see http://www


    Release         Derived     Year        Owner       GPL-
                    from                                compatible? (1)

    0
3 thru 1
5
6             1
2       2000        CNRI        no
    2
0             1
6
0+1
1+2
1
3           2
2       2002        PSF         yes
    2
2 and above   2



B
e


4
 PSF is making Python available to Licensee on an ""AS IS""
basis


5
0
-------------------------------------------

BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1

1
com (""BeOpen""), having an
office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the
Individual or Organization (""Licensee"") accessing and otherwise using
this software in source or binary form and its associated
documentation (""the Software"")


3
 BeOpen is making the Software available to Licensee on an ""AS IS""
basis
  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED
 BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE
SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS
AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY
DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF


5
com/logos
6
1
---------------------------------------

1
6
 Subject to the terms and conditions of this License Agreement, CNRI
hereby grants Licensee a nonexclusive, royalty-free, world-wide
license to reproduce, analyze, test, perform and/or display publicly,
prepare derivative works, distribute, and otherwise use Python 1
6
  Alternately, in lieu of CNRI's License
Agreement, Licensee may substitute the following text (omitting the
quotes): ""Python 1
  This Agreement together with
Python 1
22/1013""
6


4
 CNRI is making Python 1
 CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
1

Notwithstanding the foregoing, with regard to derivative works based
on Python 1
1 that incorporate non-separable material that was
previously distributed under the GNU General Public License (GPL), the
law of the Commonwealth of Virginia shall govern this License
Agreement only as to issues arising under or with respect to
Paragraphs 4, 5, and 7 of this License Agreement
1, Licensee agrees to be
bound by the terms and conditions of this License Agreement


        ACCEPT


CWI LICENSE AGREEMENT FOR PYTHON 0","org/licenses/lgpl-2
  In October of the same
year, the PythonLabs team moved to Digital Creations (now Zope
Corporation, see http://www
2  1
2             2
2
2       2002-2003   PSF         yes
    2
4           2
3
3       2006        PSF         yes
    2
2           2
  According to
    CNRI, however, Stallman's lawyer has told CNRI's lawyer that 1
 Subject to the terms and conditions of this License Agreement, PSF hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python alone or in any derivative version,
provided, however, that PSF's License Agreement and PSF's notice of copyright,
i
 PSF is making Python available to Licensee on an ""AS IS""
basis
 Nothing in this License Agreement shall be deemed to create any
relationship of agency, partnership, or joint venture between PSF and
Licensee
  This License Agreement does not grant
permission to use BeOpen trademarks or trade names in a trademark
sense to endorse or promote products or services of Licensee, or any
third party
  This Agreement together with
Python 1
6
1
dll
msvcp90
 In particular, you must require
distributors and external end users to agree to terms that protect the
Microsoft Distributable Code at least as much as Microsoft's own
requirements for the Distributable Code


Redistribution of the Windows binary build of the Python interpreter
complies with this agreement, provided that you do not:

- alter any copyright, trademark or patent notice in Microsoft's
Distributable Code;

- use Microsoft's trademarks in your programs' names or in a way that
suggests your programs come from or are endorsed by Microsoft;

- distribute Microsoft's Distributable Code to run on a platform other
than Microsoft operating systems, run-time technologies or application
platforms; or

- include Microsoft Distributable Code in malicious, deceptive or
unlawful programs
  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution

 *
 * THIS SOFTWARE IS PROVIDED BY ORACLE ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
 * NON-INFRINGEMENT, ARE DISCLAIMED
 Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution
  All rights reserved
 Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer
 IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE
com)

 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed
 All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    ""This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft
 government, the Government shall have only ""Restricted Rights""
in the software and related documentation as defined in the Federal 
Acquisition Regulations (FARs) in Clause 52
  The following
terms apply to all files associated with the software unless explicitly
disclaimed in individual files
 government, the Government shall have only ""Restricted Rights""
in the software and related documentation as defined in the Federal 
Acquisition Regulations (FARs) in Clause 52
227-7013 (c) (1) of DFARs
 Government and others acting in its behalf
permission to use and distribute the software in accordance with the
terms specified in this license
tcltk
7)
 This will typically be setUpClass
 In Idle, pressing F5 in an editor window with either loaded will run all
tests in the test_xyz file with the version of Python running Idle
  The test
report and any tracebacks will appear in the Shell window
__init__


The editor has comprehensive search functions, including searching through
multiple files
  The environment can also be 
restarted from the Shell window without restarting IDLE
nl) in the Netherlands
as a successor of a language called ABC
reston
9
0 thru 1
2              1991-1995   CWI         yes
    1
5
1             2
0
0+1
 This LICENSE AGREEMENT is between the Python Software Foundation
(""PSF""), and the Individual or Organization (""Licensee"") accessing and
otherwise using this software (""Python"") in source or binary form and
its associated documentation
 PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON,
OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF


6


8
 This LICENSE AGREEMENT is between BeOpen
 This License Agreement will automatically terminate upon a material
breach of its terms and conditions


6
  As an exception, the ""BeOpen Python"" logos available at
http://www
1
alone or in any derivative version, provided, however, that CNRI's
License Agreement and CNRI's notice of copyright, i
6
1 may be located on the Internet using the following
unique, persistent identifier (known as a handle): 1895
net/1895
6
1 available to Licensee on an ""AS IS""
basis
6
 This License Agreement shall be governed by the federal
intellectual property law of the United States, including without
limitation the federal copyright law, and, to the extent such
U


Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Stichting Mathematisch
Centrum or CWI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission"
Uninstall Information,,"



",
EasyAntiCheat,"

",,
dummy,"



",,
Microsoft Office 15,,,"




"
Windows Sidebar,"




",,
GnuPG,,,"



"
Logitech,"



",,
Microsoft GameInput,,"



",
Everything,"




",,
HPCommRecovery,"




",,
Cloudflare,,,"






"
Microsoft.NET,,,"






"
MSBuild,"
",,
,,,
Windows NT,,"
",
Internet Explorer,"






",,
Pulse Secure,"
        ZLIB version 1
2
3 for AS400 installation instructions

I) From an AS400 *SAVF file:

1)      Unpacking archive to an AS400 save file

On the AS400:

_       Create the ZLIB AS400 library:

        CRTLIB LIB(ZLIB) TYPE(PROD) TEXT('ZLIB compression API library')

_       Create a work save file, for example:

                CRTSAVF FILE(ZLIB/ZLIBSAVF)

On a PC connected to the target AS400:

_       Unpack the save file image to a PC file ""ZLIBSAVF""
_       Upload this file into the save file on the AS400, for example
                using ftp in BINARY mode


_       Compile this member with:

        CRTCLPGM PGM(ZLIB/COMPILE) SRCFILE(ZLIB/TOOLS) SRCMBR(COMPILE)


4)      Compile and generate the service program:

_       This can now be done by executing:

        CALL PGM(ZLIB/COMPILE)



II) From the original source distribution:

1)      On the AS400, create the source library:

        CRTLIB LIB(ZLIB) TYPE(PROD) TEXT('ZLIB compression API library')

2)      Create the source files:

        CRTSRCPF FILE(ZLIB/SOURCES) RCDLEN(112) TEXT('ZLIB library modules')
        CRTSRCPF FILE(ZLIB/H)       RCDLEN(112) TEXT('ZLIB library includes')
        CRTSRCPF FILE(ZLIB/TOOLS)   RCDLEN(112) TEXT('ZLIB library control utilities')

3)      From the machine hosting the distribution files, upload them (with
                FTP in text mode, for example) according to the following table:

    Original    AS400   AS400    AS400 AS400
    file        file    member   type  description
                SOURCES                Original ZLIB C subprogram sources
    adler32
c          COMPRESS C     ZLIB - Compress a memory buffer
    crc32
c             CRC32    C     ZLIB - Compute the CRC-32 of a data stream
    deflate
c           DEFLATE  C     ZLIB - Compress data using the deflation algorithm
    gzio
 literals & length/distance pairs
    inflate
c             TREES    C     ZLIB - Output deflated data using Huffman coding
    uncompr
h          INFFIXED C     ZLIB - Table for decoding fixed codes
    inflate
c
    trees
h              ZLIB     C     ZLIB - Compression library C user interface
    as400/zlib
INC RPGLE ZLIB - Compression library ILE RPG user interface
    zutil
clp   COMPILE  CLP   Compile sources & generate service program
    as400/readme
txt    README   TXT   Installation instructions

4)      Continue as in I)3)





Notes:  For AS400 ILE RPG programmers, a /copy member defining the ZLIB
                API prototypes for ILE RPG can be found in ZLIB/H(ZLIB

                Please read comments in this member for more information
Ada)
                        Release 1
Ada is a thick binding interface to the popular ZLib data
compression library, available at http://www
gzip

It provides Ada-style access to the ZLib C library
Ada 1
2:

- Attension: ZLib
Read generic routine have a initialization requirement
  for Read_Last parameter now
 It is a bit incompartible with previous version,
  but extends functionality, we could use new parameters Allow_Read_Some and
  Flush now


- Added Is_Open routines to ZLib and ZLib
Streams packages


- Add pragma Assert to check Stream_Element is 8 bit


- Fix extraction to buffer with exact known decompressed size
 Error reported by
  Steve Sangwine


- Fix definition of ULong (changed to unsigned_long), fix regression on 64 bits
  computers
 Patch provided by Pascal Obry


- Add Status_Error exception definition
Stream_Element size is 8 bit
 Make the directory of ZLib
gpr -L<directory where libz
a is>


        How to build ZLib
Ada under Aonix ObjectAda for Win32 7
 Make a project with all *
ads and *
adb files from the distribution

2
a to z
lib

4
 Add the library z

5
 Add the libc

6
 Build the executable using test
adb and read
adb are small demo programs that show
the main functionality of ZLib
Ada


The routines from the package specifications are commented



Homepage: http://zlib-ada
sourceforge
ac
uk>






Overview
========

This directory contains an update to the ZLib interface unit,
distributed by Borland as a Delphi supplemental component


The original ZLib unit is Copyright (c) 1997,99 Borland Corp
,
and is based on zlib version 1
0
4



Summary of modifications
========================

- Improved makefile, adapted to zlib version 1
1
h header, and for 64-bit
  readiness


- The zlib_version constant is updated


- The allocation and deallocation functions and function types
  (TAlloc, TFree, zlibAllocMem and zlibFreeMem) are now cdecl,
  and _malloc and _free are added as C RTL stubs



Suggestions for improvements
============================

Currently, the ZLib unit provides only a limited wrapper around
the zlib library, and much of the original zlib functionality is
missing

Applications that handle these formats are either using their own,
duplicated code, or not using the ZLib unit at all
Checksum
  interface


- The ability to read and write raw deflate streams, without the
  zlib stream header and trailer
  Raw deflate streams are used
  in the ZIP file format


- The ability to select a different compression strategy, useful
  to PNG and MNG image compression, and to multimedia compression
  in general
  Besides the compression level

    TCompressionLevel = (clNone, clFastest, clDefault, clMax);

  which, in fact, could have used the 'z' prefix and avoided
  TColor-like symbols

    TCompressionLevel = (zcNone, zcFastest, zcDefault, zcMax);

  there could be a compression strategy

    TCompressionStrategy = (zsDefault, zsFiltered, zsHuffmanOnly, zsRle);

- ZIP and GZIP stream handling via TStreams
ubbcluj
ro>


This directory contains a 
Net wrapper class library for the ZLib1
Net streaming wrappers for the gz streams part of zlib, and wrappers
for the checksum parts of zlib


Directory structure:
--------------------

LICENSE_1_0
txt       - License file

readme
txt            - This file
build         - NAnt build file
DotZLib
cs contains unit tests for use with NUnit 2
1 or higher
Net 2003:
   Open DotZLib
Net and build from there
 Output file (DotZLib
 Check 
   DotZLib/UnitTests
 Using NAnt:
   Open a command prompt with access to the build environment and run nant
   in the same directory as the DotZLib
build file

   nunit={true|false} to include or esclude unit tests (default=true)

   Also the target clean will remove binaries

   Output file (DotZLib
dll) will be found in either 
/DotZLib/bin/release 
   or 



---------------------------------
Copyright (c) Henrik Ravn 2004

Use, modification and distribution are subject to the Boost Software License, Version 1
txt or copy at http://www
boost
org/LICENSE_1_0
txt)




Summary
-------
This directory contains ASM implementations of the functions
longest_match() and inflate_fast(), for 64 bits x86 (both AMD64 and Intel EM64t),
for use with Microsoft Macro Assembler (x64) for AMD64 and Microsoft C++ 64 bits


gvmat64
asm is written by Gilles Vollant (2005), by using Brian Raiter 686/32 bits
   assembly optimized version from Jean-loup Gailly original longest_match function

inffasx64
asm and inffas8664


define ASMV and ASMINF in your project
obj as object to link
exe)

ml64
microsoft



Build instructions
------------------
* With Microsoft C and MASM:
nmake -f win32/Makefile
msc LOC=""-DASMV -DASMINF"" OBJA=""gvmat32c
obj gvmat32
obj inffas32
obj""

* With Borland C and TASM:
make -f win32/Makefile
obj gvmat32
obj"" OBJPA=""+gvmat32c
obj""




This directory contains a Pascal (Delphi, Kylix) interface to the
zlib data compression library
mak     makefile for Borland C++
example
pas     usage example of zlib
zlibpas
pas     the Pascal interface to zlib
readme
txt      this file


Compatibility notes
===================

- Although the name ""zlib"" would have been more normal for the
  zlibpas unit, this name is already taken by Borland's ZLib unit

  This is somehow unfortunate, because that unit is not a genuine
  interface to the full-fledged zlib functionality, but a suite of
  class wrappers around zlib streams
  Other essential features,
  such as checksums, are missing

  It would have been more appropriate for that unit to have a name
  like ""ZStreams"", or something similar
 are
  translated directly into Pascal types of similar sizes (Integer,
  LongInt, etc
), to avoid namespace pollution
  In particular,
  there is no conversion of unsigned int into a Pascal unsigned
  integer
  The Word type is non-portable and has the same size
  (16 bits) both in a 16-bit and in a 32-bit environment, unlike
  Integer


- Except for the callbacks, the zlib function interfaces are
  assuming the calling convention normally used in Pascal
  (__pascal for DOS and Windows16, __fastcall for Windows32)

  Since the cdecl keyword is used, the old Turbo Pascal does
  not work with this interface


- The gz* function interfaces are not translated, to avoid
  interfacing problems with the C runtime library





Legal issues
============

The zlibpas interface is:
  Copyright (C) 1995-2003 Jean-loup Gailly and Mark Adler

  Copyright (C) 1998 by Bob Dellaca

  Copyright (C) 2003 by Cosmin Truta

  Copyright (C) 2003 by Cosmin Truta


  This software is provided 'as-is', without any express or implied
  warranty
  In no event will the author be held liable for any damages
  arising from the use of this software
 The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software
 If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required

  2
 This notice may not be removed or altered from any source distribution





Building instructions for the DLL versions of Zlib 1
2
3
========================================================

This directory contains projects that build zlib and minizip using
Microsoft Visual C++ 7
0/7
1, and Visual C++ 


You don't need to build these projects yourself
 You can download the
binaries from:
  http://www
winimage
com/zLibDll

More information can be found at this site



Build instructions for Visual Studio 7
x (32 bits)
--------------------------------------------------
- Uncompress current zlib, including all contrib/* files
- Download the crtdll library from
    http://www
winimage
zip
  Unzip crtdll
zip to extract crtdll

- Open contrib\vstudio\vc7\zlibvc
sln with Microsoft Visual C++ 7
Net 2002 or 2003)


Build instructions for Visual Studio 2005 (32 bits or 64 bits)
--------------------------------------------------------------
- Uncompress current zlib, including all contrib/* files
- For 32 bits only: download the crtdll library from
    http://www
zip
  Unzip crtdll
lib on contrib\vstudio\vc8

- Open contrib\vstudio\vc8\zlibvc
0) is on the beta 2 stage

Using you can get the free 64 bits compiler from Platform SDK, 
  which is NOT a beta, and compile using the Visual studio 2005 IDE
see http://www
winimage
sln with Microsoft Visual C++ 8
0


Important
---------
- To use zlibwapi



Additional notes
----------------
- This DLL, named zlibwapi
dll, is compatible to the old zlib
x sources, and distributed at
    http://www
winimage
com/zLibDll
  It uses the WINAPI calling convention for the exported functions, and
  includes the minizip functionality
 If your application needs that
  particular build of zlib
dll, you can rename zlibwapi
dll to zlib
dll


- The new DLL was renamed because there exist several incompatible
  versions of zlib
dll on the Internet


- There is also an official DLL build of zlib, named zlib1
 This one
  is exporting the functions using the CDECL convention
txt found in this zlib distribution
 To avoid compatibility problems, do
  not define it here
com





Microsoft Developer Studio Project Files, Format Version 6


Copyright (C) 2000-2004 Simon-Pierre Cadieux

Copyright (C) 2004 Cosmin Truta



This project builds the zlib binaries as follows:

* Win32_DLL_Release\zlib1
dll   DLL build using ASM code
* Win32_DLL_ASM_Debug\zlib1d
dll    DLL build using ASM code (debug version)
* Win32_LIB_Release\zlib
lib        static build
* Win32_LIB_Debug\zlibd


\win32\DLL_FAQ

   Open ""zlib
dsw""


2) Select ""Build | Set Active Configuration""

   Choose the configuration you wish to build


 (F7)""
  Ignore warning messages about
   not being able to find certain include files (e
g




To use:

1) Select ""Project | Settings (Alt+F7)""

   Make note of the configuration names used in your project

   Usually, these names are ""Win32 Release"" and ""Win32 Debug""


2) In the Workspace window, select the ""FileView"" tab

   Right-click on the root item ""Workspace '


   Select ""Insert Project into Workspace""

   Switch on the checkbox ""Dependency of:"", and select the name
   of your project
  Open ""zlib


3) Select ""Build | Configurations""

   For each configuration of your project:
   3
1) Choose the zlib configuration you wish to use

   3
2) Click on ""Add""

   3
3) Set the new zlib configuration name to the name used by
        the configuration from the current iteration

   Choose the configuration you wish to build


5) Select ""Build | Build 



6) If you built an executable program, select
   ""Build | Execute 


EXE)
  You can get it by downloading and installing the
latest Processor Pack for Visual C++ 6","


2)      Populating the ZLIB AS400 source library

On the AS400:

_       Extract the saved objects into the ZLIB AS400 library using:

RSTOBJ OBJ(*ALL) SAVLIB(ZLIB) DEV(*SAVF) SAVF(ZLIB/ZLIBSAVF) RSTLIB(ZLIB)


3)      Customize installation:

_       Edit CL member ZLIB/TOOLS(COMPILE) and change parameters if needed,
                according to the comments
c           ADLER32  C     ZLIB - Compute the Adler-32 checksum of a dta strm
    compress
gz files
    infback
c           INFFAST  C     ZLIB - Fast proc
c           INFLATE  C     ZLIB - Interface to inflate modules
    inftrees
c          INFTREES C     ZLIB - Generate Huffman trees for efficient decode
    trees
c           UNCOMPR  C     ZLIB - Decompress a memory buffer
    zutil
c             ZUTIL    C     ZLIB - Target dependent utility functions
                H                      Original ZLIB C and ILE/RPG include files
    crc32
h             CRC32    C     ZLIB - CRC32 tables
    deflate
h           DEFLATE  C     ZLIB - Internal compression state
    inffast
h           INFFAST  C     ZLIB - Header to use inffast
c
    inffixed
h           INFLATE  C     ZLIB - Internal inflate state definitions
    inftrees
h          INFTREES C     ZLIB - Header to use inftrees
h             TREES    C     ZLIB - Created automatically with -DGEN_TREES_H
    zconf
h             ZUTIL    C     ZLIB - Internal interface and configuration
                TOOLS                  Building source software & AS/400 README
    as400/bndsrc        BNDSRC         Entry point exportation list
    as400/compile


        Remember that most foreign textual data are ASCII coded: this
                implementation does not handle conversion from/to ASCII, so
                text data code conversions must be done explicitely


        Always open zipped files in binary mode



                        ZLib for Ada thick binding (ZLib
3

ZLib


- Add pragma Assertion that Ada
Streams



        How to build ZLib
Ada under GNAT

You should have the ZLib library already build on your computer, before
building ZLib
Ada
a is> -lz

Or use the GNAT project file build for GNAT 3
15 or later:

  gnatmake -Pzlib
2
2

1
 Build the libz

3
 Rename libz
lib to the project
lib library from the ObjectAda distribution to the project
net/
Author: Dmitriy Anisimkov <anisimkov@yahoo
2


- The new Z_RLE strategy has its corresponding symbolic constant
  Handling compressed file formats like ZIP/GZIP or PNG
cannot be implemented without having this functionality
util
zip


- The ability to read and write gzip streams, used in the GZIP
  file format, and normally produced by the gzip program



--
Cosmin Truta <cosmint@cs
dll

The wrapper includes support for inflating/deflating memory buffers, 

 See DotZLib/UnitTests
cs for examples

DotZLib
chm           - Class library documentation
DotZLib
cs          - Source files for the class library

Unit tests:
-----------
The file DotZLib/UnitTests

To include unit tests in the build, define nunit before building



Build instructions:
-------------------

1
 Using Visual Studio
sln in VS
/DotZLib/bin/release or 
/DotZLib/bin/debug, depending on 
   you are building the release or debug version of the library
cs for instructions on how to include unit tests in the
   build

   
2

   You can define 2 properties on the nant command-line to control the build:
   debug={true|false} to toggle between release/debug builds (default=true)
0
c were written by Chris Anderson, by optimizing
   original function from Mark Adler

Use instructions
----------------
Copy these files into the zlib source directory
 Include inffas8664
c in your source tree,
and inffasx64



Build instructions
------------------
run bld_64
bat with Microsoft Macro Assembler (x64) for AMD64 (ml64
exe is given with Visual Studio 2005, Windows 2003 server DDK

You can get Windows 2003 server DDK with ml64 and cl for AMD64 from 
  http://www
com/whdc/devtools/ddk/default
mspx for low price)



Summary
-------
This directory contains ASM implementations of the functions
longest_match() and inflate_fast()



Use instructions
----------------
Copy these files into the zlib source directory, then run the
appropriate makefile, as suggested below
obj inffas32
obj+gvmat32
obj+inffas32
  Besides,
    gzprintf(gzFile file, const char *format, 
)
  cannot be translated into Pascal

  Copyright (C) 1998,1999,2000 by Jacques Nomssi Nzali


  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1

  3
lib on contrib\vstudio\vc7
com/zLibDll/crtdll
zip to extract crtdll
sln with Microsoft Visual C++ 8
0

Build instructions for Visual Studio 2005 64 bits, PSDK compiler
----------------------------------------------------------------
at the time of writing this text file, Visual Studio 2005 (and 
  Microsoft Visual C++ 8
dll in your application, you must define the
  macro ZLIB_WINAPI when compiling your application's source files
dll built
  by Gilles Vollant from the zlib 1
1
 See the file
  win32\DLL_FAQ
1
x, but now this symbol
  has a slightly different effect



Gilles Vollant
info@winimage

For conditions of distribution and use, see copyright notice in zlib
dll       DLL build
* Win32_DLL_Debug\zlib1d
lib         static build (debug version)
* Win32_LIB_ASM_Release\zlib
lib    static build using ASM code
* Win32_LIB_ASM_Debug\zlibd
\
txt



To build and test:

1) On the main menu, select ""File | Open Workspace""


3) Select ""Build | Clean""


4) Select ""Build | Build 
 alloc
h)

 (Ctrl+F5)""
'""
dsp""


4) Select ""Build | Set Active Configuration""

 (F7)""
 (Ctrl+F5)""



Note:

To build the ASM-enabled code, you need Microsoft Assembler
(ML
0
























","c              GZIO     C     ZLIB - IO on 
c           INFBACK  C     ZLIB - Inflate using a callback interface
    inffast
h             ZCONF    C     ZLIB - Compression library configuration
    zlib
inc      ZLIB
INC)
org/zlib/



        Here are the main changes since ZLib
Ada sources current and
issue the command:

  gnatmake test -largs -L<directory where libz
a library from the ZLib C sources
adb as a main procedure



        How to use ZLib
Ada

The source files test
com>

Contributors: Pascal Obry <pascal@obry
org>, Steve Sangwine <sjs@essex
  There are a series of bugs
and security problems associated with that old zlib version, and
we recommend the users to update their ZLib unit


- Some field types from TZStreamRec are changed from Integer to
  Longint, for consistency with the zlib
  As a result,
  the original C sources of zlib can be compiled out of the box,
  and linked to the ZLib unit


Here are a few suggestions:

- Checksum class wrappers around adler32() and crc32(), similar
  to the Java classes that implement the java
sln           - Microsoft Visual Studio 2003 solution file

DotZLib\*
dll)
   will be found 
/DotZLib/bin/debug, depending on whether you are building the release 
   or debug version of the library


   Examples: 
     nant -D:debug=false -D:nunit=false
       will build a release mode version of the library without unit tests

     nant
       will build a debug version of the library with unit tests 
     nant clean
       will remove all previously built files
 
(See accompanying file LICENSE_1_0
obj and gvmat64
bor LOCAL_ZLIB=""-DASMV -DASMINF"" OBJA=""gvmat32c



Directory listing
=================

zlibd32


- The C and zlib-supplied types int, uInt, long, uLong, etc
  Even if there is a 32-bit Cardinal type, there is no
  real need for unsigned int in zlib under a 32-bit environment


The example program is:
  Copyright (C) 1995-2003 by Jean-loup Gailly
 Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software
com/zLibDll/crtdll
x
  (Visual Studio 
winimage
com/misc/sdk64onvs2005/ for instruction

- Uncompress current zlib, including all contrib/* files
- start Visual Studio 2005 from a platform SDK command prompt, using
  the /useenv switch
- Open contrib\vstudio\vc8\zlibvc
dll


- There used to be a ZLIB_DLL macro in zlib 1
00 for zlib
h
dll        DLL build (debug version)
* Win32_DLL_ASM_Release\zlib1
lib     static build using ASM code (debug version)


For more information regarding the DLL builds, please see the DLL FAQ
in 


5) If you built one of the sample programs (example or minigzip),
   select ""Build | Execute 
"
manifest,"
",,
Online Services,"



",,
Microsoft XNA,"



",,
Tablet,", 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed
 By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users
 Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things


To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights


For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have
 You must make sure that they, too, receive or can get the source code
 And you must show them these terms so they know their rights


We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software
 If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations


Finally, any free program is threatened constantly by software patents
 We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary


The precise terms and conditions for copying, distribution and modification follow


GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

0
 This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License
 The ""Program"", below, refers to any such program or work, and a ""work based on the Program"" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language
) Each licensee is addressed as ""you""


Activities other than copying, distribution and modification are not covered by this License; they are outside its scope


You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee
 You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:

a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change


b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License


c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License
 (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement
 But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it


Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program


In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License


3
 You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:

a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,

b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,

c) Accompany it with the information you received as to the offer to distribute corresponding source code
 (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above
)

The source code for a work means the preferred form of the work for making modifications to it
 However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable


If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code


4
 You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License
 Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License


5
 However, nothing else grants you permission to modify or distribute the Program or its derivative works
 These actions are prohibited by law if you do not accept this License
 Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it


6
 You may not impose any further restrictions on the recipients' exercise of the rights granted herein
 If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all


It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices
 Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice


8
 If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded
 In such case, this License incorporates the limitation as if written in the body of this License


9
 The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time
 Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns


10
 If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission
 Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally
 BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW
 SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION
 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES





















","































































GNU GENERAL PUBLIC LICENSE Version 2, June 1991

Copyright (C) 1989, 1991 Free Software Foundation, Inc


Preamble

The licenses for most software are designed to take away your freedom to share and change it
 (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead


When we speak of free software, we are referring to freedom, not price


Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software
 To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all
 (Hereinafter, translation is included without limitation in the term ""modification""
 The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program)
 You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program
)

These requirements apply to the modified work as a whole
 For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable
 However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance
 You are not required to accept this License, since you have not signed it
 Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions
 You are not responsible for enforcing compliance by third parties to this License


7
 If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License
 For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program


This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License


Each version is given a distinguishing version number
 If the Program specifies a version number of this License which applies to it and ""any later version"", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation
 If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation
 For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this


NO WARRANTY

11
 EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE


12"," This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it
) You can apply it to your programs, too
 These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it
 Whether that is true depends on what the Program does


1


2
 If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works


If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances
 THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU"
node.js,"

**Copyright © Corepack contributors**

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
shields
io/badge/OpenJS%20Slack-%23nodejs--corepack-blue)](https://slack-invite
openjsf
js script that acts as a bridge
between Node
js projects and the package managers they are intended to be used
with during development
 In practical terms, **Corepack lets you use Yarn, npm,
and pnpm without having to install them**


## How to Install

### Default Installs

Corepack is [distributed by default with all recent Node
js versions](https://nodejs
org/api/corepack
html)

Run `corepack enable` to install the required Yarn and pnpm binaries on your path


### Manual Installs

<details>
<summary>Install Corepack using npm</summary>

First uninstall your global Yarn and pnpm binaries (just leave npm)
 In general,
you'd do this by running the following command:

```shell
npm uninstall -g yarn pnpm

# That should be enough, but if you installed Yarn without going through npm it might
# be more tedious - for example, you might need to run `brew uninstall yarn` as well

```

Then install Corepack:

```shell
npm install -g corepack
```

We do acknowledge the irony and overhead of using npm to install Corepack, which
is at least part of why the preferred option is to use the Corepack version that
is distributed along with Node
js itself
md`](
/CONTRIBUTING
md)
 Corepack
will catch these calls, and depending on the situation:

- **If the local project is configured for the package manager you're using**,
  Corepack will download and cache the latest compatible version


- **If the local project is configured for a different package manager**,
  Corepack will request you to run the command again using the right package
  manager - thus avoiding corruptions of your install artifacts


- **If the local project isn't configured for any package manager**, Corepack
  will assume that you know what you're doing, and will use whatever package
  manager version has been pinned as ""known good release""


### When Authoring Packages

Set your package's manager with the `packageManager` field in `package
json`:

```json
{
  ""packageManager"": ""yarn@3
3+sha224
3`,
along with the SHA-224 hash of this version for validation

`packageManager@x
y
z` is required


You can also provide a URL to a `
js` file (which will be interpreted as a
CommonJS module) or a `
tgz` file (which will be interpreted as a package, and
the `""bin""` field of the `package
npmjs
2
3
tgz#sha224
16a0797d1710d1fb7ec40ab5c3801b68370a612a9b66ba117ad9924b""
}
```

## Known Good Releases

When running Corepack within projects that don't list a supported package
manager, it will default to a set of Known Good Releases


If there is no Known Good Release for the requested package manager, Corepack
looks up the npm registry for the latest available version and cache it for
future use


The Known Good Releases can be updated system-wide using `corepack install -g`

When Corepack downloads a new version of a given package manager on the same
major line as the Known Good Release, it auto-updates it by default


## Offline Workflow

The utility commands detailed in the next section


- Or you're publishing your project to a system where the network is
  unavailable, in which case you'll preemptively generate a package manager
  archive from your local computer (using `corepack pack -o`) before storing
  it somewhere your container will be able to access (for example within your
  repository)
tgz>` to setup the cache


 args]`

This meta-command runs the specified package manager in the local folder


### `corepack cache clean`

Clears the local `COREPACK_HOME` cache directory


### `corepack cache clear`

Clears the local `COREPACK_HOME` cache directory


### `corepack enable [

 Note that the npm shims will not be installed
unless explicitly requested, as npm is currently distributed with Node
js
through other means

js is installed and will remove the shims
from there


 name[@<version>]]`

Install the selected package managers and install them on the system


Package managers thus installed will be configured as the new default when
calling their respective binaries outside of projects defining the
`packageManager` field




Unlike `corepack use` this command doesn't take a package manager name nor a
version range, as it will always select the latest available version from the
same major line
 Should you need to upgrade to a new major, use an explicit
`corepack use {name}@latest` call (or simply `corepack use {name}`)


## Environment Variables

- `COREPACK_DEFAULT_TO_LATEST` can be set to `0` in order to instruct Corepack
  not to lookup on the remote registry for the latest version of the selected
  package manager, and to not update the Last Known Good version when it
  downloads a new version of the same major line


- `COREPACK_ENABLE_AUTO_PIN` can be set to `0` to prevent Corepack from
  updating the `packageManager` field when it detects that the local package
  doesn't list it
 In general we recommend to always list a `packageManager`
  field (which you can easily set through `corepack use [name]@[version]`), as
  it ensures that your project installs are always deterministic


- `COREPACK_ENABLE_DOWNLOAD_PROMPT` can be set to `0` to
  prevent Corepack showing the URL when it needs to download software, or can be
  set to `1` to have the URL shown
g

  When standard input is a TTY and no CI environment is detected, Corepack will
  ask for user input before starting the download


- `COREPACK_ENABLE_UNSAFE_CUSTOM_URLS` can be set to `1` to allow use of
  custom URLs to load a package manager known by Corepack (`yarn`, `npm`, and
  `pnpm`)


- `COREPACK_ENABLE_NETWORK` can be set to `0` to prevent Corepack from accessing
  the network (in which case you'll be responsible for hydrating the package
  manager versions that will be required for the projects you'll run, using
  `corepack install -g --cache-only`)
 This means that if a user is using the package manager
  specified in the current project, it will use the version specified by the
  project's `packageManager` field
 But if the user is using other package
  manager different from the one specified for the current project, it will use
  the system-wide package manager version
 This means that it will always use the system-wide package manager
  regardless of what is being specified in the project's `packageManager` field


- `COREPACK_HOME` can be set in order to define where Corepack should install
  the package managers
 By default it is set to `%LOCALAPPDATA%\node\corepack`
  on Windows, and to `$HOME/
cache/node/corepack` everywhere else


- `COREPACK_ROOT` has no functional impact on Corepack itself; it's
  automatically being set in your environment by Corepack when it shells out to
  the underlying package managers, so that they can feature-detect its presence
  (useful for commands like `yarn init`)
org`

- `COREPACK_NPM_TOKEN` sets a Bearer token authorization header when connecting
  to a npm type registry
 Note that both
  environment variables are required and as plain text


- `HTTP_PROXY`, `HTTPS_PROXY`, and `NO_PROXY` are supported through
  [`node-proxy-agent`](https://github
com/TooTallNate/node-proxy-agent)


- `COREPACK_INTEGRITY_KEYS` can be set to an empty string to instruct Corepack
  to skip integrity checks, or a JSON string containing custom keys

- Make sure the host for your request can be resolved by your DNS; try using
  `curl [URL]` (ipv4) and `curl -6 [URL]` (ipv6) from your shell

- Check your proxy settings (see [Environment Variables](#environment-variables))


## Contributing

See [`CONTRIBUTING
md)
md`](







---
title: npm-access
section: 1
description: Set access level on published packages
---

### Synopsis

```bash
npm access list packages [<user>|<scope>|<scope:team> [<package>]
npm access list collaborators [<package> [<user>]]
npm access get status [<package>]
npm access set status=public|private [<package>]
npm access set mfa=none|publish|automation [<package>]
npm access grant <read-only|read-write> <scope:team> [<package>]
npm access revoke <scope:team> [<package>]
```

Note: This command is unaware of workspaces


For all of the subcommands, `npm access` will perform actions on the packages
in the current working directory if no package name is passed to the
subcommand


* grant / revoke (deprecated):
  Add or remove the ability of users and teams to have read-only or read-write
  access to a package
 If `<user>` is passed in,
  the list is filtered only to teams _that_ user happens to belong to


* edit (not implemented)

### Details

`npm access` always operates directly on the current registry, configurable
from the command line using `--registry=<registry url>`


Unscoped packages are *always public*


Scoped packages *default to restricted*, but you can either publish them as
public using `npm publish --access=public`, or set their access as public using
`npm access public` after the initial publish



If your account is not paid, then attempts to publish scoped packages will
fail with an HTTP 402 status code (logically enough), unless you use
`--access=public`


Management of teams and team memberships is done with the `npm team` command
parse() before
  saving them to your `package


Not supported by all npm commands
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one
npmjs
org/""
* Type: URL

The base URL of the npm registry




### See Also

* [`libnpmaccess`](https://npm


### Description

Create a new user in the specified registry, and save the credentials to
the `




#### `scope`

* Default: the scope of the current project, if any, or """"
* Type: String

Associate an operation with a scope for a scoped registry


This will also cause `npm init` to create a scoped package


```
# accept all defaults, and create a package named ""@foo/whatever"",
# instead of just named ""whatever""
npm init --scope=@foo --yes
```



#### `auth-type`

* Default: ""web""
* Type: ""legacy"" or ""web""

What authentication strategy to use with `login`
 Note that if an `otp`
config is given, this value will always be set to `legacy`
  If any vulnerabilities are found, then the impact and
appropriate remediation will be calculated
  If the `fix` argument is
provided, then remediations will be applied to the package tree


The command will exit with a 0 exit code if no vulnerabilities were found
  Also note that since `npm audit
fix` runs a full-fledged `npm install` under the hood, all configs that
apply to the installer will also apply to `npm install` -- so things like
`npm audit fix --package-lock-only` will work as expected
 It may be useful in CI environments to include the
`--audit-level` parameter to specify the minimum vulnerability level that
will cause the command to fail
 This option does not filter the report
output, it simply changes the command's failure threshold


### Package lock

By default npm requires a package-lock or shrinkwrap in order to run the
audit
  You can bypass the package lock with `--no-package-lock` but be
aware the results may be different with every run, since npm will
re-build the dependency tree each time


### Audit Signatures

To ensure the integrity of packages you download from the public npm registry, or any registry that supports signatures, you can verify the registry signatures of downloaded packages using the npm CLI


Registry signatures can be verified using the following `audit` command:

```bash
$ npm audit signatures
```

The `audit signatures` command will also verify the provenance attestations of
downloaded packages
 Because provenance attestations are such a new feature,
security features may be added to (or changed in) the attestation format over
time
js


The npm CLI supports registry signatures and signing keys provided by any registry if the following conventions are followed:

1


"": ""
omitted


""
  }]
}
```

See this [example](https://registry
npmjs
org/light-cycle/1
3) of a signed package from the public npm registry
name}@${package
version}:${package
 Public signing keys are provided at `registry-host
tld/-/npm/v1/keys` in the following format:

```
{
  ""keys"": [{
    ""expires"": null,
    ""keyid"": ""SHA256:{{SHA256_PUBLIC_KEY}}"",
    ""keytype"": ""ecdsa-sha2-nistp256"",
    ""scheme"": ""ecdsa-sha2-nistp256"",
    ""key"": ""{{B64_PUBLIC_KEY}}""
  }]
}
```

Keys response:

- `expires`: null or a simplified extended [ISO 8601 format](https://en
sssZ`
- `keydid`: sha256 fingerprint of the public key
- `keytype`: only `ecdsa-sha2-nistp256` is currently supported by the npm CLI
- `scheme`: only `ecdsa-sha2-nistp256` is currently supported by the npm CLI
- `key`: base64 encoded public key

See this [example key's response from the public npm registry](https://registry


### Audit Endpoints

There are two audit endpoints that npm may use to fetch vulnerability
information: the `Bulk Advisory` endpoint and the `Quick Audit` endpoint


#### Bulk Advisory Endpoint

As of version 7, npm uses the much faster `Bulk Advisory` endpoint to
optimize the speed of calculating audit results


npm will generate a JSON payload with the name and list of versions of each
package in the tree, and POST it to the default configured registry at
the path `/-/npm/v1/security/advisories/bulk`


Any packages in the tree that do not have a `version` field in their
package
  If any `--omit` options are specified
(either via the [`--omit` config](/using-npm/config#omit), or one of the
shorthands such as `--production`, `--only=dev`, and so on), then packages will
be omitted from the submitted payload as appropriate


If the registry responds with an error, or with an invalid response, then
npm will attempt to load advisory data from the `Quick Audit` endpoint


The expected result will contain a set of advisory objects for each
dependency that matches the advisory range


npm then uses these advisory objects to calculate vulnerabilities and
meta-vulnerabilities of the dependencies within the tree
json` is submitted, along
with the following pieces of additional metadata:

* `npm_version`
* `node_version`
* `platform`
* `arch`
* `node_env`

All packages in the tree are submitted to the Quick Audit endpoint

Omitted dependency types are skipped when generating the report


#### Scrubbing

Out of an abundance of caution, npm versions 5 and 6 would ""scrub"" any
packages from the submitted report if their name contained a `/` character,
so as to avoid leaking the names of potentially private packages or git
URLs


However, in practice, this resulted in audits often failing to properly
detect meta-vulnerabilities, because the tree would appear to be invalid
due to missing dependencies, and prevented the detection of vulnerabilities
in package trees that used git dependencies or private modules


This scrubbing has been removed from npm as of version 7


#### Calculating Meta-Vulnerabilities and Remediations

npm uses the
[`@npmcli/metavuln-calculator`](http://npm
im/@npmcli/metavuln-calculator)
module to turn a set of security advisories into a set of ""vulnerability""
objects
  A ""meta-vulnerability"" is a dependency that is vulnerable by
virtue of dependence on vulnerable versions of a vulnerable package
2
<2
0
0`, and the package `bar` depends on `foo@^1
1
0`, then that version
of `bar` can only be installed by installing a vulnerable version of `foo`


If the chain of metavulnerabilities extends all the way to the root
project, and it cannot be updated without changing its dependency ranges,
then `npm audit fix` will require the `--force` option to apply the
remediation
  If remediations do not require changes to the dependency
ranges, then all vulnerable packages will be updated to a version that does
not have an advisory or metavulnerability posted against it


### Exit Code

The `npm audit` command will exit with a 0 exit code if no vulnerabilities
were found


If vulnerabilities were found the exit code will depend on the
[`audit-level` config](/using-npm/config#audit-level)


### Examples

Scan your project for vulnerabilities and automatically install any compatible
updates to vulnerable dependencies:

```bash
$ npm audit fix
```

Run `audit fix` without modifying `node_modules`, but still updating the
pkglock:

```bash
$ npm audit fix --package-lock-only
```

Skip updating `devDependencies`:

```bash
$ npm audit fix --only=prod
```

Have `audit fix` install SemVer-major updates to toplevel dependencies, not
just SemVer-compatible ones:

```bash
$ npm audit fix --force
```

Do a dry run to get an idea of what `audit fix` will do, and _also_ output
install information in JSON format:

```bash
$ npm audit fix --dry-run --json
```

Scan your project for vulnerabilities and just show the details, without
fixing anything:

```bash
$ npm audit
```

Get the detailed audit report in JSON format:

```bash
$ npm audit --json
```

Fail an audit only if the results include a vulnerability with a level of moderate or higher:

```bash
$ npm audit --audit-level=moderate
```

### Configuration

#### `audit-level`

* Default: null
* Type: null, ""info"", ""low"", ""moderate"", ""high"", ""critical"", or ""none""

The minimum level of vulnerability for `npm audit` to exit with a non-zero
exit code


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc


* Allow clobbering non-npm files in global installs

* Allow the `npm version` command to work on an unclean git repository

* Allow installing packages that have an `engines` declaration requiring a
  different version of npm

* Allow clobbering existing values in `npm pkg`
* Allow unpublishing of entire packages (not just a single version)
parse() before
  saving them to your `package


Not supported by all npm commands




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock
json`,
ignoring `node_modules`


For `list` this means the output will be based on the tree described by the
`package-lock




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json` files when installing
 This
will also prevent _writing_ `package-lock
json` if `save` is true




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap
json` file
 They are just not
physically installed on disk


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process
json files


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes


]]

alias: issues
```

### Description

This command tries to guess at the likely location of a package's bug
tracker URL or the `mailto` URL of the support email, and then tries to
open it using the [`--browser` config](/using-npm/config#browser) param
 If no
package name is provided, it will search for a `package
json` in the current
folder and use the `name` property


### Configuration

#### `browser`

* Default: OS X: `""open""`, Windows: `""start""`, Others: `""xdg-open""`
* Type: null, Boolean, or String

The browser that is called by npm commands to open websites


Set to `true` to use default system URL opener




#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


### See Also

* [npm docs](/commands/npm-docs)
* [npm view](/commands/npm-view)
* [npm publish](/commands/npm-publish)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [package
json](/configuring-npm/package-json)

---
title: npm-cache
section: 1
description: Manipulates packages cache
---

### Synopsis

```bash
npm cache add <package-spec>
npm cache clean [<key>]
npm cache ls [<name>@<version>]
npm cache verify
```

Note: This command is unaware of workspaces


### Description

Used to add, list, or clean the npm cache folder


* add:
  Add the specified packages to the local cache
  Note that this is typically
  unnecessary, as npm's cache is self-healing and resistant to data
  corruption issues


### Details

npm stores cache data in an opaque directory within the configured `cache`,
named `_cacache`
im/cacache)-based content-addressable cache that
stores all http request data as well as other package-related data
 For this reason, it should never be necessary to clear
the cache for any reason other than reclaiming disk space, thus why `clean`
now requires `--force` to run


There is currently no method exposed through npm to inspect or directly
manage the contents of this cache


npm will not remove data by itself: the cache will grow as new packages are
installed
 npm makes no guarantee
that a previously-cached piece of data will be available later, and will
automatically delete corrupted contents
 The primary guarantee that the
cache makes is that, if it does return data, that data will be exactly the
data that was inserted


To run an offline verification of existing cache contents, use `npm cache
verify`
im/cacache
* https://npm
im/pacote
* https://npm
im/@npmcli/arborist
* https://npm
im/make-fetch-happen

---
title: npm-ci
section: 1
description: Clean install a project
---

### Synopsis

```bash
npm ci

aliases: clean-install, ic, install-clean, isntall-clean
```

### Description

This command is similar to [`npm install`](/commands/npm-install), except
it's meant to be used in automated environments such as test platforms,
continuous integration, and deployment -- or any situation where you want
to make sure you're doing a clean install of your dependencies


The main differences between using `npm install` and `npm ci` are:

* The project **must** have an existing `package-lock
json`,
  `npm ci` will exit with an error, instead of updating the package lock

* `npm ci` can only install entire projects at a time: individual
  dependencies cannot be added with this command

* It will never write to `package
json` or any of the package-locks:
  installs are essentially frozen


NOTE: If you create your `package-lock
json` file by running `npm install`
with flags that can affect the shape of your dependency tree, such as
`--legacy-peer-deps` or `--install-links`, you _must_ provide the same
flags to `npm ci` or you are likely to encounter errors
 An easy way to do
this is to run, for example,
`npm config set legacy-peer-deps=true --location=project` and commit the
`


### Example

Make sure you have a package-lock and an up-to-date install:

```bash
$ cd 
yml
install:
- npm ci
# keep the npm cache around to speed up installs
cache:
  directories:
  - ""$HOME/
npm""
```

### Configuration

#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 shallow (formerly --global-style) only install direct
deps at top-level
store,
link in place, unhoisted
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
 Sets `--install-strategy=nested`




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` file


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted
cmd` shims on Windows) for package
executables


Set to false to have it not do this
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes
 This option has no effect on
workspaces
json](/configuring-npm/package-lock-json)

---
title: npm-completion
section: 1
description: Tab Completion for npm
---

### Synopsis

```bash
npm completion
```

Note: This command is unaware of workspaces


The synopsis above
loads the completions into your current shell
  Adding it to
your ~/
bashrc or ~/
zshrc will make the completions available
everywhere:

```bash
npm completion >> ~/
d/npm` or 
`/etc/bash_completion


When `COMP_CWORD`, `COMP_LINE`, and `COMP_POINT` are defined in the
environment, `npm completion` acts in ""plumbing mode"", and outputs
completions based on the arguments


### See Also

* [npm developers](/using-npm/developers)
* [npm](/commands/npm)

---
title: npm-config
section: 1
description: Manage the npm configuration files
---

### Synopsis

```bash
npm config set <key>=<value> [<key>=<value> 



]]
npm config delete <key> [<key> 
]
npm config list [--json]
npm config edit
npm config fix

alias: c
```

Note: This command is unaware of workspaces


### Description

npm gets its config settings from the command line, environment
variables, `npmrc` files, and in some cases, the `package
json` file


See [npmrc](/configuring-npm/npmrc) for more information about the npmrc
files


See [config](/using-npm/config) for a more thorough explanation of the
mechanisms involved, and a full list of config options available


The `npm config` command can be used to update and edit the contents
of the user and global npmrc files


### Sub-commands

Config supports the following sub-commands:

#### set

```bash
npm config set key=value [key=value

]
npm set key=value [key=value

]
```

Sets each of the config keys to the value provided
 Modifies the user configuration
file unless [`location`](/commands/npm-config#location) is passed

]
npm get [key 


If multiple keys are provided, then the values will be prefixed with the
key names


If no keys are provided, then this command behaves the same as `npm config
list`


#### list

```bash
npm config list
```

Show all the config settings

]
```

Deletes the specified keys from all configuration files


#### edit

```bash
npm config edit
```

Opens the config file in an editor
  Use the `--global` flag to edit the
global config
  Usually this means
attaching authentication config (i
e


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package
json`


Not supported by all npm commands




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


When set to ""global"" mode, packages are installed into the `prefix` folder
instead of the current working directory


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory




### See Also

* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [package
json](/configuring-npm/package-json)
* [npmrc](/configuring-npm/npmrc)
* [npm](/commands/npm)

---
title: npm-dedupe
section: 1
description: Reduce duplication in the package tree
---

### Synopsis

```bash
npm dedupe

alias: ddp
```

### Description

Searches the local package tree and attempts to simplify the overall
structure by moving dependencies further up the tree, where they can
be more effectively shared by multiple dependent packages


For example, consider this dependency graph:

```
a
+-- b <-- depends on c@1
0
x
|   `-- c@1
0
3
`-- d <-- depends on c@~1
0
10
```

Because of the hierarchical nature of node's module lookup, b and d
will both get their dependency met by the single c package at the root
level of the tree
0
x
+-- c@1
9
0
  Though `d`'s dependency on `c@1
x` could
have been satisfied by `c@1
0


Running `npm dedupe` will cause npm to note the duplication and
re-evaluate, deleting the nested `c` module, because the one in the root is
sufficient


Arguments are ignored


Note that this operation transforms the dependency tree, but will never
result in new modules being installed


Using `npm find-dupes` will run the command in `--dry-run` mode
json`, if you want to update
values in `package
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 shallow (formerly --global-style) only install direct
deps at top-level
 linked: (experimental) install in node_modules/
store,
link in place, unhoisted




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
 Sets `--install-strategy=shallow`




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
 This
will also prevent _writing_ `package-lock
json` if `save` is true




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
 They are just not
physically installed on disk


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted
cmd` shims on Windows) for package
executables
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces




### See Also

* [npm find-dupes](/commands/npm-find-dupes)
* [npm ls](/commands/npm-ls)
* [npm update](/commands/npm-update)
* [npm install](/commands/npm-install)

---
title: npm-deprecate
section: 1
description: Deprecate a version of a package
---

### Synopsis

```bash
npm deprecate <package-spec> <message>
```

Note: This command is unaware of workspaces


### Description

This command will update the npm registry entry for a package, providing a
deprecation warning to all who attempt to install it
npmjs
2
3"" ""critical bug fixed in v0
2
3""
```

SemVer ranges passed to this command are interpreted such that they *do*
include prerelease versions
x ""1
x is no longer supported""
```

In this case, a version `my-thing@1
0` will also be deprecated


You must be the package owner to deprecate something
  See the `owner` and
`adduser` help topics
 Note that you must use double quotes with no space between them to
format an empty string
npmjs
org/""
* Type: URL

The base URL of the npm registry
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one

<paths>]
```

### Description

Similar to its `git diff` counterpart, this command will print diff patches
of files for packages published to the npm registry
0
0
0`
g: `npm diff --diff=pkg@1
0
0 --diff=pkg-fork@1
0
g: `npm diff --diff=pkg@latest --diff=
/packages/pkg`

    Here's an example comparing two different versions of a package named
    `abbrev` from the registry:

    ```bash
    npm diff --diff=abbrev@1
0 --diff=abbrev@1
1
    ```

    On success, output looks like:

    ```bash
    diff --git a/package
json b/package
1
0

v1
1 100644
    --- a/package
json
    @@ -1,6 +1,6 @@
     {
       ""name"": ""abbrev"",
    -  ""version"": ""1
1
0"",
    +  ""version"": ""1
1
 Schlueter <i@izs
me>"",
       ""main"": ""abbrev
js"",
    ```

    Given the flexible nature of npm specs, you can also target local
    directories or git repos just like when using `npm install`:

    ```bash
    npm diff --diff=https://github
com/npm/libnpmdiff --diff=
/local-path
    ```

    In the example above we can compare the contents from the package installed
    from the git repo at `github
com/npm/libnpmdiff` with the contents of the
    `
/local-path` that contains a valid package, such as a modified copy of
    the original


* `npm diff --diff=<pkg-name>` (in a package directory):

    When using a single package name (with no version or tag specifier) as an
    argument, `npm diff` will work in a similar way to
    [`npm-outdated`](npm-outdated) and reach for the registry to figure out
    what current published version of the package named `<pkg-name>`
    will satisfy its dependent declared semver-range
 Once that specific
    version is known `npm diff` will print diff patches comparing the
    current version of `<pkg-name>` found in the local file system with
    that specific version returned by the registry


    Given a package named `abbrev` that is currently installed:

    ```bash
    npm diff --diff=abbrev
    ```

    That will request from the registry its most up to date version and
    will print a diff output comparing the currently installed version to this
    newer one if the version numbers are not the same


* `npm diff --diff=<spec-a>` (in a package directory):

    Similar to using only a single package name, it's also possible to declare
    a full registry specifier version if you wish to compare the local version
    of an installed package with the specific version/tag/semver-range provided
    in `<spec-a>`
0
0
0
0 --diff=pkg@2
0
0`


    It needs to be run from a package directory, such that for a package named
    `pkg` running `npm diff --diff=1
0
0 --diff=1
0
1` is the same as running
    `npm diff --diff=pkg@1
0
0
1`


    If only a single argument `<version-a>` is provided, then the current local
    file system is going to be compared against that version


    Here's an example comparing two specific versions (published to the
    configured registry) of the current project directory:

    ```bash
    npm diff --diff=1
0
0 --diff=1
1
0
    ```

Note that tag names are not valid `--diff` argument values, if you wish to
compare to a published tag, you must use the `pkg@tagname` syntax


#### Filtering files

It's possible to also specify positional arguments using file names or globs
pattern matching in order to limit the result of diff patches to only a subset
of files for a given package, e
/lib/ CHANGELOG
md
  ```

In the example above the diff output is only going to print contents of files
located within the folder `


### Configuration

#### `diff`

* Default:
* Type: String (can be set multiple times)

Define arguments to compare in `npm diff`




#### `diff-unified`

* Default: 3
* Type: Number

The number of lines of context to print in `npm diff`




#### `diff-ignore-all-space`

* Default: false
* Type: Boolean

Ignore whitespace when comparing lines in `npm diff`


Note: this causes `npm diff` to ignore the `--diff-src-prefix` and
`--diff-dst-prefix` configs




#### `diff-dst-prefix`

* Default: ""b/""
* Type: String

Destination prefix to be used in `npm diff` output
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `tag`

* Default: ""latest""
* Type: String

If you ask npm to install a package and don't tell it a specific version,
then it will install the specified tag


Also the tag that is added to the package@version specified by the `npm tag`
command, if no explicit tag is given


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes

## See Also

* [npm outdated](/commands/npm-outdated)
* [npm install](/commands/npm-install)
* [npm config](/commands/npm-config)
* [npm registry](/using-npm/registry)

---
title: npm-dist-tag
section: 1
description: Modify package distribution tags
---

### Synopsis

```bash
npm dist-tag add <package-spec (with version)> [<tag>]
npm dist-tag rm <package-spec> <tag>
npm dist-tag ls [<package-spec>]

alias: dist-tags
```

### Description

Add, remove, and enumerate distribution tags on a package:

* add: Tags the specified version of the package with the specified tag,
  or the [`--tag` config](/using-npm/config#tag) if not specified


### Purpose

Tags can be used to provide an alias instead of version numbers


For example, a project might choose to have multiple streams of development
and use a different tag for each stream, e
g
, `stable`, `beta`, `dev`,
`canary`


By default, the `latest` tag is used by npm to identify the current version
of a package, and `npm install <pkg>` (without any `@<version>` or `@<tag>`
specifier) installs the `latest` tag


Other than `latest`, no tag has any special significance to npm itself


### Caveats

This command used to be known as `npm tag`, which only created new tags,
and so had a different syntax


Tags must share a namespace with version numbers, because they are
specified in the same slot: `npm install <pkg>@<version>` vs
`npm install <pkg>@<tag>`


Tags that can be interpreted as valid semver ranges will be rejected
4` cannot be used as a tag, because it is interpreted by
semver as `>=1
0 <1
0`
com/npm/npm/issues/6082>


The simplest way to avoid semver problems with tags is to use tags that do
not begin with a number or the letter `v`


### Configuration

#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


### See Also

* [package spec](/using-npm/package-spec)
* [npm publish](/commands/npm-publish)
* [npm install](/commands/npm-install)
* [npm dedupe](/commands/npm-dedupe)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-docs
section: 1
description: Open documentation for a package in a web browser
---

### Synopsis

```bash
npm docs [<pkgname> [<pkgname> 

 You can pass multiple
package names at once
json` in the current folder and use the `name` property




#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes


### See Also

* [npm view](/commands/npm-view)
* [npm publish](/commands/npm-publish)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [package
json](/configuring-npm/package-json)

---
title: npm-doctor
section: 1
description: Check the health of your npm environment
---

### Synopsis

```bash
npm doctor [ping] [registry] [versions] [environment] [permissions] [cache]
```

Note: This command is unaware of workspaces


### Description

`npm doctor` runs a set of checks to ensure that your npm installation has
what it needs to manage your JavaScript packages
 npm is mostly a
standalone tool, but it does have some basic requirements that must be met:

+ Node
npmjs
com`, or another service that
  uses the registry API, is available

+ The directories that npm uses, `node_modules` (both locally and
  globally), exist and can be written by the current user

+ The npm cache exists, and the package tarballs within it aren't corrupt


Without all of these working properly, npm may not work properly


Also, in addition to this, there are also very many issue reports due to
using old versions of npm
 Since npm is constantly improving, running
`npm@latest` is better than an old version


`npm doctor` verifies the following items in your environment, and if
there are any recommended changes, it will display them
 You can limit what checks are ran by
specifying them as extra arguments


#### `npm ping`

By default, npm installs from the primary npm registry,
`registry
npmjs
  `npm doctor` hits a special ping endpoint within the
registry
 This can also be checked with `npm ping`
 If this check fails,
you may be using a proxy that needs to be configured, or may need to talk
to your IT staff to get access over HTTPS to `registry
org`


This check is done against whichever registry you've configured (you can
see what that is by running `npm config get registry`), and if you're using
a private registry that doesn't support the `/whoami` endpoint supported by
the primary registry, this check may fail


#### `npm -v`

While Node
 As the CLI is maintained by a small team of contributors, there are
only resources for a single line of development, so npm's own long-term
support releases typically only receive critical security and regression
fixes
 The team believes that the latest tested version of npm is almost
always likely to be the most functional and defect-free version of npm


#### `node -v`

For most users, in most circumstances, the best version of Node will be the
latest long-term support (LTS) release
 Those of you who want access to new
ECMAscript features or bleeding-edge changes to Node's standard library may
be running a newer version, and some may be required to run an older
version of Node because of enterprise change control policies
 That's OK!
But in general, the npm team recommends that most users run Node
js LTS
  This
part of `npm doctor` just lets you, and maybe whoever's helping you with
support, know that you're not using the default registry


#### `which git`

While it's documented in the README, it may not be obvious that npm needs
Git installed to do many of the things that it does
 Also, in some cases
– especially on Windows – you may have Git set up in such a way that it's
not accessible via your `PATH` so that npm can find it

* Global package binaries must be writable by the user running npm
 In the event that there are corrupt
packages in your cache, you should probably run `npm cache clean -f` and
reset the cache


### Configuration

#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry
]
```

Note: This command is unaware of workspaces


For instance, you can do `npm install connect` to install connect
into your package, and then `npm edit connect` to make a few
changes to your locally installed copy


### Configuration

#### `editor`

* Default: The EDITOR or VISUAL environment variables, or
  '%SYSTEMROOT%\notepad
exe' on Windows, or 'vi' on Unix systems
* Type: String

The command to run for `npm edit` and `npm config edit`




### See Also

* [npm folders](/configuring-npm/folders)
* [npm explore](/commands/npm-explore)
* [npm install](/commands/npm-install)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-exec
section: 1
description: Run a command from a local or remote npm package
---

### Synopsis

```bash
npm exec -- <pkg>[@<version>] [args





]'

alias: x
```

### Description

This command allows you to run an arbitrary command from an npm package
(either one installed locally, or fetched remotely), in a similar context
as running it via `npm run`


Run without positional arguments or `--call`, this allows you to
interactively run commands in the same sort of shell environment that
`package
json` scripts are run
  Interactive mode is not supported in CI
environments when standard input is a TTY, to prevent hangs


Whatever packages are specified by the `--package` option will be
provided in the `PATH` of the executed command, along with any locally
installed package executables
  The `--package` option may be
specified multiple times, to execute the supplied command in an environment
where all specified packages are available


If any requested packages are not present in the local project
dependencies, then a prompt is printed, which can be suppressed by
providing either `--yes` or `--no`
 When standard input is not a TTY or a
CI environment is detected, `--yes` is assumed


Package names provided without a specifier will be matched with whatever
version exists in the local project


If no `-c` or `--call` option is provided, then the positional arguments
are used to generate the command string
json`,
  or if all entries are aliases of the same command, then that command
  will be used

- If the package has multiple `bin` entries, and one of them matches the
  unscoped portion of the `name` field, then that command will be used
  When run via `npm exec`, a double-hyphen `--`
flag can be used to suppress npm's parsing of switches and options that
should be sent to the executed command


In contrast, due to npm's argument parsing logic, running this command is
different:

```
$ npm exec foo@latest bar --package=@npmcli/foo
```

In this case, npm will parse the `--package` option first, resolving the
`@npmcli/foo` package
  The following command would
thus be equivalent to the `npx` command above:

```
$ npm exec -- foo@latest bar --package=@npmcli/foo
```

### Configuration

#### `package`

* Default:
* Type: String (can be set multiple times)

The package or packages to install for [`npm exec`](/commands/npm-exec)



#### `call`

* Default: """"
* Type: String

Optional companion option for `npm exec`, `npx` that allows for specifying a
custom command to be run along with the installed packages


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


### Examples

Run the version of `tap` in the local dependencies, with the provided
arguments:

```
$ npm exec -- tap --bail test/foo
js
$ npx tap --bail test/foo
js
```

Run a command _other than_ the command whose name matches the package name
by specifying a `--package` option:

```
$ npm exec --package=foo -- bar --bar-argument
# ~ or ~
$ npx --package=foo bar --bar-argument
```

Run an arbitrary shell script, in the context of the current project:

```
$ npm x -c 'eslint && say ""hooray, lint passed""'
$ npx -c 'eslint && say ""hooray, lint passed""'
```

### Workspaces support

You may use the [`workspace`](/using-npm/config#workspace) or
[`workspaces`](/using-npm/config#workspaces) configs in order to run an
arbitrary command from an npm package (either one installed locally, or fetched
remotely) in the context of the specified workspaces
g:

```


+-- package
json
   +-- b
   |   `-- package
json` file
g:

```
{
    ""workspaces"": [ ""
/packages/*"" ]
}
```

You can execute an arbitrary command from a package in the context of each of
the configured workspaces when using the
[`workspaces` config options](/using-npm/config#workspace), in this example
we're using **eslint** to lint any js file found within each workspace folder:

```
npm exec --ws -- eslint 
/*
js
```

The `workspace` config can also be specified multiple times in order to run a
specific script in the context of multiple workspaces
g:

```
npm exec -w a -w b -- eslint 
/*
/packages/b` folders


### Compatibility with Older npx Versions

The `npx` binary was rewritten in npm v7
  `npx` uses the `npm exec`
command instead of a separate argument parser and install process, with
some affordances to maintain backwards compatibility with the arguments it
accepted in previous versions


This resulted in some shifts in its functionality:

- Any `npm` config value may be provided

- To prevent security and user-experience problems from mistyping package
  names, `npx` prompts before installing anything
  Suppress this
  prompt with the `-y` or `--yes` option

- Shell fallback functionality is removed, as it is not advisable
  This is maintained, but only for the `npx`
  executable

- The `--ignore-existing` option is removed
  Locally installed bins are
  always present in the executed process `PATH`
  `npx` will always use the `npm` it ships
  with

- The `--node-arg` and `-n` options are removed


#### prefer-offline

Bypasses staleness checks for packages
  Missing data will still be
requested from the server


#### offline

Forces full offline mode
 Any packages not locally cached will result in
an error


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result to selecting all of the
  nested workspaces)

This value is not exported to the environment for child processes


### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm start](/commands/npm-start)
* [npm restart](/commands/npm-restart)
* [npm stop](/commands/npm-stop)
* [npm config](/commands/npm-config)
* [npm workspaces](/using-npm/workspaces)
* [npx](/commands/npx)

---
title: npm-explain
section: 1
description: Explain installed packages
---

### Synopsis

```bash
npm explain <package-spec>

alias: why
```

### Description

This command will print the chain of dependencies causing a given package
to be installed in the current project


The package spec can also refer to a folder within `
/node_modules`

For example, running `npm explain glob` within npm's source tree will show:

```bash
glob@7
1
4"" from the root project

glob@7
1 dev
node_modules/tacks/node_modules/glob
  glob@""^7
6
3
0"" from the root project
```

To explain just the package residing at a specific folder, pass that as the
argument to the command
  This can be useful when trying to figure out
exactly why a given dependency is being duplicated to satisfy conflicting
version requirements within the project


```bash
$ npm explain node_modules/nyc/node_modules/find-up
find-up@3
0
0 dev
node_modules/nyc/node_modules/find-up
  find-up@""^3
0
0"" from nyc@14
1
1"" from tap@14
10
8"" from the root project
```

### Configuration
#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
parse() before
  saving them to your `package
json`




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


### See Also

* [package spec](/using-npm/package-spec)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm folders](/configuring-npm/folders)
* [npm ls](/commands/npm-ls)
* [npm install](/commands/npm-install)
* [npm link](/commands/npm-link)
* [npm prune](/commands/npm-prune)
* [npm outdated](/commands/npm-outdated)
* [npm update](/commands/npm-update)

---
title: npm-explore
section: 1
description: Browse an installed package
---

### Synopsis

```bash
npm explore <pkg> [ -- <command>]
```

Note: This command is unaware of workspaces


If a command is specified, then it is run in the subshell, which then
immediately terminates




### See Also

* [npm folders](/configuring-npm/folders)
* [npm edit](/commands/npm-edit)
* [npm rebuild](/commands/npm-rebuild)
* [npm install](/commands/npm-install)

---
title: npm-find-dupes
section: 1
description: Find duplication in the package tree
---

### Synopsis

```bash
npm find-dupes
```

### Description

Runs `npm dedupe` in `--dry-run` mode, making npm only output the
duplications, without actually changing the package tree


### Configuration

#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 shallow (formerly --global-style) only install direct
deps at top-level
 linked: (experimental) install in node_modules/
store,
link in place, unhoisted




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 Sets `--install-strategy=nested`




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies
 Sets `--install-strategy=shallow`


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
 This
will also prevent _writing_ `package-lock
json` if `save` is true




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty
json` or `npm-shrinkwrap
json` file


If a package type appears in both the `--include` and `--omit` lists, then
it will be included




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink




### See Also

* [npm dedupe](/commands/npm-dedupe)
* [npm ls](/commands/npm-ls)
* [npm update](/commands/npm-update)
* [npm install](/commands/npm-install)


---
title: npm-fund
section: 1
description: Retrieve funding information
---

### Synopsis

```bash
npm fund [<package-spec>]
```

### Description

This command retrieves information on how to fund the dependencies of a
given project
 If no package name is provided, it will list all
dependencies that are looking for funding in a tree structure, listing
the type of funding and the url to visit


#### Example

### Workspaces support

It's possible to filter the results to only include a single workspace
and its dependencies using the
[`workspace` config](/using-npm/config#workspace) option


#### Example:

Here's an example running `npm fund` in a project with a configured
workspace `a`:

```bash
$ npm fund
test-workspaces-fund@1
0
0
+-- https://example
0
0
| `-- https://example
0
0
+-- https://example
com/org
    `-- bar@2
0
0
```

And here is an example of the expected result when filtering only by a
specific workspace `a` in the same project:

```bash
$ npm fund -w a
test-workspaces-fund@1
0
`-- https://example
com/a
  | `-- a@1
0
  `-- https://example
0


* In `npm pkg set` it enables parsing set values with JSON
json`


Not supported by all npm commands


Set to `false` to suppress browser behavior and instead print urls to
terminal


Set to `true` to use default system URL opener

* Type: Boolean

When set to true, npm uses unicode characters in the tree output
 When
false, it uses ascii characters instead of unicode glyphs




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes




## See Also

* [package spec](/using-npm/package-spec)
* [npm install](/commands/npm-install)
* [npm docs](/commands/npm-docs)
* [npm ls](/commands/npm-ls)
* [npm config](/commands/npm-config)
* [npm workspaces](/using-npm/workspaces)

---
title: npm-help-search
section: 1
description: Search npm help documentation
---

### Synopsis

```bash
npm help-search <text>
```

Note: This command is unaware of workspaces
  It is rarely if ever necessary to call this command
directly




### See Also

* [npm](/commands/npm)
* [npm help](/commands/npm-help)

---
title: npm-help
section: 1
description: Get help on npm
---

### Synopsis

```bash
npm help <term> [<terms


### Description

If supplied a topic, then show the appropriate documentation page


If the topic does not exist, or if multiple terms are provided, then npm
will run the `help-search` command to find a match
  Note that, if
`help-search` finds a single subject, then it will run `help` on that
topic, so unique matches are equivalent to specifying a topic name


### Configuration

#### `viewer`

* Default: ""man"" on Posix, ""browser"" on Windows
* Type: String

The program to use to view help content


Set to `""browser""` to view html help content in the default web browser
json](/configuring-npm/package-json)
* [npm help-search](/commands/npm-help-search)

---
title: npm-hook
section: 1
description: Manage registry hooks
---

### Synopsis

```bash
npm hook add <pkg> <url> <secret> [--type=<type>]
npm hook ls [pkg]
npm hook rm <id>
npm hook update <id> <url> <secret>
```

Note: This command is unaware of workspaces


### Description

Allows you to manage [npm
hooks](https://blog
npmjs


Hooks allow you to configure URL endpoints that will be notified whenever a
change happens to any of the supported entity types
 Three different types
of entities can be watched by hooks: packages, owners, and scopes


To create a scope hook, prefix the scope name with `@` (as in,
`@yourscope`)


### Example

Add a hook to watch a package for changes:

```bash
$ npm hook add lodash https://example
com/ my-shared-secret
```

Add a hook to watch packages in the scope `@npm`

```bash
$ npm hook add @npm https://example
com/ my-shared-secret
```

List all your active hooks:

```bash
$ npm hook ls
```

List your active hooks for the `lodash` package:

```bash
$ npm hook ls lodash
```

Update an existing hook's url:

```bash
$ npm hook update id-deadbeef https://my-new-website
here/
```

Remove a hook:

```bash
$ npm hook rm id-deadbeef
```

### Configuration

#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator




### See Also

* [""Introducing Hooks"" blog post](https://blog


`initializer` in this case is an npm package named `create-<initializer>`,
which will be installed by [`npm-exec`](/commands/npm-exec), and then have its
main bin executed -- presumably creating or updating `package
json` and
running any other initialization-related operations


The init command is transformed to a corresponding `npm exec` operation as
follows:

* `npm init foo` -> `npm exec create-foo`
* `npm init @usr/foo` -> `npm exec @usr/create-foo`
* `npm init @usr` -> `npm exec @usr/create`
* `npm init @usr@2
0
0` -> `npm exec @usr/create-foo@2
 It will attempt to make reasonable
guesses based on existing fields, dependencies, and options selected
 It is
strictly additive, so it will keep any fields and values that were already
set
 If
you pass `--scope`, it will create a scoped package
  If you want npm
to use the latest version, or another specific version you must specify
it:

* `npm init foo@latest` # fetches and runs the latest `create-foo` from
    the registry
* `npm init foo@1
2
3` specifically

#### Forwarding additional options

Any additional options will be passed directly to the command, so `npm init
foo -- --hello` will map to `npm exec -- create-foo --hello`


To better illustrate how options are forwarded, here's a more evolved
example showing options passed to both the **npm cli** and a create package,
both following commands are equivalent:

- `npm init foo -y --registry=<url> -- --hello -a`
- `npm exec -y --registry=<url> -- create-foo --hello -a`

### Examples

Create a new React-based project using
[`create-react-app`](https://npm
json using legacy init:

```bash
$ mkdir my-npm-pkg && cd my-npm-pkg
$ git init
$ npm init
```

Generate it without having it ask any questions:

```bash
$ npm init -y
```

### Workspaces support

It's possible to create a new workspace within your project by using the
`workspace` config option
 When using `npm init -w <dir>` the cli will
create the folders and boilerplate expected while also adding a reference
to your project `package
json` `""workspaces"": []` property in order to make
sure that new generated **workspace** is properly set up as such


Given a project with no workspaces, e
g:

```


+-- package
json
```

You may generate a new workspace using the legacy init:

```bash
$ npm init -w packages/a
```

That will generate a new folder and `package
json` file, while also updating
your top-level `package
json` to add the reference to this new workspace:

```

json
`-- packages
   `-- a
       `-- package
json` to recognize it as such:

```bash
npm init -w packages/my-react-app react-app 
g: `react-app 
`:

```


+-- package
json
   `-- my-react-app
       +-- README
       +-- package

```

### Configuration

#### `init-author-name`

* Default: """"
* Type: String

The value `npm init` should use by default for the package author's name




#### `init-license`

* Default: ""ISC""
* Type: String

The value `npm init` should use by default for the package license
 See the
documentation for the
[init-package-json](https://github
com/npm/init-package-json) module for
more information, or [npm init](/commands/npm-init)
0
json

* Allow the `npm version` command to work on an unclean git repository

* Allow deleting the cache folder with `npm cache clean`

* Allow conflicting peerDependencies to be installed in the root project

* Implicitly set `--yes` during `npm init`

* Allow clobbering existing values in `npm pkg`
* Allow unpublishing of entire packages (not just a single version)


If you don't have a clear idea of what you want to do, it is strongly
recommended that you do not use this option!



#### `scope`

* Default: the scope of the current project, if any, or """"
* Type: String

Associate an operation with a scope for a scoped registry


Useful when logging in to or out of a private registry:

```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry
mycorp


This will also cause `npm init` to create a scoped package


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes




#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes
json](/configuring-npm/package-json)
* [npm version](/commands/npm-version)
* [npm scope](/using-npm/scope)
* [npm exec](/commands/npm-exec)
* [npm workspaces](/using-npm/workspaces)

---
title: npm-install-ci-test
section: 1
description: Install a project with a clean slate and run tests
---

### Synopsis

```bash
npm install-ci-test

aliases: cit, clean-install-test, sit
```

### Description

This command runs `npm ci` followed immediately by `npm test`


### Configuration

#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 shallow (formerly --global-style) only install direct
deps at top-level
 linked: (experimental) install in node_modules/




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies
 Sets `--install-strategy=shallow`




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` file


If a package type appears in both the `--include` and `--omit` lists, then
it will be included




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 See [`npm
fund`](/commands/npm-fund) for details


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink




### See Also

* [npm install-test](/commands/npm-install-test)
* [npm ci](/commands/npm-ci)
* [npm test](/commands/npm-test)

---
title: npm-install-test
section: 1
description: Install package(s) and run tests
---

### Synopsis

```bash
npm install-test [<package-spec> 




### Configuration

#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package
json` file as dependencies
json`


Will also prevent writing to `package-lock
json` if set to `false`




#### `save-exact`

* Default: false
* Type: Boolean

Dependencies saved to package
json will be configured with an exact version
rather than using npm's default semver range operator
 See
[folders](/configuring-npm/folders) for more on the differences in behavior

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 linked: (experimental) install in node_modules/
store,
link in place, unhoisted




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 Sets `--install-strategy=nested`
 Sets `--install-strategy=shallow`




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` file
 They are just not
physically installed on disk


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `prefer-dedupe`

* Default: false
* Type: Boolean

Prefer to deduplicate packages if possible, rather than choosing a newer
version of a dependency




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
 This
will also prevent _writing_ `package-lock
json` if `save` is true




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock
json`,
ignoring `node_modules`


For `update` this means only the `package-lock
json` will be updated,
instead of checking `node_modules` and downloading dependencies
json`, rather than the contents of `node_modules`




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging
json files
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted
cmd` shims on Windows) for package
executables


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 See [`npm
fund`](/commands/npm-fund) for details




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `cpu`

* Default: null
* Type: null or String

Override CPU architecture of native modules to install




#### `os`

* Default: null
* Type: null or String

Override OS of native modules to install
json, which comes from `process
json



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink

 If the
package has a package-lock, or an npm shrinkwrap file, or a yarn lock file,
the installation of dependencies will be driven by that, respecting the
following order of precedence:

* `npm-shrinkwrap
json`
* `package-lock
json`
* `yarn


A `package` is:

* a) a folder containing a program described by a
  [`package
json`](/configuring-npm/package-json) file
* b) a gzipped tarball containing (a)
* c) a url that resolves to (b)
* d) a `<name>@<version>` that is published on the registry (see
  [`registry`](/using-npm/registry)) with (c)
* e) a `<name>@<tag>` (see [`npm dist-tag`](/commands/npm-dist-tag)) that
  points to (d)
* f) a `<name>` that has a ""latest"" tag satisfying (e)
* g) a `<git remote url>` that resolves to (a)

Even if you never publish your package, you can still get a lot of benefits
of using npm if you just want to write a node program (a), and perhaps if
you also want to be able to easily install it elsewhere after packing it up
into a tarball (b)



* `npm install` (in a package directory, no arguments):

    Install the dependencies to the local `node_modules` folder


    By default, `npm install` will install all modules listed as
    dependencies in [`package
json`](/configuring-npm/package-json)


    > NOTE: The `--production` flag has no particular meaning when adding a
    dependency to a project
 If `<folder>` sits outside the root of your project,
    *npm will not install the package dependencies* in the directory `<folder>`,
    but it will create a symlink to `<folder>`


    Example:

    ```bash
    npm install 

/other-package --install-links
    npm install 
/sub-package
    ```

* `npm install <tarball file>`:

    Install a package that is sitting on the filesystem
tar`, `
gz`, or `
tgz` as the
      extension

    * The package must contain a `package
json` file with `name` and
      `version` properties
/package
tgz
    ```

* `npm install <tarball url>`:

    Fetch the tarball url, and then install it
com/indexzero/forever/tarball/v0
5
6
    ```

* `npm install [<@scope>/]<name>`:

    Do a `<name>@<tag>` install, where `<tag>` is the ""tag"" config
 (See
    [`config`](/using-npm/config#tag)
 The config's default value is `latest`
)

    In most cases, this will install the version of the modules tagged as
    `latest` on the npm registry


    Example:

    ```bash
    npm install sax
    ```

    `npm install` saves any specified packages into `dependencies` by default


    * `-O, --save-optional`: Package will appear in your
      `optionalDependencies`


    When using any of the above options to save dependencies to your
    package


    Further, if you have an `npm-shrinkwrap
 If no registry is associated with
    the given scope the default registry is assumed
 See
    [`scope`](/using-npm/scope)
 Scopes names
    must also be followed by a slash


* `npm install <alias>@npm:<name>`:

    Install a package under a custom alias
npmjs
com/package/validate-npm-package-name#naming-rules)

    If the tag does not exist in the registry data for that package, then this
    will fail


    Example:

    ```bash
    npm install sax@latest
    npm install @myorg/mypackage@latest
    ```

* `npm install [<@scope>/]<name>@<version>`:

    Install the specified version of the package
  This will fail if the
    version has not been published to the registry


    Example:

    ```bash
    npm install sax@0
1
5
0
    ```

* `npm install [<@scope>/]<name>@<version range>`:

    Install a version of the package matching the specified version range
json`](/configuring-npm/package-json)


    Example:

    ```bash
    npm install sax@"">=0
2
0""
    npm install @myorg/privatepackage@""16 - 17""
    ```

* `npm install <git remote url>`:

    Installs the package from the hosted git provider, cloning it with
    `git`
  For a full git remote url, only that URL will be attempted
 If neither `#<commit-ish>` or
    `#semver:<semver>` is specified, then the default branch of the
    repository is used


    If the repository makes use of submodules, those submodules will be
    cloned as well


    If the package being installed contains a `prepare` script, its
    `dependencies` and `devDependencies` will be installed, and the prepare
    script will be run, before the package is packaged and installed
0
com:npm/cli#pull/273
    npm install git+ssh://git@github
com:npm/cli#semver:^5
git
    npm install git://github
git#v1
0
27
    GIT_SSH_COMMAND='ssh -i ~/
ssh/custom_ident' npm install git+ssh://git@github
 If neither `#<commit-ish>` or
    `#semver:<semver>` is specified, then the default branch is used


    Examples:

    ```bash
    npm install mygithubuser/myproject
    npm install github:mygithubuser/myproject
   ```

* `npm install gist:[<githubname>/]<gistID>[#<commit-ish>|#semver:<semver>]`:

    Install the package at `https://gist
com/gistID` by attempting to
    clone it using `git`
json`


    As with regular git dependencies, `dependencies` and `devDependencies` will
    be installed if the package has a `prepare` script before the package is
    done installing


    Example:

    ```bash
    npm install gist:101a11beef
    ```

* `npm install bitbucket:<bitbucketname>/<bitbucketrepo>[#<commit-ish>]`:

    Install the package at `https://bitbucket


    If `#<commit-ish>` is provided, it will be used to clone exactly that
    commit
 If neither `#<commit-ish>` or `#semver:<semver>` is
    specified, then `master` is used


    As with regular git dependencies, `dependencies` and `devDependencies` will
    be installed if the package has a `prepare` script before the package is
    done installing


    If `#<commit-ish>` is provided, it will be used to clone exactly that
    commit
 If the commit-ish has the format `#semver:<semver>`, `<semver>` can
    be any valid semver range or exact version, and npm will look for any tags
    or refs matching that range in the remote repository, much as it would for a
    registry dependency


    Example:

    ```bash
    npm install gitlab:mygitlabuser/myproject
    npm install gitlab:myusr/myproj#semver:^5

For example:

```bash
npm install sax@"">=0
1
0 <0
0"" bench supervisor
```

The `--tag` argument will apply to all of the specified install targets
 If
a tag with the given name exists, the tagged version is preferred over
newer versions


The `--dry-run` argument will report in the usual way what the install
would have done without actually installing anything
json`, instead of checking `node_modules` and downloading
dependencies


```bash
npm install sax --force
```

### Configuration

See the [`config`](/using-npm/config) help doc


These are some of the most common options related to installation


#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package
json` file as dependencies
json`




#### `save-exact`

* Default: false
* Type: Boolean

Dependencies saved to package
json will be configured with an exact version
rather than using npm's default semver range operator




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 linked: (experimental) install in node_modules/
store,
link in place, unhoisted
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
 Sets `--install-strategy=nested`




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap
json` file
 They are just not
physically installed on disk


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts


This is the inverse of `--omit=<type>`


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json` files when installing
json` if `save` is true




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock
json`,
ignoring `node_modules`
json` will be updated,
instead of checking `node_modules` and downloading dependencies
json`, rather than the contents of `node_modules`




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
cmd` shims on Windows) for package
executables
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 See [`npm
fund`](/commands/npm-fund) for details




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `cpu`

* Default: null
* Type: null or String

Override CPU architecture of native modules to install
 Acceptable values
are same as `cpu` field of package
json, which comes from `process
platform`




#### `libc`

* Default: null
* Type: null or String

Override libc of native modules to install
 Acceptable values are same as
`libc` field of package
json



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes
 This option has no effect on
workspaces




### Algorithm

Given a `package{dep}` structure: `A{B,C}, B{C}, C{D}`,
the npm install algorithm produces:

```bash
A
+-- B
+-- C
+-- D
```

That is, the dependency from B to C is satisfied by the fact that A already
caused C to be installed at a higher level
 D is still installed at the top
level because nothing conflicts with it


For `A{B,C}, B{C,D@1}, C{D@2}`, this algorithm produces:

```bash
A
+-- B
+-- C
   `-- D@2
+-- D@1
```

Because B's D@1 will be installed in the top-level, C now has to install
D@2 privately for itself
 This algorithm is deterministic, but different
trees may be produced if two dependencies are requested for installation in
a different order


See [folders](/configuring-npm/folders) for a more detailed description of
the specific folder structures that npm creates


### See Also

* [npm folders](/configuring-npm/folders)
* [npm update](/commands/npm-update)
* [npm audit](/commands/npm-audit)
* [npm fund](/commands/npm-fund)
* [npm link](/commands/npm-link)
* [npm rebuild](/commands/npm-rebuild)
* [npm scripts](/using-npm/scripts)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm registry](/using-npm/registry)
* [npm dist-tag](/commands/npm-dist-tag)
* [npm uninstall](/commands/npm-uninstall)
* [npm shrinkwrap](/commands/npm-shrinkwrap)
* [package


Package linking is a two-step process


First, `npm link` in a package folder with no arguments will create a
symlink in the global folder `{prefix}/lib/node_modules/<package>` that
links to the package where the `npm link` command was executed
 It will
also link any bins in the package to `{prefix}/bin/{name}`
json`, _not_ from the
directory name


The package name can be optionally prefixed with a scope
 See
[`scope`](/using-npm/scope)
  The scope must be preceded by an @-symbol and
followed by a slash


When creating tarballs for `npm publish`, the linked packages are
""snapshotted"" to their current state by resolving the symbolic links, if
they are included in `bundleDependencies`


For example:

```bash
cd ~/projects/node-redis    # go into the package directory
npm link                    # creates global link
cd ~/projects/node-bloggy   # go into some other package directory


You may also shortcut the two steps in one
  For example, to do the
above use-case in a shorter way:

```bash
cd ~/projects/node-bloggy  # go into the dir of your main project
npm link 


If your linked package is scoped (see [`scope`](/using-npm/scope)) your
link command must include that scope, e
json` by default, on the assumption that the intention is to have
a link stand in for a regular non-link dependency
0
1`, and ran `npm link redis`, it would replace
the `^3

/path/to/node-redis`, which you
probably don't want!  Additionally, other users or developers on your
project would run into issues if they do not have their folders set up
exactly the same as yours


If you are adding a _new_ dependency as a link, you should add it to the
relevant metadata by running `npm install <dep> --package-lock-only`
json` files, you can use `npm link <dep> --save` to do so


### Configuration

#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package
json` if set to `false`
json will be configured with an exact version
rather than using npm's default semver range operator


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 shallow (formerly --global-style) only install direct
deps at top-level
store,
link in place, unhoisted




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
 Sets `--install-strategy=nested`




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies
 Sets `--install-strategy=shallow`


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved
 If `--strict-peer-deps` is set, then
this warning is treated as a failure
 This
will also prevent _writing_ `package-lock
json` if `save` is true




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` file
 They are just not
physically installed on disk


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts
cmd` shims on Windows) for package
executables


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems
 See [`npm
fund`](/commands/npm-fund) for details


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 - Commands that do
other things (test, exec, publish, etc


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes




### See Also

* [package spec](/using-npm/package-spec)
* [npm developers](/using-npm/developers)
* [package
npmrc` file
com/forgot>

To change your email address, go to <https://www
  When authenticating on a new machine,
the username, password and email address must all match with
your existing record
npmjs




#### `scope`

* Default: the scope of the current project, if any, or """"
* Type: String

Associate an operation with a scope for a scoped registry


Useful when logging in to or out of a private registry:

```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry
 Note that if an `otp`
config is given, this value will always be set to `legacy`
 This will invalidate the token
everywhere you're using it, not just for the current environment

In this case, it will _only_ affect the current environment


If `--scope` is provided, this will find the credentials for the registry
connected to that scope, if set
npmjs




#### `scope`

* Default: the scope of the current project, if any, or """"
* Type: String

Associate an operation with a scope for a scoped registry


Useful when logging in to or out of a private registry:

```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry
mycorp
com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

This will cause `@mycorp` to be mapped to the registry for future
installation of packages specified according to the pattern
`@mycorp/package`


This will also cause `npm init` to create a scoped package


```
# accept all defaults, and create a package named ""@foo/whatever"",
# instead of just named ""whatever""
npm init --scope=@foo --yes
```



### See Also

* [npm adduser](/commands/npm-adduser)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npm whoami](/commands/npm-whoami)

---
title: npm-ls
section: 1
description: List installed packages
---

### Synopsis

```bash
npm ls <package-spec>

alias: list
```

### Description

This command will print to stdout all the versions of packages that are
installed, as well as their dependencies when `--all` is specified, in a
tree structure


Note: to get a ""bottoms up"" view of why a given package is included in the
tree at all, use [`npm explain`](/commands/npm-explain)


Positional arguments are `name@version-range` identifiers, which will limit
the results to only the paths to the packages named
5
4
  └── promzard@0
1


If a project specifies git urls for dependencies these are shown
in parentheses after the `name@version` to make it easier for users to
recognize potential forks of a project


With the advent of automatic install-time deduplication of dependencies in
npm v3, the `ls` output was modified to display the logical dependency
graph as a tree structure, since this was more useful to most users


A thorough re-examination of the use cases, intention, behavior, and output
of this command, is currently underway
  Expect significant changes to at
least the default human-readable `npm ls` output in npm v8
parse() before
  saving them to your `package




#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `depth`

* Default: `Infinity` if `--all` is set, otherwise `1`
* Type: null or Number

The depth to go when recursing packages for `npm ls`




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap
json` file
 They are just not
physically installed on disk


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `link`

* Default: false
* Type: Boolean

Used with `npm ls`, limiting output to only those packages that are linked




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock


For `update` this means only the `package-lock
json`, rather than the contents of `node_modules`

* Type: Boolean

When set to true, npm uses unicode characters in the tree output




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces




### See Also

* [package spec](/using-npm/package-spec)
* [npm explain](/commands/npm-explain)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm folders](/configuring-npm/folders)
* [npm explain](/commands/npm-explain)
* [npm install](/commands/npm-install)
* [npm link](/commands/npm-link)
* [npm prune](/commands/npm-prune)
* [npm outdated](/commands/npm-outdated)
* [npm update](/commands/npm-update)

---
title: npm-org
section: 1
description: Manage orgs
---

### Synopsis

```bash
npm org set orgname username [developer | admin | owner]
npm org rm orgname username
npm org ls orgname [<username>]

alias: ogr
```

Note: This command is unaware of workspaces


### Example

Add a new developer to an org:

```bash
$ npm org set my-org @mx-smith
```

Add a new admin to an org (or change a developer to an admin):

```bash
$ npm org set my-org @mx-santos admin
```

Remove a user from an org:

```bash
$ npm org rm my-org mx-santos
```

List all users in an org:

```bash
$ npm org ls my-org
```

List all users in JSON format:

```bash
$ npm org ls my-org --json
```

See what role a user has in an org:

```bash
$ npm org ls my-org @mx-santos
```

### Description

You can use the `npm org` commands to manage and view users of an
organization
  It supports adding and removing users, changing their roles,
listing them, and finding specific ones and their roles
npmjs
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package
json`
 For
`npm search`, this will be tab-separated table format




### See Also

* [using orgs](/using-npm/orgs)
* [Documentation on npm Orgs](https://docs

]
```

### Description

This command will check the registry to see if any (or, specific) installed
packages are currently outdated


By default, only the direct dependencies of the root project and direct
dependencies of your configured *workspaces* are shown

Use `--all` to find all outdated meta-dependencies as well


In the output:

* `wanted` is the maximum version of the package that satisfies the semver
  range specified in `package
json`
 If there's no available semver range
  (i
json`), then `wanted` shows the currently-installed
  version

* `location` is where in the physical tree the package is located

* `depended by` shows which package depends on the displayed dependency
* `package type` (when using `--long` / `-l`) tells you whether this
  package is a `dependency` or a dev/peer/optional dependency
json` are always marked `dependencies`

* Yellow indicates that there's a newer version _above_ your semver
  requirements (usually new major, or new 0
x minor) so proceed with
  caution


### An example

```bash
$ npm outdated
Package      Current   Wanted   Latest  Location                  Depended by
glob          5
15   5
0
15    6
0
3      git      git  node_modules/nothingness  dependent-package-name
npm            3
5
1    3
3
3
3
3  node_modules/once         dependent-package-name
```

With these `dependencies`:
```json
{
  ""glob"": ""^5
3

* Git dependencies will always be reinstalled, because of how they're
  specified

* `npm@3
5
5
1` because
  npm uses dist-tags to manage its `latest` and `next` release channels

* `once` is just plain out of date
 Reinstalling `node_modules` from
  scratch or running `npm update` will bring it up to spec


### Configuration

#### `all`

* Default: false
* Type: Boolean

When running `npm outdated` and `npm ls`, setting `--all` will show all
outdated or installed packages, rather than only those directly depended
upon by the current project


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package
json`




#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output
 For
`npm search`, this will be tab-separated table format




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


### See Also

* [package spec](/using-npm/package-spec)
* [npm update](/commands/npm-update)
* [npm dist-tag](/commands/npm-dist-tag)
* [npm registry](/using-npm/registry)
* [npm folders](/configuring-npm/folders)
* [npm workspaces](/using-npm/workspaces)

---
title: npm-owner
section: 1
description: Manage package owners
---

### Synopsis

```bash
npm owner add <user> <package-spec>
npm owner rm <user> <package-spec>
npm owner ls <package-spec>

alias: author
```

### Description

Manage ownership of published packages


* ls: List all the users who have access to modify a package and push new
  versions

* add: Add a new user as a maintainer of a package

* rm: Remove a user from the package owner list


Note that there is only one level of access
  Either you can modify a package,
or you can't


If you have two-factor authentication enabled with `auth-and-writes` (see
[`npm-profile`](/commands/npm-profile)) then you'll need to go through a second factor
flow when changing ownership or include an otp on the command line with `--otp`


### Configuration

#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes


### See Also

* [package spec](/using-npm/package-spec)
* [npm profile](/commands/npm-profile)
* [npm publish](/commands/npm-publish)
* [npm registry](/using-npm/registry)
* [npm adduser](/commands/npm-adduser)

---
title: npm-pack
section: 1
description: Create a tarball from a package
---

### Synopsis

```bash
npm pack <package-spec>
```

### Configuration

#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
parse() before
  saving them to your `package
json`




#### `pack-destination`

* Default: ""




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes


### Description

For anything that's installable (that is, a package folder, tarball,
tarball url, git url, name@tag, name@version, name, or scoped name), this
command will fetch it to the cache, copy the tarball to the current working
directory as `<name>-<version>


If no arguments are supplied, then npm packs the current package folder
im/npm-packlist)
* [npm cache](/commands/npm-cache)
* [npm publish](/commands/npm-publish)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-ping
section: 1
description: Ping npm registry
---

### Synopsis

```bash
npm ping
```

Note: This command is unaware of workspaces
org/
npm notice PONG 255ms
```
otherwise you will get an error:
```bash
npm notice PING http://foo
npmjs
org/""
* Type: URL

The base URL of the npm registry




### See Also

* [npm doctor](/commands/npm-doctor)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-pkg
section: 1
description: Manages your package
json
---

### Synopsis

```bash
npm pkg set <key>=<value> [<key>=<value> 

]
npm pkg get [<key> [<key> 


]]
npm pkg delete <key> [<key> 



]
npm pkg fix
```

### Description

A command that automates the management of `package

`npm pkg` provide 3 different sub commands that allow you to modify or retrieve
values for given object keys in your `package
json`
json`, it's the
same notation used in [`npm view`](/commands/npm-view) to retrieve information
from the registry manifest, below you can find more examples on how to use it


* `npm pkg get <field>`

    Retrieves a value `key`, defined in your `package
json` file
test
    ```

    For fields that are arrays, requesting a non-numeric field will return
    all of the values from the objects in the list
 To just get the email address of the first
    contributor in the list, you can run:

    ```bash
    npm pkg get contributors[0]
email
    ```

    For complex fields you can also name a property in square brackets
    to specifically select a child field
]
json` based on the `field` value
json` file the same set of rules used during
    `npm install` and other cli commands that touches the `package
json` file
    are used, making sure to respect the existing indentation and possibly
    applying some validation prior to saving values to the file
json` file


    Defining a new bin named `mynewcommand` in your `package
json` that points
    to a file `cli
mynewcommand=cli
node='>=10'
    ```

    It's also possible to add to array values, for example to add a new
    contributor entry:

    ```bash
    npm pkg set contributors[0]
name='Foo' contributors[0]
email='foo@bar
ca'
    ```

    You may also append items to the end of an array using the special
    empty bracket notation:

    ```bash
    npm pkg set contributors[]
timeout=60 --json
    ```

* `npm pkg delete <key>`

    Deletes a `key` from your `package
json`

    The same syntax used to set values from your package can also be used
    to remove existing ones
  npm already
    does this during `publish`, which leads to subtle (mostly harmless)
    differences between the contents of your `package
json` file and the
    manifest that npm uses during installation


### Workspaces support

You can set/get/delete items across your configured workspaces by using the
[`workspace`](/using-npm/config#workspace) or
[`workspaces`](/using-npm/config#workspaces) config options


For example, setting a `funding` value across all configured workspaces
of a project:

```bash
npm pkg set funding=https://example
com --ws
```

When using `npm pkg get` to retrieve info from your configured workspaces, the
returned result will be in a json format in which top level keys are the
names of each workspace, the values of these keys will be the result values
returned from each of the configured workspaces, e
0

* Allow deleting the cache folder with `npm cache clean`

* Allow installing packages that have an `engines` declaration requiring a
  different version of `node`, even if `--engine-strict` is enabled

* Implicitly set `--yes` during `npm init`

* Allow clobbering existing values in `npm pkg`
* Allow unpublishing of entire packages (not just a single version)


If you don't have a clear idea of what you want to do, it is strongly
recommended that you do not use this option!



#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
parse() before
  saving them to your `package


Not supported by all npm commands


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config
 This is the closest parent directory
to contain a `package


If `-g` is specified, this will be the value of the global prefix


### Example

```bash
npm prefix
/usr/local/projects/foo
```

```bash
npm prefix -g
/usr/local
```

### Configuration

#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



### See Also

* [npm root](/commands/npm-root)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-profile
section: 1
description: Change settings on your registry profile
---

### Synopsis

```bash
npm profile enable-2fa [auth-only|auth-and-writes]
npm profile disable-2fa
npm profile get [<key>]
npm profile set <key> <value>
```

Note: This command is unaware of workspaces
  It looks like:

```bash
+-----------------+---------------------------+
| name            | example                   |
+-----------------+---------------------------+
| email           | me@example
com (verified) |
+-----------------+---------------------------+
| two factor auth | auth-and-writes           |
+-----------------+---------------------------+
| fullname        | Example User              |
+-----------------+---------------------------+
| homepage        |                           |
+-----------------+---------------------------+
| freenode        |                           |
+-----------------+---------------------------+
| twitter         |                           |
+-----------------+---------------------------+
| github          |                           |
+-----------------+---------------------------+
| created         | 2015-02-26T01:38:35
892Z  |
+-----------------+---------------------------+
| updated         | 2017-10-02T21:29:45
 You can set the following properties this way: email, fullname,
  homepage, freenode, twitter, github

* `npm profile set password`: Change your password
 Defaults to `auth-and-writes` mode
  The OTP will be required on both the website
    and the command line

  * `auth-and-writes`: Requires an OTP at all the times `auth-only` does,
    and also requires one when publishing a module, setting the `latest`
    dist-tag, or changing access via `npm access` and `npm owner`


* `npm profile disable-2fa`: Disables two-factor authentication


### Details

Some of these commands may not be available on non npmjs
com registries
npmjs
org/""
* Type: URL

The base URL of the npm registry


* In `npm pkg set` it enables parsing set values with JSON




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output
 For
`npm search`, this will be tab-separated table format


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one




### See Also

* [npm adduser](/commands/npm-adduser)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm owner](/commands/npm-owner)
* [npm whoami](/commands/npm-whoami)
* [npm token](/commands/npm-token)

---
title: npm-prune
section: 1
description: Remove extraneous packages
---

### Synopsis

```bash
npm prune [[<@scope>/]<pkg>

  If a package name is provided,
then only packages matching one of the supplied names are removed


Extraneous packages are those present in the `node_modules` folder that are
not listed as any package's dependency list


If the `--omit=dev` flag is specified or the `NODE_ENV` environment
variable is set to `production`, this command will remove the packages
specified in your `devDependencies`


If the `--dry-run` flag is used then no changes will actually be made
  However, in the real
world, operation is not always ""normal""


### Configuration

#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty
 They are just not
physically installed on disk


This is the inverse of `--omit=<type>`


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package
json`


Not supported by all npm commands




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces


By default npm will publish to the public registry
json`](/configuring-npm/package-json))


Once a package is published with a given name and version, that specific
name and version combination can never be used again, even if it is removed
with [`npm unpublish`](/commands/npm-unpublish)


As of `npm@5`, both a sha1sum and an integrity field with a sha512sum of the
tarball will be submitted to the registry during publication
 Subsequent
installs will use the strongest supported algorithm to verify downloads


Similar to `--dry-run` see [`npm pack`](/commands/npm-pack), which figures
out the files to be included and packs them into a tarball to be uploaded
to the registry
  All
files are included by default, with the following exceptions:

- Certain files that are relevant to package installation and distribution
  are always included
  For example, `package
json`, `README
json`](/configuring-npm/package-json), then only the files
  specified will be included
)

- If there is a `
gitignore` or `
npmignore` is used


  `
gitignore` files

- If the file matches certain patterns, then it will _never_ be included,
  unless explicitly added to the `""files""` list in `package
json`, or
  un-ignored with a `!` rule in a `


- Symbolic links are never included in npm packages


### Configuration

#### `tag`

* Default: ""latest""
* Type: String

If you ask npm to install a package and don't tell it a specific version,
then it will install the specified tag


When used by the `npm diff` command, this is the tag used to fetch the
tarball that will be compared with the local files by default




#### `access`

* Default: 'public' for new packages, existing packages it will not change the
  current level
* Type: null, ""restricted"", or ""public""

If you do not want your scoped package to be publicly viewable (and
installable) set `--access=restricted`


Unscoped packages can not be set to `restricted`


Note: This defaults to not changing the current access level for existing
packages




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


#### `provenance`

* Default: false
* Type: Boolean

When publishing from a supported cloud CI/CD system, the package will be
publicly linked to where it was built and published from


This config can not be used with: `provenance-file`

#### `provenance-file`

* Default: null
* Type: Path

When publishing, the provenance bundle at the given path will be used


This config can not be used with: `provenance`

### See Also

* [package spec](/using-npm/package-spec)
* [npm-packlist package](http://npm
im/npm-packlist)
* [npm registry](/using-npm/registry)
* [npm scope](/using-npm/scope)
* [npm adduser](/commands/npm-adduser)
* [npm owner](/commands/npm-owner)
* [npm deprecate](/commands/npm-deprecate)
* [npm dist-tag](/commands/npm-dist-tag)
* [npm pack](/commands/npm-pack)
* [npm profile](/commands/npm-profile)

---
title: npm-query
section: 1
description: Dependency selector query
---

### Synopsis

```bash
npm query <selector>
```

### Description

The `npm query` command allows for usage of css selectors in order to retrieve
an array of dependency objects


### Piping npm query to other commands

```bash
# find all dependencies with postinstall scripts & uninstall them
npm query "":attr(scripts, [postinstall])"" | jq 'map(
prod

// direct development deps
:root > 
peer

// any workspace dep

workspace

// all workspaces that depend on another workspace

workspace > 
peer)

// any dep named ""lodash""
// equivalent to [name=""lodash""]
#lodash

// any deps named ""lodash"" & within semver range ^""1
2
3""
#lodash@^1
3
// equivalent to


[name=""lodash""]:semver(^1
2
3)

// get the hoisted node for a given semver range
#lodash@^1
2
3:not(:deduped)

// querying deps with a specific version
#lodash@2
1


[name=""lodash""][version=""2
1
5""]

// has any deps
:has(*)

// deps with no other deps (ie
 ""leaf"" nodes)
:empty

// manually querying git dependencies
[repository^=github:],
[repository^=git:],
[repository^=https://github
com],
[repository^=http://github


]

// querying for all git dependencies
:type(git)

// get production dependencies that aren't also dev deps

prod:not(
com])
```

### Example Response Output

- an array of dependency objects is returned which can contain multiple copies of the same package which may or may not have been linked or deduped

```json
[
  {
    ""name"": """",
    ""version"": """",
    ""description"": """",
    ""homepage"": """",
    ""bugs"": {},
    ""author"": {},
    ""license"": {},
    ""funding"": {},
    ""files"": [],
    ""main"": """",
    ""browser"": """",
    ""bin"": {},
    ""man"": [],
    ""directories"": {},
    ""repository"": {},
    ""scripts"": {},
    ""config"": {},
    ""dependencies"": {},
    ""devDependencies"": {},
    ""optionalDependencies"": {},
    ""bundledDependencies"": {},
    ""peerDependencies"": {},
    ""peerDependenciesMeta"": {},
    ""engines"": {},
    ""os"": [],
    ""cpu"": [],
    ""workspaces"": {},
    ""keywords"": [],
    




```

### Expecting a certain number of results

One common use of `npm query` is to make sure there is only one version of
a certain dependency in your tree
  This is especially common for
ecosystems like that rely on `typescript` where having state split
across two different but identically-named packages causes bugs
  You
can use the `--expect-results` or `--expect-result-count` in your setup
to ensure that npm will exit with an exit code if your tree doesn't look
like you want it to



```sh
$ npm query '#react' --expect-result-count=1
```

Perhaps you want to quickly check if there are any production
dependencies that could be updated:

```sh
$ npm query ':root>:outdated(in-range)
prod' --no-expect-results
```

### Package lock only mode

If package-lock-only is enabled, only the information in the package lock (or shrinkwrap) is loaded
  This means that information from the package
g
 description, homepage, engines)


### Configuration

#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes


#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock
json` will be updated,
instead of checking `node_modules` and downloading dependencies
json`, rather than the contents of `node_modules`




#### `expect-results`

* Default: null
* Type: null or Boolean

Tells npm whether or not to expect results from the command
 Can be either
true (expect some results) or false (expect no results)


This config can not be used with: `expect-result-count`

#### `expect-result-count`

* Default: null
* Type: null or Number

Tells to expect a specific number of results from the command


This config can not be used with: `expect-results`
## See Also

* [dependency selectors](/using-npm/dependency-selectors)

---
title: npm-rebuild
section: 1
description: Rebuild a package
---

### Synopsis

```bash
npm rebuild [<package-spec>] 

 Links bins depending on whether bin links are enabled

This command is particularly useful in scenarios including but not limited to:

1

2
 Installing with `--ignore-scripts` and `--no-bin-links`, to explicitly choose which packages to build and/or link bins


If one or more package specs are provided, then only packages with a name and version matching one of the specifiers will be rebuilt


Usually, you should not need to run `npm rebuild` as it is already done for you as part of npm install (unless you suppressed these steps with `--ignore-scripts` or `--no-bin-links`)
gyp` file in the root of your package, then npm will use a default install hook:

```
""scripts"": {
    ""install"": ""node-gyp rebuild""
}
```

This default behavior is suppressed if the `package
json` has its own `install` or `preinstall` scripts
 It is also suppressed if the package specifies `""gypfile"": false`

### Configuration

#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory
cmd` shims on Windows) for package
executables


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder


This value is not exported to the environment for child processes


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces




### See Also

* [package spec](/using-npm/package-spec)
* [npm install](/commands/npm-install)

---
title: npm-repo
section: 1
description: Open package repository page in the browser
---

### Synopsis

```bash
npm repo [<pkgname> [<pkgname> 
 If no package name is
provided, it will search for a `package


Set to `true` to use default system URL opener




#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes


### See Also

* [npm docs](/commands/npm-docs)
* [npm config](/commands/npm-config)

---
title: npm-restart
section: 1
description: Restart a package
---

### Synopsis

```bash
npm restart [-- <args>]
```

### Description

This restarts a project
  It is equivalent to running `npm run-script
restart`


If the current project has a `""restart""` script specified in
`package
 prerestart
2
 restart
3
 prerestart
2
 stop
4
 poststop
6
 start
8
json files




### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm start](/commands/npm-start)
* [npm stop](/commands/npm-stop)
* [npm restart](/commands/npm-restart)

---
title: npm-root
section: 1
description: Display npm root
---

### Synopsis

```bash
npm root
```

Note: This command is unaware of workspaces
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


`run[-script]` is used by the test, start, restart, and stop commands, but
can be called directly, as well


Any positional arguments are passed to the specified script


The `env` script is a special built-in command that can be used to list
environment variables that will be available to the script at runtime
 If an
""env"" command is defined in your package, it will take precedence over the
built-in


In addition to the shell's pre-existing `PATH`, `npm run` adds
`node_modules/
bin` to the `PATH` provided to scripts
bin` prefix
js""}
```

instead of

```bash
""scripts"": {""test"": ""node_modules/
bin/tap test/*
js""}
```

The actual shell your script is run within is platform dependent
 By default,
on Unix-like systems it is the `/bin/sh` command, on Windows it is
`cmd

The actual shell referred to by `/bin/sh` also depends on the system


Scripts are run from the root of the package folder, regardless of what the
current working directory is when `npm run` is called
 If you want your
script to use different behavior based on what subdirectory you're in, you
can use the `INIT_CWD` environment variable, which holds the full path you
were in when you ran `npm run`
 If no `""command""` is provided, it will list the available
scripts for each of these configured workspaces
json
`-- packages
   +-- a
   |   `-- package
json` file
 e
g:

```
{
    ""workspaces"": [ ""
/packages/*"" ]
}
```

And that each of the configured workspaces has a configured `test` script,
we can run tests in all of them using the
[`workspaces` config](/using-npm/config#workspaces):

```
npm test --workspaces
```

#### Filtering workspaces

It's also possible to run a script in a single workspace using the `workspace`
config along with a name or directory path:

```
npm test --workspace=a
```

The `workspace` config can also be specified multiple times in order to run a
specific script in the context of multiple workspaces
g:

```
npm test -w a -w b
```

This last command will run `test` in both `
/packages/a` and `


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command
json`

This option can be used when it's desirable to optionally run a script when
it's present and fail if the script fails


This value is not exported to the environment for child processes


#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process




#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd
 SBOMs can be generated in either
[SPDX](https://spdx
dev/) or [CycloneDX](https://cyclonedx
org/) format
org/schema/bom-1
5
schema
json"",
  ""bomFormat"": ""CycloneDX"",
  ""specVersion"": ""1
5"",
  ""serialNumber"": ""urn:uuid:09f55116-97e1-49cf-b3b8-44d0207e7730"",
  ""version"": 1,
  ""metadata"": {
    ""timestamp"": ""2023-09-01T00:00:00
001Z"",
    ""lifecycles"": [
      {
        ""phase"": ""build""
      }
    ],
    ""tools"": [
      {
        ""vendor"": ""npm"",
        ""name"": ""cli"",
        ""version"": ""10
0""
      }
    ],
    ""component"": {
      ""bom-ref"": ""simple@1
0
0"",
      ""scope"": ""required"",
      ""author"": ""John Doe"",
      ""description"": ""simple react app"",
      ""purl"": ""pkg:npm/simple@1
0
0"",
      ""properties"": [
        {
          ""name"": ""cdx:npm:package:path"",
          ""value"": """"
        }
      ],
      ""externalReferences"": [],
      ""licenses"": [
        {
          ""license"": {
            ""id"": ""MIT""
          }
        }
      ]
    }
  },
  ""components"": [
    {
      ""bom-ref"": ""lodash@4
17
21"",
      ""scope"": ""required"",
      ""author"": ""John-David Dalton"",
      ""description"": ""Lodash modular utilities
17
21"",
      ""properties"": [
        {
          ""name"": ""cdx:npm:package:path"",
          ""value"": ""node_modules/lodash""
        }
      ],
      ""externalReferences"": [
        {
          ""type"": ""distribution"",
          ""url"": ""https://registry
npmjs
21
com/lodash/lodash
com/""
        },
        {
          ""type"": ""issue-tracker"",
          ""url"": ""https://github
com/lodash/lodash/issues""
        }
      ],
      ""hashes"": [
        {
          ""alg"": ""SHA-512"",
          ""content"": ""bf690311ee7b95e713ba568322e3533f2dd1cb880b189e99d4edef13592b81764daec43e2c54c61d5c558dc5cfb35ecb85b65519e74026ff17675b6f8f916f4a""
        }
      ],
      ""licenses"": [
        {
          ""license"": {
            ""id"": ""MIT""
          }
        }
      ]
    }
  ],
  ""dependencies"": [
    {
      ""ref"": ""simple@1
0
21""
      ]
    },
    {
      ""ref"": ""lodash@4
17
21"",
      ""dependsOn"": []
    }
  ]
}
```

### Example SPDX SBOM

```json
{
  ""spdxVersion"": ""SPDX-2
0"",
  ""SPDXID"": ""SPDXRef-DOCUMENT"",
  ""name"": ""simple@1
0
1
0
0""
  ],
  ""packages"": [
    {
      ""name"": ""simple"",
      ""SPDXID"": ""SPDXRef-Package-simple-1
0"",
      ""versionInfo"": ""1
0"",
      ""packageFileName"": """",
      ""description"": ""simple react app"",
      ""primaryPackagePurpose"": ""LIBRARY"",
      ""downloadLocation"": ""NOASSERTION"",
      ""filesAnalyzed"": false,
      ""homepage"": ""NOASSERTION"",
      ""licenseDeclared"": ""MIT"",
      ""externalRefs"": [
        {
          ""referenceCategory"": ""PACKAGE-MANAGER"",
          ""referenceType"": ""purl"",
          ""referenceLocator"": ""pkg:npm/simple@1
17
17
21"",
      ""packageFileName"": ""node_modules/lodash"",
      ""description"": ""Lodash modular utilities
"",
      ""downloadLocation"": ""https://registry
npmjs
org/lodash/-/lodash-4
17
21
com/"",
      ""licenseDeclared"": ""MIT"",
      ""externalRefs"": [
        {
          ""referenceCategory"": ""PACKAGE-MANAGER"",
          ""referenceType"": ""purl"",
          ""referenceLocator"": ""pkg:npm/lodash@4
17
0
0"",
      ""relatedSpdxElement"": ""SPDXRef-Package-lodash-4
17
  This means that information from the
package
json files of your dependencies will not be included in the
result set (e
g
 description, homepage, engines)

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` file
 They are just not
physically installed on disk


For `update` this means only the `package-lock
json` will be updated,
instead of checking `node_modules` and downloading dependencies


For `list` this means the output will be based on the tree described by the
`package-lock
json`, rather than the contents of `node_modules`




#### `sbom-type`

* Default: ""library""
* Type: ""library"", ""application"", or ""framework""

The type of package described by the generated SBOM
 For SPDX, this is the
value for the `primaryPackagePurpose` field
 For CycloneDX, this is the
value for the `type` field




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config

## See Also

* [package spec](/using-npm/package-spec)
* [dependency selectors](/using-npm/dependency-selectors)
* [package
json](/configuring-npm/package-json)
* [workspaces](/using-npm/workspaces)

---
title: npm-search
section: 1
description: Search for packages
---

### Synopsis

```bash
npm search [search terms 




### Description

Search the registry for packages matching the search terms
 `npm search`
performs a linear, incremental, lexically-ordered search through package
metadata for all files in the registry
 If your terminal has color
support, it will further highlight the matches in the results
  This can
be disabled with the config item `color`

Additionally, using the `--searchopts` and `--searchexclude` options
paired with more search terms will include and exclude further patterns
 Additionally, you can add both of
these to your config to change default search filtering behavior


Search also allows targeting of maintainers in search results, by prefixing
their npm username with `=`


If a term starts with `/`, then it's interpreted as a regular expression
and supports standard JavaScript RegExp syntax
 In this case search will
ignore a trailing `/` 
  (Note you must escape or quote many regular
expression characters in most shells
)

### Configuration

#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
parse() before
  saving them to your `package
json`


Not supported by all npm commands




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output




#### `description`

* Default: true
* Type: Boolean

Show the description in `npm search`



#### `searchlimit`

* Default: 20
* Type: Number

Number of items to limit search results to
 Will not apply at all to legacy
searches




#### `searchopts`

* Default: """"
* Type: String

Space-separated options that are always passed to search




#### `searchexclude`

* Default: """"
* Type: String

Space-separated options that limit the results from search




#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry




#### `prefer-offline`

* Default: false
* Type: Boolean

If true, staleness checks for cached data will be bypassed, but missing data
will be requested from the server
 To force full offline mode, use
`--offline`




#### `offline`

* Default: false
* Type: Boolean

Force offline mode: no network requests will be done during install




### See Also

* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm view](/commands/npm-view)
* [npm cache](/commands/npm-cache)
* https://npm
json` into a publishable
`npm-shrinkwrap
 The file created and
updated by this command will then take precedence over any other existing
or future `package-lock
json` files
 For a detailed explanation of the
design and purpose of package locks in npm, see
[package-lock-json](/configuring-npm/package-lock-json)


### See Also

* [npm install](/commands/npm-install)
* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [package
json](/configuring-npm/package-json)
* [package-lock
json](/configuring-npm/package-lock-json)
* [npm-shrinkwrap
json](/configuring-npm/npm-shrinkwrap-json)
* [npm ls](/commands/npm-ls)

---
title: npm-star
section: 1
description: Mark your favorite packages
---

### Synopsis

```bash
npm star [<package-spec>



### Description

""Starring"" a package means that you have some interest in it
  It's
a vaguely positive way to show that you care


It's a boolean thing


### More

There's also these extra commands to help you manage your favorite packages:

#### Unstar

You can also ""unstar"" a package using [`npm unstar`](/commands/npm-unstar)

""Unstarring"" is the same thing, but in reverse
npmjs
org/""
* Type: URL

The base URL of the npm registry




#### `unicode`

* Default: false on windows, true on mac/unix systems with a unicode locale,
  as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables

* Type: Boolean

When set to true, npm uses unicode characters in the tree output
 When
false, it uses ascii characters instead of unicode glyphs




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one




### See Also

* [package spec](/using-npm/package-spec)
* [npm unstar](/commands/npm-unstar)
* [npm stars](/commands/npm-stars)
* [npm view](/commands/npm-view)
* [npm whoami](/commands/npm-whoami)
* [npm adduser](/commands/npm-adduser)

---
title: npm-stars
section: 1
description: View packages marked as favorites
---

### Synopsis

```bash
npm stars [<user>]
```

Note: This command is unaware of workspaces


You may also want to see your friend's favorite packages, in this case
you will most certainly enjoy this command


### Configuration

#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry




### See Also

* [npm star](/commands/npm-star)
* [npm unstar](/commands/npm-unstar)
* [npm view](/commands/npm-view)
* [npm whoami](/commands/npm-whoami)
* [npm adduser](/commands/npm-adduser)

---
title: npm-start
section: 1
description: Start a package
---

### Synopsis

```bash
npm start [-- <args>]
```

### Description

This runs a predefined command specified in the `""start""` property of
a package's `""scripts""` object
js`


Note that this is different from the default node behavior of running
the file specified in a package's `""main""` attribute when evoking with
`node 
0
0`](https://blog
org/post/98131109725/npm-2-0-0), you can
use custom arguments when executing scripts
 Refer to [`npm run-script`](/commands/npm-run-script) for more details
js""
  }
}
```

```bash
npm start

> npm@x
x start
> node foo
js output would be here)

```

### Configuration

#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files




#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd




### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm restart](/commands/npm-restart)
* [npm stop](/commands/npm-stop)

---
title: npm-stop
section: 1
description: Stop a package
---

### Synopsis

```bash
npm stop [-- <args>]
```

### Description

This runs a predefined command specified in the ""stop"" property of a
package's ""scripts"" object


### Example

```json
{
  ""scripts"": {
    ""stop"": ""node bar
js""
  }
}
```

```bash
npm stop

> npm@x
x
x stop
> node bar
js output would be here)

```

### Configuration

#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands




### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm start](/commands/npm-start)
* [npm restart](/commands/npm-restart)

---
title: npm-team
section: 1
description: Manage organization teams and team memberships
---

### Synopsis

```bash
npm team create <scope:team> [--otp <otpcode>]
npm team destroy <scope:team> [--otp <otpcode>]
npm team add <scope:team> <user> [--otp <otpcode>]
npm team rm <scope:team> <user> [--otp <otpcode>]
npm team ls <scope>|<scope:team>
```

Note: This command is unaware of workspaces


### Description

Used to manage teams in organizations, and change team memberships
 That is, if you have a
`newteam` team in an `org` organization, you must always refer to that team
as `@org:newteam` in these commands
 Note: You cannot remove the
  `developers` team, [learn more
](https://docs
npmjs
com/about-developers-team)

  Here's how to create a new team `newteam` under the `org` org:

  ```bash
  npm team create @org:newteam
  ```

  You should see a confirming message such as: `+@org:newteam` once the new
  team has been created


  Adding a new user `username` to a team named `newteam` under the `org` org:

  ```bash
  npm team add @org:newteam username
  ```

  On success, you should see a message: `username added to @org:newteam`

* rm:
  Using `npm team rm` you can also remove users from a team they belong to
 If performed on a team, it will instead return a list
  of all users belonging to that particular team


  Here's an example of how to list all teams from an org named `org`:

  ```bash
  npm team ls @org
  ```

  Example listing all members of a team named `newteam`:

  ```bash
  npm team ls @org:newteam
  ```

### Details

`npm team` always operates directly on the current registry, configurable from
the command line using `--registry=<registry url>`


Organization creation and management of team admins and *organization* members
is done through the website, not the npm CLI


To use teams to manage permissions on packages belonging to your organization,
use the `npm access` command to grant or revoke the appropriate permissions
npmjs
org/""
* Type: URL

The base URL of the npm registry




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output
 For
`npm search`, this will be tab-separated table format


* In `npm pkg set` it enables parsing set values with JSON




### See Also

* [npm access](/commands/npm-access)
* [npm config](/commands/npm-config)
* [npm registry](/using-npm/registry)

---
title: npm-test
section: 1
description: Test a package
---

### Synopsis

```bash
npm test [-- <args>]

aliases: tst, t
```

### Description

This runs a predefined command specified in the `""test""` property of
a package's `""scripts""` object


### Example

```json
{
  ""scripts"": {
    ""test"": ""node test
x
x test
> node test
js

(test
js output would be here)
```

### Configuration

#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package




#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd


* `npm token list`:
  Shows a table of all active authentication tokens


```bash
+--------+---------+------------+----------+----------------+
| id     | token   | created    | read-only | CIDR whitelist |
+--------+---------+------------+----------+----------------+
| 7f3134 | 1fa9ba… | 2017-10-02 | yes      |                |
+--------+---------+------------+----------+----------------+
| c03241 | af7aef… | 2017-10-02 | no       | 192
168
1/24 |
+--------+---------+------------+----------+----------------+
| e0cf92 | 3a436a… | 2017-10-02 | no       |                |
+--------+---------+------------+----------+----------------+
| 63eb9d | 74ef35… | 2017-09-28 | no       |                |
+--------+---------+------------+----------+----------------+
| 2daaa8 | cbad5f… | 2017-09-26 | no       |                |
+--------+---------+------------+----------+----------------+
| 68c2fe | 127e51… | 2017-09-23 | no       |                |
+--------+---------+------------+----------+----------------+
| 6334e1 | 1dadd1… | 2017-09-23 | no       |                |
+--------+---------+------------+----------+----------------+
```

* `npm token create [--read-only] [--cidr=<cidr-ranges>]`:
  Create a new authentication token
 It can be `--read-only`, or accept
  a list of
  [CIDR](https://en
wikipedia
 This will prompt you for
  your password, and, if you have two-factor authentication enabled, an
  otp
 Please refer to
  the [docs
  website](https://docs
npmjs


```bash
+----------------+--------------------------------------+
| token          | a73c9572-f1b9-8983-983d-ba3ac3cc913d |
+----------------+--------------------------------------+
| cidr_whitelist |                                      |
+----------------+--------------------------------------+
| readonly       | false                                |
+----------------+--------------------------------------+
| created        | 2017-10-02T07:52:24
  You
  will no longer be able to use it
npmrc`), and ids as seen in the parseable or json
  output of `npm token list`




#### `cidr`

* Default: null
* Type: null or String (can be set multiple times)

This is a list of CIDR address to be used when configuring limited access
tokens with the `npm token create` command




#### `registry`

* Default: ""https://registry
npmjs




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator




Further, if you have an `npm-shrinkwrap
json`, npm
will update those files as well


`--no-save` will tell npm not to remove the package from your
`package
json`, or `package-lock
json` files


`--save` or `-S` will tell npm to remove the package from your
`package
json`, `npm-shrinkwrap

This is the default, but you may need to use this if you have for
instance `save=false` in your `npmrc` file

In global mode (ie, with `-g` or `--global` appended to the command),
it uninstalls the current package context as a global package

`--no-save` is ignored in this case


Scope is optional and follows the usual rules for [`scope`](/using-npm/scope)


### Examples

```bash
npm uninstall sax
```

`sax` will no longer be in your `package
json`,
`npm-shrinkwrap
json` files


### Configuration

#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package
json` file as dependencies


When used with the `npm rm` command, removes the dependency from
`package
json`
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces




### See Also

* [npm prune](/commands/npm-prune)
* [npm install](/commands/npm-install)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-unpublish
section: 1
description: Remove a package from the registry
---

### Synopsis

```bash
npm unpublish [<package-spec>]
```

To learn more about how the npm registry treats unpublish, see our
[unpublish policies](https://docs
npmjs
com/policies/unpublish)


If you do not specify a package name at all, the name and version to be
unpublished will be pulled from the project in the current directory


If you specify a package name but do not specify a version or if you
remove all of a package's versions then the registry will remove the
root package entry entirely


Even if you unpublish a package version, that specific name and version
combination can never be reused
 In order to publish the package again,
you must use a new version number


### Configuration

#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done




#### `force`

* Default: false
* Type: Boolean

Removes various protections against unfortunate side effects, common
mistakes, unnecessary performance degradation, and malicious input


* Allow clobbering non-npm files in global installs

* Allow the `npm version` command to work on an unclean git repository

* Allow deleting the cache folder with `npm cache clean`

* Allow installing packages that have an `engines` declaration requiring a
  different version of npm

* Allow installing packages that have an `engines` declaration requiring a
  different version of `node`, even if `--engine-strict` is enabled

* Allow conflicting peerDependencies to be installed in the root project


If you don't have a clear idea of what you want to do, it is strongly
recommended that you do not use this option!



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


### See Also

* [package spec](/using-npm/package-spec)
* [npm deprecate](/commands/npm-deprecate)
* [npm publish](/commands/npm-publish)
* [npm registry](/using-npm/registry)
* [npm adduser](/commands/npm-adduser)
* [npm owner](/commands/npm-owner)
* [npm login](/commands/npm-adduser)

---
title: npm-unstar
section: 1
description: Remove an item from your favorite packages
---

### Synopsis

```bash
npm unstar [<package-spec>

]
```

Note: This command is unaware of workspaces


### Description

""Unstarring"" a package is the opposite of [`npm star`](/commands/npm-star),
it removes an item from your list of favorite packages


### More

There's also these extra commands to help you manage your favorite packages:

#### Star

You can ""star"" a package using [`npm star`](/commands/npm-star)

#### Listing stars

You can see all your starred packages using [`npm stars`](/commands/npm-stars)

### Configuration

#### `registry`

* Default: ""https://registry

* Type: Boolean

When set to true, npm uses unicode characters in the tree output
 When
false, it uses ascii characters instead of unicode glyphs
 It's needed
when publishing or changing package permissions with `npm access`




### See Also

* [npm star](/commands/npm-star)
* [npm stars](/commands/npm-stars)
* [npm view](/commands/npm-view)
* [npm whoami](/commands/npm-whoami)
* [npm adduser](/commands/npm-adduser)


---
title: npm-update
section: 1
description: Update packages
---

### Synopsis

```bash
npm update [<pkg>


]

aliases: up, upgrade, udpate
```

### Description

This command will update all the packages listed to the latest version
(specified by the [`tag` config](/using-npm/config#tag)), respecting the semver
constraints of both your package and its dependencies (if they also require the
same package)
json`
 If you want to also update
values in `package


### Example

For the examples below, assume that the current package is `app` and it depends
on dependencies, `dep1` (`dep2`, 
)
2
2"" },
  ""versions"": [
    ""1
2
2"",
    ""1
2
1"",
    ""1
0"",
    ""1
1
1"",
    ""1
0
0"",
    ""0
1"",
    ""0
4
0"",
    ""0
2
0""
  ]
}
```

#### Caret Dependencies

If `app`'s `package
2
2` is `latest` and
`1
2` satisfies `^1


#### Tilde Dependencies

However, if `app`'s `package
1
1""
}
```

In this case, running `npm update` will install `dep1@1
2`
  Even though the
`latest` tag points to `1
2
1`, which is
equivalent to `>=1
1
1 <1
2
0`
  So the highest-sorting version that satisfies
`~1
1` is used, which is `1
2`


#### Caret Dependencies below 1
0
0

Suppose `app` has a caret dependency on a version below `1
0
0""
}
```

`npm update` will install `dep1@0
2


If the dependence were on `^0
0`:

```json
""dependencies"": {
  ""dep1"": ""^0
4
4
0` (`>= 0
5
0
0"",
      ""dep2"": ""1
0
0""
  }
}
```

and `dep2` itself depends on this limited range of `dep1`

```json
{
""name"": ""dep2"",
  ""dependencies"": {
    ""dep1"": ""~1
  npm will prioritize having a single version
of `dep1` in your tree rather than two when that single version can
satisfy the semver requirements of multiple dependencies in your tree
 So if you require to update to `latest` you may
need to run `npm install -g [<pkg>



### Configuration

#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package


When used with the `npm rm` command, removes the dependency from
`package
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 shallow (formerly --global-style) only install direct
deps at top-level




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
 Sets `--install-strategy=nested`




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk
json` file


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json` files when installing
 This
will also prevent _writing_ `package-lock
json` if `save` is true




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process
json files




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
cmd` shims on Windows) for package
executables


Set to false to have it not do this




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 See [`npm
fund`](/commands/npm-fund) for details




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 Setting this to false
results in no commit being made at all
parse() before
  saving them to your `package


Not supported by all npm commands




#### `preid`

* Default: """"
* Type: String

The ""prerelease identifier"" to use as a prefix for the ""prerelease"" part of
a semver
 Like the `rc` in `1
8`




#### `sign-git-tag`

* Default: false
* Type: Boolean

If set to true, then the `npm version` command will tag the version using
`-s` to add a signature


Note that git requires you to have set up GPG keys in your git configs for
this to work properly




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes


#### `workspaces-update`

* Default: true
* Type: Boolean

If set to true, the npm cli will run an update after operations that may
possibly change the workspaces installed to the `node_modules` folder


This value is not exported to the environment for child processes
json`, `package-lock


The `newversion` argument should be a valid semver string, a valid second
argument to [semver
com/npm/node-semver#functions) (one
of `patch`, `minor`, `major`, `prepatch`, `preminor`, `premajor`,
`prerelease`), or `from-git`
 In the second case, the existing version will
be incremented by 1 in the specified field


If run in a git repo, it will also create a version commit and tag
  This
behavior is controlled by `git-tag-version` (see below), and can be
disabled on the command line by running `npm --no-git-tag-version version`


If supplied with `-m` or [`--message` config](/using-npm/config#message) option,
npm will use it as a commit message when creating a version commit
 For example:

```bash
npm version patch -m ""Upgrade to %s for reasons""
```

If the [`sign-git-tag` config](/using-npm/config#sign-git-tag) is set, then the
tag will be signed using the `-s` flag to git
 Note that you must have a default
GPG key set up in your git config for this to work properly
 For example:

```bash
$ npm config set sign-git-tag true
$ npm version patch

You need a passphrase to unlock the secret key for
user: ""isaacs (http://blog
izs
me/) <i@izs
json, they will be executed as part of running `npm
version`
 Check to make sure the git working directory is clean before we get
   started
  Your scripts may add files to the commit in future steps

   This step is skipped if the `--force` flag is set
  A typical use would be running your full
   test suite before deploying
  Any files you want added to the commit
   should be explicitly added using `git add`
json` as requested (`patch`, `minor`,
   `major`, etc)
json (so they can incorporate it into file headers in
   generated files for example)
 Commit and tag

6
 Run the `postversion` script


Take the following example:

```json
{
  ""scripts"": {
    ""preversion"": ""npm test"",
    ""version"": ""npm run build && git add -A dist"",
    ""postversion"": ""git push && git push --tags && rm -rf build/temp""
  }
}
```

This runs all your tests and proceeds only if they pass

After the commit, it pushes the new commit and tag up to the server, and
deletes the `build/temp` directory


### See Also

* [npm init](/commands/npm-init)
* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [package
subfield]



As an example, to view information about the `connect` package from the registry, you would run:

```bash
npm view connect
```

The default version is `""latest""` if unspecified


Field names can be specified after the package descriptor
3
5`, you could do the following:

```bash
npm view ronn@0
3
json`)
e
 `
`):

```bash
npm view 

To view the git repository URL for the latest version of `npm`, you would run the following command:

```bash
npm view npm repository
 For example, to view all the data about the version of
`opts` that `ronn` depends on, you could write the following:

```bash
npm view opts@$(npm view ronn dependencies
email
```

You may also use numeric indices in square braces to specifically select
an item in an array field
 To just get the email address of the first
contributor in the list, you can run:

```bash
npm view express contributors[0]
email
```

If the field value you are querying for is a property of an object, you should run:

```bash
npm view express time'[4
8
0]'
```

Multiple fields may be specified, and will be printed one after another

For example, to get all the contributor names and email addresses, you
can do this:

```bash
npm view express contributors
name contributors
email
```

""Person"" fields are shown as a string if they would be shown as an
object
  So, for example, this will show the list of `npm` contributors in
the shortened string format
json`](/configuring-npm/package-json) for more on this
  This will show which version of `jsdom`
was required by each matching version of `yui3`:

```bash
npm view yui3@'>0
5
4' dependencies
jsdom
```

To show the `connect` package version history, you can do
this:

```bash
npm view connect versions
```

### Configuration

#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package
json`


Not supported by all npm commands




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes
 If the field is an object, it will be output as a JavaScript object literal


If the `--json` flag is given, the outputted fields will be JSON


### Configuration

#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry


### Version

10
2

### Description

npm is the package manager for the Node JavaScript platform


It is extremely configurable to support a variety of use cases


Run `npm help` to get a list of available commands
 Use of someone else's registry is governed by
their terms of use


### Introduction

You probably got npm because you want to install stuff


The very first thing you will most likely want to run in any node
program is `npm install` to install its dependencies


You can also run `npm install blerg` to install the latest version of
""blerg""
  Check out [`npm install`](/commands/npm-install) for more
info
  It can do a lot of stuff


Use the `npm search` command to show everything that's available in the
public registry
  Use `npm ls` to show everything you've installed


### Dependencies

If a package lists a dependency using a git URL, npm will install that
dependency using the [`git`](https://github
com/git-guides/install-git)
command and will generate an error if it is not installed


If one of the packages npm tries to install is a native node module and
requires compiling of C++ Code, npm will use
[node-gyp](https://github
com/nodejs/node-gyp) for that task
 On Windows,
Python and Microsoft Visual Studio C++ are needed
 For more information
visit [the node-gyp repository](https://github
com/nodejs/node-gyp) and
the [node-gyp Wiki](https://github
com/nodejs/node-gyp/wiki)


### Directories

See [`folders`](/configuring-npm/folders) to learn about where npm puts
stuff


In particular, npm has two modes of operation:

* local mode:
  npm installs packages into the current project directory, which
  defaults to the current working directory
/node_modules`, and bins to `

* global mode:
  npm installs packages into the install prefix at
  `$npm_config_prefix/lib/node_modules` and bins to
  `$npm_config_prefix/bin`


Local mode is the default
  Use `-g` or `--global` on any command to
run in global mode instead


### Developer Usage

If you're using npm to develop and publish your code, check out the
following help topics:

* json:
  Make a package
json file
  Especially, installing other peoples code from the registry is
  done via [`npm install`](/commands/npm-install)
* adduser:
  Create an account or log in

* publish:
  Use the [`npm publish`](/commands/npm-publish) command to upload your
  code to the registry
  It reads its configuration options from
5 places


* Command line switches:
  Set a config with `--key val`
  All keys take a value, even if they
  are booleans (the config parser doesn't know what the options are at
  the time of parsing)
  If you do not provide a value (`--key`) then
  the option is set to boolean `true`

* Environment Variables:
  Set any config by prefixing the name in an environment variable with
  `npm_config_`
  For example, `export npm_config_key=val`

* User Configs:
  The file at `$HOME/
npmrc` is an ini-formatted list of configs
  If the `userconfig` option is set in the cli
  or env, that file will be used instead

* Global Configs:
  The file found at `
/etc/npmrc` (relative to the global prefix will be
  parsed if it is found
  If the `globalconfig` option is set
  in the cli, env, or user config, then that file is parsed instead
js`
  These must not be changed


See [`config`](/using-npm/config) for much much more information


### Contributions

Patches welcome!

If you would like to help, but don't know what to work on, read the
[contributing
guidelines](https://github
md) and
check the issues list


### Bugs

When you find issues, please report them:
<https://github
com/npm/cli/issues>

Please be sure to follow the template and bug reporting guidelines


### Feature Requests

Discuss new feature ideas on our discussion forum:

* <https://github
json](/configuring-npm/package-json)
* [npmrc](/configuring-npm/npmrc)
* [npm config](/commands/npm-config)
* [npm install](/commands/npm-install)
* [npm prefix](/commands/npm-prefix)
* [npm publish](/commands/npm-publish)

---
title: npx
section: 1
description: Run a command from a local or remote npm package
---

### Synopsis

```bash
npx -- <pkg>[@<version>] [args

]
npx --package=<pkg>[@<version>] -- <cmd> [args

]
npx -c '<cmd> [args

]'
npx --package=foo -c '<cmd> [args




Whatever packages are specified by the `--package` option will be
provided in the `PATH` of the executed command, along with any locally
installed package executables
  The `--package` option may be
specified multiple times, to execute the supplied command in an environment
where all specified packages are available
  A
prompt is printed (which can be suppressed by providing either `--yes` or
`--no`)
  Package names with a specifier will
only be considered a match if they have the exact same name and version as
the local dependency


If no `-c` or `--call` option is provided, then the positional arguments
are used to generate the command string
  If no `--package` options
are provided, then npm will attempt to determine the executable name from
the package specifier provided as the first positional argument according
to the following heuristic:

- If the package has a single entry in its `bin` field in `package
json`,
  or if all entries are aliases of the same command, then that command
  will be used

- If the package has multiple `bin` entries, and one of them matches the
  unscoped portion of the `name` field, then that command will be used

- If this does not result in exactly one option (either because there are
  no bin entries, or none of them match the `name` of the package), then
  `npm exec` exits with an error


### `npx` vs `npm exec`

When run via the `npx` binary, all flags and options *must* be set prior to
any positional arguments
  When run via `npm exec`, a double-hyphen `--`
flag can be used to suppress npm's parsing of switches and options that
should be sent to the executed command


For example:

```
$ npx foo@latest bar --package=@npmcli/foo
```

In this case, npm will resolve the `foo` package name, and run the
following command:

```
$ foo bar --package=@npmcli/foo
```

Since the `--package` option comes _after_ the positional arguments, it is
treated as an argument to the executed command


In contrast, due to npm's argument parsing logic, running this command is
different:

```
$ npm exec foo@latest bar --package=@npmcli/foo
```

In this case, npm will parse the `--package` option first, resolving the
`@npmcli/foo` package
  Then, it will execute the following command in that
context:

```
$ foo@latest bar
```

The double-hyphen character is recommended to explicitly tell npm to stop
parsing command line options and switches
js
$ npx tap --bail test/foo
js
```

Run a command _other than_ the command whose name matches the package name
by specifying a `--package` option:

```
$ npm exec --package=foo -- bar --bar-argument
# ~ or ~
$ npx --package=foo bar --bar-argument
```

Run an arbitrary shell script, in the context of the current project:

```
$ npm x -c 'eslint && say ""hooray, lint passed""'
$ npx -c 'eslint && say ""hooray, lint passed""'
```

### Compatibility with Older npx Versions

The `npx` binary was rewritten in npm v7
0
  `npx` uses the `npm exec`
command instead of a separate argument parser and install process, with
some affordances to maintain backwards compatibility with the arguments it
accepted in previous versions
  Suppress this
  prompt with the `-y` or `--yes` option

- Shell fallback functionality is removed, as it is not advisable

- The `--ignore-existing` option is removed

- The `--npm` option is removed
  `npx` will always use the `npm` it ships
  with

- The `--node-arg` and `-n` options have been removed
html#node_optionsoptions) instead: e
g
,
 `NODE_OPTIONS=""--trace-warnings --trace-exit"" npx foo --random=true`
- The `--always-spawn` option is redundant, and thus removed


### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm start](/commands/npm-start)
* [npm restart](/commands/npm-restart)
* [npm stop](/commands/npm-stop)
* [npm config](/commands/npm-config)
* [npm exec](/commands/npm-exec)


---
title: folders
section: 5
description: Folder Structures Used by npm
---

### Description

npm puts various things on your computer
  That's its job
/node_modules` of the current
  package root

* Global install (with `-g`): puts stuff in /usr/local or wherever node
  is installed
exe`


#### Node Modules

Packages are dropped into the `node_modules` folder under the `prefix`

When installing locally, this means that you can
`require(""packagename"")` to load its main module, or
`require(""packagename/lib/path/to/sub/module"")` to load other modules


Global installs on Unix systems go to `{prefix}/lib/node_modules`

Global installs on Windows go to `{prefix}/node_modules` (that is, no
`lib` folder
)

Scoped packages are installed the same way, except they are grouped together
in a sub-folder of the relevant `node_modules` folder with the name of that
scope prefix by the @ symbol, e
g
 `npm install @myorg/package` would place
the package in `{prefix}/node_modules/@myorg/package`
 See
[`scope`](/using-npm/scope) for more details


If you wish to `require()` a package, then install it locally


#### Executables

When in global mode, executables are linked into `{prefix}/bin` on Unix,
or directly into `{prefix}` on Windows
  Ensure that path is in your
terminal's `PATH` environment to run them


When in local mode, executables are linked into
`
  (For example, so that a test runner will be in the path
when you run `npm test`


When in local mode, man pages are not installed


Man pages are not installed on Windows systems


#### Cache

See [`npm cache`](/commands/npm-cache)
npm` on Posix, or
`%LocalAppData%/npm-cache` on Windows


#### Temp Files

Temporary files are stored by default in the folder specified by the
[`tmp` config](/using-npm/config#tmp), which defaults to the TMPDIR, TMP, or
TEMP environment variables, or `/tmp` on Unix and `c:\windows\temp` on Windows


Temp files are given a unique folder under this root for each run of the
program, and are deleted upon successful exit


### More Information

When installing locally, npm first tries to find an appropriate
`prefix` folder
  This is so that `npm install foo@1
2
3` will install
to the sensible root of your package, even if you happen to have `cd`ed
into some other folder


Starting at the $PWD, npm will walk up the folder tree checking for a
folder that contains either a `package
  If such a thing is found, then that is treated as the effective
""current directory"" for the purpose of running npm commands
  (This
behavior is inspired by and similar to git's 
git-folder seeking
logic when running git commands in a working dir
)

If no package root is found, then the current folder is used
3`, then the package is loaded into
the cache, and then unpacked into `
/node_modules/foo`
  Then, any of
foo's dependencies are similarly unpacked into
`
/node_modules/foo/node_modules/




Any bin files are symlinked to `
/node_modules/
bin/`, so that they may
be found by npm scripts when necessary


#### Global Installation

If the [`global` config](/using-npm/config#global) is set to true, then npm will
install packages ""globally""


For global installation, packages are installed roughly the same way,
but using the folders described above


#### Cycles, Conflicts, and Folder Parsimony

Cycles are handled using the property of node's module system that it
walks up the directories looking for `node_modules` folders


Consider the case above, where `foo -> bar -> baz`
  Imagine if, in
addition to that, baz depended on bar, so you'd have:
`foo -> bar -> baz -> bar -> baz 
`



Another optimization can be made by installing dependencies at the
highest level possible, below the localized ""target"" folder (hoisting)
2
2
x (latest=1
3
7)
|   +-- baz@2
x
|   |   `-- quux@3
2
3
    `-- quux@3
x
        `-- bar
```

In this case, we might expect a folder structure like this
(with all dependencies hoisted to the highest level possible):

```bash
foo
+-- node_modules
    +-- blerg (1
2
5) <---[A]
    +-- bar (1
2
4)
    +-- baz (1
2
3) <---[D]
    +-- quux (3
0) <---[E]
```

Since foo depends directly on `bar@1
2
3` and `baz@1
7, foo has a specific
dependency on version 1
5


Bar [B] also has dependencies on baz and asdf
  Because it depends on `baz@2
2
3` installed in the parent `node_modules` folder [D],
and must install its own copy [C]
 In order to minimize duplication, npm hoists
dependencies to the top level by default, so asdf is installed under [A]


Underneath bar, the `baz -> quux -> bar` dependency creates a cycle

However, because bar is already in quux's ancestry [B], it does not
unpack another copy of bar into that folder
 Likewise, quux's [E]
folder tree is empty, because its dependency on bar is satisfied
by the parent folder copy installed at [B]


#### Publishing

Upon publishing, npm will look in the `node_modules` folder
  If any of
the items there are not in the `bundleDependencies` array, then they will
not be included in the package tarball


This allows a package maintainer to install all of their dependencies
(and dev dependencies) locally, but only re-publish those items that
cannot be found elsewhere
  See [`package
json`](/configuring-npm/package-json) for more information


### See also

* [package
js and the npm command line interface using either a Node
version manager or a Node installer
 **We strongly recommend using a Node
version manager to install Node
js and npm
** We do not recommend using a
Node installer, since the Node installation process installs npm in a
directory with local permissions and can cause permissions errors when you
run npm packages globally
js and
  npm](#using-a-node-installer-to-install-nodejs-and-npm)

### Checking your version of npm and Node
js

To see if you already have Node
js and npm installed and check the
installed version, run the following commands:

```
node -v
npm -v
```

### Using a Node version manager to install Node
js and npm on your system so you can test your
applications on multiple versions of npm to ensure they work for users on
different versions
com/search?q=node+version+manager+archived%3Afalse&type=repositories&ref=advsearch)


### Using a Node installer to install Node
js and npm

If you are unable to use a Node version manager, you can use a Node
installer to install both Node
js installer](https://nodejs
org/en/download/)
* [NodeSource installer](https://github
com/nodesource/distributions)


#### OS X or Windows Node installers

If you're using OS X or Windows, use one of the installers from the
[Node
js download page](https://nodejs
org/en/download/)
 Be sure to
install the version labeled **LTS**
com/nodesource/distributions)
  (recommended)
- One of the installers on the [Node
js download
  page](https://nodejs
org/en/download/)

Or see [this page](https://nodejs
js on a variety of operating
systems, see [this page][pkg-mgr]


[pkg-mgr]: https://nodejs
json
section: 5
description: A publishable lockfile
---

### Description

`npm-shrinkwrap
json` is a file created by [`npm
shrinkwrap`](/commands/npm-shrinkwrap)
json`, with one major caveat: Unlike `package-lock
json`,
`npm-shrinkwrap
json` may be included when publishing a package


The recommended use-case for `npm-shrinkwrap
 It's
strongly discouraged for library authors to publish this file, since that
would prevent end users from having control over transitive dependency
updates


If both `package-lock
json` file
json` file format,
refer to the manual page for
[package-lock
json](/configuring-npm/package-lock-json)


### See also

* [npm shrinkwrap](/commands/npm-shrinkwrap)
* [package-lock
npmrc`)
* global config file (`$PREFIX/etc/npmrc`)
* npm builtin config file (`/path/to/npm/npmrc`)

All npm config files are an ini-formatted list of `key = value` parameters
 For
example:

```bash
prefix = ${HOME}/
  For example, a setting in the userconfig file would override the
setting in the globalconfig file
npmrc` files are interpreted as comments when they begin with a
`;` or `#` character
npmrc` files are parsed by
[npm/ini](https://github


For example:

```bash
# last modified: 01 Jan 2016
; Set a new registry for a scoped package
@myscope:registry=https://mycustomregistry
example


Note that this only applies to the root of the project that you're running
npm in
  It has no effect when your module is published
npmrc` (or the `userconfig` param, if set in the environment or on
the command line)

#### Global config file

`$PREFIX/etc/npmrc` (or the `globalconfig` param, if set above): This file
is an ini-file formatted list of `key = value` parameters
  Environment
variables can be replaced as above
  Set fields in here using the `
/configure`
script that comes with npm


### Auth related configuration

The settings `_auth`, `_authToken`, `username` and `_password` must all be
scoped to a specific registry
 This ensures that `npm` will never send
credentials to the wrong host


The full list is:
 - `_auth` (base64 authentication string)
 - `_authToken` (authentication token)
 - `username`
 - `_password`
 - `email`
 - `certfile` (path to certificate file)
 - `keyfile` (path to key file)

In order to scope these values, they must be prefixed by a URI fragment

If the credential is meant for any request to a registry on a single host,
the scope may look like `//registry
org/:`
org/unique/path:`


```
; bad config
_authToken=MYTOKEN

; good config
@myorg:registry=https://somewhere-else
npmjs
org/:_authToken=MYTOKEN
; would apply to both @myorg and @another
; //somewhere-else
com/myorg/:_authToken=MYTOKEN1
; would apply only to @another
//somewhere-else
com/another/:_authToken=MYTOKEN2
```

### See also

* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [config](/using-npm/config)
* [package
json](/configuring-npm/package-json)
* [npm](/commands/npm)

---
title: package
json
section: 5
description: Specifics of npm's package
json handling
---

### Description

This document is all you need to know about what's required in your
package
  It must be actual JSON, not just a JavaScript object
literal


A lot of the behavior described in this document is affected by the config
settings described in [`config`](/using-npm/config)


### name

If you plan to publish your package, the *most* important things in your
package
json are the name and version fields as they will be required
 If you don't plan to publish your package, the name and
version fields are optional


Some rules:

* The name must be less than or equal to 214 characters

* The names of scoped packages can begin with a dot or an underscore
json file, and you can specify the engine using
  the ""[engines](#engines)"" field
  (See below

* You may want to check the npm registry to see if there's something by
  that name already, before you get too attached to it

  <https://www
com/>

A name can be optionally prefixed by a scope, e
g


### version

If you plan to publish your package, the *most* important things in your
package


Version must be parseable by
[node-semver](https://github
com/npm/node-semver), which is bundled with
npm as a dependency
)

### description

Put a description in it
  It's a string


### keywords

Put keywords in it
  It's an array of strings
  This helps people discover
your package as it's listed in `npm search`


Example:

```json
""homepage"": ""https://github
com/owner/project#readme""
```

### bugs

The URL to your project's issue tracker and / or the email address to which
issues should be reported
 These are helpful for people who encounter
issues with your package


It should look like this:

```json
{
  ""bugs"": {
    ""url"": ""https://github
com/owner/project/issues"",
    ""email"": ""project@hostname
com""
  }
}
```

You can specify either one or both values
 If you want to provide only a
URL, you can specify the value for ""bugs"" as a simple string instead of an
object


### license

You should specify a license for your package so that people know how they
are permitted to use it, and any restrictions you're placing on it


If you're using a common license such as BSD-2-Clause or MIT, add a current
SPDX license identifier for the license you're using, like this:

```json
{
  ""license"" : ""BSD-3-Clause""
}
```

You can check [the full list of SPDX license
IDs](https://spdx
org/licenses/)
  Ideally you should pick one that is
[OSI](https://opensource
org/licenses/) approved


If your package is licensed under multiple common licenses, use an [SPDX
license expression syntax version 2
dev/specifications/), like this:

```json
{
  ""license"" : ""(ISC OR GPL-3


Some old packages used license objects or a ""licenses"" property containing
an array of license objects:

```json
// Not valid metadata
{
  ""license"" : {
    ""type"" : ""ISC"",
    ""url"" : ""https://opensource
org/licenses/ISC""
  }
}

// Not valid metadata
{
  ""licenses"" : [
    {
      ""type"": ""MIT"",
      ""url"": ""https://www
opensource
org/licenses/mit-license
php""
    },
    {
      ""type"": ""Apache-2
0"",
      ""url"": ""https://opensource
org/licenses/apache2
0
php""
    }
  ]
}
```

Those styles are now deprecated


### people fields: author, contributors

The ""author"" is one person
com"",
  ""url"" : ""http://barnyrubble
tumblr
com/""
}
```

Or you can shorten that all into a single string, and npm will parse it for
you:

```json
{
  ""author"": ""Barney Rubble <b@rubble
tumblr
com/)""
}
```

Both email and url are optional either way


### funding

You can specify an object containing a URL that provides up-to-date
information about ways to help fund development of your package, or a
string URL, or an array of these:

```json
{
  ""funding"": {
    ""type"" : ""individual"",
    ""url"" : ""http://example
com/donate""
  },

  ""funding"": {
    ""type"" : ""patreon"",
    ""url"" : ""https://www
patreon
com/my-account""
  },

  ""funding"": ""http://example
com/donateAlso"",
    {
      ""type"" : ""patreon"",
      ""url"" : ""https://www
com/my-account""
    }
  ]
}
```

Users can use the `npm fund` subcommand to list the `funding` URLs of all
dependencies of their project, direct and indirect
gitignore`, but reversed: including a
file, directory, or glob pattern (`*`, `**/*`, and such) will make it so
that file is included in the tarball when it's packed
npmignore` file in the root of your package or in
subdirectories, which will keep files from being included
 The `
npmignore` file works just like a `
 If there is
a `
gitignore` file, and `
gitignore`'s contents
will be used instead


Certain files are always included, regardless of settings:

* `package
json`
* `README`
* `LICENSE` / `LICENCE`
* The file in the ""main"" field
* The file(s) in the ""bin"" field

`README` & `LICENSE` can have any case and extension


Some files are always ignored by default:

* `*
orig`
* `
*
swp`
* `
git`
* `
hg`
* `
lock-wscript`
* `
npmrc`
* `
gypi`
* `node_modules`
* `npm-debug
json` (use
  [`npm-shrinkwrap
json`](/configuring-npm/npm-shrinkwrap-json)
  if you wish it to be published)
* `pnpm-lock
yaml`
* `yarn
lock`

Most of these ignored files can be included specifically if included in
the `files` globs
  Exceptions to this are:

* `
npmrc`
* `node_modules`
* `package-lock
lock`

These can not be included


### main

The main field is a module ID that is the primary entry point to your
program
  That is, if your package is named `foo`, and a user installs it,
and then does `require(""foo"")`, then your main module's exports object will
be returned


This should be a module relative to the root of your package folder


### browser

If your module is meant to be used client-side the browser field should be
used instead of the main field
 This is helpful to hint users that it might
rely on primitives that aren't available in Node
g
 npm makes this pretty easy (in fact, it uses this
feature to install the ""npm"" executable
)

To use this, supply a `bin` field in your package
json which is a map of
command name to local file name
 When this package is installed globally,
that file will be either linked inside the global bins directory or
a cmd (Windows Command File) will be created which executes the specified
file in the `bin` field, so it is available to run by `name` or `name
/cli
js` script to `/usr/local/bin/myapp` and in case of windows it
will create a cmd file usually at `C:\Users\{Username}\AppData\Roaming\npm\myapp
cmd`
which runs the `cli
js` script


If you have a single executable, and its name should be the name of the
package, then you can just supply it as a string
  For example:

```json
{
  ""name"": ""my-program"",
  ""version"": ""1
2
5"",
  ""bin"": ""
/path/to/program""
}
```

would be the same as this:

```json
{
  ""name"": ""my-program"",
  ""version"": ""1


If only a single file is provided, then it's installed such that it is the
result from `man <pkgname>`, regardless of its actual filename
  For
example:

```json
{
  ""name"": ""foo"",
  ""version"": ""1
3"",
  ""description"": ""A packaged foo fooer for fooing foos"",
  ""main"": ""foo
1""
}
```

would link the `
1` file in such that it is the target for `man
foo`

If the filename doesn't start with the package name, then it's prefixed

So, this:

```json
{
  ""name"": ""foo"",
  ""version"": ""1
2
/man/foo
1"",
    ""
/man/bar
gz` suffix if they are
compressed


```json
{
  ""name"": ""foo"",
  ""version"": ""1
3"",
  ""description"": ""A packaged foo fooer for fooing foos"",
  ""main"": ""foo
1"",
    ""
commonjs
org/wiki/Packages/1
0) spec
details a few ways that you can indicate the structure of your package
using a `directories` object
 If you look at [npm's
package
json](https://registry


In the future, this information may be used in other creative ways
bin`, all the files in
that folder will be added
bin` is an error
 If you want to specify
individual files, use `bin`, and for all the files in an existing `bin`
directory, use `directories
bin`
  Sugar to generate a ""man"" array by
walking the folder


### repository

Specify the place where your code lives


Do it like this:

```json
{
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""https://github
com/npm/cli
git""
  }
}
```

The URL should be a publicly available (perhaps read-only) URL that can be
handed directly to a VCS program without any modification


For GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the
same shortcut syntax you use for `npm install`:

```json
{
  ""repository"": ""npm/npm"",

  ""repository"": ""github:user/repo"",

  ""repository"": ""gist:11081aaa281"",

  ""repository"": ""bitbucket:user/repo"",

  ""repository"": ""gitlab:user/repo""
}
```

If the `package
json` for your package is not in the root directory (for
example if it is part of a monorepo), you can specify the directory in
which it lives:

```json
{
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""https://github
com/facebook/react
git"",
    ""directory"": ""packages/react-dom""
  }
}
```

### scripts

The ""scripts"" property is a dictionary containing script commands that are
run at various times in the lifecycle of your package
  The key is the
lifecycle event, and the value is the command to run at that point


See [`scripts`](/using-npm/scripts) to find out more about writing package
scripts
  For instance, if a package
had the following:

```json
{
  ""name"": ""foo"",
  ""config"": {
    ""port"": ""8080""
  }
}
```

It could also have a ""start"" command that referenced the
`npm_package_config_port` environment variable


### dependencies

Dependencies are specified in a simple object that maps a package name to a
version range
 The version range is a string which has one or more
space-separated descriptors
**  See `devDependencies`, below


See [semver](https://github
com/npm/node-semver#versions) for more details about specifying version ranges
com/npm/node-semver#versions)
* `^version` ""Compatible with version""  See [semver](https://github
x` 1
2
0, 1
1, etc


* `range1 || range2` Passes if either range1 or range2 are satisfied

* `git

` See 'Git URLs as Dependencies' below
* `user/repo` See 'GitHub URLs' below
* `tag` A specific version tagged and published as `tag`  See [`npm
  dist-tag`](/commands/npm-dist-tag)
* `path/path/path` See [Local Paths](#local-paths) below

For example, these are all valid:

```json
{
  ""dependencies"": {
    ""foo"": ""1
0
9999
1
2"",
    ""baz"": "">1
0
1"",
    ""qux"": ""<1
0
0 || >=2
1 <2
5 || >=2
5
2 <3
0
gz"",
    ""til"": ""~1
2
3
x"",
    ""lat"": ""latest"",
    ""dyl"": ""file:
/dyl""
  }
}
```

#### URLs as Dependencies

You may specify a tarball URL in place of a version range


This tarball will be downloaded and installed locally to your package at
install time


#### Git URLs as Dependencies

Git URLs are of the form:

```bash
<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]
```

`<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or
`git+file`


If `#<commit-ish>` is provided, it will be used to clone exactly that
commit
git#v1
0
27
git+ssh://git@github
com/npm/cli
git
git://github
git#v1
0
27
```

When installing from a `git` repository, the presence of certain fields in the
`package
 To do so
your repository will be cloned into a temporary directory, all of its deps
installed, relevant scripts run, and the resulting directory packed and
installed


This flow will occur if your git dependency uses `workspaces`, or if any of the
following scripts are present:

* `build`
* `prepare`
* `prepack`
* `preinstall`
* `install`
* `postinstall`

If your git repository includes pre-built artifacts, you will likely want to
make sure that none of the above scripts are defined, or your dependency
will be rebuilt for every installation


#### GitHub URLs

As of version 1
  Just as with git URLs, a `commit-ish` suffix can be
included
  For example:

```json
{
  ""name"": ""foo"",
  ""version"": ""0
0"",
  ""dependencies"": {
    ""express"": ""expressjs/express"",
    ""mocha"": ""mochajs/mocha#4727d357ea"",
    ""module"": ""user/repo#feature\/branch""
  }
}
```

#### Local Paths

As of version 2
0
0 you can provide a path to a local directory that
contains a package
 Local paths can be saved using `npm install -S` or `npm
install --save`, using any of these forms:

```bash

/foo/bar
~/foo/bar

/foo/bar
/foo/bar
```

in which case they will be normalized to a relative path and added to your
`package

/foo/bar""
  }
}
```

This feature is helpful for local offline development and creating tests
that require npm installing where you don't want to hit an external server,
but should not be used when publishing your package to the public registry
  You must
run `npm install` from inside the local path itself


### devDependencies

If someone is planning on downloading and using your module in their
program, then they probably don't want or need to download and build the
external test or documentation framework that you use


These things will be installed when doing `npm link` or `npm install` from
the root of a package, and can be managed like any other npm configuration
param


For build steps that are not platform-specific, such as compiling
CoffeeScript or other languages to JavaScript, use the `prepare` script to
do this, and make the required package a devDependency


For example:

```json
{
  ""name"": ""ethopia-waza"",
  ""description"": ""a delightfully fruity coffee varietal"",
  ""version"": ""1
3"",
  ""devDependencies"": {
    ""coffee-script"": ""~1
6
3""
  },
  ""scripts"": {
    ""prepare"": ""coffee -o lib/ -c src/waza
coffee""
  },
  ""main"": ""lib/waza


### peerDependencies

In some cases, you want to express the compatibility of your package with a
host tool or library, while not necessarily doing a `require` of this host

This is usually referred to as a *plugin*
 Notably, your module may be
exposing a specific interface, expected and specified by the host
documentation
3
5"",
  ""peerDependencies"": {
    ""tea"": ""2
5
└── tea@2
2
  As of npm v7, peerDependencies _are_
installed by default


Trying to install another plugin with a conflicting requirement may cause
an error if the tree cannot be resolved correctly
 For this reason, make
sure your plugin requirement is as broad as possible, and not to lock it
down to specific patch versions
org/), only changes
in the host package's major version will break your plugin
 Thus, if you've
worked with every 1
x version of the host package, use `""^1
0""` or `""1
x""`
to express this
 If you depend on features introduced in 1
5
 Specifically, it allows peer
dependencies to be marked as optional
3
5"",
  ""peerDependencies"": {
    ""tea"": ""2


### bundleDependencies

This defines an array of package names that will be bundled when publishing
the package


In cases where you need to preserve npm packages locally or have them
available through a single file download, you can bundle the packages in a
tarball file by specifying the package names in the `bundleDependencies`
array and executing `npm pack`
0
0"",
  ""bundleDependencies"": [
    ""renderized"",
    ""super-streams""
  ]
}
```

we can obtain `awesome-web-framework-1
0
0
tgz` file by running `npm pack`

This file contains the dependencies `renderized` and `super-streams` which
can be installed in a new project by executing `npm install
awesome-web-framework-1
0
tgz`


If this is spelled `""bundledDependencies""`, then that is also honored
 A
value of `true` will bundle all dependencies, a value of `false` will bundle
none


### optionalDependencies

If a dependency can be used, but you would like npm to proceed if it cannot
be found or fails to install, then you may put it in the
`optionalDependencies` object
  The difference is that build
failures do not cause installation to fail
  Running `npm install
--omit=optional` will prevent these dependencies from being installed
json')
version
} catch (er) {
  foo = null
}
if ( notGoodFooVersion(fooVersion) ) {
  foo = null
}

// 
 then later in your program 



### overrides

If you need to make specific changes to dependencies of your dependencies, for
example replacing the version of a dependency with a known security issue,
replacing an existing dependency with a fork, or making sure that the same
version of a package is used everywhere, then you may add an override


Overrides provide a way to replace a package in your dependency tree with
another version, or another package entirely
 These changes can be scoped as
specific or as vague as desired
0
0
0""
  }
}
```

The above is a short hand notation, the full object form can be used to allow
overriding a package itself as well as a child of the package
 This will cause
`foo` to always be `1
0
0
0"",
      ""bar"": ""1
0""
    }
  }
}
```

To only override `foo` to be `1
0` when it's a child (or grandchild, or great
grandchild, etc) of the package `bar`:

```json
{
  ""overrides"": {
    ""bar"": {
      ""foo"": ""1
 To override `foo` only when it's a
child of `bar` and only when `bar` is a child of `baz`:

```json
{
  ""overrides"": {
    ""baz"": {
      ""bar"": {
        ""foo"": ""1
0
0""
      }
    }
  }
}
```

The key of an override can also include a version, or range of versions

To override `foo` to `1
0`, but only when it's a child of `bar@2
0
0"": {
      ""foo"": ""1
0
0""
    // GOOD, specs match so override is allowed
    // ""foo"": ""^1
0
0""
    // BEST, the override is defined as a reference to the dependency
    ""foo"": ""$foo"",
    // the referenced package does not need to match the overridden one
    ""bar"": ""$foo""
  }
}
```

### engines

You can specify the version of node that your stuff works on:

```json
{
  ""engines"": {
    ""node"": "">=0
3 <15""
  }
}
```

And, like with dependencies, if you don't specify the version (or if you
specify ""\*"" as the version), then any version of node will do


You can also use the ""engines"" field to specify which versions of npm are
capable of properly installing your program
  For example:

```json
{
  ""engines"": {
    ""npm"": ""~1
0


### os

You can specify which operating systems your
module will run on:

```json
{
  ""os"": [
    ""darwin"",
    ""linux""
  ]
}
```

You can also block instead of allowing operating systems, just prepend the
blocked os with a '!':

```json
{
  ""os"": [
    ""!win32""
  ]
}
```

The host operating system is determined by `process
platform`

It is allowed to both block and allow an item, although there isn't any
good reason to do this
arch`

### private

If you set `""private"": true` in your package
json, then npm will refuse to
publish it


This is a way to prevent accidental publication of private repositories

If you would like to ensure that a given package is only ever published to
a specific registry (for example, an internal registry), then use the
`publishConfig` dictionary described below to override the `registry`
config param at publish-time


See [`config`](/using-npm/config) to see the list of config options that
can be overridden


It can describe either the direct paths of the folders to be used as
workspaces or it can define globs that will resolve to these same folders


In the following example, all folders located inside the folder
`
json` files inside them:

```json
{
  ""name"": ""workspace-example"",
  ""workspaces"": [
    ""
/packages/*""
  ]
}
```

See [`workspaces`](/using-npm/workspaces) for more examples


### DEFAULT VALUES

npm will default some values based on package contents
js""}`

  If there is a `server
js` file in the root of your package, then npm will
  default the `start` command to `node server
js`
gyp` file in the root of your package and you have
  not defined an `install` or `preinstall` script, npm will default the
  `install` command to compile using node-gyp


* `""contributors"": [

]`

  If there is an `AUTHORS` file in the root of your package, npm will treat
  each line as a `Name <email> (url)` format, where email and url are
  optional
  Lines which start with a `#` or are blank, will be ignored


### SEE ALSO

* [semver](https://github
com/npm/node-semver#versions)
* [workspaces](/using-npm/workspaces)
* [npm init](/commands/npm-init)
* [npm version](/commands/npm-version)
* [npm config](/commands/npm-config)
* [npm help](/commands/npm-help)
* [npm install](/commands/npm-install)
* [npm publish](/commands/npm-publish)
* [npm uninstall](/commands/npm-uninstall)

---
title: package-lock
json
section: 5
description: A manifestation of the manifest
---

### Description

`package-lock
json` is automatically generated for any operations where npm
modifies either the `node_modules` tree, or `package
json`
 It describes the
exact tree that was generated, such that subsequent installs are able to
generate identical trees, regardless of intermediate dependency updates


This file is intended to be committed into source repositories, and serves
various purposes:

* Describe a single representation of a dependency tree such that
  teammates, deployments, and continuous integration are guaranteed to
  install exactly the same dependencies


* Optimize the installation process by allowing npm to skip repeated
  metadata resolutions for previously-installed packages


* As of npm v7, lockfiles include enough information to gain a complete
  picture of the package tree, reducing the need to read `package
json`
  files, and allowing for significant performance improvements


### `package-lock
json` vs `npm-shrinkwrap
json`

Both of these files have the same format, and perform similar functions in
the root of a project
json` cannot be published, and it will
be ignored if found in any place other than the root project


In contrast, [npm-shrinkwrap
json](/configuring-npm/npm-shrinkwrap-json) allows
publication, and defines the dependency tree from the point encountered

This is not recommended unless deploying a CLI tool or otherwise using the
publication process for producing production packages


If both `package-lock
json` are present in the
root of a project, `npm-shrinkwrap
json` will be ignored


### Hidden Lockfiles

In order to avoid processing the `node_modules` folder repeatedly, npm as
of v7 uses a ""hidden"" lockfile present in
`node_modules/
json`

- No package folders exist in the `node_modules` hierarchy that are not
  listed in the lockfile

- The modified time of the file is at least as recent as all of the package
  folders it references


That is, the hidden lockfile will only be relevant if it was created as
part of the most recent update to the package tree
  If another CLI mutates
the tree in any way, this will be detected, and the hidden lockfile will be
ignored


Note that it _is_ possible to manually change the _contents_ of a package
in such a way that the modified time of the package folder is unaffected

For example, if you add a file to `node_modules/foo/lib/bar
js`, then the
modified time on `node_modules/foo` will not reflect this change
package-lock
  That is, it is `lockfileVersion: 3`, rather than
`lockfileVersion: 2`


### Handling Old Lockfiles

When npm detects a lockfile from npm v6 or before during the package
installation process, it is automatically updated to fetch missing
information from either the `node_modules` tree or (in the case of empty
`node_modules` trees or very old lockfile formats) the npm registry


### File Format

#### `name`

The name of the package this is a package-lock for
 This will match what's
in `package
json`
 This will match
what's in `package


#### `lockfileVersion`

An integer version, starting at `1` with the version number of this
document whose semantics were used when generating this
`package-lock
json`
  Lockfiles generated by npm v7 will contain
`lockfileVersion: 2`


* No version provided: an ""ancient"" shrinkwrap file from a version of npm
  prior to npm v5

* `1`: The lockfile version used by npm v5 and v6


npm will always attempt to get whatever data it can out of a lockfile, even
if it is not a version that it was designed to support


#### `packages`

This is an object that maps package locations to an object containing the
information about that package


The root project is typically listed with a key of `""""`, and all other
packages are listed with their relative paths from the root project folder
json`

* resolved: The place where the package was actually resolved from
  In
  the case of packages fetched from the registry, this will be a url to a
  tarball
  In the case of git dependencies, this will be the full git url
  with commit sha
  In the case of link dependencies, this will be the
  location of the link target
 `registry
org` is a magic value meaning
  ""the currently configured registry""


* integrity: A `sha512` or `sha1` [Standard Subresource
  Integrity](https://w3c


* link: A flag to indicate that this is a symbolic link
  If this is
  present, no other fields are specified, since the link target will also
  be included in the lockfile


* dev, optional, devOptional: If the package is strictly part of the
  `devDependencies` tree, then `dev` will be true
  If it
  is both a `dev` dependency _and_ an `optional` dependency of a non-dev
  dependency, then `devOptional` will be set


* hasInstallScript: A flag to indicate that the package has a `preinstall`,
  `install`, or `postinstall` script


* hasShrinkwrap: A flag to indicate that the package has an
  `npm-shrinkwrap
json` file


* bin, license, engines, dependencies, optionalDependencies: fields from
  `package
json`

#### dependencies

Legacy data for supporting versions of npm that use `lockfileVersion: 1`
  Because the
object structure is strictly hierarchical, symbolic link dependencies are
somewhat challenging to represent in some cases


Dependency objects have the following fields:

* version: a specifier that varies depending on the nature of the package,
  and is usable in fetching a new copy of it


    * bundled dependencies: Regardless of source, this is a version number
      that is purely for informational purposes
 (eg, `1
 (eg,
      `git+https://example
com/foo/bar#115311855adb0789a0466714ed48a1499ffea97e`)
    * http tarball sources: This is the URL of the tarball
 (eg,
      `https://example
com/example-1
0
io/webappsec/specs/subresourceintegrity/)
  string for the artifact that was unpacked in this location
 `registry
npmjs
org` is a magic
  value meaning ""the currently configured registry""
  When installing, this module will be extracted
  from the parent module during the extract phase, not installed as a
  separate dependency
  This is false
  for dependencies that are both a development dependency of the top level
  and a transitive dependency of a non-development dependency of the top
  level
  This is a list of
  everything this module requires, regardless of where it will be
  installed


* dependencies: The dependencies of this dependency, exactly as at the top
  level


### See also

* [npm shrinkwrap](/commands/npm-shrinkwrap)
* [npm-shrinkwrap


npm gets its configuration values from the following sources, sorted by priority:

#### Command Line Flags

Putting `--foo bar` on the command line sets the `foo` configuration
parameter to `""bar""`
  Using `--flag` without specifying any value will set
the value to `true`


Example: `--flag1 --flag2` will set both configuration parameters
to `true`, while `--flag1 --flag2 bar` will set `flag1` to `true`,
and `flag2` to `bar`
  Finally, `--flag1 --flag2 -- bar` will set
both configuration parameters to `true`, and the `bar` is taken
as a command argument


#### Environment Variables

Any environment variables that start with `npm_config_` will be
interpreted as a configuration parameter
  Any environment configurations that
are not given a value will be given the value of `true`
  Config
values are case-insensitive, so `NPM_CONFIG_FOO=bar` will work the
same
 However, please note that inside [`scripts`](/using-npm/scripts)
npm will set its own environment variables and Node will prefer
those lowercase versions over any uppercase ones that you might set

For details see [this issue](https://github


Notice that you need to use underscores instead of dashes, so `--allow-same-version`
would become `npm_config_allow_same_version=true`


#### npmrc Files

The four relevant files are:

* per-project configuration file (`/path/to/my/project/
npmrc`)
* per-user configuration file (defaults to `$HOME/
npmrc`; configurable via CLI
  option `--userconfig` or environment variable `$NPM_CONFIG_USERCONFIG`)
* global configuration file (defaults to `$PREFIX/etc/npmrc`; configurable via
  CLI option `--globalconfig` or environment variable `$NPM_CONFIG_GLOBALCONFIG`)
* npm's built-in configuration file (`/path/to/npm/npmrc`)

See [npmrc](/configuring-npm/npmrc) for more details
  For
example:

```bash
npm ls -gpld
# same as:
npm ls --global --parseable --long --loglevel info
```

### Config Settings

#### `_auth`

* Default: null
* Type: null or String

A basic-auth string to use when authenticating against the npm registry

This will ONLY be used to authenticate against the npm registry
 For other
registries you will need to scope it like ""//other-registry
tld/:_auth""

Warning: This should generally not be set via a command-line option
 It is
safer to use a registry-provided authentication bearer token stored in the
~/


Unscoped packages can not be set to `restricted`


Note: This defaults to not changing the current access level for existing
packages
 Specifying a value of `restricted` or `public` during publish will
change the access for an existing package the same way that `npm access set
status` would




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes




#### `auth-type`

* Default: ""web""
* Type: ""legacy"" or ""web""

What authentication strategy to use with `login`
 Note that if an `otp`
config is given, this value will always be set to `legacy`




#### `before`

* Default: null
* Type: null or Date

If passed to `npm install`, will rebuild the npm tree such that only
versions that were available **on or before** the `--before` time get
installed
 If there's no versions available for the current set of direct
dependencies, the command will error


If the requested version is a `dist-tag` and the given tag does not pass the
`--before` filter, the most recent version less than or equal to that tag
will be used
2` even though
`latest` is `2




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
cmd` shims on Windows) for package
executables


Set to `false` to suppress browser behavior and instead print urls to
terminal


Set to `true` to use default system URL opener




#### `ca`

* Default: null
* Type: null or String (can be set multiple times)

The Certificate Authority signing certificate that is trusted for SSL
connections to the registry
CER)"") with newlines replaced by the string
""\n""
 For example:

```ini
ca=""-----BEGIN CERTIFICATE-----\nXXXX\nXXXX\n-----END CERTIFICATE-----""
```

Set to `null` to only allow ""known"" registrars, or to a specific CA cert to
trust only that specific signing authority


""
ca[]=""





#### `call`

* Default: """"
* Type: String

Optional companion option for `npm exec`, `npx` that allows for specifying a
custom command to be run along with the installed packages
 If `""always""` then always shows colors
 If
true, then only prints color codes for tty file descriptors




#### `commit-hooks`

* Default: true
* Type: Boolean

Run git commit hooks when using the `npm version` command
 Acceptable values
are same as `cpu` field of package
json, which comes from `process
arch`




#### `depth`

* Default: `Infinity` if `--all` is set, otherwise `1`
* Type: null or Number

The depth to go when recursing packages for `npm ls`


If not set, `npm ls` will show only the immediate dependencies of the root
project
 If `--all` is set, then npm will show all dependencies by default




#### `diff-dst-prefix`

* Default: ""b/""
* Type: String

Destination prefix to be used in `npm diff` output




#### `diff-ignore-all-space`

* Default: false
* Type: Boolean

Ignore whitespace when comparing lines in `npm diff`




#### `diff-no-prefix`

* Default: false
* Type: Boolean

Do not show any source or destination prefix in `npm diff` output




#### `diff-src-prefix`

* Default: ""a/""
* Type: String

Source prefix to be used in `npm diff` output




#### `diff-text`

* Default: false
* Type: Boolean

Treat all files as text in `npm diff`




#### `diff-unified`

* Default: 3
* Type: Number

The number of lines of context to print in `npm diff`




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `editor`

* Default: The EDITOR or VISUAL environment variables, or
  '%SYSTEMROOT%\notepad




#### `engine-strict`

* Default: false
* Type: Boolean

If set to true, then npm will stubbornly refuse to install (or even consider
installing) any package that claims to not be compatible with the current
Node
js version




#### `expect-result-count`

* Default: null
* Type: null or Number

Tells to expect a specific number of results from the command


This config can not be used with: `expect-results`

#### `expect-results`

* Default: null
* Type: null or Boolean

Tells npm whether or not to expect results from the command


npm will retry idempotent read requests to the registry in the case of
network failures or 5xx HTTP errors




#### `fetch-retry-maxtimeout`

* Default: 60000 (1 minute)
* Type: Number

The ""maxTimeout"" config for the `retry` module to use when fetching
packages


* Allow clobbering non-npm files in global installs

* Allow deleting the cache folder with `npm cache clean`

* Allow installing packages that have an `engines` declaration requiring a
  different version of npm

* Allow unpublishing all versions of a published package

* Implicitly set `--yes` during `npm init`

* Allow clobbering existing values in `npm pkg`
* Allow unpublishing of entire packages (not just a single version)


If you don't have a clear idea of what you want to do, it is strongly
recommended that you do not use this option!



#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process
json` or `npm-shrinkwrap
json` as a human readable
file




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 See [`npm
fund`](/commands/npm-fund) for details
 Setting this to false
results in no commit being made at all




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `globalconfig`

* Default: The global --prefix setting plus 'etc/npmrc'
 For example,
  '/usr/local/etc/npmrc'
* Type: Path

The config file to read for global config options




#### `heading`

* Default: ""npm""
* Type: String

The string that starts all the debugging log output




#### `if-present`

* Default: false
* Type: Boolean

If true, npm will not exit with an error code when `run-script` is invoked
for a script that isn't defined in the `scripts` section of `package

This option can be used when it's desirable to optionally run a script when
it's present and fail if the script fails


This value is not exported to the environment for child processes


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line
com/npm/rfcs/pull/92)




#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes




#### `init-author-name`

* Default: """"
* Type: String

The value `npm init` should use by default for the package author's name
npm-init
com/npm/init-package-json) module for
more information, or [npm init](/commands/npm-init)
0
0""
* Type: SemVer string

The value that `npm init` should use by default for the package version
number, if not already set in package
json
 This option has no effect on
workspaces
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 shallow (formerly --global-style) only install direct
deps at top-level
 linked: (experimental) install in node_modules/
store,
link in place, unhoisted




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
parse() before
  saving them to your `package


If a package cannot be installed because of overly strict `peerDependencies`
that collide, it provides a way to move forward resolving the situation


This differs from `--omit=peer`, in that `--omit=peer` will avoid unpacking
`peerDependencies` on disk, but will still design a tree such that
`peerDependencies` _could_ be unpacked in a correct place


Use of `legacy-peer-deps` is not recommended, as it will not enforce the
`peerDependencies` contract that meta-dependencies may rely on
json



#### `link`

* Default: false
* Type: Boolean

Used with `npm ls`, limiting output to only those packages that are linked




#### `local-address`

* Default: null
* Type: IP Address

The IP address of the local interface to use when making connections to the
npm registry
 Must be IPv4 in versions of Node prior to 0




#### `location`

* Default: ""user"" unless `--global` is passed, which will also set this value
  to ""global""
* Type: ""global"", ""user"", or ""project""

When passed to `npm config` this refers to which config file to use


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `lockfile-version`

* Default: Version 3 if no lockfile, auto-converting v1 lockfiles to v3,
  otherwise maintain current lockfile version
 Prevents lockfile churn when interoperating with
older npm versions


2: The default lockfile version used by npm version 7 and 8
 Includes both
the version 1 lockfile data and version 3 lockfile data, for maximum
determinism and interoperability, at the expense of more bytes on disk




#### `loglevel`

* Default: ""notice""
* Type: ""silent"", ""error"", ""warn"", ""notice"", ""http"", ""info"", ""verbose"", or
  ""silly""

What level of logs to report
 The default is
""notice""


See also the `foreground-scripts` config




#### `logs-dir`

* Default: A directory named `_logs` inside the cache
* Type: null or Path

The location of npm's log directory




#### `logs-max`

* Default: 10
* Type: Number

The maximum number of log files to store


If set to 0, no log files will be written for the current run




#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`




#### `message`

* Default: ""%s""
* Type: String

Commit message which is used by `npm version` when creating version commit
js via the `NODE_OPTIONS` environment
variable




#### `noproxy`

* Default: The value of the NO_PROXY environment variable
* Type: String (can be set multiple times)

Domain extensions that should bypass any proxies


Also accepts a comma-delimited string




#### `offline`

* Default: false
* Type: Boolean

Force offline mode: no network requests will be done during install
 To
allow the CLI to fill in missing cache data, see `--prefer-offline`
json` or `npm-shrinkwrap
json` file
json, which comes from `process
platform`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one
""
* Type: String

Directory in which `npm pack` will save tarballs




#### `package`

* Default:
* Type: String (can be set multiple times)

The package or packages to install for [`npm exec`](/commands/npm-exec)



#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json` files when installing
 This
will also prevent _writing_ `package-lock
json` if `save` is true




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock


For `update` this means only the `package-lock


For `list` this means the output will be based on the tree described by the
`package-lock
json`, rather than the contents of `node_modules`
 For
`npm search`, this will be tab-separated table format




#### `prefer-offline`

* Default: false
* Type: Boolean

If true, staleness checks for cached data will be bypassed, but missing data
will be requested from the server




#### `prefer-online`

* Default: false
* Type: Boolean

If true, staleness checks for cached data will be forced, making the CLI
look for updates immediately even for fresh package data




#### `prefix`

* Default: In global mode, the folder where the node executable is installed

  Otherwise, the nearest parent folder containing either a package
json file
  or a node_modules folder

* Type: Path

The location to install global items




#### `preid`

* Default: """"
* Type: String

The ""prerelease identifier"" to use as a prefix for the ""prerelease"" part of
a semver
 Like the `rc` in `1
2
8`




#### `progress`

* Default: `true` unless running in a known CI system
* Type: Boolean

When set to `true`, npm will display a progress bar during time intensive
operations, if `process
stderr` is a TTY


This config can not be used with: `provenance-file`

#### `provenance-file`

* Default: null
* Type: Path

When publishing, the provenance bundle at the given path will be used
 If the `HTTP_PROXY` or
`http_proxy` environment variables are set, proxy settings will be honored
by the underlying `request` library




#### `read-only`

* Default: false
* Type: Boolean

This is used to mark a token as unable to publish when configuring limited
access tokens with the `npm token create` command




#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry




#### `replace-registry-host`

* Default: ""npmjs""
* Type: ""npmjs"", ""never"", ""always"", or String

Defines behavior for replacing the registry host in a lockfile with the
configured registry


The default behavior is to replace package dist URLs from the default
registry (https://registry
org) to the configured registry
 If set to ""always"", then replace the
registry host with the configured host every time
npmjs
org"")




#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package
json` file as dependencies


Will also prevent writing to `package-lock
json` if set to `false`




#### `save-bundle`

* Default: false
* Type: Boolean

If a package would be saved at install time by the use of `--save`,
`--save-dev`, or `--save-optional`, then also put it in the
`bundleDependencies` list


Ignored if `--save-peer` is set, since peerDependencies cannot be bundled
json file as `devDependencies`




#### `save-exact`

* Default: false
* Type: Boolean

Dependencies saved to package




#### `save-optional`

* Default: false
* Type: Boolean

Save installed packages to a package
json file as `optionalDependencies`


For example if a package has version `1
3`, by default its version is set
to `^1
2
3` which allows minor upgrades for that package, but after `npm
config set save-prefix='~'` it would be set to `~1
2
3` which only allows
patch upgrades




#### `save-prod`

* Default: false
* Type: Boolean

Save installed packages into `dependencies` specifically




#### `sbom-format`

* Default: null
* Type: ""cyclonedx"" or ""spdx""

SBOM format to use when generating SBOMs




#### `sbom-type`

* Default: ""library""
* Type: ""library"", ""application"", or ""framework""

The type of package described by the generated SBOM




#### `scope`

* Default: the scope of the current project, if any, or """"
* Type: String

Associate an operation with a scope for a scoped registry


Useful when logging in to or out of a private registry:

```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry
com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

This will cause `@mycorp` to be mapped to the registry for future
installation of packages specified according to the pattern
`@mycorp/package`




#### `searchexclude`

* Default: """"
* Type: String

Space-separated options that limit the results from search




#### `searchopts`

* Default: """"
* Type: String

Space-separated options that are always passed to search




#### `sign-git-commit`

* Default: false
* Type: Boolean

If set to true, then the `npm version` command will commit the new package
version using `-S` to add a signature


Note that git requires you to have set up GPG keys in your git configs for
this to work properly




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `strict-ssl`

* Default: true
* Type: Boolean

Whether or not to do SSL key validation when making requests to the registry
via https


See also the `ca` config




#### `tag`

* Default: ""latest""
* Type: String

If you ask npm to install a package and don't tell it a specific version,
then it will install the specified tag


Also the tag that is added to the package@version specified by the `npm tag`
command, if no explicit tag is given
 To remove the prefix altogether, set
it to the empty string: `""""`


Because other tools may rely on the convention that npm version tags look
like `v1
 In
particular, use care when overriding this setting for public packages




#### `timing`

* Default: false
* Type: Boolean

If true, writes timing information to a process specific json file in the
cache or `logs-dir`
 The file name ends with `-timing
json | npm exec -- json -g`
 To suppress this
while still writing the timing file, use `--silent`




#### `umask`

* Default: 0
* Type: Octal numeric string in range 0000




Note that the underlying system will _also_ apply its own umask value to
files and folders that are created, and npm does not circumvent this, but
rather adds the `--umask` config to it




#### `unicode`

* Default: false on windows, true on mac/unix systems with a unicode locale,
  as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables

* Type: Boolean

When set to true, npm uses unicode characters in the tree output




#### `update-notifier`

* Default: true
* Type: Boolean

Set to false to suppress the update notification when using an older version
of npm than the latest




#### `user-agent`

* Default: ""npm/{npm-version} node/{node-version} {platform} {arch}
  workspaces/{workspaces} {ci}""
* Type: String

Sets the User-Agent request header
 The following fields are replaced with
their actual counterparts:

* `{npm-version}` - The npm version in use
* `{node-version}` - The Node
platform`
* `{arch}` - The value of `process
arch`
* `{workspaces}` - Set to `true` if the `workspaces` or `workspace` options
  are set

* `{ci}` - The value of the `ci-name` config, if set, prefixed with `ci/`, or
  an empty string if `ci-name` is empty
npmrc""
* Type: Path

The location of user-level configuration settings


This may be overridden by the `npm_config_userconfig` environment variable
or the `--userconfig` command line option, but may _not_ be overridden by
settings in the `globalconfig` file




#### `version`

* Default: false
* Type: Boolean

If true, output the npm version and exit successfully
versions` map and
the version in the current working directory's `package


Set to `""browser""` to view html help content in the default web browser




#### `which`

* Default: null
* Type: null or Number

If there are multiple funding sources, which 1-indexed source URL to open


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `workspaces-update`

* Default: true
* Type: Boolean

If set to true, the npm cli will run an update after operations that may
possibly change the workspaces installed to the `node_modules` folder




#### `also`

* Default: null
* Type: null, ""dev"", or ""development""
* DEPRECATED: Please use --include=dev instead


When set to `dev` or `development`, this is an alias for `--include=dev`




#### `cache-max`

* Default: Infinity
* Type: Number
* DEPRECATED: This option has been deprecated in favor of `--prefer-online`

`--cache-max=0` is an alias for `--prefer-online`



#### `cache-min`

* Default: 0
* Type: Number
* DEPRECATED: This option has been deprecated in favor of `--prefer-offline`


`--cache-min=9999 (or bigger)` is an alias for `--prefer-offline`




#### `cert`

* Default: null
* Type: null or String
* DEPRECATED: `key` and `cert` are no longer used for most registry
  operations
 Example:
  //other-registry
tld/:keyfile=/path/to/key
pem
  //other-registry
crt

A client certificate to pass when accessing the registry
 Values should be
in PEM format (Windows calls it ""Base-64 encoded X
509 (
pem""




#### `dev`

* Default: false
* Type: Boolean
* DEPRECATED: Please use --include=dev instead


Alias for `--include=dev`




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies
author
email`

* Default: """"
* Type: String
* DEPRECATED: Use `--init-author-email` instead
author
name`

* Default: """"
* Type: String
* DEPRECATED: Use `--init-author-name` instead


Alias for `--init-author-name`



#### `init
author
url`

* Default: """"
* Type: """" or URL
* DEPRECATED: Use `--init-author-url` instead


Alias for `--init-license`



#### `init
module`

* Default: ""~/
version`

* Default: ""1


Alias for `--init-version`



#### `key`

* Default: null
* Type: null or String
* DEPRECATED: `key` and `cert` are no longer used for most registry
  operations
 Example:
  //other-registry
tld/:certfile=/path/to/cert
crt

A client key to pass when accessing the registry
tld/:keyfile=/path/to/key




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 Sets `--install-strategy=nested`


Alias for --include=optional or --omit=optional



#### `production`

* Default: null
* Type: null or Boolean
* DEPRECATED: Use `--omit=dev` instead


Alias for `--omit=dev`



#### `shrinkwrap`

* Default: true
* Type: Boolean
* DEPRECATED: Use the --package-lock setting instead


Alias for --package-lock



### See also

* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm scripts](/using-npm/scripts)
* [npm folders](/configuring-npm/folders)
* [npm](/commands/npm)

---
title: Dependency Selector Syntax & Querying
section: 7
description: Dependency Selector Syntax & Querying
---

### Description

The [`npm query`](/commands/npm-query) command exposes a new dependency selector syntax (informed by & respecting many aspects of the [CSS Selectors 4 Spec](https://dev
w3
org/csswg/selectors4/#relational)) which:

- Standardizes the shape of, & querying of, dependency graphs with a robust object model, metadata & selector syntax
- Leverages existing, known language syntax & operators from CSS to make disparate package information broadly accessible
- Unlocks the ability to answer complex, multi-faceted questions about dependencies, their relationships & associative metadata
- Consolidates redundant logic of similar query commands in `npm` (ex


)

### Dependency Selector Syntax

#### Overview:

- there is no ""type"" or ""tag"" selectors (ex
 `div, h1, a`) as a dependency/target is the only type of `Node` that can be queried
- the term ""dependencies"" is in reference to any `Node` found in a `tree` returned by `Arborist`

#### Combinators

- `>` direct descendant/child
- ` ` any descendant/child
- `~` sibling

#### Selectors

- `*` universal selector
- `#<name>` dependency selector (equivalent to `[name=""


` dependency type selector
- `:` pseudo selector

#### Dependency Type Selectors

- `
prod` dependency found in the `dependencies` section of `package
json`, or is a child of said dependency
- `
dev` dependency found in the `devDependencies` section of `package
peer` dependency found in the `peerDependencies` section of `package
json`
- `
workspace` dependency found in the [`workspaces`](https://docs
npmjs
json`
- `
json`, or is a child of said dependency

#### Pseudo Selectors
- [`:not(<selector>)`](https://developer
mozilla
org/en-US/docs/Web/CSS/:not)
- [`:has(<selector>)`](https://developer
mozilla
mozilla
org/en-US/docs/Web/CSS/:root) matches the root node/dependency
- [`:scope`](https://developer
org/en-US/docs/Web/CSS/:scope) matches node/dependency it was queried against
- [`:empty`](https://developer
mozilla
org/en-US/docs/Web/CSS/:empty) when a dependency has no dependencies
- [`:private`](https://docs
npmjs
com/cli/v8/commands/npm-link)
- `:deduped` when a dependency has been deduped (note that this does *not* always mean the dependency has been hoisted to the root of node_modules)
- `:overridden` when a dependency has been overridden
- `:extraneous` when a dependency exists but is not defined as a dependency of any node
- `:invalid` when a dependency version is out of its ancestors specified range
- `:missing` when a dependency is not found on disk
- `:semver(<spec>, [selector], [function])` match a valid [`node-semver`](https://github
npmjs
com/package/glob) matching based on dependencies path relative to the project
- `:type(<type>)` [based on currently recognized types](https://github
com/npm/npm-package-arg#result-object)
- `:outdated(<type>)` when a dependency is outdated
- `:vuln(<selector>)` when a dependency has a known vulnerability

##### `:semver(<spec>, [selector], [function])`

The `:semver()` pseudo selector allows comparing fields from each node's `package
com/npm/node-semver#readme) methods
 It accepts up to 3 parameters, all but the first of which are optional


- `spec` a semver version or range
- `selector` an attribute selector for each node (default `[version]`)
- `function` a semver method to apply, one of: `satisfies`, `intersects`, `subset`, `gt`, `gte`, `gtr`, `lt`, `lte`, `ltr`, `eq`, `neq` or the special function `infer` (default `infer`)

When the special `infer` function is used the `spec` and the actual value from the node are compared
valid()`, `eq` is used
 If both values are ranges, according to `!semver
 If the values are mixed types `satisfies` is used


Some examples:

- `:semver(^1
0
0
0`
- `:semver(16
0
0
0`

##### `:outdated(<type>)`

The `:outdated` pseudo selector retrieves data from the registry and returns information about which of your dependencies are outdated
 The following data can be found under the `queryContext` property of each node
 This is only populated if `:outdated(out-of-range)` is used
  For example if you have `semver@7
0` in your tree, a vulnerability for `semver` which affects versions `<=6
3
1` will not match


You can also filter results by certain attributes in advisories
  Currently that includes `severity` and `cwe`
  Note that severity filtering is done per severity, it does not include severities ""higher"" or ""lower"" than the one specified


In addition to the filtering performed by the pseudo selector, info about each relevant advisory will be added to the `queryContext` attribute of each node under the `advisories` attribute

- `:vuln([severity=high],[severity=moderate])` returns only dependencies with a vulnerability with a `high`  or `moderate` severity
mozilla


- `[]` attribute selector (ie
 existence of attribute)
- `[attribute=value]` attribute value is equivalent


- `[attribute~=value]` attribute value contains word





- `[attribute^=value]` attribute value starts with


package` metadata
 This allows for iterative attribute selection beyond top-level `String` evaluation
 See examples below:

#### `Objects`

```css
/* return dependencies that have a `scripts
test` containing `""tap""` */
*:attr(scripts, [test~=tap])
```

#### Nested `Objects`

Nested objects are expressed as sequential arguments to `:attr()`
 `Arrays` also support exact `value` matching when a `String` is passed to the selector


##### Example of an `Array` Attribute Selection:
```css
/* removes the distinction between properties & arrays */
/* ie
com])
```

### Groups

Dependency groups are defined by the package relationships to their ancestors (ie
 the dependency types that are defined in `package
 This approach is user-centric as the ecosystem has been taught to think about dependencies in these groups first-and-foremost
 a `prod` dependency may also be a `dev` dependency (in that it's also required by another `dev` dependency) & may also be `bundled` - a selector for that type of dependency would look like: `*
prod
dev
bundled`)


- `
prod`
- `
optional`
- `
bundled`
- `
  Additionally the `
loadActual()
then(async (tree) => {
  // query all production dependencies
  const results = await tree
querySelectorAll('
loadActual()
querySelectorAll(':type(git)')
  console
log(deps)
})
```

## See Also

* [npm query](/commands/npm-query)
* [@npmcli/arborist](https://npm
im/@npmcli/arborist)

---
title: developers
section: 7
description: Developer Guide
---

### Description

So, you've decided to use npm to develop (and maybe publish/deploy)
your project


Fantastic!

There are a few things that you need to do above the simple steps
that your users will do to install your program


### About These Documents

These are man pages


### What is a Package

A package is:

* a) a folder containing a program described by a package
json file
* b) a gzipped tarball containing (a)
* c) a url that resolves to (b)
* d) a `<name>@<version>` that is published on the registry with (c)
* e) a `<name>@<tag>` that points to (d)
* f) a `<name>` that has a ""latest"" tag satisfying (e)
* g) a `git` url that, when cloned, results in (a)


Even if you never publish your package, you can still get a lot of
benefits of using npm if you just want to write a node program (a), and
perhaps if you also want to be able to easily install it elsewhere
after packing it up into a tarball (b)


Git urls can be of the form:

```bash
git://github
git#commit-ish
git+http://user@hostname/project/blah
git#commit-ish
git+https://user@hostname/project/blah
git#commit-ish
```

The `commit-ish` can be any tag, sha, or branch which can be supplied as
an argument to `git checkout`
  The default is whatever the repository uses
as its default branch


### The package
json File

You need to have a `package
json` file in the root of your project to do
much of anything with npm
  That is basically the whole interface
  Please do
  not use the name to specify that it runs on node, or is in JavaScript

  You can use the ""engines"" field to explicitly state the versions of node
  (or whatever else) that your program requires, and it's pretty well
  assumed that it's JavaScript
  `foo` or `bar` are better
  The node API changes a lot, and there may be bugs or
  new functionality that you depend on
  Be explicit


* author: Take some credit


* scripts: If you have a special compilation or installation script, then
  you should put it in the `scripts` object
  You should definitely have at
  least a basic smoke-test command as the ""scripts
test"" field
  See
  [scripts](/using-npm/scripts)
  The best ones
  to include are ""lib"" and ""doc"", but if you use ""man"" to specify a folder
  full of man pages, they'll get installed just like these ones
  See [`npm
init`](/commands/npm-init) for more info


### Keeping files *out* of your Package

Use a `
npmignore` file to keep stuff out of your package
  If there's no
`
gitignore` file, then npm will ignore
the stuff matched by the `
gitignore` file
  If you *want* to include
something that is excluded by your `
npmignore` file to override it
gitignore` files in all subdirectories of your package,
not only the root directory


`
gitignore` files:

* Blank lines or lines starting with `#` are ignored

* Standard glob patterns work

* You can negate a pattern by starting it with an exclamation point `!`


By default, the following paths and files are ignored, so there's no
need to add them to `
*
swp`
* `
_*`
* `
git`
* `
npmignore`
* `
lock-wscript`
* `
svn`
* `
wafpickle-*`
* `config
gypi`
* `CVS`
* `npm-debug
log`

Additionally, everything in `node_modules` is ignored, except for
bundled dependencies
npmignore`
npmignore` is pointless:

* `package
json`
* `README` (and its variants)
* `CHANGELOG` (and its variants)
* `LICENSE` / `LICENCE`

If, given the structure of your project, you find `
npmignore` to be a
maintenance headache, you might instead try populating the `files`
property of `package
json`, which is an array of file or directory names
that should be included in your package
npmignore` or `files` config works

If you want to double check that your package will include only the files
you intend it to when published, you can run the `npm pack` command locally
which will generate a tarball in the working directory, the same way it
does for publishing


### Link Packages

`npm link` is designed to install a development package and see the
changes in real time without having to keep re-installing it
  (You do
need to either re-link or `npm rebuild -g` to update compiled packages,
of course
)

More info at [`npm link`](/commands/npm-link)
**

If you can not install it locally, you'll have
problems trying to publish it
  Or, worse yet, you'll be able to
publish it, but you'll be publishing a broken or pointless package

So don't do that


In the root of your package, do this:

```bash
npm install 
 -g
```

That'll show you that it's working
  If you'd rather just create a symlink
package that points to your working directory, then do this:

```bash
npm link
```

Use `npm ls -g` to see if it's there


To test a local install, go into some other folder, and then do:

```bash
cd 


/my-package
```

to install it locally into the node_modules folder in that other place
  It works like this:

```bash
npm adduser
```

and then follow the prompts


This is documented better in [npm adduser](/commands/npm-adduser)
  In the root of your folder, do this:

```bash
npm publish
```

You can give publish a url to a tarball, or a filename of a tarball,
or a path to a folder
  So, if you have secret stuff in there, use a
`
npmignore` file to list out the globs to ignore, or publish
from a fresh checkout


Tell the world how easy it is to install your program!

### See also

* [npm](/commands/npm)
* [npm init](/commands/npm-init)
* [package
json](/configuring-npm/package-json)
* [npm scripts](/using-npm/scripts)
* [npm publish](/commands/npm-publish)
* [npm adduser](/commands/npm-adduser)
* [npm registry](/using-npm/registry)

---
title: Logging
section: 7
description: Why, What & How We Log
---

### Description

The `npm` CLI has various mechanisms for showing different levels of information back to end-users for certain commands, configurations & environments


### Setting Log File Location

All logs are written to a debug log, with the path to that file printed if the execution of a command fails


The default location of the logs directory is a directory named `_logs` inside the npm cache
 This can be changed with the `logs-dir` config option


For example, if you wanted to write all your logs to the current working directory, you could run: `npm install --logs-dir=


To turn off logs completely set `--logs-max=0`


### Setting Log Levels

#### `loglevel`

`loglevel` is a global argument/config that can be set to determine the type of information to be displayed


The default value of `loglevel` is `""notice""` but there are several levels/types of logs available, including:

- `""silent""`
- `""error""`
- `""warn""`
- `""notice""`
- `""http""`
- `""info""`
- `""verbose""`
- `""silly""`

All logs pertaining to a level proceeding the current setting will be shown
 If you'd like to change this behavior & log this output you can set `foreground-scripts` to `true`


### Timing Information

The [`--timing` config](/using-npm/config#timing) can be set which does a few
things:

1
 Always shows the full path to the debug log regardless of command exit status
1
 Write timing information to a process specific timing file in the cache or `logs-dir`
1


Sometimes it is helpful to get timing information without outputting anything to the terminal
 For
example, the performance might be affected by writing to the terminal
 In this case you can use
`--timing --silent` which will still write the timing file, but not output anything to the terminal
while running


### Registry Response Headers

#### `npm-notice`

The `npm` CLI reads from & logs any `npm-notice` headers that are returned from the configured registry
 This mechanism can be used by third-party registries to provide useful information when network-dependent requests occur


This header is not cached, and will not be logged if the request is served from the cache


### Logs and Sensitive Information

The `npm` CLI makes a best effort to redact the following from terminal output and log files:

- Passwords inside basic auth URLs
- npm tokens

However, this behavior should not be relied on to keep all possible sensitive information redacted
 If you are concerned about secrets in your log file or terminal output, you can use `--loglevel=silent` and `--logs-max=0` to ensure no logs are written to your terminal or filesystem


### See also

* [config](/using-npm/config)

---
title: orgs
section: 7
description: Working with Teams & Orgs
---

### Description

There are three levels of org users:

1

2
 Developer, works on packages they are given access to
  

The super admin is the only person who can add users to the org because it impacts the monthly bill
 Every org has a `developers` team that all users are automatically added to
 The team admin grants package access to teams, not individuals


The developer will be able to access packages based on the teams they are on
 Access is either read-write or read-only


There are two main commands:

1
 This team automatically gets read-write access to all packages, but you can change that with the `access` command


* Create a new team:

```bash
npm team create <org:team>
```

* Add members to that team:

```bash
npm team add <org:team> <user>
```

### Publish a package and adjust package access

* In package directory, run

```bash
npm init --scope=<org>
```
to scope it for your org & publish as usual

* Grant access:  

```bash
npm access grant <read-only|read-write> <org:team> [<package>]
```

* Revoke access:

```bash
npm access revoke <org:team> [<package>]
```

### Monitor your package access

* See what org packages a team member can access:

```bash
npm access ls-packages <org> <user>
```

* See packages available to a specific team:

```bash
npm access ls-packages <org:team>
```

* Check which teams are collaborating on a package:

```bash
npm access ls-collaborators <pkg>
```

### See also

* [npm team](/commands/npm-team)
* [npm access](/commands/npm-access)
* [npm scope](/using-npm/scope)

---
title: package-spec
section: 7
description: Package name specifier
---

### Description

Commands like `npm install` and the dependency sections in the
`package
json` use a package name specifier
  This can be many different
things that all refer to a ""package""
  Examples include a package name,
git url, tarball, or local directory
  These will generally be referred
to as `<package-spec>` in the help output for the npm commands that use
this package name specifier
  This is typically used in combination
with the [registry](/using-npm/config#registry) config to refer to a
package in a registry


Examples:
* `npm`
* `@npmcli/arborist`
* `@npmcli/arborist@latest`
* `npm@6
13
1`
* `npm@^4
0
0`

### Aliases

* `<alias>@npm:<name>`

Primarily used by commands like `npm install` and in the dependency
sections in the `package


See `Package name` above for more info on referring to a package by
name, and [registry](/using-npm/config#registry) for configuring which
registry is used when referring to a package by name


Examples:
* `semver:@npm:@npmcli/semver-with-patch`
* `semver:@npm:semver@7
2
  Specifically this is
a folder with a `package
json` file in it
/` (or your OS equivalent) to reduce confusion


Examples:

* `
/my-package
npmjs
0
0
tgz`

Refers to a package in a tarball format, either on the local filesystem
or remotely via url
  This is the format that packages exist in when
uploaded to a registry
  This can be a full git url, git
shorthand, or a username/package on GitHub


Examples:

* `https://github
com/npm/cli
0


npm is configured to use the **npm public registry** at
<https://registry
npmjs
com/policies/terms>


You can configure npm to use any compatible registry you like, and even run
your own registry


npm's package registry implementation supports several
write APIs as well, to allow for publishing packages and managing user
account information


The npm public registry is powered by a CouchDB database,
of which there is a public mirror at <https://skimdb
npmjs
com/registry>


The registry URL used is determined by the scope of the package (see
[`scope`](/using-npm/scope)
 If no scope is specified, the default registry is
used, which is supplied by the [`registry` config](/using-npm/config#registry)
parameter
  See [`npm config`](/commands/npm-config),
[`npmrc`](/configuring-npm/npmrc), and [`config`](/using-npm/config) for more on
managing npm's configuration
 If you create a lock
file while using the default registry you can switch to another registry and
npm will install packages from the new registry, but if you create a lock
file while using a custom registry packages will be installed from that
registry even after you change to another registry


When making requests of the registry npm adds two headers with information
about your environment:

* `Npm-Scope` – If your project is scoped, this header will contain its
  scope

* `Npm-In-CI` – Set to ""true"" if npm believes this install is running in a
  continuous integration environment, ""false"" otherwise
buildKey`


See [`package
json`](/configuring-npm/package-json) for more info on what goes in the package
json file


### Where can I find my (and others') published packages?

<https://www
com/>

### See also

* [npm config](/commands/npm-config)
* [config](/using-npm/config)
* [npmrc](/configuring-npm/npmrc)
* [npm developers](/using-npm/developers)

---
title: removal
section: 7
description: Cleaning the Slate
---

### Synopsis

So sad to see you go


```bash
sudo npm uninstall npm -g
```

Or, if that fails, get the npm source code, and do:

```bash
sudo make uninstall
```

### More Severe Uninstalling

Usually, the above instructions are sufficient


If that doesn't work, or if you require more drastic measures,
continue reading


Note that this is only necessary for globally-installed packages
  Local
installs are completely contained within a project's `node_modules`
folder
  Delete that folder, and everything is gone unless a package's
install script is particularly ill-behaved


This assumes that you installed node and npm in the default place
  If
you configured node with a different `--prefix`, or installed npm with a
different prefix setting, then adjust the paths accordingly, replacing
`/usr/local` with your install prefix
npm,_modules},bin,share/man}/npm*
```

If you installed things *with* npm, then your best bet is to uninstall
them with npm first, and then install them again once you have a
proper install
  This can help find any symlinks that are lying
around:

```bash
ls -laF /usr/local/{lib/node{,/
npm},bin,share/man} | grep npm
```

Prior to version 0
 Some package names also have a scope
 A scope
follows the usual rules for package names (URL-safe characters, no leading dots
or underscores)


```bash
@somescope/somepackagename
```

Scopes are a way of grouping related packages together, and also affect a few
things about the way npm treats the package
 This means you don't have to worry about someone taking your
package name ahead of you
 Thus it is also a good way to signal official packages
for organizations


Scoped packages can be published and installed as of `npm@2` and are supported
by the primary npm registry
 Unscoped packages can depend on scoped packages and
vice versa
 The npm client is backwards-compatible with unscoped registries,
so it can be used to work with scoped and unscoped registries at the same time


### Installing scoped packages

Scoped packages are installed to a sub-folder of the regular installation
folder, e
g
json`:

```json
""dependencies"": {
  ""@myorg/mypackage"": ""^1
0""
}
```

Note that if the `@` symbol is omitted, in either case, npm will instead attempt to
install from GitHub; see [`npm install`](/commands/npm-install)


### Requiring scoped packages

Because scoped packages are installed into a scope folder, you have to
include the name of the scope when requiring them in your code, e
g


```javascript
require('@myorg/mypackage')
```

There is nothing special about the way Node treats scope folders
 This
simply requires the `mypackage` module in the folder named `@myorg`


### Publishing scoped packages

Scoped packages can be published from the CLI as of `npm@2` and can be
published to any registry that supports them, including the primary npm
registry


#### Publishing public scoped packages to the primary npm registry

Publishing to a scope, you have two options:

- Publishing to your user scope (example: `@username/module`)
- Publishing to an organization scope (example: `@org/module`)

If publishing a public module to an organization scope, you must
first either create an organization with the name of the scope
that you'd like to publish to or be added to an existing organization
with the appropriate permissions
 For example, if you'd like to
publish to `@org`, you would  need to create the `org` organization
on npmjs


Scoped packages are not public by default


#### Publishing private scoped packages to the npm registry

To publish a private scoped package to the npm registry, you must have
an [npm Private Modules](https://docs
npmjs
com/private-modules/intro)
account
com website


### Associating a scope with a registry

Scopes can be associated with a separate registry
 This allows you to
seamlessly use a mix of packages from the primary npm registry and one or more
private registries, such as [GitHub Packages](https://github
com/features/packages) or the open source [Verdaccio](https://verdaccio


You can associate a scope with a registry at login, e
g


```bash
npm login --registry=http://reg


You can also associate a scope with a registry using `npm config`:

```bash
npm config set @myco:registry=http://reg


### See also

* [npm install](/commands/npm-install)
* [npm publish](/commands/npm-publish)
* [npm access](/commands/npm-access)
* [npm registry](/using-npm/registry)

---
title: scripts
section: 7
description: How npm handles the ""scripts"" field
---

### Description

The `""scripts""` property of your `package
 These all can be executed by running
`npm run-script <stage>` or `npm run <stage>` for short
 *Pre* and *post*
commands with matching names will be run for those as well (e
g
 `premyscript`,
`myscript`, `postmyscript`)
 Scripts from dependencies can be run with
`npm explore <pkg> -- npm run <stage>`


### Pre & Post Scripts

To create ""pre"" or ""post"" scripts for any scripts defined in the
`""scripts""` section of the `package


```json
{
  ""scripts"": {
    ""precompress"": ""{{ executes BEFORE the `compress` script }}"",
    ""compress"": ""{{ run command to compress files }}"",
    ""postcompress"": ""{{ executes AFTER `compress` script }}""
  }
}
```

In this example `npm run compress` would execute these scripts as
described


### Life Cycle Scripts

There are some special life cycle scripts that happen only in certain
situations
 These scripts happen in addition to the `pre<event>`, `post<event>`, and
`<event>` scripts
0
0`)
* Runs BEFORE the package is packed, i


* As of `npm@7` these scripts run in the background

  To see the output, run with: `--foreground-scripts`


**prepublishOnly**
* Runs BEFORE the package is prepared and packed, ONLY on `npm publish`
 ""`npm run pack`"" is an arbitrary user defined script name, where as, ""`npm pack`"" is a CLI defined command


**postpack**
* Runs AFTER the tarball has been generated but before it is moved to its final destination (if at all, publish does not save the tarball locally)

**dependencies**
* Runs AFTER any operations that modify the `node_modules` directory IF changes occurred

* Does NOT run in global mode

#### Prepare and Prepublish

**Deprecation Note: prepublish**

Since `npm@1
1
71`, the npm CLI has run the `prepublish` script for both `npm publish` and `npm install`, because it's a convenient way to prepare a package for use (some common use cases are described in the section below)
  It has also turned out to be, in practice, [very confusing](https://github
com/npm/npm/issues/10074)
 A _new_ event, `prepublishOnly` has been added as a transitional strategy to allow users to avoid the confusing behavior of existing npm versions and only run on `npm publish` (for instance, running the tests one last time to ensure they're in good shape)
com/npm/npm/issues/10074> for a much lengthier justification, with further reading, for this change


**Use Cases**

If you need to perform operations on your package before it is used, in a way that is not dependent on the operating system or architecture of the target system, use a `prepublish` script

* Creating minified versions of JavaScript source code

* Fetching remote resources that your package will use


The advantage of doing these things at `prepublish` time is that they can be done once, in a single place, thus reducing complexity and variability

* You don't need to rely on your users having `curl` or `wget` or
  other system tools on the target machines


#### Dependencies

The `dependencies` script is run any time an `npm` command causes changes to the `node_modules` directory
 It is run AFTER the changes have been applied and the `package
json` files have been updated


### Life Cycle Operation Order

#### [`npm cache add`](/commands/npm-cache)

* `prepare`

#### [`npm ci`](/commands/npm-ci)

* `preinstall`
* `install`
* `postinstall`
* `prepublish`
* `preprepare`
* `prepare`
* `postprepare`

 These all run after the actual installation of modules into
 `node_modules`, in order, with no internal actions happening in between

#### [`npm diff`](/commands/npm-diff)

* `prepare`

#### [`npm install`](/commands/npm-install)

These also run when you run `npm install -g <pkg-name>`

* `preinstall`
* `install`
* `postinstall`
* `prepublish`
* `preprepare`
* `prepare`
* `postprepare`

If there is a `binding
 with
linked packages)

#### [`npm restart`](/commands/npm-restart)

If there is a `restart` script defined, these events are run, otherwise
`stop` and `start` are both run if present, including their `pre` and
`post` iterations)

* `prerestart`
* `restart`
* `postrestart`

#### [`npm run <user defined>`](/commands/npm-run-script)

* `pre<user-defined>`
* `<user-defined>`
* `post<user-defined>`

#### [`npm start`](/commands/npm-start)

* `prestart`
* `start`
* `poststart`

If there is a `server
js` file in the root of your package, then npm
will default the `start` command to `node server
js`
  `prestart` and
`poststart` will still run in this case


#### [`npm stop`](/commands/npm-stop)

* `prestop`
* `stop`
* `poststop`

#### [`npm test`](/commands/npm-test)

* `pretest`
* `test`
* `posttest`

#### [`npm version`](/commands/npm-version)

* `preversion`
* `version`
* `postversion`

#### A Note on a lack of [`npm uninstall`](/commands/npm-uninstall) scripts

While npm v6 had `uninstall` lifecycle scripts, npm v7 does not
 Removal of a package can happen for a wide variety of reasons, and there's no clear way to currently give the script enough context to be useful


Reasons for a package removal include:

* a user directly uninstalled this package
* a user uninstalled a dependant package and so this dependency is being uninstalled
* a user uninstalled a dependant package but another package also depends on this version
* this version has been merged as a duplicate with another version
* etc


### User

When npm is run as root, scripts are always run with the effective uid
and gid of the working directory owner
  So, if your package
json has this:

```json
{
  ""name"" : ""foo"",
  ""dependencies"" : {
    ""bar"" : ""0
1
x""
  },
  ""scripts"": {
    ""start"" : ""bar 
/test""
  }
}
```

then you could run `npm start` to execute the `bar` script, which is
exported into the `node_modules/
bin` directory on `npm install`
json fields are tacked onto the `npm_package_` prefix
5""
env
env
npm_package_version`, and so on for other fields


See [`package


#### current lifecycle event

Lastly, the `npm_lifecycle_event` environment variable is set to
whichever stage of the cycle is being executed
json, then you'd
see this in the script:

```bash
process
npm_package_scripts_install === ""foo
js""
```

### Examples

For example, if your package
json contains this:

```json
{
  ""scripts"" : {
    ""install"" : ""scripts/install
js"",
    ""postinstall"" : ""scripts/install
js""
  }
}
```

then `scripts/install
js` will be called for the install and post-install
stages of the lifecycle
  Since `scripts/install
js` is running for two
different phases, it would be wise in this case to look at the
`npm_lifecycle_event` environment variable


If you want to run a make command, you can do so
  This works just
fine:

```json
{
  ""scripts"" : {
    ""preinstall"" : ""
/configure"",
    ""install"" : ""make && make install"",
    ""test"" : ""make test""
  }
}
```

### Exiting

Scripts are run by passing the line as a script argument to `sh`


If the script exits with a code other than 0, then this will abort the
process


Note that these script files don't have to be Node


### Best Practices

* Don't exit with a non-zero error code unless you *really* mean it

* Try not to use scripts to do what npm can do for you
  Read through
  [`package
json`](/configuring-npm/package-json) to see all the things that you can specify and enable
  by simply describing your package appropriately
  In general, this
  will lead to a more robust and consistent state
  The user
  probably set it up that way for a reason

* Don't prefix your script commands with ""sudo""
  If root permissions
  are required for some reason, then it'll fail with that error, and
  the user will sudo the npm command in question

* Don't use `install`
 Use a `
gyp` file for compilation, and `prepare`
  for anything else
 You should almost never have to explicitly set a
  preinstall or install script
 If you are doing this, please consider if
  there is another option

* Scripts are run from the root of the package folder, regardless of what the
  current working directory is when `npm` is invoked
 If you want your
  script to use different behavior based on what subdirectory you're in, you
  can use the `INIT_CWD` environment variable, which holds the full path you
  were in when you ran `npm run`


### Defining workspaces

Workspaces are usually defined via the `workspaces` property of the
[`package
json`](/configuring-npm/package-json#workspaces) file, e
g:

```json
{
  ""name"": ""my-workspaces-powered-project"",
  ""workspaces"": [
    ""packages/a""
  ]
}
```

Given the above `package
json` example living at a current working
directory `
` that contains a folder named `packages/a` that itself contains
a `package

+-- package
json
`-- packages
   +-- a
   |   `-- package
json
```

The expected result once running `npm install` in this current working
directory `
` is that the folder `packages/a` will get symlinked to the
`node_modules` folder of the current working dir


Below is a post `npm install` example, given that same previous example
structure of files and folders:

```


+-- node_modules
|  `-- a -> 

json
+-- package
json
`-- packages
   +-- a
   |   `-- package
json
```

### Getting started with workspaces

You may automate the required steps to define a new workspace using
[npm init](/commands/npm-init)
json` defined you can run:

```
npm init -w 
/packages/a
```

This command will create the missing folders and a new `package
json`
file (if needed) while also making sure to properly configure the
`""workspaces""` property of your root project `package


### Adding dependencies to a workspace

It's possible to directly add/remove/update dependencies of your workspaces
using the [`workspace` config](/using-npm/config#workspace)


For example, assuming the following structure:

```


+-- package
json
   `-- b
       `-- package
js handles module resolution](https://nodejs
html#modules_all_together) it's possible to consume any defined workspace
by its declared `package
/packages/a/index
exports = 'a'

// 
log(moduleA) // -> a
```

When running it with:

`node lib/index

Additionally, if your current directory is in a workspace, the `workspace`
configuration is implicitly set, and `prefix` is set to the root workspace


Following is a quick example on how to use the `npm run` command in the context
of nested workspaces

+-- package
json
`-- packages
   +-- a
   |   `-- package
 e
g:

```
npm run test --workspace=a
```

You could also run the command within the workspace


```
cd packages/a && npm run test
```

Either will run the `test` script defined within the
`
g:

```
npm run test --workspaces
```

Will run the `test` script in both `
/packages/a` and `
json`

```
{
  ""workspaces"": [ ""packages/a"", ""packages/b"" ]
}
```

Order of run is different with:

```
{
  ""workspaces"": [ ""packages/b"", ""packages/a"" ]
}
```

### Ignoring missing scripts

It is not required for all of the workspaces to implement scripts run with the `npm run` command


By running the command with the `--if-present` flag, npm will ignore workspaces missing target script


```
npm run test --workspaces --if-present
```

### See also

* [npm install](/commands/npm-install)
* [npm publish](/commands/npm-publish)
* [npm run-script](/commands/npm-run-script)
* [config](/using-npm/config)






























Copyright (c) 2015, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies
 IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE

















<!-- This file is automatically added by @npmcli/template-oss


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE
io/npm/v/@npmcli/arborist
svg)](https://npm
im/@npmcli/arborist)
[![license](https://img
io/npm/l/@npmcli/arborist
com/npm/cli/actions/workflows/ci-npmcli-arborist
yml)

Inspect and manage `node_modules` trees


![a tree with the word ARBORIST superimposed on it](https://raw
githubusercontent
svg?sanitize=true)

There's more documentation [in the docs
folder](https://github
com/npm/cli/tree/latest/workspaces/arborist/docs)


## USAGE

```js
const Arborist = require('@npmcli/arborist')

const arb = new Arborist({
  // options object

  // where we're doing stuff
  defaults to cwd

  path: '/path/to/package/root',

  // url to the default registry
org',

  // scopes can be mapped to a different registry
  '@foo:registry': 'https://registry
foo
com/',

  // Auth can be provided in a couple of different ways
  If none are
  // provided, then requests are anonymous, and private packages will 404

  // Arborist doesn't do anything with these, it just passes them down
  // the chain to pacote and npm-registry-fetch
 an npm auth token, used with the default registry
  token: 'deadbeefcafebad',
  // 2
 an alias for the same thing:
  _authToken: 'deadbeefcafebad',

  // insecure options:
  // 3
 basic auth, username:password, base64 encoded
  auth: 'aXNhYWNzOm5vdCBteSByZWFsIHBhc3N3b3Jk',
  // 4
 username and base64 encoded password
  username: 'isaacs',
  password: 'bm90IG15IHJlYWwgcGFzc3dvcmQ=',

  // auth configs can also be scoped to a given registry with this
  // rather unusual pattern:
  '//registry
foo
auth
only
foo
com:always-auth': true,
})

// READING

// returns a promise
loadActual()
then(tree => {
  // tree is also stored at arb
virtualTree
})

// read just what the package-lock
json/npm-shrinkwrap says
// This *also* loads the yarn
lock file, but that's only relevant
// when building the ideal tree
then(tree => {
  // tree is also stored at arb
virtualTree is loaded
  // this fails if there's no package-lock
json or package
json in the folder
  // note that loading this way should only be done if there's no
  // node_modules folder
})

// OPTIMIZING AND DESIGNING

// build an ideal tree from the package
json and various lockfiles

arb

  // options can be:
  // rm: array of package names to remove at top level
  // add: Array of package specifiers to add at the top level
  Each of
  //   these will be resolved with pacote

  //   - null (default) Wherever they exist already, or 'dependencies'
  //   - prod: definitely in 'dependencies'
  //   - optional: in 'optionalDependencies'
  //   - dev: devDependencies
  //   - peer: save in peerDependencies, and remove any optional flag from
  //     peerDependenciesMeta if one exists
  //   - peerOptional: save in peerDependencies, and add a
  //     peerDepsMeta[name]
  set to true to just update everything
  //   - names: names of packages update (like `npm update foo`)
  // prune: boolean, default true
  Defaults to false, ie,
  //   always try to get the latest and greatest deps

  // legacyBundling: Nest every dep under the node requiring it, npm v2 style

  //   No unnecessary deduplication


  // At the end of this process, arb
reify({
  // write the lockfile(s) back to disk, and package
json with any updates
  // defaults to 'true'
  save: true,
})
parent` reference to the containing
folder, and `node


A `Link` represents a symbolic link to a package on disk
  Links differ
from Nodes in that dependencies are resolved from the _target_ location,
rather than from the link location
  Each node has an `edgesIn`
set, and an `edgesOut` map
  Each edge has a `type` which specifies what
kind of dependency it represents: `'prod'` for regular dependencies,
`'peer'` for peerDependencies, `'dev'` for devDependencies, and
`'optional'` for optionalDependencies
  `edge


As nodes are moved around in the tree, the graph edges are automatically
updated to point at the new module resolution targets
  In other words,
`edge
from`, `edge
to` is
updated automatically when a node's parent changes


### class Node

All arborist trees are `Node` objects
  A `Node` refers
to a package folder, which may have children in `node_modules`
parent` Physical parent node in the tree
  The package in whose
  `node_modules` folder this package lives
location` and all
    graph edges affected by the move


* `node
meta` A `Shrinkwrap` object which looks up `resolved` and
  `integrity` values for all modules in this tree
  Only relevant on `root`
  nodes


* `node
children` Map of packages located in the node's `node_modules`
  folder

* `node
package` The contents of this node's `package

* `node
  If the node is a link, then this
  is the path to the link, not to the link target
realpath`

* `node
realpath` The full real filepath on disk where this node lives

* `node
location` A slash-normalized relative path from the root node to
  this node's path
isLink` Whether this represents a symlink
  Always `false` for Node
  objects, always `true` for Link objects

* `node
isRoot` True if this node is a root node
  (Ie, if `node
  If not assigned to some
  other value, resolves to the node itself
  (Ie, the root node's `root`
  property refers to itself
)
* `node
isTop` True if this node is the top of its tree (ie, has no
  `parent`, false otherwise)

* `node
  This will be equal to
  `node
root` for simple trees, but link targets will frequently be outside
  of (or nested somewhere within) a `node_modules` hierarchy, and so will
  have a different `top`
dev`, `node
devOptional`, `node
peer`, Indicators
  as to whether this node is a dev, optional, and/or peer dependency

* `node
edgesIn` Edges in the dependency graph indicating nodes that depend
  on this node


* `extraneous` True if this package is not required by any other for any
  reason
  False for top of tree
errors` Array of errors encountered while parsing package

They have most of the same properties and methods as `Node` objects, with a
few differences


* `link
target` A Node object representing the package that the link
  references
  If this is a Node already present within the tree, then it
  will be the same object
  If it's outside of the tree, then it will be
  treated as the top of its own tree
isLink` Always true

* `link


* `new Edge({ from, type, name, spec })`  Creates a new edge with the
  specified fields
  After instantiation, none of the fields can be
  changed directly

* `edge
  One of `'prod'`, `'dev'`, `'peer'`,
  or `'optional'`

* `edge
name` The name of the dependency
  Ie, the key in the
  relevant `package
json` dependencies object
spec` The specifier that is required
  This can be a version,
  range, tag name, git url, or tarball URL
  Any specifier allowed by npm
  is supported
to` Automatically set to the node in the tree that matches the
  `name` field

* `edge
valid` True if `edge
to` satisfies the specifier

* `edge
  Values, in order of precedence:
    * `DETACHED` Indicates that the edge has been detached from its
      `edge

    * `MISSING` Indicates that the dependency is unmet
  This violates the `peerDependency` contract, because it
      means that the dependency is not a peer

    * `INVALID` Indicates that the dependency does not satisfy `edge
spec`

* `edge
to`

  Called automatically from the `Node` class when the tree is mutated


```
| extraneous | peer | dev | optional | devOptional | meaning             | prune?            |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |      |     |          |             | production dep      | never             |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|     X      | N/A  | N/A |   N/A    |     N/A     | nothing depends on  | always            |
|            |      |     |          |             | this, it is trash   |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |      |  X  |          |      X      | devDependency, or   | if pruning dev    |
|            |      |     |          | not in lock | only depended upon  |                   |
|            |      |     |          |             | by devDependencies  |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |      |     |    X     |      X      | optionalDependency, | if pruning        |
|            |      |     |          | not in lock | or only depended on | optional          |
|            |      |     |          |             | by optionalDeps     |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |      |  X  |    X     |      X      | Optional dependency | if pruning EITHER |
|            |      |     |          | not in lock | of dep(s) in the    | dev OR optional   |
|            |      |     |          |             | dev hierarchy       |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |      |     |          |      X      | BOTH a non-optional | if pruning BOTH   |
|            |      |     |          |   in lock   | dep within the dev  | dev AND optional  |
|            |      |     |          |             | hierarchy, AND a    |                   |
|            |      |     |          |             | dep within the      |                   |
|            |      |     |          |             | optional hierarchy  |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |  X   |     |          |             | peer dependency, or | if pruning peers  |
|            |      |     |          |             | only depended on by |                   |
|            |      |     |          |             | peer dependencies   |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |  X   |  X  |          |      X      | peer dependency of  | if pruning peer   |
|            |      |     |          | not in lock | dev node hierarchy  | OR dev deps       |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |  X   |     |    X     |      X      | peer dependency of  | if pruning peer   |
|            |      |     |          | not in lock | optional nodes, or  | OR optional deps  |
|            |      |     |          |             | peerOptional dep    |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |  X   |  X  |    X     |      X      | peer optional deps  | if pruning peer   |
|            |      |     |          | not in lock | of the dev dep      | OR optional OR    |
|            |      |     |          |             | hierarchy           | dev               |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |  X   |     |          |      X      | BOTH a non-optional | if pruning peers  |
|            |      |     |          |   in lock   | peer dep within the | OR:               |
|            |      |     |          |             | dev hierarchy, AND  | BOTH optional     |
|            |      |     |          |             | a peer optional dep | AND dev deps      |
+------------+------+-----+----------+-------------+---------------------+-------------------+
```

* If none of these flags are set, then the node is required by the
  dependency and/or peerDependency hierarchy
  It should not be pruned
optional` are set, then the node is an
  optional dependency of one of the packages in the devDependency
  hierarchy
  It should be pruned if _either_ dev or optional deps are
  being removed

* If `node
optional` is not, then the node is
  required in the devDependency hierarchy
  It should be pruned if dev
  dependencies are being removed

* If `node
dev` is not, then the node is
  required in the optionalDependency hierarchy
  It should be pruned if
  optional dependencies are being removed

* If `node
  It should be pruned if
  _both_ dev and optional dependencies are being removed

* If `node
peer` is set, then all the same semantics apply as above, except
  that the dep is brought in by a peer dep at some point, rather than a
  normal non-peer dependency


Note: `devOptional` is only set in the shrinkwrap/package-lock file if
_neither_ `dev` nor `optional` are set, as it would be redundant


## BIN

Arborist ships with a cli that can be used to run arborist specific commands outside of the context of the npm CLI
 This script is currently not part of the public API and is subject to breaking changes outside of major version bumps


To see the usage run:

```
npx @npmcli/arborist --help
```




# `@npmcli/config`

Configuration management for the npm cli


The only exceptions:

- The `prefix` config value has some special semantics, setting the local
  prefix if specified on the CLI options and not in global mode, or the
  global prefix otherwise
npmrc`, is used to load user configs

- The `globalconfig` value, as set by the environment, CLI, and
  `userconfig` file (defaulting to `$PREFIX/etc/npmrc`) is used to load
  global configs


The resulting hierarchy of configs:

- CLI switches

- Environment variables
  eg `npm_config_some_key=some_value` in the
  environment
  There is no way at this time to modify this prefix

- INI-formatted project configs
json` file
  eg `some-key = some-value` in `~/

- INI-formatted globalconfig file

- INI-formatted builtin config file
  eg `some-key = some-value` in
  `/usr/local/lib/node_modules/npm/npmrc`
  This is not configurable, and
  is determined by looking in the `npmPath` folder


## USAGE

```js
const Config = require('@npmcli/config')
const { shorthands, definitions, flatten } = require('@npmcli/config/lib/definitions')

const conf = new Config({
  // path to the npm module being run
  npmPath: resolve(__dirname, '

'),
  definitions,
  shorthands,
  flatten,
  // optional, defaults to process
env
  env: process
env,
  // optional, defaults to process
platform,
  // optional, defaults to process
cwd(),
})

// emits log events on the process object
// see `proc-log` for more info
process


log(level, 


validate()
  console
log('loaded ok! some-key = ' + conf
get('some-key'))
})
error('error loading configs!', er)
})
```

## API

The `Config` class is the sole export


```js
const Config = require('@npmcli/config')
```

### static `Config
typeDefs`

The type definitions passed to `nopt` for CLI option parsing and known
configuration validation


### constructor `new Config(options)`

Options:

- `types` Types of all known config values

- `shorthands` An object mapping a shorthand value to an array of CLI
  arguments that replace it

- `defaults` Default values for each of the known configuration keys

- `npmPath` The path to the `npm` module, for loading the `builtin` config
  file

- `cwd` Optional, defaults to `process
cwd()`, used for inferring the
  `localPrefix` and loading the `project` config

- `platform` Optional, defaults to `process
platform`
  Used when inferring
  the `globalPrefix` from the `execPath`, since this is done diferently on
  Windows
execPath`
env`
  Source of the environment
  variables for configuration
argv`


Returns a `config` object, which is not yet loaded
globalPrefix` The prefix for `global` operations

- `config
localPrefix` The prefix for `local` operations
json`
  file

- `config
sources` A read-only `Map` of the file (or a comment, if no file
  found, or relevant) to the config level loaded from that source
data` A `Map` of config level to `ConfigData` objects
  These
  objects should not be modified directly under any circumstances

  - `source` The source where this data was loaded from

  - `data` The data object reflecting the inheritance of configs up to this
    point in the chain

  - `loadError` Any errors encountered that prevented the loading of this
    config data
list` A list sorted in priority of all the config data objects in
  the prototype chain
  `config
list[1]` is the `env` level, and so on

- `cwd` The `cwd` param
- `env` The `env` param
- `argv` The `argv` param
- `execPath` The `execPath` param
- `platform` The `platform` param
- `defaults` The `defaults` param
- `shorthands` The `shorthands` param
- `types` The `types` param
- `npmPath` The `npmPath` param
- `globalPrefix` The effective `globalPrefix`
- `localPrefix` The effective `localPrefix`
- `prefix` If `config
homedir()`

  Any data objects that have been modified with `config
set(


valid` is read
load()`

Load configuration from the various sources of information


Returns a `Promise` that resolves when configuration is loaded, and fails
if a fatal error is encountered

Returns one of: `cli`, `env`, `project`, `user`, `global`, `builtin`, or
`default`


Returns `null` if the key is not set


### `config
get(key, where = 'cli')`

Load the given key from the config stack


### `config
set(key, value, where = 'cli')`

Set the key to the specified value, at the specified level in the config
stack
validate(where)`

Verify that all known configuration options are set to valid values, and
log a warning if they are invalid


Invalid auth options will cause this method to throw an error with a `code`
property of `ERR_INVALID_AUTH`, and a `problems` property listing the specific
concerns with the current configuration


If `where` is not set, then all config objects are validated


Note that it's usually enough (and more efficient) to just check
`config
set()` operation
repair(problems)`

Accept an optional array of problems (as thrown by `config
validate()` internally to retrieve them


Note that you must `await config
save('user')` in order to persist the changes
isDefault(key)`

Returns `true` if the value is coming directly from the
default definitions, if the current value for the key config is
coming from any other source, returns `false`
get('foo')
>  ```
>
>  Now in a different place of your app it's possible to avoid using the `foo`
>  default value, by checking to see if the current config value is currently
>  one that was defined by the default definitions:
>
>  ```js
>     const save = config
get('foo')
>  ```

### `config
save(where)`

Save the config file specified by the `where` param
  Must be one of
`project`, `user`, `global`, `builtin`










<!-- This file is automatically added by @npmcli/template-oss


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE






# @npmcli/installed-package-contents

Get the list of files installed in a package in node_modules, including
bundled dependencies


This is useful if you want to remove a package node from the tree _without_
removing its child nodes, for example to extract a new version of the
dependency into place safely


It's sort of the reflection of [npm-packlist](http://npm
im/npm-packlist),
but for listing out the _installed_ files rather than the files that _will_
be installed
  This is of course a much simpler operation, because we don't
have to handle ignore files or package


## USAGE

```js
// programmatic usage
const pkgContents = require('@npmcli/installed-package-contents')

pkgContents({ path: 'node_modules/foo', depth: 1 })

})

pkgContents({ path: 'node_modules/foo', depth: Infinity })
then(files => {
  // setting depth:Infinity tells it to keep walking forever
  // until it hits something that isn't a directory, so we'll
  // just get the list of all files, but not their containing
  // directories

})
```

As a CLI:

```bash
$ installed-package-contents node_modules/bundle-some -d1
node_modules/


Options:
  -d<n> --depth=<n>   Provide a numeric value (""Infinity"" is allowed)
                      to specify how deep in the file tree to traverse

                      Default=1
  -h --help           Show this usage information
```

## OPTIONS

* `depth` Number, default `1`
  How deep to traverse through folders to get
    contents


## RETURN VALUE

A Promise that resolves to an array of fully-resolved files and folders
matching the criteria
  Empty
directories _within_ package contents are listed, even if the `depth`
argument would cause them to be traversed into


## CAVEAT

If using this module to generate a list of files that should be recursively
removed to clear away the package, note that this will leave empty
directories behind in certain cases:

- If all child packages are bundled dependencies, then the
    `node_modules` folder will remain

- If all child packages within a given scope were bundled dependencies,
    then the `node_modules/@scope` folder will remain
bin`
    folder will remain
bin` in that case rather than the contents
  However, if the intent is to
pass these arguments to `rimraf`, it hardly makes sense to do _two_
`readdir` calls just so that we can have the luxury of having to make a
third
  Empty directories are already ignored by both npm and git




<!-- This file is automatically added by @npmcli/template-oss
 -->

ISC License

Copyright npm, Inc


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE













































































ISC License

Copyright npm, Inc


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies



(MIT)

Copyright (c) 2013 Julian Gruber &lt;julian@juliangruber
com&gt;

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the ""Software""), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE











ISC License

Copyright (c) npm, Inc
 IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE




















# color-support

A module which will endeavor to guess your terminal's level of color
support
org/isaacs/color-support
svg?branch=master)](https://travis-ci
org/isaacs/color-support) [![Coverage Status](https://coveralls
io/repos/github/isaacs/color-support/badge
io/github/isaacs/color-support?branch=master)

This is similar to `supports-color`, but it does not read
`process


2


3
 If the `TERM` environ is `dumb`, not supported, unless the
   `ignoreDumb` option is set


4
 If on Windows, then support 16 colors


5
 If using Tmux, then support 256 colors
 Handle continuous-integration servers
  If `CI` or
   `TEAMCITY_VERSION` are set in the environment, and `TRAVIS` is not
   set, then color is not supported, unless `ignoreCI` option is set
x supports 16m colors, below support 256
    - `MacTerm` supports 16m colors
    - `Apple_Terminal` supports 256 colors
    - Have more things that belong on this list?  Send a PR!

8
  Any
   `xterm-256color` will get 256 colors


9
 If `COLORTERM` environment variable is set, then support 16 colors


10
 At this point, we assume that color is not supported


## USAGE

```javascript
var testColorSupport = require('color-support')
var colorSupport = testColorSupport(/* options object */)

if (!colorSupport) {
  console
log('color is not supported')
} else if (colorSupport
log('\x1b[38;2;102;194;255m16m colors\x1b[0m')
} else if (colorSupport
has256) {
  console
log('\x1b[38;5;119m256 colors\x1b[0m')
} else if (colorSupport
hasBasic) {
  console
log('\x1b[31mbasic colors\x1b[0m')
} else {
  console
log('this is impossible, but colors are not supported')
}
```

If you don't have any options to set, you can also just look at the
flags which will all be set on the test function itself
  (Of course,
this doesn't return a falsey value when colors aren't supported, and
doesn't allow you to set options
has16m) {
  console
log('\x1b[38;2;102;194;255m16m colors\x1b[0m')
} else if (colorSupport
has256) {
  console
log('\x1b[38;5;119m256 colors\x1b[0m')
} else if (colorSupport
hasBasic) {
  console
log('colors are not supported')
}
```

## Options

You can pass in the following options


* ignoreTTY - default false

* env - Object for environment vars
env`

* stream - Stream for `isTTY` check
 Defaults to `process
stdout`

* term - String for `TERM` checking
 Defaults to `env
TERM`

* alwaysReturn - default false
  Return an object when colors aren't
  supported (instead of returning `false`)
  This will return a result for the
  specified level
  This is useful if you want to be able to set the
  color support level explicitly as a number in an environment
  variable or config, but then use the object flags in your program


## Return Value

If no color support is available, then `false` is returned by default,
unless the `alwaysReturn` flag is set to `true`
  This is so that the
simple question of ""can I use colors or not"" can treat any truthy
return as ""yes""


Otherwise, the return object has the following fields:

* `level` - A number from 0 to 3
    * `0` - No color support
    * `1` - Basic (16) color support
    * `2` - 256 color support
    * `3` - 16 million (true) color support
* `hasBasic` - Boolean
* `has256` - Boolean
* `has16m` - Boolean

## CLI

You can run the `color-support` bin from the command line which will
just dump the values as this module calculates them in whatever env
it's run
im/supports-color) by the ever prolific
[Sindre Sorhus](http://npm









# which

Like the unix `which` utility


Finds the first instance of a specified executable in the PATH
environment variable


## USAGE

```javascript
var which = require('which')

// async usage
which('node', function (er, resolvedPath) {
  // er is returned if no ""node"" is found on the PATH
  // if it is found, then the absolute path to the exec is returned
})

// or promise
which('node')
then(resolvedPath => { 

 })



sync('node', {nothrow: true})

// Pass options to override the PATH and PATHEXT environment vars

which('node', { path: someOtherPath }, function (er, resolved) {
  if (er)
    throw er
  console
log('found at %j', resolved)
})
```

## CLI USAGE

Same as the BSD `which(1)` binary


```
usage: which [-as] program 




- `path`: Use instead of the `PATH` environment variable

- `pathExt`: Use instead of the `PATHEXT` environment variable
  Note that
  this means the function returns an array of strings instead of a
  single string







# cssesc [![Build status](https://travis-ci
svg?branch=master)](https://travis-ci
org/mathiasbynens/cssesc) [![Code coverage status](https://img
shields
svg)](https://codecov
io/gh/mathiasbynens/cssesc)

A JavaScript library for escaping CSS strings and identifiers while generating the shortest possible ASCII-only output


This is a JavaScript library for [escaping text for use in CSS strings or identifiers](https://mathiasbynens
be/notes/css-escapes) while generating the shortest possible valid ASCII-only output
 [Here’s an online demo
](https://mothereff
in/css-escapes)

[A polyfill for the CSSOM `CSS
](https://mths
)

Feel free to fork if you see possible improvements!

## Installation

Via [npm](https://www
npmjs
com/):

```bash
npm install cssesc
```

In a browser:

```html
<script src=""cssesc
js""></script>
```

In [Node
org/):

```js
const cssesc = require('cssesc');
```

In Ruby using [the `ruby-cssesc` wrapper gem](https://github
escape('I ♥ Ruby', is_identifier: true)
```

In Sass using [`sassy-escape`](https://github
com/borodean/sassy-escape):

```bash
gem install sassy-escape
```

```scss
body {
  content: escape('I ♥ Sass', $is-identifier: true);
}
```

## API

### `cssesc(value, options)`

This function takes a value and returns an escaped version of the value where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in CSS strings or identifiers](https://mathiasbynens


```js
cssesc('Ich ♥ Bücher');
// → 'Ich \\2665  B\\FC cher'

cssesc('foo 𝌆 bar');
// → 'foo \\1D306  bar'
```

By default, `cssesc` returns a string that can be used as part of a CSS string
 If the target is a CSS identifier rather than a CSS string, use the `isIdentifier: true` setting (see below)


The optional `options` argument accepts an object with the following options:

#### `isIdentifier`

The default value for the `isIdentifier` option is `false`
 This means that the input text will be escaped for use in a CSS string literal


```js
cssesc('123a2b');
// → '123a2b'

cssesc('123a2b', {
  'isIdentifier': true
});
// → '\\31 23a2b'
```

#### `quotes`

The default value for the `quotes` option is `'single'`


```js
cssesc('Lorem ipsum ""dolor"" sit \'amet\' etc
');
// → 'Lorem ipsum ""dolor"" sit \\\'amet\\\' etc
'
// → ""Lorem ipsum \""dolor\"" sit \\'amet\\' etc
""

cssesc('Lorem ipsum ""dolor"" sit \'amet\' etc
'
// → ""Lorem ipsum \""dolor\"" sit \\'amet\\' etc
""
```

If you want to use the output as part of a CSS string literal wrapped in double quotes, set the `quotes` option to `'double'`
', {
  'quotes': 'double'
});
// → 'Lorem ipsum \\""dolor\\"" sit \'amet\' etc
'
// → ""Lorem ipsum \\\""dolor\\\"" sit 'amet' etc
""
```

#### `wrap`

The `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled)
 When enabled, the output will be a valid CSS string literal wrapped in quotes
 The type of quotes can be specified through the `quotes` setting
\''
// → ""\'Lorem ipsum \""dolor\"" sit \\\'amet\\\' etc
', {
  'quotes': 'double',
  'wrap': true
});
// → '""Lorem ipsum \\""dolor\\"" sit \'amet\' etc
 When enabled, all the symbols in the output will be escaped, even printable ASCII symbols
options` object
 This saves you from passing in an `options` object for every call to `encode` if you want to use the non-default setting
options
escapeEverything;
// → `false` by default

// Override the global default setting for `escapeEverything`:
cssesc
version`

A string representing the semantic version number


### Using the `cssesc` binary

To use the `cssesc` binary in your shell, simply install cssesc globally using npm:

```bash
npm install -g cssesc
```

After that you will be able to escape text for use in CSS strings or identifiers from the command line:

```bash
$ cssesc 'föo ♥ bår 𝌆 baz'
f\F6o \2665  b\E5r \1D306  baz
```

If the output needs to be a CSS identifier rather than part of a string literal, use the `-i`/`--identifier` option:

```bash
$ cssesc --identifier 'föo ♥ bår 𝌆 baz'
f\F6o\ \2665\ b\E5r\ \1D306\ baz
```

See `cssesc --help` for the full list of options


## Support

This library supports the Node
babelrc`](https://github
com/mathiasbynens/cssesc/blob/master/
 For a version that supports a wider variety of legacy browsers and environments out-of-the-box, [see v0
1
0](https://github
com/mathiasbynens/cssesc/releases/tag/v0
1
com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter
com/mathias ""Follow @mathias on Twitter"") |
|---|
| [Mathias Bynens](https://mathiasbynens
be/) |

## License

This library is available under the [MIT](https://mths



The MIT License (MIT)

Copyright (c) 2016 Zeit, Inc
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
 Do not edit
 -->

ISC License

Copyright npm, Inc


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
)

![a fun cartoon logo made of glob characters](https://github
com/isaacs/node-glob/raw/main/logo/glob
png)

## Usage

Install with npm

```
npm i glob
```

**Note** the npm package name is _not_ `node-glob` that's a
different thing that was abandoned years ago
 Just `glob`
js', { ignore: 'node_modules/**' })

// pass in a signal to cancel the glob walk
const stopAfter100ms = await glob('**/*
{png,jpeg}', 'public/*
{png,jpeg}'])

// but of course you can do that with the glob pattern also
// the sync function is the same, just returns a string[] instead
// of Promise<string[]>
const imagesAlt = globSync('{css,public}/*
{png,jpeg}')

// you can also stream them, this is a Minipass stream
const filesStream = globStream(['**/*
iterate(), same deal
for await (const file of g) {
  console
log('found a bar file:', file)
}

// you can also pass withFileTypes: true to get Path objects
// these are like a Dirent, but with some more added powers
// check out http://npm
stream()
on('data', path => {
  console
fullpath(),
    path
readdirSync()
map(e => e

// All Stats fields will be available in that case

// For example:
const results = await glob('**', { stat: true, withFileTypes: true })

const timeSortedFiles = results
  
fullpath())

const groupReadableFiles = results
  
mode & 0o040)
  
map(path => path
fullpath())

// custom ignores can be done like this, for example by saying
// you'll ignore all markdown files, and all folders named 'docs'
const customIgnoreResults = await glob('**', {
  ignore: {
    ignored: p => /\
md$/
test(p
name),
    childrenIgnored: p => p
ts` or `
js`
const folderNamedModules = await glob('**/*
{ts,js}', {
  ignore: {
    ignored: p => {
      const pp = p
parent
      return !(p
name + '
ts') || p
isNamed(pp
mtime > 60 * 60 * 1000
    },
    // could add similar childrenIgnored here as well, but
    // directory mtime is inconsistent across platforms, so
    // probably better not to, unless you know the system
    // tracks this reliably
 If you wish to use `\` as a path separator _instead
of_ using it as an escape character on Windows platforms, you may
set `windowsPathsNoEscape:true` in the options
 In this mode,
special glob characters cannot be escaped, making it impossible
to match a literal `*` `?` and so on in filenames


## Command Line Interface

```
$ glob -h

Usage:
  glob [options] [<pattern> [<pattern> 


]]

Expand the positional glob expression arguments into any matching file system
paths found


  -c<command> --cmd=<command>
                         Run the command provided, passing the glob expression
                         matches as arguments


                         For example, if 'app/*
ts',
                         then on Windows powershell or cmd
exe, 'glob app/*
ts' to a list of filenames
 Then glob
                         will look for a file matching 'app/[id]
ts' (ie,
                         'app/i


                         Setting '--all' prevents this behavior, causing glob to
                         treat ALL patterns as glob expressions to be expanded,
                         even if they are an exact match to a file on disk


                         When setting this option, be sure to enquote arguments
                         so that the shell will not expand them prior to passing
                         them to the glob command process
 Drive letter
                         absolute matches on Windows will be expanded to their
                         full resolved UNC maths, eg instead of 'C:\foo\bar', it
                         will expand to '//?/C:/foo/bar'


  -f --follow            Follow symlinked directories when expanding '**'
  -R --realpath          Call 'fs
 This incurs a slight performance penalty, of
                         course, because of the added system calls
lstat' on all entries, whether required or not
                         to determine if it's a valid match


  -b --match-base        Perform a basename-only match if the pattern does not
                         contain any slash characters
 That is, '*
js', matching js files
                         in all directories


  --dot                  Allow patterns to match files/directories that start
                         with '
', even if the pattern does not start with '
'

  --nobrace              Do not expand {


} patterns
  --nocase               Perform a case-insensitive match


  --noext                Do not expand extglob patterns, such as '+(a|b)'
  --noglobstar           Do not expand '**' against multiple path portions
 Ie,
                         treat it as a normal '*' instead


  --windows-path-no-escape
                         Use '\' as a path separator *only*, and *never* as an
                         escape character
 A pattern
                         containing '



                         To start absolute and non-absolute patterns in the same
                         path, you can use '--root=' to set it to the empty
                         string
 However, be aware that on Windows systems, a
                         pattern like 'x:/*' or '//host/share/*' will *always*
                         start in the 'x:/' or '//host/share/' directory,
                         regardless of the --root setting


  --platform=<platform>  Defaults to the value of 'process
platform' if
                         available, or 'linux' if not
 Setting --platform=win32
                         on non-Windows systems may cause strange behavior!

  -i<ignore> --ignore=<ignore>
                         Glob patterns to ignore Can be set multiple times
  -v --debug             Output a huge amount of noisy debug information about
                         patterns as they are parsed and used to match files
 See below
for full options field desciptions


## `globSync(pattern: string | string[], options?: GlobOptions) => string[] | Path[]`

Synchronous form of `glob()`


Alias: `glob
iterate
sync()`, `glob
sync
iterate()`

## `globStream(pattern: string | string[], options?: GlobOptions) => Minipass<string | Path>`

Return a stream that emits all the strings or `Path` objects and
then emits `end` when completed


Alias: `glob
 Will read all the matches as
fast as you consume them, even all in a single tick if you
consume them immediately, but will still respond to backpressure
if they're not consumed immediately


Alias: `glob
stream
sync()`, `glob
stream()`

## `hasMagic(pattern: string | string[], options?: GlobOptions) => boolean`

Returns `true` if the provided pattern contains any ""magic"" glob
characters, given the options provided


Brace expansion is not considered ""magic"" unless the
`magicalBraces` option is set, as brace expansion just turns one
string into an array of strings
 When
`magicalBraces:true` is in the options, brace expansion _is_
treated as a pattern having magic


## `escape(pattern: string, options?: GlobOptions) => string`

Escape all magic characters in a glob pattern, so that it will
only ever match literal strings

If the `windowsPathsNoEscape` option is used, then characters are
escaped by wrapping in `[]`, because a magic character wrapped in
a character class can only be satisfied by that exact character


Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot
be escaped or unescaped


## `unescape(pattern: string, options?: GlobOptions) => string`

Un-escape a glob string that may contain some escaped characters


If the `windowsPathsNoEscape` option is used, then square-brace
escapes are removed, but not backslash escapes
 For example, it
will turn the string `'[*]'` into `*`, but it will not turn
`'\\*'` into `'*'`, because `\` is a path separator in
`windowsPathsNoEscape` mode


Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot
be escaped or unescaped


See full options descriptions below


Note that a previous `Glob` object can be passed as the
`GlobOptions` to another `Glob` instantiation to re-use settings
and caches with a new pattern


### `g
stream()`

Stream results asynchronously,

### `g
streamSync()`

Stream results synchronously


### `g
iterate()`

Default async iteration function
 Returns an AsyncGenerator that
iterates over the results
iterateSync()`

Default sync iteration function
 Returns a Generator that
iterates over the results


### `g


### `g
walkSync()`

Returns a results array


- `opts` The options provided to the constructor


## Options

Exported as `GlobOptions` TypeScript interface
 A `GlobOptions`
object may be provided to any of the exported methods, and must
be provided to the `Glob` constructor


All resolved options are added to the Glob object as properties


- `cwd` String path or `file://` string or URL object
 The
  current working directory in which to search
 Defaults to
  `process
cwd()`
 See also: ""Windows, CWDs, Drive Letters, and
  UNC Paths"", below


  This option may be either a string path or a `file://` URL
  object or string


- `root` A string path resolved against the `cwd` option, which
  is used as the starting point for absolute patterns that start
  with `/`, (but not drive letters or UNC paths on Windows)
 A pattern containing `
` will still be
  able to traverse out of the root directory, if it is not an
  actual root directory on the filesystem, and any non-absolute
  patterns will be matched in the `cwd`
 For example, the
  pattern `/

/*` with `{root:'/some/path'}` will return all
  files in `/some`, not all files in `/some/path`
 The pattern
  `*` with `{root:'/some/path'}` will return all the entries in
  the cwd, not the entries in `/some/path`
 However, be aware that on
  Windows systems, a pattern like `x:/*` or `//host/share/*` will
  _always_ start in the `x:/` or `//host/share` directory,
  regardless of the `root` setting


- `windowsPathsNoEscape` Use `\\` as a path separator _only_, and
  _never_ as an escape character
 If set, all `\\` characters are
  replaced with `/` in the pattern


  Note that this makes it **impossible** to match against paths
  containing literal glob pattern characters, but allows matching
  with patterns constructed using `path
join()` and
  `path
 Please use with
  caution, and be mindful of [the caveat below about Windows
  paths](#windows)
)

- `dot` Include `
dot` files in normal matches and `globstar`
  matches


- `magicalBraces` Treat brace expansion like `{a,b}` as a ""magic""
  pattern
 Has no effect if {@link nobrace} is set


  Only has effect on the {@link hasMagic} function, no effect on
  glob pattern matching itself
/` (or
  `
\` on Windows)


  Without this option, returned relative paths are ""bare"", so
  instead of returning `'
/foo/bar'`, they are returned as
  `'foo/bar'`


  Relative patterns starting with `'
/`, even if this option is set


- `mark` Add a `/` character to directory matches


- `nobrace` Do not expand `{a,b}` and `{1

 (Ie,
  treat it as a normal `*` instead
)

- `noext` Do not match ""extglob"" patterns such as `+(a|b)`
 This defaults to
  `true` on macOS and Windows systems, and `false` on all others


  **Note** `nocase` should only be explicitly set when it is
  known that the filesystem's case sensitivity differs from the
  platform default
 If set `true` on case-sensitive file
  systems, or `false` on case-insensitive file systems, then the
  walk may return more or less results than expected


- `matchBase` Perform a basename-only match if the pattern does
  not contain any slash characters
 That is, `*
js`, matching all js files in
  all directories


- `nodir` Do not match directories, only files
 (Note: to match
  _only_ directories, put a `/` at the end of the pattern


- `stat` Call `lstat()` on all entries, whether required or not
  to determine whether it's a valid match
 When used with
  `withFileTypes`, this means that matches will include data such
  as modified time, permissions, and so on
 Note that this will
  incur a performance cost due to the added system calls


- `ignore` string or string[], or an object with `ignore` and
  `ignoreChildren` methods

  To ignore all children within a directory, as well as the entry
  itself, append `'/**'` to the ignore pattern


  **Note** `ignore` patterns are _always_ in `dot:true` mode,
  regardless of any other settings


  By default, a `**` in a pattern will follow 1 symbolic link if
  it is not the first item in the pattern, or none if it is the
  first item in the pattern, following the same behavior as Bash


- `realpath` Set to true to call `fs
 In the case of an entry that cannot be resolved, the
  entry is omitted
 This incurs a slight performance penalty, of
  course, because of the added system calls
 Set to `false` to always receive relative paths
  for matched files


  This does _not_ make an extra system call to get the realpath,
  it only does string path resolution


  `absolute` may not be used along with `withFileTypes`


- `posix` Set to true to use `/` as the path separator in
  returned results
 On posix systems, this has no effect


- `platform` Defaults to value of `process
platform` if
  available, or `'linux'` if not


- `withFileTypes` Return [PathScurry](http://npm
 These are similar to a
  NodeJS `Dirent` object, but with additional methods and
  properties


  `withFileTypes` may not be used along with `absolute`


- `signal` An AbortSignal which will cancel the Glob walk when
  triggered


- `fs` An override object to pass in custom filesystem methods


## Glob Primer

Much more information about glob pattern expansion can be found
by running `man bash` and searching for `Pattern Matching`
gitignore`
file
 Braced sections start with `{` and end with
`}`, with 2 or more comma-delimited sections within
 Braced
sections may contain slash characters, so `a{/b/c,bcd}` would
expand into `a/b/c` and `abcd`
 With the exception of `**`, none of these match
path separators (ie, `/` on all platforms, and `\` on Windows)
` character at the start of a path portion

- `?` Matches 1 character
 If `dot:true` is not specified, then
  `?` will not match against a `
` character at the start of a
  path portion

- `[


- `!(pattern|pattern|pattern)` Matches anything that does not
  match any of the patterns provided
 May _not_ contain `/`
  characters
 Similar to `*`, if alone in a path portion, then
  the path portion must have at least one character

- `?(pattern|pattern|pattern)` Matches zero or one occurrence of
  the patterns provided

- `+(pattern|pattern|pattern)` Matches one or more occurrences of
  the patterns provided

- `*(a|b|c)` Matches zero or more occurrences of the patterns
  provided
 May _not_ contain `/` characters
 May _not_ contain `/` characters
 It does not crawl symlinked directories, unless
  `{follow:true}` is passed in the options object
 A pattern
  like `a/b/**` will only match `a/b` if it is a directory
symbol
]` style class patterns are not
` as the first
character, then it will not match any glob pattern unless that
pattern's corresponding path part also has a `
` as its first
character
b/c`


You can make glob treat dots as normal characters by setting
`dot:true` in the options


### Basename Matching

If you set `matchBase:true` in the options, and the pattern has
no slashes in it, then it will seek for any file anywhere in the
tree with a matching basename
 For example, `*
js`

This differs from the shell, where the pattern itself is
returned


The double-star character `**` is supported by default, unless
the `noglobstar` flag is set
 That is, `a/**/b` will match
`a/x/y/b`, but `a/**b` will not
 This prevents infinite loops and duplicates and
the like
 You can force glob to traverse symlinks with `**` by
setting `{follow:true}` in the options


There is no equivalent of the `nonull` option
 A pattern that
does not find any matches simply resolves to nothing
 (An empty
array, immediately ended stream, etc
)

If brace expansion is not disabled, then it is performed before
any other interpretation of the glob pattern
 Thus, a pattern
like `+(a|{b),c)}`, which would not be valid in bash or zsh, is
expanded **first** into the set of `+(a|b)` and `+(a|c)`, and
those patterns are checked for validity
 Since those two are
valid, matching proceeds
symbol


### Repeated Slashes

Unlike Bash and zsh, repeated `/` are always coalesced into a
single path separator


### Comments and Negation

Previously, this module let you mark a pattern as a ""comment"" if
it started with a `#` character, or a ""negated"" pattern if it
started with a `!` character


These options were deprecated in version 5, and removed in
version 6


To specify things that should not match, use the `ignore` option


## Windows

**Please only use forward-slashes in glob expressions
 You must use
forward-slashes **only** in glob expressions


Results from absolute patterns such as `/foo/*` are mounted onto
the root setting using `path


To automatically coerce all `\` characters to `/` in pattern
strings, **thus making it impossible to escape literal glob
characters**, you may set the `windowsPathsNoEscape` option to
`true`


### Windows, CWDs, Drive Letters, and UNC Paths

On posix systems, when a pattern starts with `/`, any `cwd`
option is ignored, and the traversal starts at `/`, plus any
non-magic path portions specified in the pattern


On Windows systems, the behavior is similar, but the concept of
an ""absolute path"" is somewhat more involved


#### UNC Paths

A UNC path may be used as the start of a pattern on Windows
platforms
 A pattern like
`//ComputerName/Share/*` will return all files in the associated
share


UNC path roots are always compared case insensitively


#### Drive Letters

A pattern starting with a drive letter, like `c:/*`, will search
in that drive, regardless of any `cwd` option provided


If the pattern starts with `/`, and is not a UNC path, and there
is an explicit `cwd` option set with a drive letter, then the
drive letter in the `cwd` is used as the root of the directory
traversal
 (That is, it is the result of
`path


As a result, it is possible that a file that exists when glob
looks for it may have been deleted or modified by the time it
returns the result


By design, this implementation caches all readdir calls that it
makes, in order to cut down on system overhead
 However, this
also makes it even more susceptible to races, especially if the
cache object is reused between glob calls
 For the vast
majority of operations, this is never a problem
com/isaacs/minimatch)

## Glob Logo

Glob's logo was created by [Tanya
Brassie](http://tanyabrassie
com/)
 Logo files can be found
[here](https://github


The logo is licensed under a [Creative Commons
Attribution-ShareAlike 4
0 International
License](https://creativecommons
org/licenses/by-sa/4
0/)


## Contributing

Any change to behavior (including bugfixes) must come with a
test


Patches that fail tests or reduce performance will be rejected


```sh
# to run tests
npm test

# to re-generate test fixtures
npm run test-regen

# run the benchmarks
npm run bench

# to profile javascript
npm run prof
```

## Comparison to Other JavaScript Glob Implementations

**tl;dr**

- If you want glob matching that is as faithful as possible to
  Bash pattern expansion semantics, and as fast as possible
  within that constraint, _use this module_
im/fast-glob)_

- If you are reasonably sure that the patterns you will encounter
  are relatively simple, and want the convenience of
  automatically respecting `
gitignore` files, _use
  [globby](http://npm


There are some other glob matcher libraries on npm, but these
three are (in my opinion, as of 2023) the best


---

**full explanation**

Every library reflects a set of opinions and priorities in the
trade-offs it makes
 Other than this library, I can personally
recommend both [globby](http://npm
im/globby) and
[fast-glob](http://npm
im/fast-glob), though they differ in their
benefits and drawbacks


Both have very nice APIs and are reasonably fast


`fast-glob` is, as far as I am aware, the fastest glob
implementation in JavaScript today
 However, there are many
cases where the choices that `fast-glob` makes in pursuit of
speed mean that its results differ from the results returned by
Bash and other sh-like shells, which may be surprising
 However, there are some inconsistencies
with Bash matching behavior that this module does not suffer
from:

- `**` only matches files, not directories
- `
/!(<pattern>)` will not match any files that _start_ with
  `<pattern>`, even if they do not match `<pattern>`
 For
  example, `!(9)

- Extglob patterns are allowed to contain `/` characters


Globby exhibits all of the same pattern semantics as fast-glob,
(as it is a wrapper around fast-glob) and is slightly slower than
node-glob (by about 10-20% in the benchmark test set, or in other
words, anywhere from 20-50% slower than fast-glob)


- Support for `


The priority of this module is ""correctness"" in the sense of
performing a glob pattern expansion as faithfully as possible to
the behavior of Bash and other sh-like shells, with as much speed
as possible


Note that prior versions of `node-glob` are _not_ on this list


---

<small id=""fn-webscale"">[1]: In the cases where this module
returns results and `fast-glob` doesn't, it's even faster, of
course
</small>

![lumpy space princess saying 'oh my GLOB'](https://github
com/isaacs/node-glob/raw/main/oh-my-glob
gif)

### Benchmark Results

First number is time, smaller is better


Second number is the count of results returned


```
--- pattern: '**' ---
~~ sync ~~
node fast-glob sync             0m0
683s  222656
node current glob syncStream    0m0
649s  222656
~~ async ~~
node fast-glob async            0m0
350s  200364
node globby async               0m0

583s  2242
~~ async ~~
node fast-glob async            0m0
512s  200364
node current glob async mjs     0m0
490s  10
node globby sync                0m0
517s  10
node current globSync mjs       0m0
296s  10
node current glob async mjs     0m0
278s  10
node current glob stream        0m0
/**/[01]/**/[12]/**/[23]/**/[45]/**/*
500s  160
node globby sync                0m0
528s  160
node current globSync mjs       0m0
283s  160
node globby async               0m0
/**/0/**/0/**/*
502s  5230
node globby sync                0m0
310s  5230

--- pattern: '**/*
580s  200023
node globby sync                0m0
685s  200023
node current glob syncStream    0m0
649s  200023
~~ async ~~
node fast-glob async            0m0
349s  200023
node globby async               0m0
388s  200023

--- pattern: '{**/*
txt,**/?/**/*
txt,**/?/**/?/**/*
txt,**/?/**/?/**/?/**/*
txt,**/?/**/?/**/?/**/?/**/*
txt}' ---
~~ sync ~~
node fast-glob sync             0m0
589s  200023
node globby sync                0m0
771s  200023
node current globSync mjs       0m0
684s  200023
~~ async ~~
node fast-glob async            0m0
351s  200023
node globby async               0m0
518s  200023
node current glob async mjs     0m0
462s  200023
node current glob stream        0m0
468s  200023

--- pattern: '**/5555/0000/*
496s  1000
node globby sync                0m0
519s  1000
node current globSync mjs       0m0
285s  1000
node globby async               0m0
305s  1000
node current glob stream        0m0
301s  1000

--- pattern: '
/**/0/**/

/[01]/**/0/
/**/0/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
507s  0
node current globSync mjs       0m0
577s  4880
node current glob syncStream    0m0
586s  4880
~~ async ~~
node fast-glob async            0m0
280s  0
node globby async               0m0
298s  0
node current glob async mjs     0m0
327s  4880
node current glob stream        0m0
547s  100000
node globby sync                0m0
626s  100000
node current glob syncStream    0m0
315s  100000
node globby async               0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
687s  200023
~~ async ~~
node fast-glob async            0m0
343s  100000
node globby async               0m0
418s  100000
node current glob async mjs     0m0
451s  200023

--- pattern: '**/!(0|9)
txt' ---
~~ sync ~~
node fast-glob sync             0m0
731s  160023
node current globSync mjs       0m0
659s  180023
~~ async ~~
node fast-glob async            0m0
345s  160023
node globby async               0m0
476s  160023
node current glob async mjs     0m0
427s  180023
node current glob stream        0m0
388s  180023

--- pattern: '
/{*/**/

/{*/**/
/{*/**/
/{*/**,,,,},,,,},,,,},,,,},,,,}/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
483s  0
node globby sync                0m0
773s  200023
~~ async ~~
node fast-glob async            0m0
280s  0
node globby async               0m0
299s  0
node current glob async mjs     0m0
617s  200023
node current glob stream        0m0


/*/**/


/*/**/

txt' ---
~~ sync ~~
node fast-glob sync             0m0
759s  200023
node current glob syncStream    0m0
281s  0
node globby async               0m0
544s  200023
node current glob stream        0m0
/*/**/


/*/**/

/*/**/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
486s  0
node globby sync                0m0
513s  0
node current globSync mjs       0m0
734s  200023
node current glob syncStream    0m0
696s  200023
~~ async ~~
node fast-glob async            0m0
286s  0
node globby async               0m0
/0/**/
/1/**/



/4/**/



txt' ---
~~ sync ~~
node fast-glob sync             0m0
060s  0
node globby sync                0m0
074s  0
node current globSync mjs       0m0
067s  0
node current glob syncStream    0m0
066s  0
~~ async ~~
node fast-glob async            0m0
075s  0
node current glob async mjs     0m0
066s  0
node current glob stream        0m0
067s  0

--- pattern: '
568s  100000
node globby sync                0m0
619s  100000
node current glob syncStream    0m0
617s  100000
~~ async ~~
node fast-glob async            0m0
409s  100000
node current glob async mjs     0m0
372s  100000
node current glob stream        0m0
351s  100000

--- pattern: '**/*/**/*/**/*/**/*/**' ---
~~ sync ~~
node fast-glob sync             0m0
798s  200113
node current globSync mjs       0m0
730s  222137
node current glob syncStream    0m0
356s  200113
node globby async               0m0
508s  222137
node current glob stream        0m0
455s  222137

--- pattern: '
/**/*/**/*/**/*/**/*/**/*
792s  200000
node current globSync mjs       0m0
527s  200000
node current glob async mjs     0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
588s  200023
node globby sync                0m0
771s  200023
node current globSync mjs       0m0
432s  200023
node current glob stream        0m0
384s  200023

--- pattern: '
/**/**/**/**/**/**/**/**/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
766s  200023
node current globSync mjs       0m0
652s  200023
~~ async ~~
node fast-glob async            0m0
352s  200023
node globby async               0m0
436s  200023
node current glob stream        0m0
380s  200023

--- pattern: '**/*/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
592s  200023
node globby sync                0m0
424s  200023

--- pattern: '**/*/**/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
694s  200023
node current glob syncStream    0m0
664s  200023
~~ async ~~
node fast-glob async            0m0
514s  200023
node current glob async mjs     0m0
472s  200023
node current glob stream        0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
544s  100000
node globby sync                0m0
636s  100000
node current globSync mjs       0m0
626s  100000
node current glob syncStream    0m0
621s  100000
~~ async ~~
node fast-glob async            0m0
404s  100000
node current glob async mjs     0m0


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
0
0

## Purpose

This license gives everyone as much permission to work with
this software as possible, while protecting contributors
from liability


## Acceptance

In order to receive this license, you must agree to its
rules

You must not do anything with this software that triggers
a rule that you cannot or will not follow


## Copyright

Each contributor licenses you to do everything with this
software that would otherwise infringe that contributor's
copyright in it


## Notices

You must ensure that everyone who gets a copy of
any part of this software from you, with or without
changes, also gets the text of this license or a link to
<https://blueoakcouncil
0


## Patent

Each contributor licenses you to do everything with this
software that would otherwise infringe any patent claims
they can license or become able to license
***




Copyright 2017 Kat Marchán
Copyright npm, Inc


Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the ""Software""),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT










# libnpmaccess

[![npm version](https://img
shields
io/npm/v/libnpmaccess
svg)](https://npm
shields
svg)](https://npm
svg)](https://github
yml)

[`libnpmaccess`](https://github
com/npm/libnpmaccess) is a Node
js
library that provides programmatic access to the guts of the npm CLI's `npm
access` command


## Example

```javascript
const access = require('libnpmaccess')
const opts = { '//registry
npmjs
org/:_authToken: 'npm_token }

// List all packages @zkat has access to on the npm registry

console
keys(await access
npmjs
com/package/npm-registry-fetch#fetch-options)
for options that can be passed in


#### `spec` parameter for all `libnpmaccess` commands

`spec` must be an [`npm-package-arg`](https://npm
im/npm-package-arg)-compatible
registry spec
getCollaborators(spec, opts) -> Promise<Object>`

Gets collaborators for a given package

#### `access
getPackages(user|scope|team, opts) -> Promise<Object>`

Gets all packages for a given user, scope, or team


Teams should be in the format `scope:team` or `@scope:team`

Users and scopes can be in the format `@scope` or `scope`

#### `access
removePermissions(team, spec, opts) -> Promise<Boolean>`

Removes the access for a given team to a package
setAccess(package, access, opts) -> Promise<Boolean>`

Sets access level for package described by `spec`


The npm registry accepts the following `access` levels:

`public`: package is public
`private`: package is private

The npm registry also only allows scoped packages to have their access
level set

`publish`: mfa is required to publish this package, automation tokens
cannot be used to publish

`automation`: mfa is required to publish this package, automation tokens
may also be used for publishing from continuous integration workflows
setPermissions(team, spec, permssions, opts) -> Promise<Boolean>`

Sets permissions levels for a given team to a package


Teams should be in the format `scope:team` or `@scope:team`

The npm registry accepts the following `permissions`:

`read-only`: Read only permissions
`read-write`: Read and write (aka publish) permissions



# libnpmdiff

[![npm version](https://img
shields
im/libnpmdiff)
[![license](https://img
io/npm/l/libnpmdiff
svg)](https://npm
com/npm/cli/actions/workflows/ci-libnpmdiff
svg)](https://github
com/npm/cli/actions/workflows/ci-libnpmdiff
yml)
The registry diff lib
1
log(
  patch
)
```

Returns:

```patch
diff --git a/package
json b/package
json
index v1
1
0

1
json
+++ b/package
json
@@ -1,6 +1,6 @@
 {
   ""name"": ""abbrev"",
-  ""version"": ""1
1
0"",
+  ""version"": ""1
1
1"",
   ""description"": ""Like ruby's abbrev module, but in js"",
   ""author"": ""Isaac Z
 Schlueter <i@izs
js"",

```

## Install

`$ npm install libnpmdiff`

### Contributing

The npm team enthusiastically welcomes contributions and project participation!
There's a bunch of things you can do if you want to contribute! The
[Contributor Guide](https://github
com/npm/cli/blob/latest/CONTRIBUTING
npmjs
com/policies/conduct), and just
generally be excellent to each other
md) for project history details, too


Happy hacking!

### API

#### `> libnpmdif([ a, b ], [opts]) -> Promise<String>`

Fetches the registry tarballs and compare files between a spec `a` and spec `b`
 **npm** spec types are usually described in `<pkg-name>@<version>` form but multiple other types are alsos supported, for more info on valid specs take a look at [`npm-package-arg`](https://github


**Options**:

- `color <Boolean>`: Should add ANSI colors to string output? Defaults to `false`

- `tagVersionPrefix <Sring>`: What prefix should be used to define version numbers
 Defaults to `v`
- `diffUnified <Number>`: How many lines of code to print before/after each diff
 Defaults to `3`
 Defaults to `undefined`

- `diffIgnoreAllSpace <Boolean>`: Whether or not should ignore changes in whitespace (very useful to avoid indentation changes extra diff lines)
 Defaults to `false`

- `diffSrcPrefix <String>`: Prefix to be used in the filenames from `a`

- `diffDstPrefix <String>`: Prefix to be used in the filenames from `b`
 Defaults to `b/`

- 
`cache`, `registry`, `where` and other common options accepted by [pacote](https://github
com/npm/pacote#options)

Returns a `Promise` that fullfils with a `String` containing the resulting patch diffs


## LICENSE

[ISC](
/LICENSE)



# libnpmexec

[![npm version](https://img
svg)](https://npm
shields
io/npm/l/libnpmexec
im/libnpmexec)
[![CI - libnpmexec](https://github
com/npm/cli/actions/workflows/ci-libnpmexec
yml/badge
svg)](https://github
com/npm/cli/actions/workflows/ci-libnpmexec
yml)

The `npm exec` (`npx`) Programmatic API

## Install

`npm install libnpmexec`

## Usage:

```js
const libexec = require('libnpmexec')
await libexec({
  args: ['yosay', 'Bom dia!'],
  cache: '~/
npm/_npx',
  yes: true,
})
```

## API:

### `libexec(opts)`

- `opts`:
  - `args`: List of pkgs to execute **Array<String>**, defaults to `[]`
  - `call`: An alternative command to run when using `packages` option **String**, defaults to empty string

  - `cache`: The path location to where the npm cache folder is placed **String**
  - `npxCache`: The path location to where the npx cache folder is placed **String**
  - `chalk`: Chalk instance to use for colors? **Required**
  - `localBin`: Location to the `node_modules/
bin`
env
ComSpec` OR `cmd` on Windows
  - `yes`: Should skip download confirmation prompt when fetching missing packages from the registry? **Boolean**
  - `registry`, `cache`, and more options that are forwarded to [@npmcli/arborist](https://github
com/npm/pacote/#options) **Object**

## LICENSE

[ISC](
/LICENSE)



# libnpmfund

[![npm version](https://img
io/npm/v/libnpmfund
svg)](https://npm
im/libnpmfund)
[![license](https://img
svg)](https://npm
im/libnpmfund)
[![CI - libnpmfund](https://github
com/npm/cli/actions/workflows/ci-libnpmfund
yml/badge
svg)](https://github
yml)

[`libnpmfund`](https://github
com/npm/libnpmfund) is a Node
com/npm/arborist)
0
0',
  funding: { url: 'https://example
0
example
com' }
    }
  }
}
```

## Install

`$ npm install libnpmfund`

### Contributing

The npm team enthusiastically welcomes contributions and project participation!
There's a bunch of things you can do if you want to contribute! The
[Contributor Guide](https://github
com/npm/cli/blob/latest/CONTRIBUTING
md)
outlines the process for community interaction and contribution
 Please don't
hesitate to jump in if you'd like to, or even ask us questions if something
isn't clear
com/policies/conduct), and just
generally be excellent to each other
md) for project history details, too
read""></a> `> fund

- `workspaces`: `Array<String>` List of workspaces names to filter for,
the result will only include a subset of the resulting tree that includes
only the nodes that are children of the listed workspaces names

- `path`, `registry` and more [Arborist](https://github


##### <a name=""fund
com/npm/arborist) tree to be used, e
loadActual()

return readTree(tree, { countOnly: false })
```

Options:

- `countOnly`: Uses the tree-traversal logic from **npm fund** but skips over
any obj definition and just returns an obj containing `{ length }` - useful for
things such as printing a `6 packages are looking for funding` msg


##### <a name=""fund


e
com')
// => {
  url: 'http://example
com'
}
```

##### <a name=""fund
isValidFunding(funding) -> Boolean`

Returns `<true>` if `funding` is a valid funding object, e
g:

```js
isValidFunding({ foo: 'not a valid funding obj' })
// => false

isValidFunding('http://example
com')
// => true
```

## LICENSE

[ISC](
/LICENSE)



ISC License

Copyright (c) npm, Inc


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE COPYRIGHT HOLDER DISCLAIMS
ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS


# libnpmhook

[![npm version](https://img
shields
io/npm/v/libnpmhook
io/npm/l/libnpmhook
im/libnpmhook)
[![CI - libnpmhook](https://github
com/npm/cli/actions/workflows/ci-libnpmhook
svg)](https://github
com/npm/cli/actions/workflows/ci-libnpmhook
com/npm/libnpmhook) is a Node


For a more general introduction to managing hooks, see [the introductory blog
post](https://blog
npmjs
org/post/145260155635/introducing-hooks-get-notifications-of-npm)


## Table of Contents

* [Example](#example)
* [Install](#install)
* [Contributing](#contributing)
* [API](#api)
  * [hook opts](#opts)
  * [`add()`](#add)
  * [`rm()`](#rm)
  * [`ls()`](#ls)
  * [`ls
log(await hooks
im/npm-registry-fetch)

All options are passed through directly to that library, so please refer to [its
own `opts`
documentation](https://www
npmjs
com/package/npm-registry-fetch#fetch-options)
for options that can be passed in
 For other ways to pass in auth details, see the n-r-f docs

* `opts
 If a `libnpmhook` command fails with `err
code === EOTP`, please retry the request with `{otp: <2fa token>}`

#### <a name=""add""></a> `> hooks
add(name, endpoint, secret, [opts]) -> Promise`

`name` is the name of the package, org, or user/org scope to watch


The `endpoint` should be a fully-qualified http URL for the endpoint the hook
will send its payload to when it fires
 `secret` is a shared secret that the
hook will send to that endpoint to verify that it's actually coming from the
registry hook


The returned Promise resolves to the full hook object that was created,
including its generated `id`


See also: [`POST
/v1/hooks/hook`](https://github
com/npm/registry/blob/master/docs/hooks/endpoints
md#post-v1hookshook)

##### Example

```javascript
await hooks
add('~zkat', 'https://example
com/api/added', 'supersekrit', {
  token: 'myregistrytoken',
  otp: '694207'
})

=>

{ id: '16f7xoal',
  username: 'zkat',
  name: 'zkat',
  endpoint: 'https://example
com/api/added',
  secret: 'supersekrit',
  type: 'owner',
  created: '2018-08-21T20:05:25
125Z',
  updated: '2018-08-21T20:05:25
125Z',
  deleted: false,
  delivered: false,
  last_delivery: null,
  response_code: 0,
  status: 'active' }
```

#### <a name=""find""></a> `> hooks


See also: [`GET
/v1/hooks/hook/:id`](https://github
md#get-v1hookshookid)

##### Example

```javascript
await hooks
find('16f7xoal', {token: 'myregistrytoken'})

=>

{ id: '16f7xoal',
  username: 'zkat',
  name: 'zkat',
  endpoint: 'https://example
125Z',
  updated: '2018-08-21T20:05:25
rm(id, [opts]) -> Promise`

Removes the hook identified by `id`


The returned Promise resolves to the full hook object that was removed, if it
existed, or `null` if no such hook was there (instead of erroring)
com/npm/registry/blob/master/docs/hooks/endpoints
md#delete-v1hookshookid)

##### Example

```javascript
await hooks
rm('16f7xoal', {
  token: 'myregistrytoken',
  otp: '694207'
})

=>

{ id: '16f7xoal',
  username: 'zkat',
  name: 'zkat',
  endpoint: 'https://example
com/api/added',
  secret: 'supersekrit',
  type: 'owner',
  created: '2018-08-21T20:05:25

rm('16f7xoal', {
  token: 'myregistrytoken',
  otp: '694207'
})

=> null
```

#### <a name=""update""></a> `> hooks


The `endpoint` should be a fully-qualified http URL for the endpoint the hook
will send its payload to when it fires
 `secret` is a shared secret that the
hook will send to that endpoint to verify that it's actually coming from the
registry hook
md#put-v1hookshookid)

##### Example

```javascript
await hooks
update('16fxoal', 'https://example
com/api/other', 'newsekrit', {
  token: 'myregistrytoken',
  otp: '694207'
})

=>

{ id: '16f7xoal',
  username: 'zkat',
  name: 'zkat',
  endpoint: 'https://example
com/api/other',
  secret: 'newsekrit',
  type: 'owner',
  created: '2018-08-21T20:05:25
125Z',
  updated: '2018-08-21T20:14:41
964Z',
  deleted: false,
  delivered: false,
  last_delivery: null,
  response_code: 0,
  status: 'active' }
```

#### <a name=""ls""></a> `> hooks
ls([opts]) -> Promise`

Resolves to an array of hook objects associated with the account you're
authenticated as


Results can be further filtered with three values that can be passed in through
`opts`:

* `opts
ls
stream()`](#ls-stream)
  * [`GET
/v1/hooks`](https://github
com/npm/registry/blob/master/docs/hooks/endpoints
md#get-v1hooks)

##### Example

```javascript
await hooks
ls({token: 'myregistrytoken'})

=>
[
  { id: '16f7xoal', 


 },
  



]
```

#### <a name=""ls-stream""></a> `> hooks
ls
stream([opts]) -> Stream`

Returns a stream of hook objects associated with the account you're
authenticated as
 The returned stream is a valid `Symbol
asyncIterator` on
`node@>=10`


Results can be further filtered with three values that can be passed in through
`opts`:

* `opts
package` - filter results by package name
* `opts
limit` - maximum number of hooks to return
* `opts
offset` - pagination offset for results (use with `opts
limit`)

See also:
  * [`hooks
ls()`](#ls)
  * [`GET
/v1/hooks`](https://github
md#get-v1hooks)

##### Example

```javascript
for await (let hook of hooks
ls
log('found hook:', hook
id)
}

=>
// outputs:
// found hook: 16f7xoal
// found hook: wnyf98a1
```



# libnpmorg

[![npm version](https://img
shields
svg)](https://npm
im/libnpmorg)
[![license](https://img
shields
io/npm/l/libnpmorg
im/libnpmorg)
[![CI - libnpmorg](https://github
svg)](https://github
js library for
programmatically accessing the [npm Org membership
API](https://github
com/npm/registry/blob/master/docs/orgs/memberships


## Table of Contents

* [Example](#example)
* [Install](#install)
* [Contributing](#contributing)
* [API](#api)
  * [hook opts](#opts)
  * [`set()`](#set)
  * [`rm()`](#rm)
  * [`ls()`](#ls)
  * [`ls
log(await org
ls('myorg', {token: 'deadbeef'}))
=>
Roster {
  zkat: 'developer',
  iarna: 'admin',
  isaacs: 'owner'
}
```

## Install

`$ npm install libnpmorg`

### API

#### <a name=""opts""></a> `opts` for `libnpmorg` commands

`libnpmorg` uses [`npm-registry-fetch`](https://npm
im/npm-registry-fetch)

All options are passed through directly to that library, so please refer to [its
own `opts`
documentation](https://www
com/package/npm-registry-fetch#fetch-options)
for options that can be passed in


A couple of options of note for those in a hurry:

* `opts
token` - can be passed in and will be used as the authentication token for the registry
 For other ways to pass in auth details, see the n-r-f docs

* `opts
otp` - certain operations will require an OTP token to be passed in
code === EOTP`, please retry the request with `{otp: <2fa token>}`

#### <a name=""set""></a> `> org
set(org, user, [role], [opts]) -> Promise`

The returned Promise resolves to a [Membership
Detail](https://github
com/npm/registry/blob/master/docs/orgs/memberships
md#membership-detail)
object

`developer` is the default if no `role` is provided
set('@myorg', '@myuser', 'admin', {token: 'deadbeef'})
=>
MembershipDetail {
  org: {
    name: 'myorg',
    size: 15
  },
  user: 'myuser',
  role: 'admin'
}
```

#### <a name=""rm""></a> `> org


See also: [`DELETE
/-/org/:scope/user`](https://github
rm('myorg', 'myuser', {token: 'deadbeef'})
```

#### <a name=""ls""></a> `> org
ls(org, [opts]) -> Promise`

The Promise resolves to a
[Roster](https://github
com/npm/registry/blob/master/docs/orgs/memberships
md#roster)
object


See also: [`GET
/-/org/:scope/user`](https://github
ls('myorg', {token: 'deadbeef'})
=>
Roster {
  zkat: 'developer',
  iarna: 'admin',
  isaacs: 'owner'
}
```

#### <a name=""ls-stream""></a> `> org
ls
stream(org, [opts]) -> Stream`

Returns a stream of entries for a
[Roster](https://github
com/npm/registry/blob/master/docs/orgs/memberships
md#roster),
with each emitted entry in `[key, value]` format


`org` must be a scope name for an org, and can be optionally prefixed with `@`
asyncIterator`


See also: [`GET
/-/org/:scope/user`](https://github
stream('myorg', {token: 'deadbeef'})) {
  console
svg)](https://npm
svg)](https://npm
im/libnpmpack)
[![CI - libnpmpack](https://github
com/npm/cli/actions/workflows/ci-libnpmpack
yml/badge
com/npm/cli/actions/workflows/ci-libnpmpack
com/npm/libnpmpack) is a Node
js library for
programmatically packing tarballs from a local directory or from a registry or github spec


## Table of Contents

* [Example](#example)
* [Install](#install)
* [API](#api)
  * [`pack()`](#pack)

## Example

```js
const pack = require('libnpmpack')
```

## Install

`$ npm install libnpmpack`

### API

#### <a name=""pack""></a> `> pack(spec, [opts]) -> Promise`

Packs a tarball from a local directory or from a registry or github spec and returns a Promise that resolves to the tarball data Buffer, with from, resolved, and integrity fields attached


`libnpmpack` uses [`pacote`](https://npm
im/pacote)

Most options are passed through directly to that library, so please refer to
[its own `opts`
documentation](https://www
com/package/pacote#options)
for options that can be passed in
0
3')

// packs from a github spec
const githubTar = await pack('isaacs/rimraf#PR-192')
```



# libnpmpublish

[![npm version](https://img
shields
io/npm/v/libnpmpublish
svg)](https://npm
shields
io/npm/l/libnpmpublish
svg)](https://npm
com/npm/cli/actions/workflows/ci-libnpmpublish
yml/badge
svg)](https://github
com/npm/libnpmpublish) is a Node
 Give
it a manifest as an object and a tarball as a Buffer, and it'll put them on
the registry for you


## Table of Contents

* [Example](#example)
* [Install](#install)
* [API](#api)
  * [publish/unpublish opts](#opts)
  * [`publish()`](#publish)
  * [`unpublish()`](#unpublish)

## Example

```js
const { publish, unpublish } = require('libnpmpublish')
```

## Install

`$ npm install libnpmpublish`

### API

#### <a name=""opts""></a> `opts` for `libnpmpublish` commands

`libnpmpublish` uses
[`npm-registry-fetch`](https://npm
im/npm-registry-fetch)
im/npm-registry-fetch#fetch-options) for
options that can be passed in


A couple of options of note:

* `opts
defaultTag` - registers the published package with the given tag,
  defaults to `latest`


* `opts
 Only applies to scoped
  packages


* `opts


* `opts
provenance` - when running in a supported CI environment, will trigger
  the generation of a signed provenance statement to be published alongside
  the package
 Mutually exclusive with the `provenanceFile` option
provenanceFile` - specifies the path to an externally-generated
  provenance statement to be published alongside the package
 Mutually
  exclusive with the `provenance` option
proto)
  containing a [DSSE](https://github
com/secure-systems-lab/dsse)-packaged
  provenance statement


`manifest` should be the parsed `package
  You may put your own user-agent string in
there to identify your publishes


If `opts
algorithms` is passed in, it should be an array of hashing
algorithms to generate `integrity` hashes for
 The default is `['sha512']`,
which means you end up with `dist
integrity = 'sha512-deadbeefbadc0ffee'`


##### Example

```js
// note that pacote
  a folder shown here, since that's
// far and away the most common use case
im/pacote
const manifest = await pacote


`spec` should be either a string, or a valid
[`npm-package-arg`](https://npm
im/npm-package-arg) parsed spec object
unpublish('lodash', { token: 'i-am-the-worst'})
//
// `lodash` has now been unpublished, along with all its versions
```



# libnpmsearch

[![npm version](https://img
svg)](https://npm
im/libnpmsearch)
[![license](https://img
shields
io/npm/l/libnpmsearch
svg)](https://npm
im/libnpmsearch)
[![CI - libnpmsearch](https://github
com/npm/cli/actions/workflows/ci-libnpmsearch
svg)](https://github
yml)

[`libnpmsearch`](https://github
com/npm/libnpmsearch) is a Node
js library for
programmatically accessing the npm search endpoint
 It does **not** support
legacy search through `/-/all`


## Table of Contents

* [Example](#example)
* [Install](#install)
* [Contributing](#contributing)
* [API](#api)
  * [search opts](#opts)
  * [`search()`](#search)
  * [`search
stream()`](#search-stream)

## Example

```js
const search = require('libnpmsearch')

console

etc
  },
  


limit` - Number of results to limit the query to
from` - Offset number for results
limit` for pagination
 Default: 0
* `opts
 Useful for UIs
 Default: false
* `opts
quality`, `opts
maintenance`, and `opts
popularity` with values that prioritize each one
 Should be one of `'optimal'`, `'quality'`, `'maintenance'`, or `'popularity'`
 Default: `'optimal'`
* `opts
maintenance` - Decimal number between `0` and `1` that defines the weight of `maintenance` metrics when scoring and sorting packages
 Default: `0
65` (same as `opts
popularity` - Decimal number between `0` and `1` that defines the weight of `popularity` metrics when scoring and sorting packages
98` (same as `opts
5` (same as `opts
sortBy: 'optimal'`)

`libnpmsearch` uses [`npm-registry-fetch`](https://npm
im/npm-registry-fetch)
npmjs
com/package/npm-registry-fetch#fetch-options)
for options that can be passed in
 For other ways to pass in auth details, see the n-r-f docs


#### <a name=""search""></a> `> search(query, [opts]) -> Promise`

`query` must be either a String or an Array of search terms


If `opts
 You may receive more, or fewer results, at the endpoint's
discretion



For streamed results, see [`search
stream`](#search-stream)


##### Example

```javascript
await search('libnpm')
=>
[
  {
    name: 'libnpm',
    description: 'programmatic npm API',
    


etc
  },
  {
    name: 'libnpmsearch',
    description: 'Programmatic API for searching in npm and compatible registries',
    


stream(query, [opts]) -> Stream`

`query` must be either a String or an Array of search terms
limit` is provided, it will be sent to the API to constrain the number
of returned results
 You may receive more, or fewer results, at the endpoint's
discretion


etc
  ] || null,
  keywords: [String] || null,
  date: Date || null
}
```

For getting results in one chunk, see [`search`](#search-stream)


##### Example

```javascript
search
stream('libnpm')

etc
}
// etc
```



# libnpmteam

[![npm version](https://img
svg)](https://npm
svg)](https://npm
com/npm/cli/actions/workflows/ci-libnpmteam
yml/badge
com/npm/cli/actions/workflows/ci-libnpmteam

console
log(await team
lsTeams('npm'))
```

## Publishing
1
 Manually create CHANGELOG
md file
1
md""
    ```
1
 Run `npm version {newVersion}`
    ```bash
    # Example
    $ npm version patch
    # 1
 Runs `coverage` and `lint` scripts
    # 2
 Bumps package version; and **create commit/tag**
    # 3
 Runs `git push origin --follow-tags`
    ```

## Table of Contents

* [Installing](#install)
* [Example](#example)
* [API](#api)
  * [team opts](#opts)
  * [`create()`](#create)
  * [`destroy()`](#destroy)
  * [`add()`](#add)
  * [`rm()`](#rm)
  * [`lsTeams()`](#ls-teams)
  * [`lsTeams
stream()`](#ls-users-stream)

### Install

`$ npm install libnpmteam`

### API

#### <a name=""opts""></a> `opts` for `libnpmteam` commands

`libnpmteam` uses [`npm-registry-fetch`](https://npm

All options are passed through directly to that library, so please refer to [its
own `opts`
documentation](https://www
npmjs
com/package/npm-registry-fetch#fetch-options)
for options that can be passed in


A couple of options of note for those in a hurry:

* `opts
token` - can be passed in and will be used as the authentication token for the registry

* `opts
code === EOTP`, please retry the request with `{otp: <2fa token>}`

#### <a name=""create""></a> `> team
create(team, [opts]) -> Promise`

Creates a team named `team`
 Team names use the format `@<scope>:<name>`, with
the `@` being optional


Additionally, `opts
description` may be passed in to include a description

```

#### <a name=""destroy""></a> `> team
destroy(team, [opts]) -> Promise`

Destroys a team named `team`
 Team names use the format `@<scope>:<name>`, with
the `@` being optional
destroy('@npm:cli', {token: 'myregistrytoken'})
// The @npm:cli team has been destroyed

```

#### <a name=""add""></a> `> team


##### Example

```javascript
await team
add('zkat', '@npm:cli', {token: 'myregistrytoken'})
// @zkat now belongs to the @npm:cli team


##### Example

```javascript
await team
rm('zkat', '@npm:cli', {token: 'myregistrytoken'})
// @zkat is no longer part of the @npm:cli team

```

#### <a name=""ls-teams""></a> `> team
stream(scope, [opts]) -> Stream`

Returns a stream of teams belonging to `scope`


For a Promise-based version of these results, see [`team
lsTeams()`](#ls-teams)
lsUsers(team, [opts]) -> Promise`

Resolves to an array of usernames belonging to `team`
lsUsers
lsUsers()`](#ls-users)


##### Example

```javascript
for await (let user of team
stream('@npm:cli', {token: 'myregistrytoken'})) {
  console
shields
io/npm/v/libnpmversion
svg)](https://npm
im/libnpmversion)
[![license](https://img
shields
io/npm/l/libnpmversion
svg)](https://npm
im/libnpmversion)
[![CI - libnpmversion](https://github
com/npm/cli/actions/workflows/ci-libnpmversion
yml/badge
svg)](https://github
com/npm/cli/actions/workflows/ci-libnpmversion
yml)

Library to do the things that 'npm version' does
error('version updated!', newVersion)
})
```

## Description

Run this in a package directory to bump the version and write the new data
back to `package
json`, `package-lock
json`, and, if present,
`npm-shrinkwrap
inc](https://github
com/npm/node-semver#functions) (one
of `patch`, `minor`, `major`, `prepatch`, `preminor`, `premajor`,
`prerelease`), or `from-git`
 In the second case, the existing version will
be incremented by 1 in the specified field
  This
behavior is controlled by `gitTagVersion` (see below), and can be
disabled by setting `gitTagVersion: false` in the options

It will fail if the working directory is not clean, unless `force: true` is
set


If supplied with a `message` string option, it will
use it as a commit message when creating a version commit
  If the
`message` option contains `%s` then that will be replaced with the
resulting version number


If the `signGitTag` option is set, then the tag will be signed using
the `-s` flag to git
  Note that you must have a default GPG key set up in
your git config for this to work properly


If `preversion`, `version`, or `postversion` are in the `scripts` property
of the package
json, they will be executed in the appropriate sequence


The exact order of execution is as follows:

1
 Check to make sure the git working directory is clean before we get
   started

   This step is skipped if the `force` flag is set
  These scripts have access to the old
   `version` in package
 Bump `version` in `package
json` as requested (`patch`, `minor`,
   `major`, explicit version number, etc)

4
  Again, scripts should explicitly add
   generated files to the commit using `git add`

5

6
 Run the `postversion` script
 Then runs your
`build` script, and adds everything in the `dist` directory to the commit

After the commit, it pushes the new commit and tag up to the server, and
deletes the `build/temp` directory
  Returns a promise that resolves to the new version if
all is well, or rejects if any errors are encountered


### Options

#### `path` String

The path to the package being versionified
cwd()
  Default
`false`
  Defaults to
`'v'`
  (So, by default it tags as 'v1
2
2
)

#### `commitHooks` Boolean

Run git commit hooks
  Default `false`


#### `signGitTag` Boolean

GPG sign the git tag


#### `force` Boolean

Push forward recklessly if any problems happen


#### `ignoreScripts` Boolean

Do not run pre/post/version lifecycle scripts
  Default `false`
  Defaults to `/bin/sh` on unix, or `cmd
exe` on windows


#### `message` String

The message for the git commit and annotated git tag that are created







































The MIT License (MIT)

Copyright (c) 2020 Vercel, Inc
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
js native addon build tool

[![Build Status](https://github
com/nodejs/node-gyp/workflows/Tests/badge
com/nodejs/node-gyp/actions?query=workflow%3ATests+branch%3Amain)
![npm](https://img
shields
js
com/nodejs/gyp-next) project that was previously used
by the Chromium team and extended to support the development of Node
js native
addons
js itself


All current and LTS target versions of Node
 List of stable Node
js website](https://nodejs
js

## Installation

You can install `node-gyp` using `npm`:

``` bash
npm install -g node-gyp
```

Depending on your operating system, you will need to install:

### On Unix

   * [A supported version of Python](https://devguide
org/versions/)
   * `make`
   * A proper C/C++ compiler toolchain, like [GCC](https://gcc
gnu
org)

### On macOS

   * [A supported version of Python](https://devguide
python
apple




### On Windows

Install the current [version of Python](https://devguide
python
org/versions/) from the
[Microsoft Store](https://apps
microsoft
com/store/search?publisher=Python+Software+Foundation)
com/thank-you-downloading-visual-studio/?sku=Community)


   If the above steps didn't work for you, please visit [Microsoft's Node
microsoft


It's advised to install following Powershell module: [VSSetup](https://github
com/microsoft/vssetup
powershell) using `Install-Module VSSetup -Scope CurrentUser`

This will make Visual Studio detection logic to use more flexible and accessible method, avoiding Powershell's `ConstrainedLanguage` mode


### Configuring Python Dependency

`node-gyp` requires that you have installed a [supported version of Python](https://devguide
org/versions/)
g
 If `node-gyp` is called by way of `npm`, *and* you have multiple versions of
Python installed, then you can set the `npm_config_python` environment variable
to the appropriate path:
``` bash
export npm_config_python=/path/to/executable/python
```
&nbsp;&nbsp;&nbsp;&nbsp;Or on Windows:
```console
py --list-paths  # To see the installed Python versions
set npm_config_python=C:\path\to\python
exe
```

3
 If the `NODE_GYP_FORCE_PYTHON` environment variable is set to the path of a
Python executable, it will be used instead of any of the other configured or
built-in Python search paths
 If it's not a compatible version, no further
searching will be done
js Runtimes

When building modules for third-party Node
js runtimes like Electron, which have
different build configurations from the official Node


Also when `--dist-url` or `--nodedir` flags are passed, node-gyp will use the
`config
config` object of the running Node
gypi` in their headers
distributions, and you might need to pass `--force-process-config` to node-gyp
to work around configuration errors
 Use `configure` for that:

``` bash
node-gyp configure
```

Auto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`
needs to be added (not needed when run by npm as configured above):
``` bash
node-gyp configure --msvs_version=2015
```

__Note__: The `configure` step looks for a `binding
gyp` file in the current
directory to process
 See below for instructions on creating a `binding
gyp` file


Now you will have either a `Makefile` (on Unix platforms) or a `vcxproj` file
(on Windows) in the `build/` directory
 Next, invoke the `build` command:

``` bash
node-gyp build
```

Now you have your compiled `
node` bindings file! The compiled bindings end up
in `build/Debug/` or `build/Release/`, depending on the build mode
node` file with Node
gyp` file

A `binding
gyp` file describes the configuration to build your module, in a
JSON-like format
 This file gets placed in the root of your package, alongside
`package


A barebones `gyp` file appropriate for building a Node
cc"" ]
    }
  ]
}
```

## Further reading

The **[docs](
/docs/)** directory contains additional documentation on specific node-gyp topics that may be useful if you are experiencing problems installing or building addons using node-gyp


Some additional resources for Node
js native addons and writing `gyp` configuration files:

 * [""Going Native"" a nodeschool
io/#goingnative)
 * [""Hello World"" node addon example](https://github
com/nodejs/node/tree/main/test/addons/hello-world)
 * [gyp user documentation](https://gyp
md)
 * [*""binding
gyp"" files out in the wild* wiki page](
/docs/binding
gyp-files-in-the-wild
md)

## Commands

`node-gyp` responds to the following commands:

| **Command**   | **Description**
|:--------------|:---------------------------------------------------------------
| `help`        | Shows the help dialog
| `build`       | Invokes `make`/`msbuild
exe` and builds the native addon
| `clean`       | Removes the `build` directory if it exists
| `configure`   | Generates project build files for the current platform
| `rebuild`     | Runs `clean`, `configure` and `build` all in a row
| `install`     | Installs Node
js header versions
| `remove`      | Removes the Node
 The value `max` will use all available CPU cores
| `--target=v6
2
1`                 | Node
js version to build for (default is `process
version`)
| `--silly`, `--loglevel=silly`     | Log all progress to console
| `--verbose`, `--loglevel=verbose` | Log most progress to console
| `--silent`, `--loglevel=silent`   | Don't log anything to console
| `debug`, `--debug`                | Make Debug build (default is `Release`)
| `--release`, `--no-debug`         | Make Release build
| `-C $dir`, `--directory=$dir`     | Run command in different directory
| `--make=$make`                    | Override `make` command (e
g
 `gmake`)
| `--thin=yes`                      | Enable thin static libraries
| `--arch=$arch`                    | Set target architecture (e
g
 ia32)
| `--tarball=$path`                 | Get headers from a local tarball
| `--devdir=$path`                  | SDK download directory (default is OS cache directory)
| `--ensure`                        | Don't reinstall headers if already present
| `--dist-url=$url`                 | Download header tarball from custom URL
| `--proxy=$url`                    | Set HTTP(S) proxy for downloading header tarball
| `--noproxy=$urls`                 | Set urls to ignore proxies when downloading header tarball
| `--cafile=$cafile`                | Override default CA chain (to download tarball)
| `--nodedir=$path`                 | Set the path to the node source code
| `--python=$path`                  | Set path to the Python binary
| `--msvs_version=$version`         | Set Visual Studio version (Windows only)
| `--solution=$solution`            | Set Visual Studio Solution version (Windows only)
| `--force-process-config`          | Force using runtime's `process
config` object to generate `config
gypi` file

## Configuration

### Environment variables

Use the form `npm_config_OPTION_NAME` for any of the command options listed
above (dashes in option names should be replaced by underscores)


For example, to set `devdir` equal to `/tmp/
gyp`, you would:

Run this on Unix:

```bash
export npm_config_devdir=/tmp/
gyp
```

Or this on Windows:

```console
set npm_config_devdir=c:\temp\
gyp
```

### `npm` configuration for npm versions before v9

Use the form `OPTION_NAME` for any of the command options listed above


For example, to set `devdir` equal to `/tmp/
gyp
```

**Note:** Configuration set via `npm` will only be used when `node-gyp`
is run via `npm`, not when `node-gyp` is run directly


The Wrong Way is to sit down and write an option parser
  We've all done
that


The Right Way is to write some complex configurable program with so many
options that you hit the limit of your frustration just trying to
manage them all, and defer it with duct-tape solutions until you see
exactly to the core of the problem, and finally snap and write an
awesome option parser


If you want to write an option parser, don't write an option parser
  You probably won't end up with a
good one of those, but if you don't give up, and you are relentless and
diligent enough in your procrastination, you may just end up with a very
nice option parser
Stream
  , path = require(""path"")
  , knownOpts = { ""foo"" : [String, null]
                , ""bar"" : [Stream, Number]
                , ""baz"" : path
                , ""bloo"" : [ ""big"", ""medium"", ""small"" ]
                , ""flag"" : Boolean
                , ""pick"" : Boolean
                , ""many1"" : [String, Array]
                , ""many2"" : [path, Array]
                }
  , shortHands = { ""foofoo"" : [""--foo"", ""Mr
 Foo""]
                 , ""b7"" : [""--bar"", ""7""]
                 , ""m"" : [""--bloo"", ""medium""]
                 , ""p"" : [""--pick""]
                 , ""f"" : [""--flag""]
                 }
             // everything is optional
argv, 2)
console
js --foo ""blerp"" --no-flag
{ ""foo"" : ""blerp"", ""flag"" : false }

$ node my-program
js ---bar 7 --foo ""Mr
 Hand"" --flag
{ bar: 7, foo: ""Mr
js --foo ""blerp"" -f -----p
{ foo: ""blerp"", flag: true, pick: true }

$ node my-program
js -fp --foofoo
{ foo: ""Mr
 Foo"", flag: true, pick: true }

$ node my-program

{ foo: ""Mr
 Foo"", argv: { remain: [""-fp""] } }

$ node my-program
js --blatzk -fp # unknown opts are ok
js --no-blatzk -fp # unless they start with ""no-""
{ blatzk: false, flag: true, pick: true }

$ node my-program

{ baz: ""/Users/isaacs/b/a/z"" }

# if Array is one of the types, then it can take many
# values, and will always be an array
  The other types provided
# specify what types are allowed in the list


$ node my-program


## Types

The following types are supported, and defined on `nopt
  No parsing is done

* path: A file system path
  Gets resolved against cwd if not absolute
  If it doesn't parse, it isn't accepted

* Number: Must be numeric

* Date: Must parse as a date
 If it does, and `Date` is one of the options,
  then it will return a Date object, not a string

* Boolean: Must be either `true` or `false`
  If an option is a boolean,
  then it does not need a value, and its presence will imply `true` as
  the value
  To negate boolean flags, do `--no-whatever` or `--whatever
  false`
* NaN: Means that the option is strictly not allowed
  Any value will
  fail
  This means that multiple values
  can be specified, and that the value will always be an array


If a type is an array of values not on this list, then those are
considered valid values


When parsing unknown fields, `""true""`, `""false""`, and `""null""` will be
interpreted as their JavaScript equivalents


You can also mix types and values, or multiple types, in a list
  For
instance `{ blah: [Number, null] }` would allow a value to be set to
either a Number or null
  When types are ordered, this implies a
preference, and the first type that can be used to properly interpret
the value will be used


To define a new type, add it to `nopt
typeDefs`
  The
`type` member is an object that matches what goes in the type list
  The
`validate` method is a function that gets called with `validate(data,
key, val)`
  Validate methods should assign `data[key]` to the valid
value of `val` if it can be handled properly, or return boolean
`false` if it cannot


You can also call `nopt
clean(data, types, typeDefs)` to clean up a
config object and remove its invalid properties
  You can change this behavior by assigning a method
to `nopt
invalidHandler(key, val, types)`


If no `nopt
invalidHandler` is assigned, then it will console
error
its whining
js --foolhar --pil
node program

```

## Shorthands

Shorthands are a hash of shorter option names to a snippet of args that
they expand to


If multiple one-character shorthands are all combined, and the
combination does not unambiguously match any other option or shorthand,
then they will be broken up into their constituent parts
  For example:

```json
{ ""s"" : [""--loglevel"", ""silent""]
, ""g"" : ""--global""
, ""f"" : ""--force""
, ""p"" : ""--parseable""
, ""l"" : ""--long""
}
```

```bash
npm ls -sgflp
# just like doing this:
npm ls --loglevel silent --global --force --long --parseable
```

## The Rest of the args

The config object returned by nopt is given a special member called
`argv`, which is an object with the following fields:

* `remain`: The remaining args after all the parsing has occurred


## Slicing

Node programs are called with more or less the exact argv as it appears
in C land, after the v8 and node-specific options have been plucked off

As such, `argv[0]` is always `node` and `argv[1]` is always the
JavaScript program being run


That's usually not very useful to you
  So they're sliced off by
default
  If you want them, then you can pass in `0` as the last
argument, or any other number that you'd like to slice off the start of
the list



















ISC License

Copyright (c) npm, Inc


Permission to use, copy, modify, and/or distribute this software for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies
 IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE
 Do not edit
 -->

ISC License

Copyright npm, Inc


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE
 -->

ISC License

Copyright npm, Inc


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS






<!-- This file is automatically added by @npmcli/template-oss
 -->

ISC License

Copyright npm, Inc


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE






# pacote

Fetches package manifests and tarballs from the npm registry
manifest('foo@1
x')
then(manifest => console
then(({from, resolved, integrity}) => {
    console
com/package
tgz')
log('got ' + data
)

Anything that you can do with one kind of package, you can do with another


Data that isn't relevant (like a packument for a tarball) will be
simulated


`prepare` scripts will be run when generating tarballs from `git` and
`directory` locations, to simulate what _would_ be published to the
registry, so that you get a working package instead of just raw source
code that might need to be transpiled
  Run `pacote -h` to learn more


```
Pacote - The JavaScript Package Handler, v10


  pacote manifest <spec>
    Fetch a manifest and print to stdout

  pacote packument <spec>
    Fetch a full packument and print to stdout

  pacote tarball <spec> [<filename>]
    Fetch a package tarball and save to <filename>
    If <filename> is missing or '-', the tarball will be streamed to stdout


  pacote extract <spec> <folder>
    Extract a package to the destination folder


Configuration values all match the names of configs passed to npm, or
options passed to Pacote

             (This is the default if stdout is not a TTY
)
  --help -h  Print this helpful text

```

## API

The `spec` refers to any kind of package specifier that npm can install

If you can pass it to the npm CLI, you can pass it to pacote
)

See below for valid `opts` values
resolve(spec, opts)` Resolve a specifier like `foo@latest` or
  `github:user/project` all the way to a tarball url, tarball file, or git
  repo with commit hash


* `pacote
json` file, plus a bit of metadata)
  Returns a Promise that
  resolves to the manifest object


* `pacote
  See below for more on manifests and packuments
tarball(spec, opts)`  Get a package tarball data as a buffer in
  memory
  Returns a Promise that resolves to the tarball data Buffer, with
  `from`, `resolved`, and `integrity` fields attached


* `pacote
  Returns a Promise that resolves to
  `{from,integrity,resolved}` of the fetched tarball


* `pacote
stream(spec, streamHandler, opts)`  Fetch a tarball and
  make the stream available to the `streamHandler` function


    The `streamHandler` function MUST return a Promise that resolves when
    the stream (and all associated work) is ended, or rejects if the stream
    has an error


    The `streamHandler` function MAY be called multiple times, as Pacote
    retries requests in some scenarios, such as cache corruption or
    retriable network failures


### Options

Options are passed to
[`npm-registry-fetch`](http://npm
im/cacache), so in addition to these, anything for
those modules can be given to pacote as well


Options object is cloned, and mutated along the way to add integrity,
resolved, and other properties, as they are determined
  Passed to
  [`cacache`](http://npm
  Defaults to the same cache directory
  that npm will use by default, based on platform and environment

* `where` Base folder for resolving relative `file:` dependencies

* `resolved` Shortcut for looking up resolved values
  Should be specified
  if known

  Defaults to `0o22`
  Defaults to
  `0o666`
  See ""Extracted File Modes"" below

* `dmode` Minimum permission mode for extracted directories
  See ""Extracted File Modes"" below
  Default `null`

* `registry` The npm registry to use by default

* `fullMetadata` Fetch the full metadata from the registry for packuments,
  including information not strictly required for installation (author,
  description, etc
)  Defaults to `true` when `before` is set, since the
  version publish time is part of the extended packument metadata

* `packumentCache` For registry packuments only, you may provide a `Map`
  object which will be used to cache packument requests between pacote
  calls
  This allows you to easily avoid hitting the registry multiple
  times (even just to validate the cache) for a given packument, since it
  is unlikely to change in the span of a single command

* `silent` A boolean that determines whether the banner is displayed
  when calling `@npmcli/run-script`
  There must be a
    configured `_keys` entry in the config that is scoped to the
    registry the manifest is being fetched from

* `verifyAttestations` A boolean that will make pacote verify Sigstore
    attestations, if present

* `tufCache` Where to store metadata/target files when retrieving the package
  attestation key material via TUF
 Defaults to the same cache directory that
  npm will use by default, based on platform and environment


### Advanced API

Each different type of fetcher is exposed for more advanced usage such as
using helper methods from this classes:

* `DirFetcher`
* `FileFetcher`
* `GitFetcher`
* `RegistryFetcher`
* `RemoteFetcher`

## Extracted File Modes

Files are extracted with a mode matching the following formula:

```
( (tarball entry mode value) | (minimum mode option) ) ~ (umask)
```

This is in order to prevent unreadable files or unlistable directories from
cluttering a project's `node_modules` folder, even if the package tarball
specifies that the file should be inaccessible


It also prevents files from being group- or world-writable without explicit
opt-in by the user, because all file and directory modes are masked against
the `umask` value


So, a file which is `0o771` in the tarball, using the default `fmode` of
`0o666` and `umask` of `0o22`, will result in a file mode of `0o755`:

```
(0o771 | 0o666) => 0o777
(0o777 ~ 0o22) => 0o755
```

In almost every case, the defaults are appropriate
  To respect exactly
what is in the package tarball (even if this makes an unusable system), set
both `dmode` and `fmode` options to `0`
  Otherwise, the `umask` config
should be used in most cases where file mode modifications are required,
and this functions more or less the same as the `umask` value in most Unix
systems


## Extracted File Ownership

When running as `root` on Unix systems, all extracted files and folders
will have their owning `uid` and `gid` values set to match the ownership
of the containing folder


This prevents `root`-owned files showing up in a project's `node_modules`
folder when a user runs `sudo npm install`


## Manifests

A `manifest` is similar to a `package
json` file
  However, it has a few
pieces of extra metadata, and sometimes lacks metadata that is inessential
to package installation


In addition to the common `package
_resolved` The tarball url or file path where the package
  artifact can be found

* `manifest

* `manifest
_integrity` The integrity value for the package artifact

* `manifest
_id` The canonical spec of this package version: name@version

* `manifest
dist` Registry manifests (those included in a packument) have a
  `dist` object
  Only `tarball` is required, though at least one of
  `shasum` or `integrity` is almost always present


    * `tarball` The url to the associated package artifact
  (Copied by
      Pacote to `manifest
_resolved`
)
    * `integrity` The integrity SRI string for the artifact
  This may not
      be present for older packages on the npm registry
  (Copied by Pacote
      to `manifest
_integrity`
  Hexadecimal-encoded sha1 hash

      (Converted to an SRI string and copied by Pacote to
      `manifest
_integrity` when `dist
integrity` is not present
)
    * `fileCount` Number of files in the tarball

    * `signatures` Signatures of the shasum
npmjs


When a packument is fetched with `accept:
application/vnd
install-v1+json` in the HTTP headers, only the most
minimum necessary metadata is returned


For Pacote's purposes, the following fields are relevant:

* `versions` An object where each key is a version, and each value is the
  manifest for that version
  This is how
  `foo@latest` gets turned into `foo@1
2
3`

* `time` In the full packument, an object mapping version numbers to
  publication times, for the `opts


Pacote adds the following field, regardless of the accept header:

* `_contentLength` The size of the packument




<!-- This file is automatically added by @npmcli/template-oss


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE







# Blue Oak Model License

Version 1

You must not do anything with this software that triggers
a rule that you cannot or will not follow


## Copyright

Each contributor licenses you to do everything with this
software that would otherwise infringe that contributor's
copyright in it


## Notices

You must ensure that everyone who gets a copy of
any part of this software from you, with or without
changes, also gets the text of this license or a link to
<https://blueoakcouncil
org/license/1


## Excuse

If anyone notifies you in writing that you have not
complied with [Notices](#notices), you can keep your
license by taking all practical steps to comply within 30
days after the notice


## Patent

Each contributor licenses you to do everything with this
software that would otherwise infringe any patent claims
they can license or become able to license


## No Liability

***As far as the law allows, this software comes as is,
without any warranty or condition, and no contributor
will be liable to anyone for any damages related to this
software or this license, under any kind of legal claim
***




















# QRCode Terminal Edition [![Build Status][travis-ci-img]][travis-ci-url]

> Going where no QRCode has gone before


![Basic Example][basic-example-img]

# Node Library

## Install

Can be installed with:

    $ npm install qrcode-terminal

and used:

    var qrcode = require('qrcode-terminal');

## Usage

To display some data to the terminal just call:

    qrcode
generate('This will be a QRCode, eh!');

You can even specify the error level (default is 'L'):
    
    qrcode
setErrorLevel('Q');
    qrcode
com', function (qrcode) {
        console
log(qrcode);
    });

If you want to display small output, provide `opts` with `small`:

    qrcode
generate('This will be a small QRCode, eh!', {small: true});

    qrcode
log(qrcode)
    });

# Command-Line

## Install

    $ npm install -g qrcode-terminal

## Usage

    $ qrcode-terminal --help
    $ qrcode-terminal 'http://github
com'
    $ echo 'http://github


# Developing

To setup the development envrionment run `npm install`

To run tests run `npm test`

# Contributers

    Gord Tanner <gtanner@gmail
ca>

[travis-ci-img]: https://travis-ci
com/gtanner/qrcode-terminal/master/example/basic
com/soldair/node-qrcode


























semver(1) -- The semantic versioner for npm
===========================================

## Install

```bash
npm install semver
````

## Usage

As a node module:

```js
const semver = require('semver')

semver
valid('1
3') // '1
2
valid('a
b
2
3   ') // '1
2
3', '1
x || >=2
5
0 || 5
0
0 - 7
2
3') // true
semver
gt('1
2
8
7') // true
semver
minVersion('>=1
0
0'
semver
coerce('v2')) // '2
0
coerce('42
7


```js
// load the whole API at once in a single object
const semver = require('semver')

// or just load the bits you need
// all of them listed here, just pick and choose what you want

// classes
const SemVer = require('semver/classes/semver')
const Comparator = require('semver/classes/comparator')
const Range = require('semver/classes/range')

// functions for working with versions
const semverParse = require('semver/functions/parse')
const semverValid = require('semver/functions/valid')
const semverClean = require('semver/functions/clean')
const semverInc = require('semver/functions/inc')
const semverDiff = require('semver/functions/diff')
const semverMajor = require('semver/functions/major')
const semverMinor = require('semver/functions/minor')
const semverPatch = require('semver/functions/patch')
const semverPrerelease = require('semver/functions/prerelease')
const semverCompare = require('semver/functions/compare')
const semverRcompare = require('semver/functions/rcompare')
const semverCompareLoose = require('semver/functions/compare-loose')
const semverCompareBuild = require('semver/functions/compare-build')
const semverSort = require('semver/functions/sort')
const semverRsort = require('semver/functions/rsort')

// low-level comparators between versions
const semverGt = require('semver/functions/gt')
const semverLt = require('semver/functions/lt')
const semverEq = require('semver/functions/eq')
const semverNeq = require('semver/functions/neq')
const semverGte = require('semver/functions/gte')
const semverLte = require('semver/functions/lte')
const semverCmp = require('semver/functions/cmp')
const semverCoerce = require('semver/functions/coerce')

// working with ranges
const semverSatisfies = require('semver/functions/satisfies')
const semverMaxSatisfying = require('semver/ranges/max-satisfying')
const semverMinSatisfying = require('semver/ranges/min-satisfying')
const semverToComparators = require('semver/ranges/to-comparators')
const semverMinVersion = require('semver/ranges/min-version')
const semverValidRange = require('semver/ranges/valid')
const semverOutside = require('semver/ranges/outside')
const semverGtr = require('semver/ranges/gtr')
const semverLtr = require('semver/ranges/ltr')
const semverIntersects = require('semver/ranges/intersects')
const simplifyRange = require('semver/ranges/simplify')
const rangeSubset = require('semver/ranges/subset')
```

As a command-line utility:

```
$ semver -h

A JavaScript implementation of the https://semver

]]
Prints valid versions sorted by SemVer precedence

Options:
-r --range <range>
        Print versions that match the specified range


-i --increment [<level>]
        Increment a version by the specified level
  Level can
        be one of: major, minor, patch, premajor, preminor,
        prepatch, or prerelease

        Only one version may be specified


-p --include-prerelease
        Always include prerelease versions in range matching

-c --coerce
        Coerce a string into SemVer if possible
        (does not imply --loose)

--rtl
        Coerce version strings right to left

--ltr
        Coerce version strings left to right (default)

Program exits successfully if any valid version satisfies
all supplied ranges, and prints all satisfying versions

```

## Versions

A ""version"" is described by the `v2
0
org/>
  If no operator is specified, then equality is assumed,
  so this operator is optional, but MAY be included


For example, the comparator `>=1
2
5
3`, and `1
3
9`, but not the versions `1
6`
or `1
0
0` and
would match the versions `2
0
0` and `3
0`, but not the versions
`1
0
0`


A range is composed of one or more comparator sets, joined by `||`
  A
version matches a range if and only if every comparator in at least
one of the `||`-separated comparator sets is satisfied by the version
2
7 <1
0` would match the versions
`1
7`, `1
8`, and `1
6`, `1
3
0`


The range `1
7 || >=1
0` would match the versions `1
7`,
`1
2
9`, and `1
4
2
8` or `2
0


### Prerelease Tags

If a version has a prerelease tag (for example, `1
2
3`) then
it will only be allowed to satisfy comparator sets if at least one
comparator with the same `[major, minor, patch]` tuple also has a
prerelease tag


For example, the range `>1
3-alpha
3` would be allowed to match the
version `1
3-alpha
4
5-alpha
4
3-alpha
3` according to the SemVer sort rules
  The version
range only accepts prerelease tags on the `1
2
  The
version `3
4
4
5` is greater than `1
2
7`

Therefore, by default, they are excluded from range matching
semantics
  By including a prerelease tag in the range,
the user is indicating that they are aware of the risk


Note that this behavior can be suppressed (treating all prerelease
versions as if they were normal versions, for the purpose of range
matching) by setting the `includePrerelease` flag on the options
object to any
[functions](https://github
com/npm/node-semver#functions) that do
range matching
inc('1
3', 'prerelease', 'beta')
// '1
2
4-beta
0'
```

command-line example:

```bash
$ semver 1
2
0
```

Which then can be used to increment further:

```bash
$ semver 1
2
4-beta
1
```

#### Prerelease Identifier Base

The method `

Set to `false` to omit the prerelease number altogether


```javascript
semver
inc('1
2
2
4-beta
3', 'prerelease', 'beta', false)
// '1
2
4-beta'
```

command-line example:

```bash
$ semver 1
2
4-beta
1
```

```bash
$ semver 1
3 -i prerelease --preid beta -n false
1
4-beta
```

### Advanced Range Syntax

Advanced range syntax desugars to primitive comparators in
deterministic ways
Z - A
B
C`

Specifies an inclusive set


* `1
2
3
4` := `>=1
2
3 <=2


* `1
3
4` := `>=1


* `1
2
3 - 2
3` := `>=1
4
2
3 - 2` := `>=1
2
3 <3
0
x` `1
X` `1
2
*` `*`

Any of `X`, `x`, or `*` may be used to ""stand in"" for one of the
numeric values in the `[major, minor, patch]` tuple


* `*` := `>=0
0
0` (Any non-prerelease version satisfies, unless
  `includePrerelease` is specified, in which case any version at all
  satisfies)
* `1
x` := `>=1
0
0
0-0` (Matching major version)
* `1
0-0` (Matching major and minor versions)

A partial version range is treated as an X-Range, so the special
character is in fact optional


* `""""` (empty string) := `*` := `>=0
x
0
0
0-0`
* `1
2` := `1
0 <1
2` `~1`

Allows patch-level changes if a minor version is specified on the
comparator
  Allows minor-level changes if not


* `~1
2
2
(2+1)
0` := `>=1
3 <1
0-0`
* `~1
2` := `>=1
2
0 <1
2
0 <1
3
2
x`)
* `~1` := `>=1
0
0` := `>=1
0
0 <2
0
0-0` (Same as `1
x`)
* `~0
2
3` := `>=0
2
(2+1)
0` := `>=0
0-0`
* `~0
2` := `>=0
0 <0
(2+1)
0` := `>=0
2
0
0 <(0+1)
0 <1
0
0-0` (Same as `0
x`)
* `~1
3-beta
2` := `>=1
3-beta
3` version will be allowed, if they are greater than or
  equal to `beta
2`
  So, `1
3-beta
2` would not, because it is a prerelease of a
  different `[major, minor, patch]` tuple
2
3` `^0
2
5` `^0
0` and above, patch updates for
versions `0
X >=0


Many authors treat a `0
x` version as if the `x` were the major
""breaking-change"" indicator


Caret ranges are ideal when an author may make breaking changes
between `0
2
0` releases, which is a common practice

However, it presumes that there will *not* be breaking changes between
`0
4` and `0
2
2
0-0`
* `^0
2
2
3 <0
3
0-0`
* `^0
0
4-0`
* `^1
3-beta
2` := `>=1
2
3-beta
2`
  So, `1
2
3-beta
4` would be allowed, but
  `1
2
2` would not, because it is a prerelease of a
  different `[major, minor, patch]` tuple
0
0
0
4-0`  Note that prereleases in the
  `0
0
  So, `0
3-pr
2` would be allowed


When parsing caret ranges, a missing `patch` value desugars to the
number `0`, but will allow flexibility within that value, even if the
major and minor versions are both `0`
2
0 <2
0
0-0`
* `^0
0
0 <0
0-0`
* `^0
0` := `>=0
0 <0


* `^1
x` := `>=1
0
0-0`
* `^0
x` := `>=0
0
0 <1
0
' xr ( '
' part ) *
part       ::= nr | [-0-9A-Za-z]+
```

## Functions

All methods and classes take a final `options` object argument

- `includePrerelease`  Set to suppress the [default
  behavior](https://github
com/npm/node-semver#prerelease-tags) of
  excluding prerelease tagged versions from ranges unless they are
  explicitly opted into

* `inc(v, release)`: Return the version incremented by the release
  type (`major`,   `premajor`, `minor`, `preminor`, `patch`,
  `prepatch`, or `prerelease`), or null if it's not valid
  * `premajor` in one call will bump the version up to the next major
    version and down to a prerelease of that major version

    `preminor`, and `prepatch` work the same way

  * If called from a non-prerelease version, the `prerelease` will work the
    same as `prepatch`
 It increments the patch version, then makes a
    prerelease
 If the input version is already a prerelease it simply
    increments it

* `prerelease(v)`: Returns an array of prerelease components, or null
  if none exist
2
1') -> ['alpha', 1]`
* `major(v)`: Return the major version number

* `minor(v)`: Return the minor version number

* `patch(v)`: Return the patch version number

* `intersects(r1, r2, loose)`: Return true if the two supplied ranges
  or comparators intersect

* `parse(v)`: Attempt to parse a string as a semantic version, returning either
  a `SemVer` object or `null`


### Comparison

* `gt(v1, v2)`: `v1 > v2`
* `gte(v1, v2)`: `v1 >= v2`
* `lt(v1, v2)`: `v1 < v2`
* `lte(v1, v2)`: `v1 <= v2`
* `eq(v1, v2)`: `v1 == v2` This is true if they're logically equivalent,
  even if they're not the exact same string

* `neq(v1, v2)`: `v1 != v2` The opposite of `eq`
  `""===""` and `""!==""` do simple
  string comparison, but are included for completeness
  Throws if an
  invalid comparison string is provided

* `compare(v1, v2)`: Return `0` if `v1 == v2`, or `1` if `v1` is greater, or `-1` if
  `v2` is greater
  Sorts in ascending order if passed to `Array
  Sorts an array of versions
  in descending order when passed to `Array
sort()`
  Sorts in ascending order if passed to `Array
sort()`

  `v2` is greater


### Comparators

* `intersects(comparator)`: Return true if the comparators intersect

### Ranges

* `validRange(range)`: Return the valid range or null if it's not valid
* `satisfies(version, range)`: Return true if the version satisfies the
  range

* `maxSatisfying(versions, range)`: Return the highest version in the list
  that satisfies the range, or `null` if none of them do

* `minSatisfying(versions, range)`: Return the lowest version in the list
  that satisfies the range, or `null` if none of them do

* `minVersion(range)`: Return the lowest version that can possibly match
  the given range

* `ltr(version, range)`: Return `true` if version is less than all the
  versions possible in the range

* `outside(version, range, hilo)`: Return true if the version is outside
  the bounds of the range in either the high or low direction
  The
  `hilo` argument must be either the string `'>'` or `'<'`
)
* `intersects(range)`: Return true if any of the ranges comparators intersect
* `simplifyRange(versions, range)`: Return a ""simplified"" range that
  matches the same items in `versions` list as the range specified
  This is useful when
  generating ranges by joining together multiple versions with `||`
  programmatically, to provide the user with something a bit more
  ergonomic


Note that, since ranges may be non-contiguous, a version might not be
greater than a range, less than a range, *or* satisfy a range!  For
example, the range `1
9 || >2
0
0` would have a hole from `1
2
9`
until `2
0
0`, so the version `1
10` would not be greater than the
range (because `2
0
2


### Coercion

* `coerce(version, options)`: Coerces a string to semver if possible

This aims to provide a very forgiving translation of a non-semver string to
semver
g
, `1`,
`1
2`, `1
2
  Longer
versions are simply truncated (`4
3
9
3`)
  All
surrounding text is simply ignored (`v3
4 replaces v3
0`)
  Only text which lacks digits will fail coercion (`version one`
is not valid)
  The maximum  length for any semver component considered for
coercion is 16 characters; longer components will be ignored
(`10000000000000000
  The maximum value for any
semver component is `Number
7
  For example, `1
3
3
0`
3/4` will return `4
includePrerelease` flag is set, then the `coerce` result will contain
prerelease and build parts of a version
2
3
1+rev
2`
will preserve prerelease `rc
1` and build `rev


### Clean

* `clean(version)`: Clean a string to be a valid semver if possible

This will return a cleaned and trimmed semver version
 If the provided
version is not valid a null will be returned
 This does not work for
ranges

* `s
clean(' = v 2
5foo')`: `null`
* `s
5foo', { loose: true })`: `'2
5-foo'`
* `s
1
5-foo')`: `null`
* `s
clean(' = v 2
1
5-foo', { loose: true })`: `'2
5-foo'`
* `s
clean('=v2
1
1
5'`
* `s
1
1
5'`
* `s
clean('      2
1
5'`
* `s
clean('~1
0
0')`: `null`

## Constants

As a convenience, helper constants are exported to provide information about what `node-semver` supports:

### `RELEASE_TYPES`

- major
- premajor
- minor
- preminor
- patch
- prepatch
- prerelease

```
const semver = require('semver');

if (semver
includes(arbitraryUserInput)) {
  console
log('This is a valid release type!');
} else {
  console
0

```
const semver = require('semver');

console
SEMVER_SPEC_VERSION);
```

## Exported Modules

<!--
TODO: Make sure that all of these items are documented (classes aren't,
eg), and then pull the module name into the documentation for that specific
thing

-->

You may pull in just the part of this semver utility that you need, if you
are sensitive to packing and tree-shaking concerns


The following modules are available:

* `require('semver')`
* `require('semver/classes')`
* `require('semver/classes/comparator')`
* `require('semver/classes/range')`
* `require('semver/classes/semver')`
* `require('semver/functions/clean')`
* `require('semver/functions/cmp')`
* `require('semver/functions/coerce')`
* `require('semver/functions/compare')`
* `require('semver/functions/compare-build')`
* `require('semver/functions/compare-loose')`
* `require('semver/functions/diff')`
* `require('semver/functions/eq')`
* `require('semver/functions/gt')`
* `require('semver/functions/gte')`
* `require('semver/functions/inc')`
* `require('semver/functions/lt')`
* `require('semver/functions/lte')`
* `require('semver/functions/major')`
* `require('semver/functions/minor')`
* `require('semver/functions/neq')`
* `require('semver/functions/parse')`
* `require('semver/functions/patch')`
* `require('semver/functions/prerelease')`
* `require('semver/functions/rcompare')`
* `require('semver/functions/rsort')`
* `require('semver/functions/satisfies')`
* `require('semver/functions/sort')`
* `require('semver/functions/valid')`
* `require('semver/ranges/gtr')`
* `require('semver/ranges/intersects')`
* `require('semver/ranges/ltr')`
* `require('semver/ranges/max-satisfying')`
* `require('semver/ranges/min-satisfying')`
* `require('semver/ranges/min-version')`
* `require('semver/ranges/outside')`
* `require('semver/ranges/to-comparators')`
* `require('semver/ranges/valid')`


Copyright (c) 2016, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS
 IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE








The ISC License

Copyright (c) 2015-2023 Benjamin Coe, Isaac Z
 IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE












# socks examples

## TypeScript Examples

[Connect command](typescript/connectExample
md)

## JavaScript Examples

[Connect command](javascript/connectExample
md)

[Associate command](javascript/associateExample
 From here, any SOCKS UDP frame packets sent to this special UDP port on the Proxy server will be forwarded to the desired destination, and any responses will be forwarded back to the origin client (you)
 Client <-(port)- Proxy (Tells the origin client which port it opened and is accepting UDP frame packets on)

At this point the proxy is accepting UDP frames on the specified port
 Client --(udp frame) -> Proxy -> Destination (The origin client sends a UDP frame to the proxy on the UDP port, and the proxy then forwards it to the destination specified in the UDP frame
)
4
 Client <--(udp frame) <-- Proxy <-- Destination (The destination client responds to the udp packet sent in #3)

## Usage

The 'associate' command can only be used by creating a new SocksClient instance and listening for the 'established' event
parseUDPFrame() create and parse these special UDP packets


```typescript
const dgram = require('dgram');
const SocksClient = require('socks')
SocksClient;

// Create a local UDP socket for sending/receiving packets to/from the proxy
createSocket('udp4');
udpSocket

udpSocket
on('message', (message, rinfo) => {
  console
log(SocksClient
8
8', port: 53 }, // The remote host that replied with a UDP packet
    data: <Buffer 74 65 73 74 0a> // The data
  }
  */
});

const options = {
  proxy: {
    host: '104
131
124
203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will be sending UDP frames to the newly opened UDP port on the server
0
0
0',
    port: 0
  },

  command: 'associate'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new UDP port for UDP relaying

client
on('established', info => {
  console
log(info);
  /*
  {
    socket: <Socket 

131
124
203',
      port: 58232
    }
  }
  */

  // Send a udp frame to 8
8
8
8 on port 53 through the proxy

  const packet = SocksClient
createUDPFrame({
    remoteHost: { host: '8
8
8
8', port: 53 },
    data: Buffer

  });

  // Send packet

  udpSocket
port, info
remoteHost
host);
});

// SOCKS proxy failed to bind

client
on('error', () => {
  // Handle errors
});
```

# socks examples

## Example for SOCKS 'bind' command

The bind command tells the SOCKS proxy server to bind and listen on a new TCP port for an incoming connection
 It communicates the newly opened port back to the origin client
 Once a incoming connection is accepted by the SOCKS proxy server it then communicates the remote host that connected to the SOCKS proxy back through the same initial connection via the origin client


**Connection Steps**

1
 Client -(bind)-> Proxy    (Tells the proxy to bind to a new port)
2
 Client <-(port)- Proxy    (Tells the origin client which port it opened)
3
 Client <--(client2's host info)  (Proxy tells the origin client who connected to it)
5
 Original connection to the proxy is now a full TCP stream between client (you) and client2
 Client <--> Proxy <--> Client2


## Usage

The 'bind' command can only be used by creating a new SocksClient instance and listening for 'bound' and 'established' events
131
124
203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will connect to the SOCKS proxy server on the newly bound port

  // Most SOCKS servers accept 0
0
0
0
0

client


      host: '104
131
124
203',
      port: 49928
    }
  }
  */
});

// This event is fired when the SOCKS server has accepted an incoming connection on the newly bound port

client
on('established', (info) => {
  console
log(info);
  /*
  {
    socket: <Socket 
3
4',
      port: 58232
    }
  }
  */

  // At this point info
socket is a regular net
log(info
socket);
  // <Socket 


>  (this is a raw net
Socket that is established to the destination host through the given proxy servers)
});

// SOCKS proxy failed to bind
 This establishes a direct connection to a destination host through a proxy server
 The destination host only has knowledge of the proxy server connecting to it and does not know about the origin client (you)


**Origin Client (you) <-> Proxy Server <-> Destination Server**

In this example, we are connecting to a web server on port 80, and sending a very basic HTTP request to receive a response
createConnection() factory function as well as by creating a SocksClient instance and using event handlers


### Using createConnection with async/await

Since SocksClient


```typescript
const SocksClient = require('socks')
131
com', // host names are supported with SOCKS v4a and SOCKS v5
socket);
    // <Socket 

socket
write('GET /json HTTP/1
1\nHost: ip-api
com\n\n');
    info
log(data
toString()); // ip-api
124
203) is connected to it and not the origin client (you)

      /*
        HTTP/1
8326,
          ""lon"":-74
131
203"",
          ""region"":""NJ"",
          ""regionName"":""New Jersey"",
          ""status"":""success"",
          ""timezone"":""America/New_York"",
          ""zip"":""07014""
        }
      */
  } catch (err) {
    // Handle errors
  }
}

start();
```

### Using createConnection with Promises

```typescript
const SocksClient = require('socks')
SocksClient;

const options  = {
  proxy: {
    ipaddress: '104
131
124
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api

    port: 80
  },

  command: 'connect'
};

SocksClient
then(info => {
  console
log(info
socket);
  // <Socket 


socket
write('GET /json HTTP/1
socket
on('data', (data) => {
    console
log(data
toString()); // ip-api
com sees that the last proxy (104
131
124
203) is connected to it and not the origin client (you)
8326,
        ""lon"":-74
1307,
        ""org"":""Digital Ocean"",
        ""query"":""104
131
124
203"",
        ""region"":""NJ"",
        ""regionName"":""New Jersey"",
        ""status"":""success"",
        ""timezone"":""America/New_York"",
        ""zip"":""07014""
      }
    */
})

createConnection() optionally accepts a callback function as a second parameter
 (tldr: Do not mix callbacks and Promises)
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api

    port: 80
  },

  command: 'connect'
};

SocksClient
createConnection(options, (err, info) => {
  if (err) {
    // handle errors
  } else {
    console
socket);
    // <Socket 
>  (this is a raw net
socket
write('GET /json HTTP/1
1\nHost: ip-api
on('data', (data) => {
      console
log(data
toString()); // ip-api
131
124
203) is connected to it and not the origin client (you)

      /*
        HTTP/1
1 200 OK
        Access-Control-Allow-Origin: *
        Content-Type: application/json; charset=utf-8
        Date: Sun, 24 Dec 2017 03:47:51 GMT
        Content-Length: 300

        {
          ""as"":""AS14061 Digital Ocean, Inc
124
203"",
          ""region"":""NJ"",
          ""regionName"":""New Jersey"",
          ""status"":""success"",
          ""timezone"":""America/New_York"",
          ""zip"":""07014""
        }
      */
  }
})
```

### Using event handlers

SocksClient also supports instance creation of a SocksClient
 This allows for event based flow control
SocksClient;

const options  = {
  proxy: {
    ipaddress: '104
131
124
com', // host names are supported with SOCKS v4a and SOCKS v5

    port: 80
  },

  command: 'connect'
};

const client = new SocksClient(options);

client
log(info
socket);
  // <Socket 


>  (this is a raw net
Socket that is established to the destination host through the given proxy servers)

  info
1\nHost: ip-api
socket
toString()); // ip-api
131
124
203) is connected to it and not the origin client (you)

    /*
      HTTP/1
1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        ""as"":""AS14061 Digital Ocean, Inc
"",
        ""city"":""Clifton"",
        ""country"":""United States"",
        ""countryCode"":""US"",
        ""isp"":""Digital Ocean"",
        ""lat"":40
131
124

client
on('error', () => {
  // Handle errors
});
```

# socks examples

## Example for SOCKS 'associate' command

The associate command tells the SOCKS proxy server to establish a UDP relay
 From here, any SOCKS UDP frame packets sent to this special UDP port on the Proxy server will be forwarded to the desired destination, and any responses will be forwarded back to the origin client (you)


This can be used for things such as DNS queries, and other UDP communicates


**Connection Steps**

1
 Client -(associate)-> Proxy (Tells the proxy to create a UDP relay and bind on a new port)
2
 Client --(udp frame) -> Proxy -> Destination (The origin client sends a UDP frame to the proxy on the UDP port, and the proxy then forwards it to the destination specified in the UDP frame
 Client <--(udp frame) <-- Proxy <-- Destination (The destination client responds to the udp packet sent in #3)

## Usage

The 'associate' command can only be used by creating a new SocksClient instance and listening for the 'established' event
createUDPFrame() and SocksClient


```typescript
import * as dgram from 'dgram';
import { SocksClient, SocksClientOptions } from 'socks';

// Create a local UDP socket for sending/receiving packets to/from the proxy
createSocket('udp4');
udpSocket
bind();

// Listen for incoming UDP packets from the proxy server
parseUDPFrame(message));
  /*
  { frameNumber: 0,
    remoteHost: { host: '8
8
8
131
124
203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will be sending UDP frames to the newly opened UDP port on the server

  // Most SOCKS servers accept 0
0 as a wildcard address to accept UDP frames from any source
0
log(info);
  /*
  {
    socket: <Socket 
>,
    remoteHost: { // This is the remote port on the SOCKS proxy server to send UDP frame packets to

      host: '104
131
124
203',
      port: 58232
    }
  }
  */

  // Send a udp frame to 8

  const packet = SocksClient
8', port: 53 },
    data: Buffer

  });

  // Send packet
send(packet, info
remoteHost
port, info
remoteHost
connect();
```

# socks examples

## Example for SOCKS 'bind' command

The bind command tells the SOCKS proxy server to bind and listen on a new TCP port for an incoming connection
 Once a incoming connection is accepted by the SOCKS proxy server it then communicates the remote host that connected to the SOCKS proxy back through the same initial connection via the origin client
 Client -(bind)-> Proxy    (Tells the proxy to bind to a new port)
2
 Client <-(port)- Proxy    (Tells the origin client which port it opened)
3
 Client2 --> Proxy    (Other client connects to the proxy on this port)
4
 Client <--(client2's host info)  (Proxy tells the origin client who connected to it)
5
 Original connection to the proxy is now a full TCP stream between client (you) and client2

6
 Client <--> Proxy <--> Client2


## Usage

The 'bind' command can only be used by creating a new SocksClient instance and listening for 'bound' and 'established' events



```typescript
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    host: '104
124
0
0

  destination: {
    host: '0
0
0
0',
    port: 0
  },

  command: 'bind'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new port for incoming connections
on('bound', (info) => {
  console


      host: '104
131
124
203',
      port: 49928
    }
  }
  */
});

// This event is fired when the SOCKS server has accepted an incoming connection on the newly bound port
on('established', (info) => {
  console
log(info);
  /*
  {
    socket: <Socket 

>,
    remoteHost: { // This is the remote ip and port that connected to the SOCKS proxy on the newly bound port

      host: '1
2
3
Socket TCP connection between client and client2 (1
2
3
4) (the client which connected to the proxy on the newly bound port
)

  console
log(info
socket);
  // <Socket 

>  (this is a raw net
Socket that is established to the destination host through the given proxy servers)
});

// SOCKS proxy failed to bind
on('error', () => {
  // Handle errors
});

// Start connection
client
connect();
```
# socks examples

## Example for SOCKS 'connect' command

The connect command is the most common use-case for a SOCKS proxy
 This establishes a direct connection to a destination host through a proxy server
 The destination host only has knowledge of the proxy server connecting to it and does not know about the origin client (you)


The 'connect' command can be used via the SocksClient
createConnection() factory function as well as by creating a SocksClient instance and using event handlers


### Using createConnection with async/await

Since SocksClient
createConnection returns a Promise, we can easily use async/await for flow control


```typescript
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    host: '104
131
124
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api
com', // host names are supported with SOCKS v4a and SOCKS v5
log(info
Socket that is established to the destination host through the given proxy servers)

    info
socket
1\nHost: ip-api
log(data
131
124

      /*
        HTTP/1
"",
          ""city"":""Clifton"",
          ""country"":""United States"",
          ""countryCode"":""US"",
          ""isp"":""Digital Ocean"",
          ""lat"":40
131
124
131
124
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api
com', // host names are supported with SOCKS v4a and SOCKS v5
createConnection(options)

log(info
socket);
  // <Socket 

>  (this is a raw net
1\nHost: ip-api
socket
on('data', (data) => {
    console
toString()); // ip-api
com sees that the last proxy (104
131
124
203) is connected to it and not the origin client (you)
1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        ""as"":""AS14061 Digital Ocean, Inc
"",
        ""city"":""Clifton"",
        ""country"":""United States"",
        ""countryCode"":""US"",
        ""isp"":""Digital Ocean"",
        ""lat"":40
124
203"",
        ""region"":""NJ"",
        ""regionName"":""New Jersey"",
        ""status"":""success"",
        ""timezone"":""America/New_York"",
        ""zip"":""07014""
      }
    */
  });
})

catch(err => {
  // handle errors
});
```

### Using createConnection with callbacks

SocksClient


**Note:** If a callback function is provided, a Promise is still returned from the function, but the promise will always resolve regardless of if there was en error
124
com', // host names are supported with SOCKS v4a and SOCKS v5
createConnection(options, (err, info) => {
  if (err) {
    // handle errors
  } else {
    console
log(info

socket
write('GET /json HTTP/1
socket
on('data', (data) => {
      console
log(data
toString()); // ip-api
com sees that the last proxy (104
131
203) is connected to it and not the origin client (you)

      /*
        HTTP/1
1 200 OK
        Access-Control-Allow-Origin: *
        Content-Type: application/json; charset=utf-8
        Date: Sun, 24 Dec 2017 03:47:51 GMT
        Content-Length: 300

        {
          ""as"":""AS14061 Digital Ocean, Inc
"",
          ""city"":""Clifton"",
          ""country"":""United States"",
          ""countryCode"":""US"",
          ""isp"":""Digital Ocean"",
          ""lat"":40
8326,
          ""lon"":-74
131
203"",
          ""region"":""NJ"",
          ""regionName"":""New Jersey"",
          ""status"":""success"",
          ""timezone"":""America/New_York"",
          ""zip"":""07014""
        }
      */
    });
  }
})
```

### Using event handlers

SocksClient also supports instance creation of a SocksClient
 This allows for event based flow control
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api
com', // host names are supported with SOCKS v4a and SOCKS v5

    port: 80
  },

  command: 'connect'
};

const client = new SocksClient(options);

client
on('established', (info) => {
  console
socket);
  // <Socket 


Socket that is established to the destination host through the given proxy servers)

  info
socket
1\nHost: ip-api
socket
on('data', (data) => {
    console
log(data
toString()); // ip-api
131
124
203) is connected to it and not the origin client (you)

    /*
      HTTP/1
1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        ""as"":""AS14061 Digital Ocean, Inc
8326,
        ""lon"":-74
1307,
        ""org"":""Digital Ocean"",
        ""query"":""104
131

client
on('error', () => {
  // Handle errors
});

// Start connection
client
connect();
```


# Documentation

- [API Reference](https://github
com/JoshGlazebrook/socks#api-reference)

- [Code Examples](


### Notable breaking changes

- In an options object, the proxy 'command' is now required and does not default to 'connect'
resume() is no longer required

- In v2, only the 'connect' command is supported via the factory SocksClient
createConnection function
 (BIND and ASSOCIATE must be used with a SocksClient instance via event handlers)

- In v2, the factory SocksClient
createConnection function callback is called with a single object rather than separate socket and info object

- A SOCKS http/https agent is no longer bundled into the library


For informational purposes, here is the original getting started example from v1 converted to work with v2
101
com"",
        port: 80
    },
    command: 'connect'
};

Socks
log(err);
    else {
        socket
write(""GET / HTTP/1
1\nHost: google
on('data', function(data) {
            console
resume();

        // 569
        // <Buffer 48 54 54 50 2f 31 2e 31 20 33 30 31 20 4d 6f 76 65 64 20 50 65



    }
});
```

### After (v2)
```javascript
const SocksClient = require('socks')
SocksClient;

let options = {
    proxy: {
        ipaddress: ""202
108"",
        port: 1080,
        type: 5
    },
    destination: {
        host: ""google
log(err);
    else {
        result
socket
write(""GET / HTTP/1
com\n\n"");
        result
socket
on('data', function(data) {
            console
length);
            console
log(data);
        });

        // 569
        // <Buffer 48 54 54 50 2f 31 2e 31 20 33 30 31 20 4d 6f 76 65 64 20 50 65


    }
});
```











ISC License

Copyright 2021 (c) npm, Inc


Permission to use, copy, modify, and/or distribute this software for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE COPYRIGHT HOLDER DISCLAIMS
ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
























### Javascript porting of Markus Kuhn's wcwidth() implementation

The following explanation comes from the original C implementation:

This is an implementation of wcwidth() and wcswidth() (defined in
IEEE Std 1002


http://www
org/onlinepubs/007904975/functions/wcwidth
html
http://www
opengroup
org/onlinepubs/007904975/functions/wcswidth
 Interoperability between terminal-line
applications and (teletype-style) character terminals using the
UTF-8 encoding requires agreement on which character should advance
the cursor by how many cell positions

In all these cases, there is no ambiguity about which width a
terminal shall use
 For characters in the East Asian Ambiguous (A)
class, the width choice depends purely on a preference of backward
compatibility with either historic CJK or Western practice

Choosing single-width for these characters is easy to justify as
the appropriate long-term solution, as the CJK practice of
displaying these characters as double-width comes from historic
implementation simplicity (8-bit encoded characters were displayed
single-width and 16-bit ones double-width, even for Greek,
Cyrillic, etc
) and not any typographic considerations


Much less clear is the choice of width for the Not East Asian
(Neutral) class
 Existing practice does not dictate a width for any
of these characters
 It would nevertheless make sense
typographically to allocate two character cells to characters such
as for instance EM SPACE or VOLUME INTEGRAL, which cannot be
represented adequately with a single-width glyph
 The following
routines at present merely assign a single-cell width to all
neutral characters, in the interest of simplicity
 This is not
entirely satisfactory and should be reconsidered before
establishing a formal standard in this area
 At the moment, the
decision which Not East Asian (Neutral) characters should be
represented by double-width glyphs cannot yet be answered by
applying a simple rule from the Unicode database content
 Setting
up a proper standard for the behavior of UTF-8 character terminals
will require a careful analysis not only of each Unicode character,
but also of each presentation form, something the author of these
routines has avoided to do so far


http://www
unicode
org/unicode/reports/tr11/

Markus Kuhn -- 2007-05-26 (Unicode 5
 The author
disclaims all warranties with regard to this software


Latest version: http://www
cam
uk/~mgk25/ucs/wcwidth
c













# which

Like the unix `which` utility


Finds the first instance of a specified executable in the PATH
environment variable
  Does not cache the results, so `hash -r` is not
needed when the PATH changes


## USAGE

```javascript
const which = require('which')

// async usage
// rejects if not found
const resolved = await which('node')

// if nothrow option is used, returns null if not found
const resolvedOrNull = await which('node', { nothrow: true })

// sync usage
// throws if not found
const resolved = which
sync('node', { nothrow: true })

// Pass options to override the PATH and PATHEXT environment vars

await which('node', { path: someOtherPath, pathExt: somePathExt })
```

## CLI USAGE

Just like the BSD `which(1)` binary but using `node-which`


```
usage: node-which [-as] program 
com/npm/node-which/pull/67)

## OPTIONS

You may pass an options object as the second argument


- `path`: Use instead of the `PATH` environment variable
  Note that
  this means the function returns an array of strings instead of a
  single string





# npm - a JavaScript package manager

[![npm version](https://img
shields
io/npm/v/npm
im/npm)
[![license](https://img
shields
io/npm/l/npm
yml/badge
svg)](https://github
yml)
[![Benchmark Suite](https://github
com/npm/cli/actions/workflows/benchmark
yml/badge
com/npm/cli/actions/workflows/benchmark
yml)

### Requirements

One of the following versions of [Node
js](https://nodejs
org/en/download/) must be installed to run **`npm`**:

* `18
0`
* `20
5
0` or higher

### Installation

**`npm`** comes bundled with [**`node`**](https://nodejs
org/), & most third-party distributions, by default
org/en/download)

#### Direct Download

You can download & install **`npm`** directly from [**npmjs**
com](https://npmjs
com/) using our custom `install
sh` script:

```bash
curl -qL https://www
npmjs
com/install
sh | sh
```

#### Node Version Managers

If you're looking to manage multiple versions of **`Node
npmjs
com/npm/cli/issues) - Search or submit bugs against the CLI
* [**Roadmap**](https://github
com/npm/feedback) - Contribute ideas & discussion around the npm registry, website & CLI
* [**RFCs**](https://github
github
io/statusboard/) - See the health of all our maintained OSS projects in one view
* [**Events Calendar**](https://calendar
google
com/calendar/u/0/embed?src=npmjs
com_oonluqt8oftrt0vmgrfbg6q6go@group
calendar
google
npmjs
com) or [registry](https://registry
npmjs
npmjs
com/support)

### Acknowledgments

* `npm` is configured to use the **npm Public Registry** at [https://registry
npmjs
org) by default; Usage of this registry is subject to **Terms of Use** available at [https://npmjs
 You can read more about configuring third-party registries [here](https://docs
com/cli/v7/using-npm/registry)

### FAQ on Branding

#### Is it ""npm"" or ""NPM"" or ""Npm""?

**`npm`** should never be capitalized unless it is being displayed in a location that is customarily all-capitals (ex


#### Is ""npm"" an acronym for ""Node Package Manager""?

Contrary to popular belief, **`npm`** **is not** in fact an acronym for ""Node Package Manager""; It is a recursive bacronymic abbreviation for **""npm is not an acronym""** (if the project was named ""ninaa"", then it would be an acronym)
 The precursor to **`npm`** was actually a bash utility named **""pm""**, which was the shortform name of **""pkgmakeinst""** - a bash function that installed various things on various platforms
 If **`npm`** were to ever have been considered an acronym, it would be as ""node pm"" or, potentially ""new pm""","

# <img src=""
/icon
org/)

Corepack is a zero-runtime-dependency Node


</details>

<details><summary>Install Corepack from source</summary>

See [`CONTRIBUTING


</details>

## Usage

### When Building Packages

Just use your package managers as you usually would
 Check the relevant
  section for more details
 The hash is optional but strongly
recommended as a security practice
 Permitted values for the package manager are
`yarn`, `npm`, and `pnpm`
json` will be used to determine which file to
use in the archive)


```json
{
  ""packageManager"": ""yarn@https://registry
org/@yarnpkg/cli-dist/-/cli-dist-3


- Either you can use the network while building your container image, in which
  case you'll simply run `corepack pack` to make sure that your image
  includes the Last Known Good release for the specified package manager
 After that it'll just be a matter of running
  `corepack install -g --cache-only <path/to/corepack
 You
can use it to force an install to run with a given version, which can be useful
when looking for regressions


Note that those commands still check whether the local project is configured for
the given package manager (ie you won't be able to run `corepack yarn install`
on a project where the `packageManager` field references `pnpm`)
 name]`

| Option                | Description                             |
| --------------------- | --------------------------------------- |
| `--install-directory` | Add the shims to the specified location |

This command will detect where Corepack is installed and will create shims next
to it for each of the specified package managers (or all of them if the command
is called without parameters)


If the file system where the `corepack` binary is located is read-only, this
command will fail
 A workaround is to add the binaries as alias in your
shell configuration file (e
g
 in `~/
bash_aliases`):

```sh
alias yarn=""corepack yarn""
alias yarnpkg=""corepack yarnpkg""
alias pnpm=""corepack pnpm""
alias pnpx=""corepack pnpx""
alias npm=""corepack npm""
alias npx=""corepack npx""
```

On Windows PowerShell, you can add functions using the `$PROFILE` automatic
variable:

```powershell
echo ""function yarn { corepack yarn `$args }"" >> $PROFILE
echo ""function yarnpkg { corepack yarnpkg `$args }"" >> $PROFILE
echo ""function pnpm { corepack pnpm `$args }"" >> $PROFILE
echo ""function pnpx { corepack pnpx `$args }"" >> $PROFILE
echo ""function npm { corepack npm `$args }"" >> $PROFILE
echo ""function npx { corepack npx `$args }"" >> $PROFILE
```

### `corepack disable [

 name]`

| Option                | Description                                |
| --------------------- | ------------------------------------------ |
| `--install-directory` | Remove the shims to the specified location |

This command will detect where Node


### `corepack install`

Download and install the package manager configured in the local project


### `corepack install <-g,--global> [
 name[@<version>]]`

| Option                | Description                                |
| --------------------- | ------------------------------------------ |
| `--json `             | Print the output folder rather than logs   |
| `-o,--output `        | Path where to generate the archive         |

Download the selected package managers and store them inside a tarball
suitable for use with `corepack install -g`


### `corepack use <name[@<version>]>`

When run, this command will retrieve the latest release matching the provided
descriptor, assign it to the project's package


### `corepack up`

Retrieve the latest available version for the current major release line of
the package manager used in the local project, and update the project to use
it
 By default, when Corepack is called
  explicitly (e
 `corepack pnpm …`), it is set to `0`; when Corepack is called
  implicitely (e
g


- `COREPACK_ENABLE_STRICT` can be set to `0` to prevent Corepack from throwing
  error if the package manager does not correspond to the one defined for the
  current project


- `COREPACK_NPM_REGISTRY` sets the registry base url used when retrieving
  package managers from npm
 Default value is `https://registry
npmjs
 If you want to send an
  empty password, explicitly set `COREPACK_NPM_PASSWORD` to an empty string


## Troubleshooting

### Networking

There are a wide variety of networking issues that can occur while running `corepack` commands
 Things to check:

- Make sure your network connection is active
/CONTRIBUTING


## License (MIT)

See [`LICENSE


### Description

Used to set access controls on private packages


* public / restricted (deprecated):
  Set a package to be either publicly accessible or restricted


* 2fa-required / 2fa-not-required (deprecated):
  Configure whether a package requires that anyone publishing it have two-factor
  authentication enabled on their account


* ls-packages (deprecated):
  Show all of the packages a user or a team is able to access, along with the
  access level, except for read-only public packages (it won't print the whole
  registry listing)

* ls-collaborators (deprecated):
  Show all of the access privileges for a package
 Will only show permissions
  for packages to which you have at least read access


You must have privileges to set the access of a package:

* You are an owner of an unscoped or scoped package

* You have been given read-write privileges for a package, either as a member
  of a team or directly as an owner

` option to specify it on
the command line


### Configuration

#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* In `npm pkg set` it enables parsing set values with JSON
json`




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator




#### `registry`

* Default: ""https://registry
 If no registry is specified, the default registry
will be used (see [`registry`](/using-npm/registry))


When using `legacy` for your `auth-type`, the username, password, and
email are read in from prompts


### Configuration

#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry


Useful when logging in to or out of a private registry:

```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry
com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

This will cause `@mycorp` to be mapped to the registry for future
installation of packages specified according to the pattern
`@mycorp/package`


Note that some vulnerabilities cannot be fixed automatically and will
require manual intervention or review


By default, the audit command will exit with a non-zero code if any
vulnerability is found
 Please note this often
means updating npm beyond the version that ships with Node
 Signatures are provided in the package's `packument` in each published version within the `dist` object:

```json
""dist"":{
  ""
omitted

"",
  ""signatures"": [{
    ""keyid"": ""SHA256:{{SHA256_PUBLIC_KEY}}"",
    ""sig"": ""a312b9c3cb4a1b693e8ebac5ee1ca9cc01f2661c14391917dcb111517f72370809
4


The `sig` is generated using the following template: `${package
dist
integrity}` and the `keyid` has to match one of the public signing keys below


2
wikipedia
org/wiki/ISO_8601): `YYYY-MM-DDTHH:mm:ss
npmjs
org/-/npm/v1/keys)
json file will be ignored
  Each advisory object contains
a `name`, `url`, `id`, `severity`, `vulnerable_versions`, and `title`


#### Quick Audit Endpoint

If the `Bulk Advisory` endpoint returns an error, or invalid data, npm will
attempt to load advisory data from the `Quick Audit` endpoint, which is
considerably slower in most cases


The full package tree as found in `package-lock


For example, if the package `foo` is vulnerable in the range `>=1

In this case, `bar` is a ""metavulnerability""


Once metavulnerabilities for a given package are calculated, they are
cached in the `~/




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`

* Allow deleting the cache folder with `npm cache clean`

* Allow unpublishing all versions of a published package

* Allow conflicting peerDependencies to be installed in the root project


If you don't have a clear idea of what you want to do, it is strongly
recommended that you do not use this option!



#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* In `npm pkg set` it enables parsing set values with JSON


For `update` this means only the `package-lock
json` will be updated,
instead of checking `node_modules` and downloading dependencies
json`, rather than the contents of `node_modules`


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command
 This option has no effect on
workspaces




### See Also

* [npm install](/commands/npm-install)
* [config](/using-npm/config)

---
title: npm-bugs
section: 1
description: Report bugs for a package in a web browser
---

### Synopsis

```bash
npm bugs [<pkgname> [<pkgname> 


Set to `false` to suppress browser behavior and instead print urls to
terminal
npmjs


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes
  This command is primarily
  intended to be used internally by npm, but it can provide a way to
  add data to the local installation cache explicitly


* clean:
  Delete all data out of the cache folder


* verify:
  Verify the contents of the cache folder, garbage collecting any unneeded
  data, and verifying the integrity of the cache index and all cached data
 This
directory is primarily accessed through `pacote`, the library responsible
for all package fetching as of npm@5


All data that passes through the cache is fully verified for integrity on
both insertion and extraction
 In order to access it, `cacache` must be
used directly


### A note about the cache's design

The npm cache is strictly a cache: it should not be relied upon as a
persistent and reliable data store for package data


### Configuration

#### `cache`

* Default: Windows: `%LocalAppData%\npm-cache`, Posix: `~/
npm`
* Type: Path

The location of npm's cache directory
json` or
  `npm-shrinkwrap
json`

* If dependencies in the package lock do not match those in `package

* If a `node_modules` is already present, it will be automatically removed
  before `npm ci` begins its install




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 Sets `--install-strategy=shallow`




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty
json` or `npm-shrinkwrap
 They are just not
physically installed on disk


This is the inverse of `--omit=<type>`
json files




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink




### See Also

* [npm install](/commands/npm-install)
* [package-lock


### Description

Enables tab-completion in all npm commands
bashrc
npm completion >> ~/
zshrc
```

You may of course also pipe the output of `npm completion` to a file
such as `/usr/local/etc/bash_completion
d/npm` if you have a system that will read 
that file for you
]
npm config get [<key> [<key> 





Note: for backwards compatibility, `npm config set key value` is supported
as an alias for `npm config set key=value`


#### get

```bash
npm config get [key 


]
```

Echo the config value(s) to stdout
 Use `--json`
to show the settings in json format


#### delete

```bash
npm config delete key [key 

 `_auth`, `_authToken`) to the
configured `registry`


### Configuration

#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `editor`

* Default: The EDITOR or VISUAL environment variables, or
  '%SYSTEMROOT%\notepad
exe' on Windows, or 'vi' on Unix systems
* Type: String

The command to run for `npm edit` and `npm config edit`




#### `location`

* Default: ""user"" unless `--global` is passed, which will also set this value
  to ""global""
* Type: ""global"", ""user"", or ""project""

When passed to `npm config` this refers to which config file to use
 See
[folders](/configuring-npm/folders) for more on the differences in behavior

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`
0
0


In some cases, you may have a dependency graph like this:

```
a
+-- b <-- depends on c@1
0
3
`-- d <-- depends on c@1
9
```

During the installation process, the `c@1
3` dependency for `b` was
placed in the root of the tree
3`, the newer `c@1
9
0` dependency was used,
because npm favors updates by default, even when doing so causes
duplication


To prefer deduplication over novelty during the installation process, run
`npm install --prefer-dedupe` or `npm config set prefer-dedupe true`
 Dedupe always acts on the entire tree


Note: `npm dedupe` will never update the semver values of direct
dependencies in your project `package


### Configuration

#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 Sets `--install-strategy=nested`
json` files when installing
json` or `npm-shrinkwrap




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `


Set to false to have it not do this
 See [`npm
fund`](/commands/npm-fund) for details


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command
com/) as well as specific
versions, so you can do something like this:

```bash
npm deprecate my-thing@""< 0
  For example:

```bash
npm deprecate my-thing@1
0
0-beta


To un-deprecate a package, specify an empty string (`""""`) for the `message`
argument


### Configuration

#### `registry`

* Default: ""https://registry




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator




### See Also

* [package spec](/using-npm/package-spec)
* [npm publish](/commands/npm-publish)
* [npm registry](/using-npm/registry)
* [npm owner](/commands/npm-owner)
* [npm adduser](/commands/npm-adduser)

---
title: npm-diff
section: 1
description: The registry diff command
---

### Synopsis

```bash
npm diff [



* `npm diff --diff=<spec-a> --diff=<spec-b>`

    Compares two package versions using their registry specifiers, e
g:
    `npm diff --diff=pkg@1
0 --diff=pkg@^2
 It's also possible to
    compare across forks of any package,
    e
0`


    Any valid spec can be used, so that it's also possible to compare
    directories or git repositories,
    e
1
1
json
    index v1
1
json
    +++ b/package


* `npm diff` (in a package directory, no arguments):

    If the package is published to the registry, `npm diff` will fetch the
    tarball version tagged as `latest` (this value can be configured using the
    `tag` option) and proceed to compare the contents of files present in that
    tarball, with the current files in your local file system
0 --diff=pkg@1
g:

  ```bash
  npm diff --diff=pkg@2 
md` file




#### `diff-name-only`

* Default: false
* Type: Boolean

Prints only filenames when using `npm diff`




#### `diff-src-prefix`

* Default: ""a/""
* Type: String

Source prefix to be used in `npm diff` output




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


* rm: Clear a tag that is no longer in use from the package


A tag can be used when installing packages as a reference to a version instead
of using a specific version number:

```bash
npm install <name>@<tag>
```

When installing dependencies, a preferred tagged version may be specified:

```bash
npm install --tag <tag>
```

(This also applies to any other commands that resolve and install
dependencies, such as `npm dedupe`, `npm update`, and `npm audit fix`
)

Publishing a package sets the `latest` tag to the published version unless the
`--tag` option is used
 For example, `npm publish --tag=beta`


By default, `npm install <pkg>` (without any `@<version>` or `@<tag>`
specifier) installs the `latest` tag
 Typically, projects only use the
`latest` tag for stable release versions, and use other tags for unstable
versions such as prereleases


The `next` tag is used by some projects to identify the upcoming version
4
5


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 - Commands that do
other things (test, exec, publish, etc

]]

alias: home
```

### Description

This command tries to guess at the likely location of a package's
documentation URL, and then tries to open it using the
[`--browser` config](/using-npm/config#browser) param
 If no package name is provided, it will search for a
`package


### Configuration

#### `browser`

* Default: OS X: `""open""`, Windows: `""start""`, Others: `""xdg-open""`
* Type: null, Boolean, or String

The browser that is called by npm commands to open websites


Set to `false` to suppress browser behavior and instead print urls to
terminal


Set to `true` to use default system URL opener
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command
js and git must be executable by npm

+ The primary npm registry, `registry
  Many
issues are often attributable to things that are outside npm's code base,
so `npm doctor` confirms that the npm installation is in a good state
  By default npm
runs all of these checks
org`
npmjs


#### `npm config get registry`

You may be installing from private package registries for your project or
company

* Your local `node_modules` path, if you're running `npm doctor` with a
  project directory, must be readable and writable by the user running npm
 `npm doctor` uses these checksums to validate the
package tarballs in your local cache (you can see where that cache is
located with `npm config get cache`)



### Description

Selects a dependency in the current project and opens the package folder in
the default editor (or whatever you've configured as the npm `editor`
config -- see [`npm-config`](npm-config)
)

After it has been edited, the package is rebuilt so as to pick up any
changes in compiled packages
]
npm exec --package=<pkg>[@<version>] -- <cmd> [args

]
npm exec -c '<cmd> [args

]'
npm exec --package=foo -c '<cmd> [args
 The requested packages are
installed to a folder in the npm cache, which is added to the `PATH`
environment variable in the executed process
  Package names with a specifier will
only be considered a match if they have the exact same name and version as
the local dependency

- If this does not result in exactly one option (either because there are
  no bin entries, or none of them match the `name` of the package), then
  `npm exec` exits with an error


To run a binary _other than_ the named binary, specify one or more
`--package` options, which will prevent npm from inferring the package from
the first command argument


For example:

```
$ npx foo@latest bar --package=@npmcli/foo
```

In this case, npm will resolve the `foo` package name, and run the
following command:

```
$ foo bar --package=@npmcli/foo
```

Since the `--package` option comes _after_ the positional arguments, it is
treated as an argument to the executed command
  Then, it will execute the following command in that
context:

```
$ foo@latest bar
```

The double-hyphen character is recommended to explicitly tell npm to stop
parsing command line options and switches


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes

If no positional argument or `--call` option is provided, it will open an
interactive subshell in the context of each of these configured workspaces one
at a time


Given a project with configured workspaces, e
json
`-- packages
   +-- a
   |   `-- package
json
   `-- c
       `-- package
json
```

Assuming the workspace configuration is properly set up at the root level
`package
 e
js
```

#### Filtering workspaces

It's also possible to execute a command in a single workspace using the
`workspace` config along with a name or directory path:

```
npm exec --workspace=a -- eslint 
js
```

This last command will run the `eslint` command in both `
/packages/a` and
`
0
0, and the standalone `npx`
package deprecated at that time

- The `--no-install` option is deprecated, and will be converted to `--no`

- The `-p` argument is a shorthand for `--parseable` in npm, but shorthand
  for `--package` in npx

- The `--npm` option is removed

- The `--always-spawn` option is redundant, and thus removed
  You can use the following to change how and when the
cli uses this cache
 See [`npm cache`](/commands/npm-cache) for more on
how the cache works
 To force full offline mode, use `offline`


#### workspaces

* Alias: `--ws`
* Type: Boolean
* Default: `false`

Run scripts in the context of all configured workspaces for the current
project
1
6
node_modules/glob
  glob@""^7
1
0
5"" from rimraf@2
6
2
  node_modules/tacks/node_modules/rimraf
    rimraf@""^2
2"" from tacks@1
0
    node_modules/tacks
      dev tacks@""^1
3
1
1
  node_modules/nyc
    nyc@""^14
8
    node_modules/tap
      dev tap@""^14


* In `npm pkg set` it enables parsing set values with JSON


Not supported by all npm commands


### Description

Spawn a subshell in the directory of the installed package specified


This is particularly handy in the case of git submodules in the
`node_modules` folder:

```bash
npm explore some-dependency -- git pull origin master
```

Note that the package is *not* automatically rebuilt afterwards, so be
sure to use `npm rebuild <pkg>` if you make any changes


### Configuration

#### `shell`

* Default: SHELL environment variable, or ""bash"" on Posix, or ""cmd
exe"" on
  Windows
* Type: String

The shell to run for the `npm explore` command
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved
json` files when installing


Note that these dependencies _are_ still resolved and added to the
`package-lock
 They are just not
physically installed on disk


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted
cmd` shims on Windows) for package
executables
 See [`npm
fund`](/commands/npm-fund) for details


This value is not exported to the environment for child processes
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes
 This option has no effect on
workspaces
 If a package name is provided
then it tries to open its funding url using the
[`--browser` config](/using-npm/config#browser) param; if there are multiple
funding sources for the package, the user will be instructed to pass the
`--which` option to disambiguate


The list will avoid duplicated entries and will stack all packages that
share the same url as a single entry
 Thus, the list does not have the
same shape of the output from `npm ls`
com/a
| | `-- a@1
com/maintainer
|     `-- foo@1
0
0
com/maintainer
      `-- foo@2




#### `browser`

* Default: OS X: `""open""`, Windows: `""start""`, Others: `""xdg-open""`
* Type: null, Boolean, or String

The browser that is called by npm commands to open websites


### Configuration

#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`





### See Also

* [npm](/commands/npm)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [package
org/post/145260155635/introducing-hooks-get-notifications-of-npm),
including adding, removing, listing, and updating


To create an owner hook, prefix the owner name with `~` (as in,
`~youruser`)


The hook `id` used by `update` and `rm` are the IDs listed in `npm hook ls`
for that particular hook
com/ my-shared-secret
```

Add a hook to watch packages belonging to the user `substack`:

```bash
$ npm hook add ~substack https://example
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one
json file
---

### Synopsis

```bash
npm init <package-spec> (same as `npx <package-spec>`)
npm init <@scope> (same as `npx <@scope>/create`)

aliases: create, innit
```

### Description

`npm init <initializer>` can be used to set up a new or existing npm
package
0` -> `npm exec @usr/create@2
0
0`
* `npm init @usr/foo@2
0
0
0`

If the initializer is omitted (by just calling `npm init`), init will fall
back to legacy init behavior
 It will ask you a bunch of questions, and
then write a package
json for you


*Note:* if a user already has the `create-<initializer>` package
globally installed, that will be what `npm init` uses
2
/my-react-app
```

Create a new `esm`-compatible package using
[`create-esm`](https://npm
im/create-esm):

```bash
$ mkdir my-esm-lib && cd my-esm-lib
$ npm init esm --yes
```

Generate a plain old package

+-- package
json
```

The workspaces init also supports the `npm init <initializer> -w <dir>`
syntax, following the same set of rules explained earlier in the initial
**Description** section of this page

```

This will make sure to generate your react app as expected, one important
consideration to have in mind is that `npm exec` is going to be run in the
context of the newly created folder for that workspace, and that's the reason
why in this example the initializer uses the initializer name followed with a
dot to represent the current directory in that context, e
json
`-- packages
   +-- a
   |   `-- package
json
       `-- 






#### `init-author-url`

* Default: """"
* Type: """" or URL

The value `npm init` should use by default for the package author's
homepage




#### `init-module`

* Default: ""~/
npm-init
js""
* Type: Path

A module that will be loaded by the `npm init` command
0""
* Type: SemVer string

The value that `npm init` should use by default for the package version
number, if not already set in package




#### `force`

* Default: false
* Type: Boolean

Removes various protections against unfortunate side effects, common
mistakes, unnecessary performance degradation, and malicious input


* Allow clobbering non-npm files in global installs

* Allow installing packages that have an `engines` declaration requiring a
  different version of `node`, even if `--engine-strict` is enabled

* Allow `npm audit fix` to install modules outside your stated dependency
  range (including SemVer-major changes)

* Allow unpublishing all versions of a published package


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


#### `workspaces-update`

* Default: true
* Type: Boolean

If set to true, the npm cli will run an update after operations that may
possibly change the workspaces installed to the `node_modules` folder


### See Also

* [package spec](/using-npm/package-spec)
* [init-package-json module](http://npm
im/init-package-json)
* [package
store,
link in place, unhoisted
json` or `npm-shrinkwrap
 They are just not
physically installed on disk


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts
cmd` shims on Windows) for package
executables
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 - Commands that do
other things (test, exec, publish, etc


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes
 This option has no effect on
workspaces
]

alias: it
```

### Description

This command runs an `npm install` followed immediately by an `npm test`


When used with the `npm rm` command, removes the dependency from
`package




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory
 shallow (formerly --global-style) only install direct
deps at top-level
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk
json` or `npm-shrinkwrap


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object
json` files when installing


For `list` this means the output will be based on the tree described by the
`package-lock




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`
 Acceptable values
are same as `cpu` field of package
json, which comes from `process
arch`
 Acceptable values are same as `os`
field of package
 Acceptable values are same as
`libc` field of package
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes
 This option has no effect on
workspaces




### See Also

* [npm install](/commands/npm-install)
* [npm install-ci-test](/commands/npm-install-ci-test)
* [npm test](/commands/npm-test)

---
title: npm-install
section: 1
description: Install a package
---

### Synopsis

```bash
npm install [<package-spec> 

]

aliases: add, i, in, ins, inst, insta, instal, isnt, isnta, isntal, isntall
```

### Description

This command installs a package and any packages that it depends on
lock`

See [package-lock
json](/configuring-npm/package-lock-json) and
[`npm shrinkwrap`](/commands/npm-shrinkwrap)
 To install all modules listed in both
    `dependencies` and `devDependencies` when `NODE_ENV` environment
    variable is set to `production`, you can use `--production=false`


* `npm install <folder>`:

    If `<folder>` sits inside the root of your project, its dependencies will be installed and may
    be hoisted to the top-level `node_modules` as they would for other
    types of dependencies


    > NOTE: If you want to install the content of a directory like a package from the registry instead of creating a link, you would need to use the `--install-links` option
/
  Note: if you just
    want to link a dev directory into your npm root, you can do this more
    easily by using [`npm link`](/commands/npm-link)
tar

    * The package contents should reside in a subfolder inside the tarball
      (usually it is called `package/`)
 npm strips one directory layer
      when installing the package (an equivalent of `tar x
      --strip-components=1` is run)


    Example:

    ```bash
    npm install 
  In order to distinguish between
    this and other options, the argument must start with ""http://"" or ""https://""

    Example:

    ```bash
    npm install https://github

    Additionally, you can control where and how they get saved with some
    additional flags:

    * `-P, --save-prod`: Package will appear in your `dependencies`
 This
      is the default unless `-D` or `-O` are present


    * `-D, --save-dev`: Package will appear in your `devDependencies`


    * `--no-save`: Prevents saving to `dependencies`
json, there are two additional, optional flags:

    * `-E, --save-exact`: Saved dependencies will be configured with an
      exact version rather than using npm's default semver range operator
json` or `package-lock
json`
    then it will be updated as well


    `<scope>` is optional


    Note: if you do not include the @-symbol on your scope name, npm will
    interpret this as a GitHub repository instead, see below
 Allows multiple versions of
    a same-name package side-by-side, more convenient import names for
    packages with otherwise long ones, and using git forks replacements
    or forked npm packages as replacements

    Aliases should follow the naming conventions stated in
    [`validate-npm-package-name`](https://www


    Examples:

    ```bash
    npm install my-react@npm:react
    npm install jquery2@npm:jquery@2
    npm install jquery3@npm:jquery@3
    npm install npa@npm:npm-package-arg
    ```

* `npm install [<@scope>/]<name>@<tag>`:

    Install the version of the package that is referenced by the specified tag
1
    npm install @myorg/privatepackage@1


    Note that most version ranges must be put in quotes so that your shell
    will treat it as a single argument
1
0 <0


    ```bash
    <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]
    ```

    `<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or
    `git+file`
com:npm/cli
git#v1
0
    npm install git+https://isaacs@github
com/npm/cli
com/npm/cli
com:npm/cli
git
    ```

* `npm install <githubname>/<githubrepo>[#<commit-ish>]`:
* `npm install github:<githubname>/<githubrepo>[#<commit-ish>]`:

    Install the package at `https://github


    If `#<commit-ish>` is provided, it will be used to clone exactly that
    commit
 If the commit-ish has the format `#semver:<semver>`, `<semver>`
    can be any valid semver range or exact version, and npm will look for
    any tags or refs matching that range in the remote repository, much as
    it would for a registry dependency


    As with regular git dependencies, `dependencies` and `devDependencies`
    will be installed if the package has a `prepare` script before the
    package is done installing
github
 The GitHub username associated with the gist is
    optional and will not be saved in `package
 If the commit-ish has the format `#semver:<semver>`, `<semver>` can
    be any valid semver range or exact version, and npm will look for any tags
    or refs matching that range in the remote repository, much as it would for a
    registry dependency


    Example:

    ```bash
    npm install bitbucket:mybitbucketuser/myproject
    ```

* `npm install gitlab:<gitlabname>/<gitlabrepo>[#<commit-ish>]`:

    Install the package at `https://gitlab
com/gitlabname/gitlabrepo`
    by attempting to clone it using `git`
 If neither `#<commit-ish>` or `#semver:<semver>` is
    specified, then `master` is used


    As with regular git dependencies, `dependencies` and `devDependencies` will
    be installed if the package has a `prepare` script before the package is
    done installing
0
    ```

You may combine multiple arguments and even multiple types of arguments


The `--package-lock-only` argument will only update the
`package-lock
  Many of the configuration
params have some effect on installation, since that's most of what npm
does


When used with the `npm rm` command, removes the dependency from
`package


Will also prevent writing to `package-lock
json` if set to `false`
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 shallow (formerly --global-style) only install direct
deps at top-level
 Sets `--install-strategy=shallow`

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships




#### `prefer-dedupe`

* Default: false
* Type: Boolean

Prefer to deduplicate packages if possible, rather than choosing a newer
version of a dependency
 This
will also prevent _writing_ `package-lock


For `update` this means only the `package-lock


For `list` this means the output will be based on the tree described by the
`package-lock




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes
json, which comes from `process
arch`




#### `os`

* Default: null
* Type: null or String

Override OS of native modules to install
 Acceptable values are same as `os`
field of package


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project
  Note that
`npm link` uses the global prefix (see `npm prefix -g` for its value)


Next, in some other location, `npm link package-name` will create a
symbolic link from globally-installed `package-name` to `node_modules/` of
the current folder
 Note that the link
should be to the package name, not the directory name for that package


/node-redis; npm link)
npm link redis
```

That is, it first creates a global link, and then links the global
installation target into your project's `node_modules` folder


Note that in this case, you are referring to the directory name,
`node-redis`, rather than the package name `redis`
g
  Otherwise, for example,
if you depend on `redis@^3
1` dependency with `file:


If you _want_ to save the `file:` reference in your `package
json` file as dependencies
json`




#### `save-exact`

* Default: false
* Type: Boolean

Dependencies saved to package
 See
[folders](/configuring-npm/folders) for more on the differences in behavior
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 linked: (experimental) install in node_modules/




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object
json` files when installing

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk
json` or `npm-shrinkwrap


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts


This is the inverse of `--omit=<type>`




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces
json](/configuring-npm/package-json)
* [npm install](/commands/npm-install)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-login
section: 1
description: Login to a registry user account
---

### Synopsis

```bash
npm login
```

Note: This command is unaware of workspaces


### Description

Verify a user in the specified registry, and save the credentials to the
`


When using `legacy` for your `auth-type`, the username and password, are
read in from prompts


To reset your password, go to <https://www
com/email-edit>

You may use this command multiple times with the same user account to
authorize on a new machine


### Configuration

#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry
mycorp




### See Also

* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm owner](/commands/npm-owner)
* [npm whoami](/commands/npm-whoami)
* [npm token](/commands/npm-token)
* [npm profile](/commands/npm-profile)

---
title: npm-logout
section: 1
description: Log out of the registry
---

### Synopsis

```bash
npm logout
```

Note: This command is unaware of workspaces


### Configuration

#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry
  Note that nested
packages will *also* show the paths to the specified packages
2 /path/to/npm
└─┬ init-package-json@0
0
5
```

It will print out extraneous, missing, and invalid packages


The tree shown is the logical dependency tree, based on package
dependencies, not the physical layout of your `node_modules` folder


When run as `ll` or `la`, it shows extended information by default


### Note: Design Changes Pending

The `npm ls` command's output and behavior made a _ton_ of sense when npm
created a `node_modules` folder that naively nested every dependency
  In
such a case, the logical dependency graph and physical tree of packages on
disk would be roughly identical

However, without using `npm ls -l`, it became impossible to show _where_ a
package was actually installed much of the time!

With the advent of automatic installation of `peerDependencies` in npm v7,
this gets even more curious, as `peerDependencies` are logically
""underneath"" their dependents in the dependency graph, but are always
physically at or above their location on disk
0
  Therefore, in
order to avoid dumping an excessive amount of content to the terminal, `npm
ls` now only shows the _top_ level dependencies, unless `--all` is
provided


### Configuration

#### `all`

* Default: false
* Type: Boolean

When running `npm outdated` and `npm ls`, setting `--all` will show all
outdated or installed packages, rather than only those directly depended
upon by the current project


* In `npm pkg set` it enables parsing set values with JSON
json`


Not supported by all npm commands
 For
`npm search`, this will be tab-separated table format


If not set, `npm ls` will show only the immediate dependencies of the root
project


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`
json`,
ignoring `node_modules`


For `list` this means the output will be based on the tree described by the
`package-lock
 When
false, it uses ascii characters instead of unicode glyphs


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


### Configuration

#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output
npmjs
com/orgs/)

---
title: npm-outdated
section: 1
description: Check for outdated packages
---

### Synopsis

```bash
npm outdated [<package-spec> 
e
  you're running `npm outdated --global`, or the package isn't
  included in `package

* `latest` is the version of the package tagged as latest in the registry
 This may or may not be the maximum
  version of the package, or the most-recently published version of the
  package, depending on how the package's developer manages the latest
  [dist-tag](/commands/npm-dist-tag)
 Packages not
  included in `package

* `homepage` (when using `--long` / `-l`) is the `homepage` value contained
  in the package's packument
* Red means there's a newer version matching your semver requirements, so
  you should update now
0
1  node_modules/glob         dependent-package-name
nothingness    0
0
5
2    3
5
1  node_modules/npm          dependent-package-name
local-dev      0
0
3   linked   linked  local-dev                 dependent-package-name
once           1
2    1
3    1
0
5
1"",
  ""once"": ""^1

  This is why currently doing a reinstall of a Git dependency always forces
  a new clone and install

  `npm update` will install the _newest_ version, but `npm install npm`
  (with no semver range) will install whatever's tagged as `latest`
  Handy when you need to know who to bug for help
  This user is enabled
  to modify metadata, publish new versions, and add other owners
  Future versions may contain more fine-grained access levels, but
that is not implemented at this time




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


Not supported by all npm commands
""
* Type: String

Directory in which `npm pack` will save tarballs
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes
tgz`, and then write the filenames out to
stdout


### Description

Ping the configured or given npm registry and verify authentication

If it works it will output something like:

```bash
npm notice PING https://registry
npmjs
com/
npm ERR! code E404
npm ERR! 404 Not Found - GET http://www
foo
com/-/ping?write=true
```

### Configuration

#### `registry`

* Default: ""https://registry


]
npm pkg set [<array>[<index>]
<key>=<value> 

]
npm pkg set [<array>[]



The syntax to retrieve and set fields is a dot separated representation of
the nested object properties to be found within your `package


    For example, in order to retrieve the name of the current package, you
    can run:

    ```bash
    npm pkg get name
    ```

    It's also possible to retrieve multiple values at once:

    ```bash
    npm pkg get name version
    ```

    You can view child fields by separating them with a period
 To retrieve
    the value of a test `script` value, you would run the following command:

    ```bash
    npm pkg get scripts
 For example, to get all
    the contributor emails for a package, you would run:

    ```bash
    npm pkg get contributors
 This is especially helpful
    with the exports object:

    ```bash
    npm pkg get ""exports[
require""
    ```

* `npm pkg set <field>=<value>`

    Sets a `value` in your `package
 When
    saving to your `package


    The same syntax used to retrieve values from your package can also be used
    to define new properties or overriding existing ones, below are some
    examples of how the dot separated syntax can be used to edit your
    `package
js`:

    ```bash
    npm pkg set bin
js
    ```

    Setting multiple fields at once is also possible:

    ```bash
    npm pkg set description='Awesome package' engines
name='Foo' contributors[]
name='Bar'
    ```

    It's also possible to parse values as json prior to saving them to your
    `package
json` file, for example in order to set a `""private"": true`
    property:

    ```bash
    npm pkg set private=true --json
    ```

    It also enables saving values as numbers:

    ```bash
    npm pkg set tap
build
    ```

* `npm pkg fix`

    Auto corrects common errors in your `package
g:

```
npm pkg get name version --ws
{
  ""a"": {
    ""name"": ""a"",
    ""version"": ""1
0""
  },
  ""b"": {
    ""name"": ""b"",
    ""version"": ""1


* Allow clobbering non-npm files in global installs

* Allow installing packages that have an `engines` declaration requiring a
  different version of npm

* Allow `npm audit fix` to install modules outside your stated dependency
  range (including SemVer-major changes)

* Allow conflicting peerDependencies to be installed in the root project


* In `npm pkg set` it enables parsing set values with JSON
json`




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


This value is not exported to the environment for child processes

## See Also

* [npm install](/commands/npm-install)
* [npm init](/commands/npm-init)
* [npm config](/commands/npm-config)
* [workspaces](/using-npm/workspaces)

---
title: npm-prefix
section: 1
description: Display prefix
---

### Synopsis

```bash
npm prefix [-g]
```

Note: This command is unaware of workspaces


### Description

Print the local prefix to standard output
json` file or `node_modules` directory, unless `-g` is
also specified
 See
[`npm config`](/commands/npm-config) for more detail


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory


* `npm profile get [<property>]`: Display all of the properties of your
  profile, or one or more specific properties
922Z  |
+-----------------+---------------------------+
```

* `npm profile set <property> <value>`: Set the value of a profile
  property
  You'll
  also be prompted for an OTP if you have two-factor authentication
  enabled


* `npm profile enable-2fa [auth-and-writes|auth-only]`: Enables two-factor
  authentication
 Modes are:
  * `auth-only`: Require an OTP when logging in or making changes to your
    account's authentication




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
parse() before
  saving them to your `package
 It's needed
when publishing or changing package permissions with `npm access`

]
```

### Description

This command removes ""extraneous"" packages
  When crashes or mistakes happen,
this command can help clean up any resulting garbage

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes




### See Also

* [npm uninstall](/commands/npm-uninstall)
* [npm folders](/configuring-npm/folders)
* [npm ls](/commands/npm-ls)

---
title: npm-publish
section: 1
description: Publish a package
---

### Synopsis

```bash
npm publish <package-spec>
```

### Description

Publishes a package to the registry so that it can be installed by name



A `package` is interpreted the same way as other commands (like
`npm install`) and can be:

* a) a folder containing a program described by a
  [`package
json`](/configuring-npm/package-json) file
* b) a gzipped tarball containing (a)
* c) a url that resolves to (b)
* d) a `<name>@<version>` that is published on the registry (see
  [`registry`](/using-npm/registry)) with (c)
* e) a `<name>@<tag>` (see [`npm dist-tag`](/commands/npm-dist-tag)) that
  points to (d)
* f) a `<name>` that has a ""latest"" tag satisfying (e)
* g) a `<git remote url>` that resolves to (a)

The publish will fail if the package name and version combination already
exists in the specified registry


### Files included in package

To see what will be included in your package, run `npm pack --dry-run`
md`,
  `LICENSE`, and so on
  (If directories are specified, then they
  will be walked recursively and their contents included, subject to the
  same ignore rules
npmignore` file, then ignored files in
  that and all child directories will be excluded from the package
  If
  _both_ files exist, then the `
gitignore` is ignored, and only the
  `
npmignore` files follow the [same pattern
  rules](https://git-scm
com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#_ignoring)
  as `
npmignore` or `
gitignore` file
 Specifying a value of `restricted` or `public` during publish will
change the access for an existing package the same way that `npm access set
status` would


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc
 It's needed
when publishing or changing package permissions with `npm access`


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


This value is not exported to the environment for child processes
name)|join(""\n"")' -r | xargs -I {} npm uninstall {}

# find all git dependencies & explain who requires them
npm query "":type(git)"" | jq 'map(
name)' | xargs -I {} npm why {}
```

### Extended Use Cases & Queries

```stylus
// all deps
*

// all direct deps
:root > *

// direct production deps
:root > 
dev

// any peer dep of a direct deps
:root > * > 
workspace:has(
2

5
// equivalent to

com],
[repository^=https://github
com],
[repository^=+git:
dev)

// get dependencies with specific licenses
[license=MIT], [license=ISC]

// find all packages that have @ruyadorno as a contributor
:attr(contributors, [email=ruyadorno@github

  },
  
json files of your dependencies will not be included in the result set (e
 See
[folders](/configuring-npm/folders) for more on the differences in behavior

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


For `list` this means the output will be based on the tree described by the
`package-lock

]

alias: rb
```

### Description

This command does the following:

1
 Execute lifecycle scripts (`preinstall`, `install`, `postinstall`, `prepare`)
2
 Installing a new version of **node


If there is a `binding

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


]]
```

### Description

This command tries to guess at the likely location of a package's
repository URL, and then tries to open it using the
[`--browser` config](/using-npm/config#browser) param


### Configuration

#### `browser`

* Default: OS X: `""open""`, Windows: `""start""`, Others: `""xdg-open""`
* Type: null, Boolean, or String

The browser that is called by npm commands to open websites
npmjs




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config
 postrestart

If it does _not_ have a `""restart""` script specified, but it does have
`stop` and/or `start` scripts, then the following scripts will be run:

1
 prestop
3
 poststart
9
 postrestart

### Configuration

#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd


Useful for using npm in shell scripts that do things with the
`node_modules` folder
  For example:

```bash
#!/bin/bash
global_node_modules=""$(npm root --global)""
echo ""Global packages installed in: ${global_node_modules}""
```

### Configuration

#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



### See Also

* [npm prefix](/commands/npm-prefix)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-run-script
section: 1
description: Run arbitrary package scripts
---

### Synopsis

```bash
npm run-script <command> [-- <args>]

aliases: run, rum, urn
```

### Description

This runs an arbitrary command from a package's `""scripts""` object
 When the scripts in the package are
printed out, they're separated into lifecycle (test, start, restart) and
directly-run scripts


For example:

```bash
npm run test -- --grep=""pattern""
```

The arguments will only be passed to the script specified after `npm run`
and not to any `pre` or `post` script
 Any binaries
provided by locally-installed dependencies can be used without the
`node_modules/
exe`


`npm run` sets the `NODE` environment variable to the `node` executable
with which `npm` is executed


### Workspaces support

You may use the [`workspace`](/using-npm/config#workspace) or
[`workspaces`](/using-npm/config#workspaces) configs in order to run an
arbitrary command from a package's `""scripts""` object in the context of the
specified workspaces


Given a project with configured workspaces, e

+-- package
json
   +-- b
   |   `-- package
json
   `-- c
       `-- package
json
```

Assuming the workspace configuration is properly set up at the root level
`package
/packages/b`
packages


### Configuration

#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option
)
will link workspaces into the `node_modules` folder


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes


#### `if-present`

* Default: false
* Type: Boolean

If true, npm will not exit with an error code when `run-script` is invoked
for a script that isn't defined in the `scripts` section of `package
 This is useful, for example, when
running scripts that may only apply for some builds in an otherwise generic
CI setup


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands
1
0"",
      ""type"": ""library"",
      ""name"": ""simple"",
      ""version"": ""1
0
21"",
      ""type"": ""library"",
      ""name"": ""lodash"",
      ""version"": ""4
17
"",
      ""purl"": ""pkg:npm/lodash@4
org/lodash/-/lodash-4
17
tgz""
        },
        {
          ""type"": ""vcs"",
          ""url"": ""git+https://github
0"",
      ""dependsOn"": [
        ""lodash@4
17
3"",
  ""dataLicense"": ""CC0-1
0
0"",
  ""documentNamespace"": ""http://spdx
org/spdxdocs/simple-1
0-bf81090e-8bbc-459d-bec9-abeb794e096a"",
  ""creationInfo"": {
    ""created"": ""2023-09-01T00:00:00
001Z"",
    ""creators"": [
      ""Tool: npm/cli-10
0""
    ]
  },
  ""documentDescribes"": [
    ""SPDXRef-Package-simple-1
0
0
21"",
      ""versionInfo"": ""4
21""
        }
      ],
      ""checksums"": [
        {
          ""algorithm"": ""SHA512"",
          ""checksumValue"": ""bf690311ee7b95e713ba568322e3533f2dd1cb880b189e99d4edef13592b81764daec43e2c54c61d5c558dc5cfb35ecb85b65519e74026ff17675b6f8f916f4a""
        }
      ]
    }
  ],
  ""relationships"": [
    {
      ""spdxElementId"": ""SPDXRef-DOCUMENT"",
      ""relatedSpdxElement"": ""SPDXRef-Package-simple-1
0"",
      ""relationshipType"": ""DESCRIBES""
    },
    {
      ""spdxElementId"": ""SPDXRef-Package-simple-1
0


### Configuration

#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty
json` or `npm-shrinkwrap


If a package type appears in both the `--include` and `--omit` lists, then
it will be included




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock
json`,
ignoring `node_modules`




#### `sbom-format`

* Default: null
* Type: ""cyclonedx"" or ""spdx""

SBOM format to use when generating SBOMs


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether


This value is not exported to the environment for child processes


* In `npm pkg set` it enables parsing set values with JSON




#### `color`

* Default: true unless the NO_COLOR environ is set to something other than '0'
* Type: ""always"" or Boolean

If false, never shows colors
 If `""always""` then always shows colors
 If
true, then only prints color codes for tty file descriptors
 For
`npm search`, this will be tab-separated table format




#### `prefer-online`

* Default: false
* Type: Boolean

If true, staleness checks for cached data will be forced, making the CLI
look for updates immediately even for fresh package data
im/npm-registry-fetch

---
title: npm-shrinkwrap
section: 1
description: Lock down dependency versions for publication
---

### Synopsis

```bash
npm shrinkwrap
```

Note: This command is unaware of workspaces


### Description

This command repurposes `package-lock
json` or simply creates a new one

]
```

Note: This command is unaware of workspaces
 Starring repeatedly has no additional effect


#### Listing stars

You can see all your starred packages using [`npm stars`](/commands/npm-stars)

### Configuration

#### `registry`

* Default: ""https://registry


### Description

If you have starred a lot of neat things and want to find them again
quickly this command lets you do just that
npmjs


### Example

```json
{
  ""scripts"": {
    ""start"": ""node foo
x
js

(foo
js

(bar
json files




#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd
 Does not
handle permissions for packages


Teams must always be fully qualified with the organization/scope they belong to
when operating on them, separated by a colon (`:`)


If you have two-factor authentication enabled in `auth-and-writes` mode, then
you can provide a code from your authenticator with `[--otp <otpcode>]`

If you don't include this then you will be taken through a second factor flow based
on your `authtype`


* create / destroy:
  Create a new team, or destroy an existing one


  Here's an example removing user `username` from `newteam` team
  in `org` organization:

  ```bash
  npm team rm @org:newteam username
  ```

  Once the user is removed a confirmation message is displayed:
  `username removed from @org:newteam`

* ls:
  If performed on an organization name, will return a list of existing teams
  under that organization
 Listing teams and team memberships may be done by
any member of the organization
 It's needed
when publishing or changing package permissions with `npm access`




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
parse() before
  saving them to your `package
json`


Not supported by all npm commands
js""
  }
}
```

```bash
npm test
> npm@x


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands




### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm start](/commands/npm-start)
* [npm restart](/commands/npm-restart)
* [npm stop](/commands/npm-stop)

---
title: npm-token
section: 1
description: Manage your authentication tokens
---

### Synopsis

```bash
npm token list
npm token revoke <id|token>
npm token create [--read-only] [--cidr=list]
```

Note: This command is unaware of workspaces


### Description

This lets you list, create and revoke authentication tokens
 You can request
  this as JSON with `--json` or tab-separated values with `--parseable`
0
org/wiki/Classless_Inter-Domain_Routing)
  ranges with which to limit use of this token


  Currently, the cli can not generate automation tokens
com/creating-and-viewing-access-tokens)
  for more information on generating automation tokens
838Z             |
+----------------+--------------------------------------+
```

* `npm token revoke <token|id>`:
  Immediately removes an authentication token from the registry
  This can accept both complete
  tokens (such as those you get back from `npm token create`, and those
  found in your `
  This will NOT accept the truncated token
  found in the normal `npm token list` output


### Configuration

#### `read-only`

* Default: false
* Type: Boolean

This is used to mark a token as unable to publish when configuring limited
access tokens with the `npm token create` command
org/""
* Type: URL

The base URL of the npm registry
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one




### See Also

* [npm adduser](/commands/npm-adduser)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm owner](/commands/npm-owner)
* [npm whoami](/commands/npm-whoami)
* [npm profile](/commands/npm-profile)

---
title: npm-uninstall
section: 1
description: Remove a package
---

### Synopsis

```bash
npm uninstall [<@scope>/]<pkg>


It also removes the package from the `dependencies`, `devDependencies`,
`optionalDependencies`, and `peerDependencies` objects in your
`package
json` or `package-lock
json` files
json`, `npm-shrinkwrap
json`, or
`package-lock
json` files


```bash
npm uninstall lodash --no-save
```

`lodash` will not be removed from your `package
json`, or `package-lock


Will also prevent writing to `package-lock
json` if set to `false`




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
)
will link workspaces into the `node_modules` folder


This value is not exported to the environment for child processes


### Warning

Consider using the [`deprecate`](/commands/npm-deprecate) command instead,
if your intent is to encourage users to upgrade, or if you no longer
want to maintain a package


The npm registry will return an error if you are not [logged
in](/commands/npm-adduser)
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc

* Allow `npm audit fix` to install modules outside your stated dependency
  range (including SemVer-major changes)

* Allow unpublishing all versions of a published package

* Implicitly set `--yes` during `npm init`

* Allow clobbering existing values in `npm pkg`
* Allow unpublishing of entire packages (not just a single version)
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc


This value is not exported to the environment for child processes

npmjs
org/""
* Type: URL

The base URL of the npm registry




#### `unicode`

* Default: false on windows, true on mac/unix systems with a unicode locale,
  as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one


It will also install missing packages


Note that by default `npm update` will not update the semver values of direct
dependencies in your project `package

 etc
  The published versions of `dep1`
are:

```json
{
  ""dist-tags"": { ""latest"": ""1
2
2"",
    ""1
1
4
json` contains:

```json
""dependencies"": {
  ""dep1"": ""^1
1
1""
}
```

Then `npm update` will install `dep1@1
2
2
1
1`
json` contains:

```json
""dependencies"": {
  ""dep1"": ""~1
1
2`, this version does not satisfy `~1
1
1
1
0`, for example:

```json
""dependencies"": {
  ""dep1"": ""^0
2
0`
4
0""
}
```

Then `npm update` will install `dep1@0
1`, because that is the highest-sorting
version that satisfies `^0
4
0 <0
0`)


#### Subdependencies

Suppose your app now also has a dependency on `dep2`

```json
{
  ""name"": ""my-app"",
  ""dependencies"": {
      ""dep1"": ""^1
1""
  }
}
```

Then `npm update` will install `dep1@1
1
2` because that is the highest
version that `dep2` allows

In this case if you really did need your package to use a newer version
you would need to use `npm install`



#### Updating Globally-Installed Packages

`npm update -g` will apply the `update` action to each globally installed
package that is `outdated` -- that is, has a version that is different from
`wanted`


Note: Globally installed packages are treated as if they are installed with a
caret semver range specified

]`

NOTE: If a package has been upgraded to a version newer than `latest`, it will
be _downgraded_
json` file as dependencies
json`


Will also prevent writing to `package-lock
json` if set to `false`




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
store,
link in place, unhoisted




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships
 If `--strict-peer-deps` is set, then
this warning is treated as a failure


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes
 This option has no effect on
workspaces




### See Also

* [npm install](/commands/npm-install)
* [npm outdated](/commands/npm-outdated)
* [npm shrinkwrap](/commands/npm-shrinkwrap)
* [npm registry](/using-npm/registry)
* [npm folders](/configuring-npm/folders)
* [npm ls](/commands/npm-ls)

---
title: npm-version
section: 1
description: Bump a package version
---

### Synopsis

```bash
npm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]

alias: verison
```

### Configuration

#### `allow-same-version`

* Default: false
* Type: Boolean

Prevents throwing an error when `npm version` is used to set the new version
to the same value as the current version




#### `git-tag-version`

* Default: true
* Type: Boolean

Tag the commit when using the `npm version` command


* In `npm pkg set` it enables parsing set values with JSON
0-rc


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


### Description

Run this in a package directory to bump the version and write the new data
back to `package
inc](https://github
  `from-git` will try to read
the latest git tag, and use that as the new npm version

It will fail if the working directory is not clean, unless the `-f` or
`--force` flag is set
  If the
`message` config contains `%s` then that will be replaced with the resulting
version number
me>""
2048-bit RSA key, ID 6C481CF6, created 2010-08-31

Enter passphrase:
```

If `preversion`, `version`, or `postversion` are in the `scripts` property
of the package


The exact order of execution is as follows:

1

2
 Run the `preversion` script
 These scripts have access to the old
   `version` in package
json
 Bump `version` in `package

4
 Run the `version` script
 These scripts have access to the new `version`
   in package
  Again, scripts should explicitly add
   generated files to the commit using `git add`

5
 Use it to clean up the file system or
   automatically push the commit and/or tag
 Then runs your
`build` script, and adds everything in the `dist` directory to the commit
json](/configuring-npm/package-json)
* [config](/using-npm/config)

---
title: npm-view
section: 1
description: View registry info
---

### Synopsis

```bash
npm view [<package-spec>] [<field>[

]

aliases: info, show, v
```

### Description

This command shows data about a package and prints it to stdout

For example, to show the dependencies of the `ronn` package at version
`0
5 dependencies
```

By default, `npm view` shows data about the current project context (by looking for a `package

To show field data for the current project use a file path (i
 dependencies
```

You can view child fields by separating them with a period
url
```

This makes it easy to view information about a dependency with a bit of
shell scripting
opts)
```

For fields that are arrays, requesting a non-numeric field will return
all of the values from the objects in the list
 For example, to get all
the contributor email addresses for the `express` package, you would run:

```bash
npm view express contributors
  (See [`package
)

```bash
npm view npm contributors
```

If a version range is provided, then data will be printed for every
matching version of the package


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


### Output

If only a single string field for a single version is output, then it
will not be colorized or quoted, to enable piping the output to
another command


If the version range matches multiple versions then each printed value
will be prefixed with the version it applies to


If multiple fields are requested, then each of them is prefixed with
the field name


### See Also

* [package spec](/using-npm/package-spec)
* [npm search](/commands/npm-search)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm docs](/commands/npm-docs)

---
title: npm-whoami
section: 1
description: Display npm username
---

### Synopsis

```bash
npm whoami
```

Note: This command is unaware of workspaces


### Description

Display the npm username of the currently logged-in user


If logged into a registry that provides token-based authentication, then
connect to the `/-/whoami` registry endpoint to find the username
associated with the token, and print to standard output




### See Also

* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm adduser](/commands/npm-adduser)

---
title: npm
section: 1
description: javascript package manager
---

### Synopsis

```bash
npm
```

Note: This command is unaware of workspaces
  It puts
modules in place so that node can find them, and manages dependency
conflicts intelligently
  Most
commonly, you use it to publish, discover, install, and develop node
programs
npmjs
org by default
com/policies/terms


You can configure npm to use any compatible registry you like, and even
run your own registry

For a Unix system, [node-gyp](https://github
  Packages install to
  `
/node_modules/
bin`
json`](/configuring-npm/package-json)

* link:
  Links your current working code into Node's path, so that you don't
  have to reinstall every time you make a change
  Use [`npm
  link`](/commands/npm-link) to do this

* install:
  It's a good idea to install things if you don't need the symbolic
  link


#### Configuration

npm is extremely configurable
  If
  present, it is parsed

* Defaults:
  npm's default configuration options are defined in
  `lib/utils/config/definitions
com/npm/cli/blob/latest/CONTRIBUTING
com/npm/feedback>

Or suggest formal RFC proposals:

* <https://github
com/npm/rfcs>

### See Also

* [npm help](/commands/npm-help)
* [package



]'
```

### Description

This command allows you to run an arbitrary command from an npm package
(either one installed locally, or fetched remotely), in a similar context
as running it via `npm run`


If any requested packages are not present in the local project
dependencies, then they are installed to a folder in the npm cache, which
is added to the `PATH` environment variable in the executed process


Package names provided without a specifier will be matched with whatever
version exists in the local project


To run a binary _other than_ the named binary, specify one or more
`--package` options, which will prevent npm from inferring the package from
the first command argument
  The following command would
thus be equivalent to the `npx` command above:

```
$ npm exec -- foo@latest bar --package=@npmcli/foo
```

### Examples

Run the version of `tap` in the local dependencies, with the provided
arguments:

```
$ npm exec -- tap --bail test/foo

- The `--no-install` option is deprecated, and will be converted to `--no`
  This is maintained, but only for the `npx`
  executable
  Locally installed bins are
  always present in the executed process `PATH`
 Use [`NODE_OPTIONS`](https://nodejs
org/api/cli

- The `--shell` option is replaced with `--script-shell`, but maintained
  in the `npx` executable for backwards compatibility


This document will tell you what it puts where


#### tl;dr

* Local install (default): puts stuff in `

* Install it **locally** if you're going to `require()` it

* Install it **globally** if you're going to run it on the command line


#### prefix Configuration

The [`prefix` config](/using-npm/config#prefix) defaults to the location where
node is installed
 On most systems, this is `/usr/local`
 On Windows, it's
`%AppData%\npm`
 On Unix systems, it's one level up, since node is typically
installed at `{prefix}/bin/node` rather than `{prefix}/node


When the `global` flag is set, npm installs things into this prefix

When it is not set, it uses the root of the current package, or the
current working directory if not in a package already
bin` so that they can be made available to scripts run
through npm
  Cache files are stored in `~/


This is controlled by the [`cache` config](/using-npm/config#cache) param
json` file, or a `node_modules`
folder


When you run `npm install foo@1
2
`

  However, since the folder
structure is: `foo/node_modules/bar/node_modules/baz`, there's no need to
put another copy of bar into `

/baz/node_modules`, since when baz calls
`require(""bar"")`, it will get the copy that is installed in
`foo/node_modules/bar`
  It
is still possible to have `a/node_modules/b/node_modules/a` if the two
""a"" packages are different versions

Since version 3, npm hoists dependencies by default
5
+-- bar@1
3
|   +-- blerg@1
x
|   |       `-- bar@1
2
3) <---[B]
    |   +-- node_modules
    |       +-- baz (2
0
2) <---[C]
    +-- asdf (2
3
2
3`, those are
installed in foo's `node_modules` folder


Even though the latest copy of blerg is 1
3
2
  So, that gets installed at [A]
  Since the
parent installation of blerg satisfies bar's dependency on `blerg@1


For a graphical breakdown of what is installed where, use `npm ls`
json](/configuring-npm/package-json)
* [npm install](/commands/npm-install)
* [npm pack](/commands/npm-pack)
* [npm cache](/commands/npm-cache)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [config](/using-npm/config)
* [npm publish](/commands/npm-publish)

---
title: install
section: 5
description: Download and install node and npm
---

### Description

To publish and install packages to and from the public npm registry, you
must install Node


### Overview

- [Checking your version of npm and
  Node
js](#checking-your-version-of-npm-and-nodejs)
- [Using a Node version manager to install Node
js and
  npm](#using-a-node-version-manager-to-install-nodejs-and-npm)
- [Using a Node installer to install Node
js and npm

Node version managers allow you to install and switch between multiple
versions of Node
  You can
[search for them on GitHub](https://github
js and npm on your system


* [Node
 If
  you use Linux, we recommend that you use a NodeSource installer
 Other versions have not yet been
tested with npm


#### Linux or other operating systems Node installers

If you're using Linux or another operating system, use one of the following
installers:

- [NodeSource installer](https://github
org/en/download/package-manager/) to
install npm for Linux in the way many Linux developers prefer


#### Less-common operating systems

For more information on installing Node
org/en/download/package-manager/

---
title: npm-shrinkwrap
json` is applications deployed
through the publishing process on the registry: for example, daemons and
command-line tools intended as global installs or `devDependencies`
json` are present in a
package root, `npm-shrinkwrap
json` will be preferred over the
`package-lock


For full details and description of the `npm-shrinkwrap
json](/configuring-npm/package-lock-json)
* [package


The `npm config` command can be used to update and edit the contents of the
user and global npmrc files


For a list of available configuration options, see
[config](/using-npm/config)


### Files

The four relevant files are:

* per-project config file (`/path/to/my/project/
npmrc`)
* per-user config file (`~/

Environment variables can be replaced using `${VARIABLE_NAME}`
npm-packages
```

Each of these files is loaded, and config options are resolved in priority
order


Array values are specified by adding ""[]"" after the key name
 `
com/npm/ini), which specifies this comment syntax
org
```

#### Per-project config file

When working locally in a project, a `
npmrc` file in the root of the
project (ie, a sibling of `node_modules` and `package
  For example, you
can't publish a module that forces itself to install globally, or in a
different location


Additionally, this file is not read in global mode, such as when running
`npm install -g`


#### Per-user config file

`$HOME/


#### Built-in config file

`path/to/npm/itself/npmrc`

This is an unchangeable ""builtin"" configuration file that npm keeps
consistent across updates
  This is primarily for distribution maintainers
to override default configs in a standard and consistent manner
npmjs
 If it must be scoped to a
specific path on the host that path may also be provided, such as
`//my-custom-registry
com/myorg
@another:registry=https://somewhere-else
com/another
//registry
com/:_authToken=MYTOKEN
; would apply only to @myorg
//somewhere-else
json file
 The
name and version together form an identifier that is assumed to be
completely unique
  Changes to the package should come along with changes
to the version


The name is what your thing is called
 This includes the
  scope for scoped packages
 This
  is not permitted without a scope

* New packages must not have uppercase letters in the name
 Therefore, the name can't contain any non-URL-safe
  characters


Some tips:

* Don't use the same name as a core Node module

* Don't put ""js"" or ""node"" in the name
  It's assumed that it's js, since
  you're writing a package
)
* The name will probably be passed as an argument to require(), so it
  should be something short, but also reasonably descriptive
npmjs
 `@myorg/mypackage`
json are the name and version fields as they will be required
 The
name and version together form an identifier that is assumed to be
completely unique
  Changes to the package should come along with changes
to the version
  (`npm install semver` to use it yourself


### homepage

The URL to the project homepage
0
string](https://spdx
0)""
}
```
If you are using a license that hasn't been assigned an SPDX identifier, or if
you are using a custom license, use a string value like this one:

```json
{
  ""license"" : ""SEE LICENSE IN <filename>""
}
```
Then include a file named `<filename>` at the top level of the package
  ""contributors"" is an array of people
  A
""person"" is an object with a ""name"" field and optionally ""url"" and ""email"",
like this:

```json
{
  ""name"" : ""Barney Rubble"",
  ""email"" : ""b@rubble
com/donate"",

  ""funding"": [
    {
      ""type"" : ""individual"",
      ""url"" : ""http://example
com/donate""
    },
    ""http://example
patreon
 File
patterns follow a similar syntax to `
 Omitting the field
will make it default to `[""*""]`, which means it will include all files


Some special files and directories are also included or excluded regardless
of whether they exist in the `files` array (see below)


You can also provide a `
 At the root of
your package it will not override the ""files"" field, but in subdirectories
it will
gitignore`
npmignore` is missing, `
_*`
* `
svn`
* `
wafpickle-N`
* `CVS`
* `config
git`
* `


For most modules, it makes the most sense to have a main script and often
not much else


If `main` is not set, it defaults to `index
js modules
 (e
cmd` (on
Windows PowerShell)
 When this package is installed as a dependency in another
package, the file will be linked where it will be available to that package
either directly by `npm exec` or by name in other scripts when invoking them
via `npm run-script`
js""
  }
}
```

So, when you install myapp, in case of unix-like OS it'll create a symlink
from the `cli
2
5"",
  ""bin"": {
    ""my-program"": ""
/path/to/program""
  }
}
```

Please make sure that your file(s) referenced in `bin` starts with
`#!/usr/bin/env node`, otherwise the scripts are started without the node
executable!

Note that you can also set the executable files using [directories


See [folders](/configuring-npm/folders#executables) for more info on
executables
/man/doc
3"",
  ""description"": ""A packaged foo fooer for fooing foos"",
  ""main"": ""foo
js"",
  ""man"": [
    ""
  The number dictates which man section the file is installed
into
2
/man/foo
/man/foo
2""
  ]
}
```

will create entries for `man foo` and `man 2 foo`

### directories

The CommonJS [Packages](http://wiki
npmjs
org/npm/latest), you'll see that it
has directories for doc, lib, and man


#### directories
bin

If you specify a `bin` directory in `directories


Because of the way the `bin` directive works, specifying both a `bin` path
and setting `directories


#### directories
man

A folder that is full of man pages
  If the git repo is on GitHub, then the `npm docs`
command will be able to find you
  It should not
be a URL to an html project page that you put in your browser
  It's for
computers
  Dependencies can also be identified with a
tarball or git URL


**Please do not put test harnesses or transpilers or other ""development""
time tools in your `dependencies` object


* `version` Must match `version` exactly
* `>version` Must be greater than `version`
* `>=version` etc
* `<version`
* `<=version`
* `~version` ""Approximately equivalent to version""  See
  [semver](https://github
com/npm/node-semver#versions)
* `1
2
, but not 1
0
* `http://

` See 'URLs as Dependencies' below
* `*` Matches any version
* `""""` (just an empty string) Same as `*`
* `version1 - version2` Same as `>=version1 <=version2`

9999"",
    ""bar"": "">=1
0
2 <2
2 <=2
3
4"",
    ""boo"": ""2
0
3
4
0"",
    ""asd"": ""http://asdf
com/asdf
tar
2"",
    ""elf"": ""~1
x"",
    ""thr"": ""3

 If neither `#<commit-ish>` or `#semver:<semver>` is
specified, then the default branch is used


Examples:

```bash
git+ssh://git@github
com:npm/cli
0
git+https://isaacs@github
json` will cause npm to believe it needs to perform a build
1
65, you can refer to GitHub URLs as just ""foo"":
""user/foo-project""
0
 For example:

```json
{
  ""name"": ""baz"",
  ""dependencies"": {
    ""bar"": ""file:


*note*: Packages linked by local path will not have their own
dependencies installed when `npm install` is ran in this case


In this case, it's best to map these additional items in a
`devDependencies` object
  See [`config`](/using-npm/config) for more on the topic
2
js""
}
```

The `prepare` script will be run before publishing, so that users can
consume the functionality without requiring them to compile it themselves


For example:

```json
{
  ""name"": ""tea-latte"",
  ""version"": ""1
x""
  }
}
```

This ensures your package `tea-latte` can be installed *along* with the
second major version of the host package `tea` only
 `npm install
tea-latte` could possibly yield the following dependency graph:

```bash
├── tea-latte@1
3
0
```

In npm versions 3 through 6, `peerDependencies` were not automatically
installed, and would raise a warning if an invalid version of the peer
dependency was found in the tree
2""`


### peerDependenciesMeta

When a user installs your package, npm will emit warnings if packages
specified in `peerDependencies` are not already installed


For example:

```json
{
  ""name"": ""tea-latte"",
  ""version"": ""1
2""
  },
  ""peerDependenciesMeta"": {
    ""soy-milk"": {
      ""optional"": true
    }
  }
}
```

Marking a peer dependency as optional ensures npm will not emit a warning
if the `soy-milk` package is not installed on the host
 This allows you to
integrate and interact with a variety of host packages without requiring
all of them to be installed


For example:

If we define a package
json like this:

```json
{
  ""name"": ""awesome-web-framework"",
  ""version"": ""1
0
  Note that the package names do not
include any versions, as that information is specified in `dependencies`


Alternatively, `""bundleDependencies""` can be defined as a boolean value
  This is a map of package name to version or
URL, just like the `dependencies` object
  For example, something like this:

```js
try {
  var foo = require('foo')
  var fooVersion = require('foo/package


if (foo) {
  foo
doFooThings()
}
```

Entries in `optionalDependencies` will override entries of the same name in
`dependencies`, so it's usually best to only put in one place


To make sure the package `foo` is always installed as version `1
0` while also making `bar` at any depth beyond `foo`
also `1
0
0`:

```json
{
  ""overrides"": {
    ""foo"": {
      ""
0
0
0
0""
    }
  }
}
```

Keys can be nested to any arbitrary length
0
0
0`:

```json
{
  ""overrides"": {
    ""bar@2
0""
    }
  }
}
```

You may not set an override for a package that you directly depend on unless
both the dependency and the override itself share the exact same spec
 To make
this limitation easier to deal with, overrides may also be defined as a
reference to a spec for a direct dependency by prefixing the name of the
package you wish the version to match with a `$`
0
0""
  },
  ""overrides"": {
    // BAD, will throw an EOVERRIDE error
    // ""foo"": ""^2
10
20""
  }
}
```

Unless the user has set the
[`engine-strict` config](/using-npm/config#engine-strict) flag, this field is
advisory only and will only produce warnings when your package is installed as a
dependency


### cpu

If your code only runs on certain cpu architectures,
you can specify which ones


```json
{
  ""cpu"": [
    ""x64"",
    ""ia32""
  ]
}
```

Like the `os` option, you can also block architectures:

```json
{
  ""cpu"": [
    ""!arm"",
    ""!mips""
  ]
}
```

The host architecture is determined by `process


### publishConfig

This is a set of config values that will be used at publish-time


### workspaces

The optional `workspaces` field is an array of file patterns that describes
locations within the local file system that the install client should look
up to find each [workspace](/using-npm/workspaces) that needs to be
symlinked to the top level `node_modules` folder
/packages` will be treated as workspaces as long as they have valid
`package


* `""scripts"":{""install"": ""node-gyp rebuild""}`

  If there is a `binding


* Provide a facility for users to ""time-travel"" to previous states of
  `node_modules` without having to commit the directory itself


* Facilitate greater visibility of tree changes through readable source
  control diffs
json` and `npm-shrinkwrap
json` will take precedence and
`package-lock
  This contains information about the
tree, and is used in lieu of reading the entire `node_modules` hierarchy
provided that the following conditions are met:

- All package folders it references exist in the `node_modules` hierarchy
  If you
are manually editing files in `node_modules`, it is generally best to
delete the file at `node_modules/
json`


As the hidden lockfile is ignored by older npm versions, it does not
contain the backwards compatibility affordances present in ""normal""
lockfiles


#### `version`

The version of the package this is a package-lock for
json`


Note that the file format changed significantly in npm v7 to track
information that would have otherwise required looking in `node_modules` or
the npm registry
 Backwards compatible to v1
  lockfiles

* `3`: The lockfile version used by npm v9 and above
 Backwards compatible to npm v7
npmjs
github
io/webappsec/specs/subresourceintegrity/)
  string for the artifact that was unpacked in this location
  (An `optional` dependency of
  a `dev` dependency will have both `dev` and `optional` set
)

* inBundle: A flag to indicate that the package is a bundled dependency


npm v7 ignores this section entirely if a `packages` section is present,
but does keep it up to date in order to support switching between npm v6
and npm v7

    * registry sources: This is a version number
3
0
3
tgz`)
    * local link sources: This is the file URL of the link
 (eg
      `file:libs/our-module`)

* integrity: A `sha512` or `sha1` [Standard Subresource
  Integrity](https://w3c
github
  For git
  dependencies, this is the commit sha
  If the tarball URL isn't on the same server as the
  registry URL then this is a complete URL


* dev: If true then this dependency is either a development dependency ONLY
  of the top level module or a transitive dependency of one


* optional: If true then this dependency is either an optional dependency
  ONLY of the top level module or a transitive dependency of one
  This is
  false for dependencies that are both an optional dependency of the top
  level and a transitive dependency of a non-optional dependency of the top
  level


* requires: This is a mapping of module name to version
json](/configuring-npm/npm-shrinkwrap-json)
* [package
json](/configuring-npm/package-json)
* [npm install](/commands/npm-install)


---
title: config
section: 7
description: More than you probably want to know about npm configuration
---

### Description

This article details npm configuration in general
 To learn about the `config` command,
see [`npm config`](/commands/npm-config)
  For example, putting
`npm_config_foo=bar` in your environment will set the `foo`
configuration parameter to `bar`


#### Default Configs

Run `npm config ls -l` to see a set of configuration parameters that are
internal to npm, and are defaults if nothing else is specified


### Shorthands and Other CLI Niceties

The following shorthands are parsed on the command-line:

* `-a`: `--all`
* `--enjoy-by`: `--before`
* `-c`: `--call`
* `--desc`: `--description`
* `-f`: `--force`
* `-g`: `--global`
* `--iwr`: `--include-workspace-root`
* `-L`: `--location`
* `-d`: `--loglevel info`
* `-s`: `--loglevel silent`
* `--silent`: `--loglevel silent`
* `--ddd`: `--loglevel silly`
* `--dd`: `--loglevel verbose`
* `--verbose`: `--loglevel verbose`
* `-q`: `--loglevel warn`
* `--quiet`: `--loglevel warn`
* `-l`: `--long`
* `-m`: `--message`
* `--local`: `--no-global`
* `-n`: `--no-yes`
* `--no`: `--no-yes`
* `-p`: `--parseable`
* `--porcelain`: `--parseable`
* `-C`: `--prefix`
* `--readonly`: `--read-only`
* `--reg`: `--registry`
* `-S`: `--save`
* `-B`: `--save-bundle`
* `-D`: `--save-dev`
* `-E`: `--save-exact`
* `-O`: `--save-optional`
* `-P`: `--save-prod`
* `-?`: `--usage`
* `-h`: `--usage`
* `-H`: `--usage`
* `--help`: `--usage`
* `-v`: `--version`
* `-w`: `--workspace`
* `--ws`: `--workspaces`
* `-y`: `--yes`

If the specified configuration param resolves unambiguously to a known
configuration parameter, then it is expanded to that configuration
parameter
  For example:

```bash
npm ls --par
# same as:
npm ls --parseable
```

If multiple single-character shorthands are strung together, and the
resulting combination is unambiguously not some other configuration
param, then it is expanded to its various component pieces
npmrc file by running `npm login`




#### `access`

* Default: 'public' for new packages, existing packages it will not change the
  current level
* Type: null, ""restricted"", or ""public""

If you do not want your scoped package to be publicly viewable (and
installable) set `--access=restricted`




#### `all`

* Default: false
* Type: Boolean

When running `npm outdated` and `npm ls`, setting `--all` will show all
outdated or installed packages, rather than only those directly depended
upon by the current project




#### `allow-same-version`

* Default: false
* Type: Boolean

Prevents throwing an error when `npm version` is used to set the new version
to the same value as the current version
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted
 For example, `foo@latest` might install `foo@1
0`


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems
 Values should be in PEM format (Windows calls
it ""Base-64 encoded X


Multiple CAs can be trusted by specifying an array of certificates:

```ini
ca[]=""

""
```

See also the `strict-ssl` config




#### `cache`

* Default: Windows: `%LocalAppData%\npm-cache`, Posix: `~/
npm`
* Type: Path

The location of npm's cache directory
 Similar to the `ca` setting, but allows for multiple CA's, as
well as for the CA information to be stored in a file on disk


```bash
npm exec --package yo --package generator-node --call ""yo node""
```



#### `cidr`

* Default: null
* Type: null or String (can be set multiple times)

This is a list of CIDR address to be used when configuring limited access
tokens with the `npm token create` command




#### `color`

* Default: true unless the NO_COLOR environ is set to something other than '0'
* Type: ""always"" or Boolean

If false, never shows colors




#### `cpu`

* Default: null
* Type: null or String

Override CPU architecture of native modules to install




#### `diff-name-only`

* Default: false
* Type: Boolean

Prints only filenames when using `npm diff`


Note: this causes `npm diff` to ignore the `--diff-src-prefix` and
`--diff-dst-prefix` configs
exe' on Windows, or 'vi' on Unix systems
* Type: String

The command to run for `npm edit` and `npm config edit`


This can be overridden by setting the `--force` flag
 Can be either
true (expect some results) or false (expect no results)


This config can not be used with: `expect-result-count`

#### `fetch-retries`

* Default: 2
* Type: Number

The ""retries"" config for the `retry` module to use when fetching packages
from the registry




#### `fetch-retry-factor`

* Default: 10
* Type: Number

The ""factor"" config for the `retry` module to use when fetching packages




#### `fetch-retry-mintimeout`

* Default: 10000 (10 seconds)
* Type: Number

The ""minTimeout"" config for the `retry` module to use when fetching
packages

* Allow `npm audit fix` to install modules outside your stated dependency
  range (including SemVer-major changes)

* Allow conflicting peerDependencies to be installed in the root project


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging




#### `format-package-lock`

* Default: true
* Type: Boolean

Format `package-lock




#### `git`

* Default: ""git""
* Type: String

The command to use for git commands
 If git is installed on the computer,
but is not in the `PATH`, then set this to the full path to the git binary




#### `git-tag-version`

* Default: true
* Type: Boolean

Tag the commit when using the `npm version` command
 See
[folders](/configuring-npm/folders) for more on the differences in behavior




#### `https-proxy`

* Default: null
* Type: null or URL

A proxy to use for outgoing https requests
 This is useful, for example, when
running scripts that may only apply for some builds in an otherwise generic
CI setup


#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files


This is the inverse of `--omit=<type>`




#### `include-staged`

* Default: false
* Type: Boolean

Allow installing ""staged"" published packages, as defined by [npm RFC PR
#92](https://github


This is experimental, and not implemented by the npm public registry




#### `init-author-url`

* Default: """"
* Type: """" or URL

The value `npm init` should use by default for the package author's
homepage




#### `init-license`

* Default: ""ISC""
* Type: String

The value `npm init` should use by default for the package license




#### `init-module`

* Default: ""~/
js""
* Type: Path

A module that will be loaded by the `npm init` command




#### `init-version`

* Default: ""1
json`


Not supported by all npm commands




#### `legacy-peer-deps`

* Default: false
* Type: Boolean

Causes npm to completely ignore `peerDependencies` when building a package
tree, as in npm versions 3 through 6




#### `libc`

* Default: null
* Type: null or String

Override libc of native modules to install
12


When set to ""global"" mode, packages are installed into the `prefix` folder
instead of the current working directory
json and
npm-shrinkwrap-json files
 Lacks some data that
is used during the install, resulting in slower and possibly less
deterministic installs
 Smaller on
disk than lockfile version 2, but not interoperable with older npm versions
 All logs are written to a debug log, with the
path to that file printed if the execution of a command fails


Any logs of a higher level than the setting are shown
 See [`npm logging`](/using-npm/logging)
for more information




#### `maxsockets`

* Default: 15
* Type: Number

The maximum number of connections to use per origin (protocol/host/port
combination)


Any ""%s"" in the message will be replaced with the version number
 This does not impact how npm itself is executed but it does impact
how lifecycle scripts are called




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty


Note that these dependencies _are_ still resolved and added to the
`package-lock
 They are just not
physically installed on disk


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts
 Subsequent installs will need to resolve tarball
endpoints with the configured registry, likely resulting in a longer install
time




#### `os`

* Default: null
* Type: null or String

Override OS of native modules to install
 Acceptable values are same as `os`
field of package




#### `pack-destination`

* Default: ""
json`,
ignoring `node_modules`
json` will be updated,
instead of checking `node_modules` and downloading dependencies




#### `prefer-dedupe`

* Default: false
* Type: Boolean

Prefer to deduplicate packages if possible, rather than choosing a newer
version of a dependency
 To force full offline mode, use
`--offline`
 If set on the command line, then it
forces non-global commands to run in the specified folder
0-rc




#### `provenance`

* Default: false
* Type: Boolean

When publishing from a supported cloud CI/CD system, the package will be
publicly linked to where it was built and published from


This config can not be used with: `provenance`

#### `proxy`

* Default: null
* Type: null, false, or URL

A proxy to use for outgoing http requests


You may also specify a bare hostname (e
g
, ""registry


When used with the `npm rm` command, removes the dependency from
`package




#### `save-dev`

* Default: false
* Type: Boolean

Save installed packages to a package
json file as `peerDependencies`



#### `save-prefix`

* Default: ""^""
* Type: String

Configure how versions of packages installed to a package
json file via
`--save` or `--save-dev` get prefixed
2
 This is useful if
a package already exists in `devDependencies` or `optionalDependencies`, but
you want to move it to be a non-optional production dependency


This is the default behavior if `--save` is true, and neither `--save-dev`
or `--save-optional` are true
 For SPDX, this is the
value for the `primaryPackagePurpose` field
 For CycloneDX, this is the
value for the `type` field
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands
 Will not apply at all to legacy
searches




#### `searchstaleness`

* Default: 900
* Type: Number

The age of the cache, in seconds, before another registry request is made if
using legacy search endpoint




#### `shell`

* Default: SHELL environment variable, or ""bash"" on Posix, or ""cmd
exe"" on
  Windows
* Type: String

The shell to run for the `npm explore` command


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved




#### `tag-version-prefix`

* Default: ""v""
* Type: String

If set, alters the prefix used when tagging a new version when performing a
version increment using `npm version`
0
0`, _only use this property if it is absolutely necessary_


You can quickly view it with this [json](https://npm
im/json) command line:
`cat ~/


Timing information will also be reported in the terminal
0777 (0
511)

The ""umask"" value to use when setting the file creation mode on files and
folders
 Other files are given a mode which is `0o666` masked against
this value


Thus, the effective default umask value on most POSIX systems is 0o22,
meaning that folders and executables are created with a mode of 0o755 and
other files are created with a mode of 0o644
js version in use
* `{platform}` - The value of `process




#### `userconfig`

* Default: ""~/
json` file if one
exists, and exit successfully


Only relevant when specified explicitly on the command line




#### `viewer`

* Default: ""man"" on Posix, ""browser"" on Windows
* Type: String

The program to use to view help content




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc




#### `yes`

* Default: null
* Type: null or Boolean

Automatically answer ""yes"" to any prompts that npm might print on the
command line
 Use registry scoped `keyfile` and `certfile` instead
CER)"") with
newlines replaced by the string ""\n""
 For example:

```ini
cert=""-----BEGIN CERTIFICATE-----\nXXXX\nXXXX\n-----END CERTIFICATE-----""
```

It is _not_ the path to a certificate file, though you can set a
registry-scoped ""certfile"" path like
""//other-registry
 Sets `--install-strategy=shallow`


Alias for `--init-author-url`



#### `init
license`

* Default: ""ISC""
* Type: String
* DEPRECATED: Use `--init-license` instead
npm-init
js""
* Type: Path
* DEPRECATED: Use `--init-module` instead
0
0""
* Type: SemVer string
* DEPRECATED: Use `--init-version` instead
 Use registry scoped `keyfile` and `certfile` instead
 Values should be in PEM
format with newlines replaced by the string ""\n""
 For example:

```ini
key=""-----BEGIN PRIVATE KEY-----\nXXXX\nXXXX\n-----END PRIVATE KEY-----""
```

It is _not_ the path to a key file, though you can set a registry-scoped
""keyfile"" path like ""//other-registry
pem""




#### `only`

* Default: null
* Type: null, ""prod"", or ""production""
* DEPRECATED: Use `--omit=dev` to omit dev dependencies from the install


When set to `prod` or `production`, this is an alias for `--omit=dev`




#### `optional`

* Default: null
* Type: null or Boolean
* DEPRECATED: Use `--omit=optional` to exclude optional dependencies, or
  `--include=optional` to include them


Default value does install optional deps unless otherwise omitted
 `npm fund`, `npm ls`, `npm outdated`, `npm audit` 
""]`)
- `#<name>@<version>` (equivalent to `[name=<name>]:semver(<version>)`)
- `,` selector list delimiter
- `
json`, or is a child of said dependency
- `
optional` dependency found in the `optionalDependencies` section of `package
json`, or a child of said dependency
- `
bundled` dependency found in the `bundleDependencies` section of `package
mozilla
org/en-US/docs/Web/CSS/:is)
- [`:root`](https://developer
npmjs
com/cli/v8/configuring-npm/package-json#private) when a dependency is private
- `:link` when a dependency is linked (for instance, workspaces or packages manually [`linked`](https://docs
com/npm/node-semver) version or range to a selector
- `:path(<path>)` [glob](https://www
json` using [semver](https://github
 If both are versions, according to `semver
valid()`, `intersects` is used
0)` returns every node that has a `version` satisfied by the provided range `^1
0, :attr(engines, [node]))` returns every node which has an `engines
0`
- `:semver(1
0, [version], lt)` every node with a `version` less than `1
0
 The type parameter may be one of the following:

- `any` (default) a version exists that is greater than the current one
- `in-range` a version exists that is greater than the current one, and satisfies at least one if its parent's dependencies
- `out-of-range` a version exists that is greater than the current one, does not satisfy at least one of its parent's dependencies
- `major` a version exists that is a semver major greater than the current one
- `minor` a version exists that is a semver minor greater than the current one
- `patch` a version exists that is a semver patch greater than the current one

In addition to the filtering performed by the pseudo selector, some extra data is added to the resulting objects
inRange` an array of objects, each with a `from` and `versions`, where `from` is the on-disk location of the node that depends on the current node and `versions` is an array of all available versions that satisfies that dependency
 This is only populated if `:outdated(in-range)` is used

- `outdated
outOfRange` an array of objects, identical in shape to `inRange`, but where the `versions` array is every available version that does not satisfy the dependency


Some examples:

- `:root > :outdated(major)` returns every direct dependency that has a new semver major release
- `
prod:outdated(in-range)` returns production dependencies that have a new release that satisfies at least one of its parent's dependencies

##### `:vuln`

The `:vuln` pseudo selector retrieves data from the registry and returns information about which if your dependencies has a known vulnerability
  Only dependencies whose current version matches a vulnerability will be returned


Some examples:

- `:root > 

- `:vuln([cwe=1333])` returns only dependencies with a vulnerability that includes CWE-1333 (ReDoS)

#### [Attribute Selectors](https://developer
org/en-US/docs/Web/CSS/Attribute_selectors)

The attribute selector evaluates the key/value pairs in `package
json` if they are `String`s



- `[attribute*=value]` attribute value contains string


- `[attribute$=value]` attribute value ends with



#### `Array` & `Object` Attribute Selectors

The generic `:attr()` pseudo selector standardizes a pattern which can be used for attribute selection of `Object`s, `Array`s or `Arrays` of `Object`s accessible via `Arborist`'s `Node
 The last argument passed to `:attr()` must be an `attribute` selector or a nested `:attr()`


```css
/* return dependencies that have a testling config for opera browsers */
*:attr(testling, browsers, [~=opera])
```

#### `Arrays`

`Array`s specifically uses a special/reserved `
` character in place of a typical attribute name
 we'd have to check the property & iterate to match selection */
*:attr([keywords^=react])
*:attr(contributors, :attr([name~=Jordan]))
```

##### Example of an `Array` matching directly to a value:
```css
/* return dependencies that have the exact keyword ""react"" */
/* this is equivalent to `*:keywords([value=""react""])` */
*:attr([keywords=react])
```

##### Example of an `Array` of `Object`s:
```css
/* returns */
*:attr(contributors, [email=ruyadorno@github
json`)
 Dependencies are allowed to be included in multiple groups (ex
dev`
- `
workspace`

Please note that currently `workspace` deps are always `prod` dependencies
querySelectorAll()` method
  - this method will return a filtered, flattened dependency Arborist `Node` list based on a valid query selector

```js
const Arborist = require('@npmcli/arborist')
const arb = new Arborist({})
```

```js
// root-level
arb
then(async (tree) => {
  // query for the deduped version of react
  const results = await tree
querySelectorAll('#react:not(:deduped)')
  // query the deduped react for git deps
  const deps = await results[0]
com/user/project
git#commit-ish
git+ssh://user@hostname:project


See [`package
json`](/configuring-npm/package-json) for details about what
goes in that file


  It does not necessarily need to match your github repository name


  So, `node-foo` and `bar-js` are bad names


* engines: Specify the versions of node (or whatever else) that your
  program runs on


You can use `npm init` in the root of your package in order to get you
started with a pretty basic package
json file
npmignore` file, but there *is* a `
npmignore` files follow the [same pattern
rules](https://git-scm
com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#_ignoring)
as `

* You can end patterns with a forward slash `/` to specify a directory
npmignore` explicitly:

* `
DS_Store`
* `
gitignore`
* `
 npm automatically handles this for you, so don't
bother adding `node_modules` to `


The following paths and files are never ignored, so adding them to
`


#### Testing whether your `


### Before Publishing: Make Sure Your Package Installs and Works

**This is important
/some-other-folder
npm install 


Then go into the node-repl, and try using require(""my-thing"") to
bring in your module's main module


### Publish your Package

This part's easy


Note that pretty much **everything in that folder will be exposed**
by default


### Brag about it

Send emails, write blogs, blab in IRC
`
  This is especially helpful in debugging a specific `npm` issue as you can run
a command multiple times with different config values and then diff all the log files


Log files will be removed from the `logs-dir` when the number of log files exceeds `logs-max`, with the oldest logs being deleted first


##### Aliases

The log levels listed above have various corresponding aliases, including:

- `-d`: `--loglevel info`
- `--dd`: `--loglevel verbose`
- `--verbose`: `--loglevel verbose`
- `--ddd`: `--loglevel silly`
- `-q`: `--loglevel warn`
- `--quiet`: `--loglevel warn`
- `-s`: `--loglevel silent`
- `--silent`: `--loglevel silent`

#### `foreground-scripts`

The `npm` CLI began hiding the output of lifecycle scripts for `npm install` as of `v7`
 Notably, this means you will not see logs/output from packages that may be using ""install scripts"" to display information back to you or from your own project's scripts defined in `package
json`
 Super admin, controls billing & adding people to the org
 Team admin, manages team membership & package access
 The super admin will use the website to manage membership


The team admin is the person who manages team creation, team membership, and package access for teams
 `npm team` see [npm team](/commands/npm-team) for more details
2


### Package name

* `[<@scope>/]<pkg>`
* `[<@scope>/]<pkg>@<tag>`
* `[<@scope>/]<pkg>@<version>`
* `[<@scope>/]<pkg>@<version range>`

Refers to a package by name, with or without a scope, and optionally
tag, version, or version range
json`, this refers to a package by an alias

The `<alias>` is the name of the package as it is reified in the
`node_modules` folder, and the `<name>` refers to a package name as
found in the configured registry
2`
* `semver:@npm:semver@legacy`

### Folders

* `<folder>`

This refers to a package on the local filesystem
tgz`
* `https://registry
org/semver/-/semver-1


### git urls

* `<git:// url>`
* `<github username>/<github project>`

Refers to a package in a git repo
  You can specify a
git tag, branch, or other git ref by appending `#ref`
git`
* `git@github
com:npm/cli
im/npm-package-arg)
* [scope](/using-npm/scope)
* [config](/using-npm/config)

---
title: registry
section: 7
description: The JavaScript Package Registry
---

### Description

To resolve packages by name and version, npm talks to a registry website
that implements the CommonJS Package Registry specification for reading
package info
 Use of the npm public registry is
subject to terms of use available at <https://docs
npmjs
 See
[Auth Related Configuration](/configuring-npm/npmrc#auth-related-configuration)

When the default registry is used in a package-lock or shrinkwrap it has the
special meaning of ""the currently configured registry""


### Does npm send any information about me back to the registry?

Yes
 In the future npm hopes to build registry features that use this
  information to allow you to customize your experience for your
  organization
 This is detected by
  looking for the following environment variables: `CI`, `TDDIUM`,
  `JENKINS_URL`, `bamboo
 If you'd like to learn more you may find
  the [original PR](https://github
com/npm/npm-registry-client/pull/129)
  interesting


The npm registry does not try to correlate the information in these headers
with any authenticated accounts that may be used in the same requests


### How can I prevent my package from being published in the official registry?

Set `""private"": true` in your `package
json` to prevent it from being
published at all, or
`""publishConfig"":{""registry"":""http://my-internal-registry
npmjs
  That will remove
npm, but leave behind anything you've installed


To remove everything npm-related manually:

```bash
rm -rf /usr/local/{lib/node{,/
3, npm used shim files for executables and node
modules
  To track those down, you can do the following:

```bash
find /usr/local/{lib/node,bin} -exec grep -l npm \{\} \; ;
```

### See also

* [npm uninstall](/commands/npm-uninstall)
* [npm prune](/commands/npm-prune)

---
title: scope
section: 7
description: Scoped packages
---

### Description

All npm packages have a name
 When used in package names, scopes are preceded by an `@` symbol
and followed by a slash, e


Each npm user/organization has their own scope, and only you can add packages
in your scope
 if your other packages are installed in `node_modules/packagename`,
scoped modules will be installed in `node_modules/@myorg/packagename`


A scoped package is installed by referencing it by name, preceded by an
`@` symbol, in `npm install`:

```bash
npm install @myorg/mypackage
```

Or in `package
3


(As of 2015-04-19, and with npm 2
0 or better, the primary npm registry
**does** support scoped packages
)

If you wish, you may associate a scope with a registry; see below
  You will need to specify
`--access public` with the initial `npm publish` command
  This will publish
the package and set access to `public` as if you had run `npm access public`
after publishing
  You do not need to do this when publishing new versions of
an existing scoped package
 You can then change the access permissions, if
desired, with `npm access` or on the npmjs
org)
project
com --scope=@myco
```

Scopes have a many-to-one relationship with registries: one registry can
host multiple scopes, but a scope only ever points to one registry
com
```

Once a scope is associated with a registry, any `npm install` for a package
with that scope will request packages from that registry instead
 Any
`npm publish` for a package name that contains the scope will be published to
that registry instead
json` file supports a number
of built-in scripts and their preset life cycle events as well as
arbitrary scripts
json`, simply create another script
*with a matching name* and add ""pre"" or ""post"" to the beginning of them


* `prepare`, `prepublish`, `prepublishOnly`, `prepack`, `postpack`, `dependencies`

**prepare** (since `npm@4
e
 during `npm publish`
    and `npm pack`
* Runs on local `npm install` without any arguments
* Runs AFTER `prepublish`, but BEFORE `prepublishOnly`

* NOTE: If a package being installed through git contains a `prepare`
 script, its `dependencies` and `devDependencies` will be installed, and
 the prepare script will be run, before the package is packaged and
 installed


**prepublish** (DEPRECATED)
* Does not run during `npm publish`, but does run during `npm ci`
  and `npm install`
 See below for more info


**prepack**
* Runs BEFORE a tarball is packed (on ""`npm pack`"", ""`npm publish`"", and when installing a git dependency)
  As of `npm@4
0


See <https://github
 This includes tasks such as:

* Compiling CoffeeScript source code into JavaScript
 Additionally, this means that:

* You can depend on `coffee-script` as a `devDependency`, and thus
  your users don't need to have it installed

* You don't need to include minifiers in your package, reducing
  the size for your users
gyp` file in the root of your package and you
haven't defined your own `install` or `preinstall` scripts, npm will
default the `install` command to compile using node-gyp via `node-gyp
rebuild`

These are run from the scripts of `<pkg-name>`

#### [`npm pack`](/commands/npm-pack)

* `prepack`
* `prepare`
* `postpack`

#### [`npm publish`](/commands/npm-publish)

* `prepublishOnly`
* `prepack`
* `prepare`
* `postpack`
* `publish`
* `postpublish`

#### [`npm rebuild`](/commands/npm-rebuild)

* `preinstall`
* `install`
* `postinstall`
* `prepare`

`prepare` is only run if the current directory is a symlink (e
g


Due to the lack of necessary context, `uninstall` lifecycle scripts are not implemented and will not function


### Environment

Package scripts run in an environment where many pieces of information
are made available regarding the setup of npm and the current state of
the process
json vars

The package
 So,
for instance, if you had `{""name"":""foo"", ""version"":""1
2
5""}` in your
package
json file, then your package scripts would have the
`npm_package_name` environment variable set to ""foo"", and the
`npm_package_version` set to ""1
2
npm_package_name` and
`process
json`](/configuring-npm/package-json) for more on package configs
 So, you could have a
single script used for different parts of the process which switches
based on what's currently happening
js""}}` in your package
env
js or even
JavaScript programs

  If the failure is minor or only will prevent some optional features, then
  it's better to just print a warning and exit successfully

* Inspect the env to determine where to put things
  For instance, if
  the `npm_config_binroot` environment variable is set to `/home/user/bin`, then
  don't try to install executables into `/usr/local/bin`
 The only valid use of `install` or `preinstall`
  scripts is for compilation which must be done on the target architecture


### See Also

* [npm run-script](/commands/npm-run-script)
* [package
json](/configuring-npm/package-json)
* [npm developers](/using-npm/developers)
* [npm install](/commands/npm-install)

---
title: workspaces
section: 7
description: Working with workspaces
---

### Description

**Workspaces** is a generic term that refers to the set of features in the
npm cli that provides support for managing multiple packages from your local
file system from within a singular top-level, root package
 It automates the linking process
as part of `npm install` and removes the need to manually use `npm link` in
order to add references to packages that should be symlinked into the current
`node_modules` folder


We also refer to these packages being auto-symlinked during `npm install` as a
single **workspace**, meaning it's a nested package within the current local
file system that is explicitly defined in the [`package
json`](/configuring-npm/package-json#workspaces)
`workspaces` configuration
js package, e
/packages/a
+-- package-lock
 For example in a project that already has a
`package
json`
json
`-- packages
   +-- a
   |   `-- package
json
```

If you want to add a dependency named `abbrev` from the registry as a
dependency of your workspace **a**, you may use the workspace config to tell
the npm installer that package should be added as a dependency of the provided
workspace:

```
npm install abbrev -w a
```

Note: other installing commands such as `uninstall`, `ci`, etc will also
respect the provided `workspace` configuration


### Using workspaces

Given the [specifics of how Node
org/dist/latest-v14
x/docs/api/modules
 Continuing from the example defined
above, let's also create a Node
js script that will require the workspace `a`
example module, e
g:

```
// 
js
module
/lib/index
js`

This demonstrates how the nature of `node_modules` resolution allows for
**workspaces** to enable a portable workflow for requiring each **workspace**
in such a way that is also easy to [publish](/commands/npm-publish) these
nested workspaces to be consumed elsewhere


### Running commands in the context of workspaces

You can use the `workspace` configuration option to run commands in the context
of a configured workspace
 For a project containing multiple workspaces, e
g:

```

/packages/a/package


Please note that you can also specify this argument multiple times in the
command-line in order to target multiple workspaces, e
g:

```
npm run test --workspace=a --workspace=b
```

Or run the command for each workspace within the 'packages' folder:
```
npm run test --workspace=packages
```

It's also possible to use the `workspaces` (plural) configuration option to
enable the same behavior but running that command in the context of **all**
configured workspaces
/packages/b`


Commands will be run in each workspace in the order they appear in your `package


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies


# @npmcli/arborist

[![npm version](https://img
shields
shields
im/@npmcli/arborist)
[![CI - @npmcli/arborist](https://github
com/npm/cli/actions/workflows/ci-npmcli-arborist
yml/badge
svg)](https://github
  defaults to npm's default registry
  registry: 'https://registry


  // Safest: a bearer token provided by a registry:
  // 1
com:token': 'blahblahblah',
  '//basic
foo
  reads the actual contents of node_modules
arb

arb
loadVirtual()
virtualTree
  // now arb
buildIdealTree(options)
then(() => {
  // next step is to reify that ideal tree onto disk
manifest if the name can't be
  //   determined from the spec
  (Eg, `github:foo/bar` vs `foo@somespec`
)
  //   The dep will be saved in the location where it already exists,
  //   (or pkg
dependencies) unless a different saveType is specified

  // saveType: Save added packages in a specific dependency set
optional flag
  // saveBundle: add newly added deps to the bundleDependencies list
  // update: Either `true` to just go ahead and update everything, or an
  //   object with any or all of the following fields:
  //   - all: boolean
  Prune extraneous nodes from the tree

  // preferDedupe: prefer to deduplicate packages if possible, rather than
  //   choosing a newer version of a dependency
  Default false

})

// WRITING

// Make the idealTree be the thing that's on disk
arb
then(() => {
  // node modules has been written to match the idealTree
})
```

## DATA STRUCTURES

A `node_modules` tree is a logical graph of dependencies overlaid on a
physical tree of folders


A `Node` represents a package folder on disk, either at the root of the
package, or within a `node_modules` folder
  The physical structure of the
folder tree is represented by the `node
children` map of nodes within its `node_modules`
folder, where the key in the map is the name of the folder in
`node_modules`, and the value is the child node


A node without a parent is a top of tree
  This can be a
symbolic link to a package folder within the current tree, or elsewhere on
disk
target` is a reference to the actual node


An `Edge` represents a dependency relationship
from` is a reference to the
node that has the dependency, and `edge
to` is a reference to the node that
requires the dependency
spec` are immutable; `edge


* `node
name` The name of this node's folder in `node_modules`

* `node


    Setting `node
parent` will automatically update `node
json` file
path` File path to this package

* `node
root` The root node where we are working
top` The top node in this node's tree

* `node

  These flags are relevant when pruning dependencies out of the tree or
  deciding what to reify
  See **Package Dependency Flags** below for
  explanations

* `node
edgesOut` Edges in the dependency graph indicating nodes that this
  node depends on, which resolve its dependencies


* `node
resolve(name)`  Identify the node that will be returned when code
  in this package runs `require(name)`

* `node

* `link


### class Edge

Edge objects represent a dependency relationship a package node to the
point in the tree where the dependency will be loaded
from` The node that has the dependency

* `edge
type` The type of dependency

* `edge
error` A string indicating the type of error if there is a problem,
  or `null` if it's valid
  Note that this is
      _not_ set for unmet dependencies of the `optional` type

    * `PEER LOCAL` Indicates that a `peerDependency` is found in the
      node's local `node_modules` folder, and the node is not the top of
      the tree
reload()` Re-resolve to find the appropriate value for `edge


### Package Dependency Flags

The dependency type of a node can be determined efficiently by looking at
the `dev`, `optional`, and `devOptional` flags on the node object
  These
are updated by arborist when necessary whenever the tree is modified in
such a way that the dependency graph can change, and are relevant when
pruning nodes from the tree

* If _both_ `node
dev` and `node


This module is the spiritual descendant of
[`npmconf`](http://npm
im/npmconf), and the code that once lived in npm's
`lib/config/` folder
json` file
)
- The `userconfig` value, as set by the environment and CLI (defaulting to
  `~/

- A `builtin` config, read from a `npmrc` file in the root of the npm
  project itself, overrides all defaults
  These are
  parsed by [`nopt`](http://npm
im/nopt), which is not a great choice, but
  it's the one that npm has used forever, and changing it will be
  difficult
  eg `some-key = some-value` in the
  `localPrefix` folder (ie, the `cwd`, or its nearest parent that contains
  either a `node_modules` folder or `package
)
- INI-formatted userconfig file
npmrc`

  The `userconfig` config value can be overridden by the `cli`, `env`, or
  `project` configs to change this value
  eg `some-key = some-value` in
  the `globalPrefix` folder, which is inferred by looking at the location
  of the node executable, or the `prefix` setting in the `cli`, `env`,
  `project`, or `userconfig`
  The `globalconfig` value at any of those
  levels can override this
argv
  // argv: [] <- if you are using this package in your own cli
  //             and dont want to have colliding argv
  argv: process
argv,
  // optional, defaults to process
execPath
  execPath: process
platform
  platform: process
cwd()
  cwd: process
load()
then(() => {
  conf
  Note that some are effectively
  given semantic value in the config loading process itself

  These should be defined for all configs given a type, and must be valid

- `env` Optional, defaults to `process

- `argv` Optional, defaults to `process
  Source of the CLI options
  used for configuration


Fields:

- `config
  Set by the
  `prefix` config value, or defaults based on the location of the
  `execPath` option
  Set by the
  `prefix` config value on the CLI only, or defaults to either the `cwd` or
  its nearest ancestor containing a `node_modules` folder or `package

- `config

  - `raw` The raw data used to generate this config data, as it was parsed
    initially from the environment, config file, or CLI options

- `config
list[0]` is the `cli` level,
  `config
HOME` or
  calling `os
)` will be
  re-evaluated when `config


### `config
find(key)`

Find the effective place in the configuration levels a given key is set
delete(key, where = 'cli')`

Delete the configuration key from the specified level in the config stack


### `config


Returns `true` if all configs are valid


### `config
validate()`) and
perform the necessary steps to resolve them
 If no problems are provided,
this method will call `config


### `config


This method can be used for avoiding or tweaking default values, e
g:

>  Given a global default definition of foo='foo' it's possible to read that
>  value such as:
>
>  ```js
>     const save = config
isDefault('foo') ? 'bar' : config
 Do not edit
 -->

ISC License

Copyright npm, Inc


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
then(files => {
  // files is an array of items that need to be passed to
  // rimraf or moved out of the way to make the folder empty
  // if foo bundled dependencies, those will be included

  // It will not traverse into child directories, because we set
  // depth:1 in the options

  // If the folder doesn't exist, this returns an empty array
bin/some
node_modules/bundle-some/package
json
node_modules/bundle-some/node_modules/@scope/baz
node_modules/bundle-some/node_modules/
bin/foo
node_modules/bundle-some/node_modules/foo
```

CLI options:

```
Usage:
  installed-package-contents <path> [-d<n> --depth=<n>]

Lists the files installed for a package specified by <path>
  Typically you'd want to set this to either `1` (to get the
    surface files and folders) or `Infinity` (to get all files), but any
    other positive number is supported as well
  If set to `0` or a
    negative number, returns the path provided and (if it is a package) its
    set of linked bins

* `path` Required
  Path to the package in `node_modules` where traversal
    should begin
  This includes all bundled dependencies in
`node_modules`, and any linked executables in `node_modules/
bin` that the
package caused to be installed

- If all linked bin scripts were removed, then an empty `node_modules/


In the interest of speed and algorithmic complexity, this module does _not_
do a subsequent readdir to see if it would remove all directory entries,
though it would be easier to look at if it returned `node_modules` or
`
 Do not edit


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT


Permission to use, copy, modify, and/or distribute this software for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE COPYRIGHT HOLDER DISCLAIMS
ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS


[![Build Status](https://travis-ci
svg?branch=master)](https://coveralls
argv`


1
 If not in a node environment, not supported


7


6
 Guess based on the `TERM_PROGRAM` environ
  These terminals support
   16m colors:

    - `iTerm
app` version 3
has16m) {
  console
)

```javascript
var colorSupport = require('color-support')

if (colorSupport
log('\x1b[31mbasic colors\x1b[0m')
} else {
  console
  Ignore the `isTTY` check

* ignoreDumb - default false

* ignoreCI - default false
  Ignore `CI` environ check
 Defaults to `process

* level - A number from 0 to 3

  Except for `alwaysReturn` to return an object for level 0, all other
  options are ignored, since no checking is done if a level is
  explicitly set
  It takes no command line arguments
im/~sindresorhus)
  Does not cache the results, so `hash -r` is not
needed when the PATH changes
catch(er => { 

 })

// sync usage
// throws if not found
var resolved = which
sync('node')

// if nothrow option is used, returns null if not found
resolved = which

```

## OPTIONS

You may pass an options object as the second argument

- `all`: Return all matches, instead of just the first one
org/mathiasbynens/cssesc
io/codecov/c/github/mathiasbynens/cssesc
escape()` method is available in a separate repository
com/borodean/ruby-cssesc):

```bash
gem install ruby-cssesc
```

```ruby
require 'ruby-cssesc'
CSSEsc
be/notes/css-escapes)
 If you want to use the result as a CSS identifier instead (in a selector, for example), set this option to `true`
 This means that any occurences of `'` in the input text will be escaped as `\'`, so that the output can be used in a CSS string literal wrapped in single quotes


```js
cssesc('Lorem ipsum ""dolor"" sit \'amet\' etc


```js
cssesc('Lorem ipsum ""dolor"" sit \'amet\' etc
', {
  'quotes': 'single',
  'wrap': true
});
// → '\'Lorem ipsum ""dolor"" sit \\\'amet\\\' etc
\'""

cssesc('Lorem ipsum ""dolor"" sit \'amet\' etc
""'
// → ""\""Lorem ipsum \\\""dolor\\\"" sit \'amet\' etc
\""""
```

#### `escapeEverything`

The `escapeEverything` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled)


```js
cssesc('lolwat""foo\'bar', {
  'escapeEverything': true
});
// → '\\6C\\6F\\6C\\77\\61\\74\\""\\66\\6F\\6F\\\'\\62\\61\\72'
// → ""\\6C\\6F\\6C\\77\\61\\74\\\""\\66\\6F\\6F\\'\\62\\61\\72""
```

#### Overriding the default options globally

The global default settings can be overridden by modifying the `css


```js
// Read the global default setting for `escapeEverything`:
cssesc
options
0)


## Author

| [![twitter/mathias](https://gravatar
be/mit) license


Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software






























MIT License

Copyright (c) 2020 Kasper Unn Weihe

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE










<!-- This file is automatically added by @npmcli/template-oss


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies






# Glob

Match files using the patterns the shell uses
 (See **Comparison to Other JavaScript Glob
Implementations** at the bottom of this readme


```js
// load using import
import { glob, globSync, globStream, globStreamSync, Glob } from 'glob'
// or using commonjs, that's fine, too
const {
  glob,
  globSync,
  globStream,
  globStreamSync,
  Glob,
} = require('glob')

// the main glob() and globSync() resolve/return array of filenames

// all js files, but don't look in node_modules
const jsfiles = await glob('**/*
css', {
  signal: AbortSignal
dat', 'logs/**/*
log'])

// construct a Glob object if you wanna do it that way, which
// allows for much faster walks if you have to look in the same
// folder multiple times

const g = new Glob('**/foo', {})
// glob objects are async iterators, can also do globIterate() or
// g
log('found a foo file:', file)
}
// pass a glob as the glob options to reuse its settings and caches
const g2 = new Glob('**/bar', g)
// sync iteration works as well
for (const file of g2) {
  console
log(
    'got a path object',
    path
isDirectory(),
    path
name)
  )
})

// if you use stat:true and withFileTypes, you can sort results
// by things like modified time, filter by permission mode, etc
 Slightly
// slower, though
mtimeMs - b
mtimeMs)
  
map(path => path
filter(path => path
isNamed('docs'),
  },
})

// another fun use case, only return files with the same name as
// their parent folder, plus either `
isNamed(pp
name + '
js'))
    },
  },
})

// find all files edited in the last hour, to do this, we ignore
// all of them that are more than an hour old
const newFiles = await glob('**', {
  // need stat so we have mtime
  stat: true,
  // only want the files, not the dirs
  nodir: true,
  ignore: {
    ignored: p => {
      return new Date() - p

  },
})
```

**Note** Glob patterns should always use `/` as a path separator,
even on Windows systems, as `\` is used to escape glob
characters


  -A --all               By default, the glob cli command will not expand any
                         arguments that are an exact match to a file on disk
ts' would match 'app/[id]
ts', as expected
 However, in
                         posix shells such as bash or zsh, the shell will first
                         expand 'app/*
ts' or 'app/d
ts'), which is unexpected


  -a --absolute          Expand to absolute paths
  -d --dot-relative      Prepend '
realpath' on all of the results
js' would be
                         treated as equivalent to '**/*
 This defaults to
                         'true' on macOS and Windows platforms, and false on all
                         others


                         Note: 'nocase' should only be explicitly set when it is
                         known that the filesystem's case sensitivity differs
                         from the platform default
 If set 'true' on
                         case-insensitive file systems, then the walk may return
                         more or less results than expected


  --nodir                Do not match directories, only files


                         Note that this *doesn't* necessarily limit the walk to
                         the 'root' directory, and doesn't affect the cwd
                         starting point for non-absolute patterns
' will still be able to traverse out of
                         the root directory, if it is not an actual root
                         directory on the filesystem, and any non-absolute
                         patterns will still be matched in the 'cwd'


  -h --help              Show this usage information
```

## `glob(pattern: string | string[], options?: GlobOptions) => Promise<string[] | Path[]>`

Perform an asynchronous glob search for the pattern(s) specified
io/path-scurry/classes/PathBase)
objects if the `withFileTypes` option is set to `true`


Alias: `glob


Alias: `glob
stream()`

## `globStreamSync(pattern: string | string[], options?: GlobOptions) => Minipass<string | Path>`

Syncronous form of `globStream()`
sync
 So a pattern like `'x{a,b}y'`
would return `false`, because `'xay'` and `'xby'` both do not
contain any magic glob characters, and it's treated the same as
if you had called it on `['xay', 'xby']`


## Class `Glob`

An object that can perform glob pattern traversals


### `const g = new Glob(pattern: string | string[], options: GlobOptions)`

Options object is required


Traversal functions can be called multiple times to run the walk
again
walk()`

Returns a Promise that resolves to the results array


### Properties

All options are stored as properties on the `Glob` object

- `patterns` An array of parsed immutable `Pattern` objects


All options are optional, boolean, and false by default, unless
otherwise noted


  Note that this _doesn't_ necessarily limit the walk to the
  `root` directory, and doesn't affect the cwd starting point for
  non-absolute patterns

resolve()` on Windows platforms, mimicking the (buggy!)
  behavior of Glob v7 and before on Windows
 (For legacy reasons, this is also set if
  `allowWindowsEscape` is set to the exact value `false`
 Note that an explicit dot in a portion of the pattern
  will always match dot files


- `dotRelative` Prepend all relative path strings with `

/'` are not prepended with
  `
 Note that this
  requires additional stat calls


- `noglobstar` Do not match `**` against multiple filenames
js` would be
  treated as equivalent to `**/*
)

  Note: when `follow` and `nodir` are both set, then symbolic
  links to directories are also omitted


  If a string or string[] is provided, then this is treated as a
  glob pattern or array of glob patterns to exclude from matches


  If an object is provided that has `ignored(path)` and/or
  `childrenIgnored(path)` methods, then these methods will be
  called to determine whether any Path is a match or if its
  children should be traversed, respectively


- `follow` Follow symlinked directories when expanding `**`
  patterns
 This can result in a lot of duplicate references in
  the presence of cyclic links, and make performance quite bad


  Note: when `follow` and `nodir` are both set, then symbolic
  links to directories are also omitted
realpath` on all of the
  results


  By default, when this option is not set, absolute paths are
  returned for patterns that are absolute, and otherwise paths
  are returned that are relative to the `cwd` setting
 On
  Windows systems, this will return `/` delimited path results,
  and absolute paths will be returned in their full resolved UNC
  path form, eg insted of `'C:\\foo\\bar'`, it will return
  `//?/C:/foo/bar`
 Setting `platform:'win32'` on
  non-Windows systems may cause strange behavior
im/path-scurry)
  `Path` objects instead of strings

  See [PathScurry docs](http://npm


- `scurry` A [PathScurry](http://npm
im/path-scurry) object used
  to traverse the file system
 If the `nocase` option is set
  explicitly, then any provided `scurry` object must match this
  setting


""Globs"" are the patterns you type when you do stuff like `ls
*
js` on the command line, or put `build/*` in a `


The following characters have special magic meaning when used in
a path portion


- `*` Matches 0 or more characters in a single path portion

  When alone in a path portion, it must match at least 1
  character
 If `dot:true` is not specified, then `*` will not
  match against a `
]` Matches a range of characters, similar to a RegExp
  range
 If the first character of the range is `!` or `^` then
  it matches any character not in the range
 If the first
  character is `]`, then it will be considered the same as `\]`,
  rather than the end of the character class
 May _not_ contain `/` characters

- `@(pattern|pat*|pat?erN)` Matches exactly one of the patterns
  provided

- `**` If a ""globstar"" is alone in a path portion, then it
  matches zero or more directories and subdirectories searching
  for matches

  Follows 1 symbolic link if not the first item in the pattern,
  or 0 if it is the first item, unless `follow:true` is set, in
  which case it follows all symbolic links


`[:class:]` patterns are supported by this implementation, but
`[=c=]` and `[


For example, the pattern `a/
*/c` would match the file at
`a/
 However the pattern `a/*/c` would not, because `*` does
not start with a dot character
js` would match
`test/simple/basic
 For example:

```sh
$ echo a*s*d*f
a*s*d*f
```

## Comparisons to other fnmatch/glob implementations

While strict compliance with the existing standards is a
worthwhile goal, some discrepancies exist between node-glob and
other implementations, and are intentional
 This is supported in the manner of
bsdglob and bash 5, where `**` only has special significance if
it is the only thing in a path part


Note that symlinked directories are not traversed as part of a
`**`, though their contents may match against subsequent portions
of the pattern


The character class patterns `[:class:]` (posix standard named
classes) style class patterns are supported and unicode-aware,
but `[=c=]` (locale-specific character collation weight), and
`[
]` (collating symbol), are not
 Back-slashes will
always be interpreted as escape characters, not path separators
join`
 On windows, this will by
default result in `/foo/*` matching `C:\foo\bar
txt`
 For example, a pattern like: `//?/x:/*` will return
all file entries in the root of the `x:` drive
)

## Race Conditions

Glob searching, by its very nature, is susceptible to race
conditions, since it relies on directory walking


Users are thus advised not to use a glob result as a guarantee of
filesystem state in the face of rapid changes


### See Also:

- `man sh`
- `man bash` [Pattern
  Matching](https://www
org/software/bash/manual/html_node/Pattern-Matching
html)
- `man 3 fnmatch`
- `man 5 gitignore`
- [minimatch documentation](https://github
com/isaacs/node-glob/tree/master/logo)

- If you are reasonably sure that the patterns you will encounter
  are relatively simple, and want the absolutely fastest glob
  matcher out there, _use [fast-glob](http://npm


In my testing, `fast-glob` is around 10-20% faster than this
module when walking over 200k files nested 4 directories
deep[1](#fn-webscale)
txt` will not match `9999
txt`

- Support for negated globs (ie, patterns starting with `!`
  rather than using a separate `ignore` option)

Former versions of this module are far too slow for any cases
where performance matters at all, and were designed with APIs
that are extremely dated by current JavaScript standards
598s  200364
node globby sync                0m0
765s  200364
node current globSync mjs       0m0
463s  222656
node current glob stream        0m0
411s  222656

--- pattern: '**/
' ---
~~ sync ~~
node fast-glob sync             0m0
564s  2242
node current glob syncStream    0m0
283s  0
node globby async               0m0
312s  2242

--- pattern: '
/**/0/**/0/**/0/**/0/**/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
540s  10
node current glob syncStream    0m0
550s  10
~~ async ~~
node fast-glob async            0m0
302s  10

--- pattern: '
573s  160
~~ async ~~
node fast-glob async            0m0
301s  160
node current glob async mjs     0m0
306s  160
node current glob stream        0m0
322s  160

--- pattern: '
txt' ---
~~ sync ~~
node fast-glob sync             0m0
527s  5230
node current globSync mjs       0m0
544s  5230
node current glob syncStream    0m0
557s  5230
~~ async ~~
node fast-glob async            0m0
285s  5230
node globby async               0m0
305s  5230
node current glob async mjs     0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
771s  200023
node current globSync mjs       0m0
509s  200023
node current glob async mjs     0m0
427s  200023
node current glob stream        0m0
716s  200023
node current glob syncStream    0m0
539s  1000
node current glob syncStream    0m0
567s  1000
~~ async ~~
node fast-glob async            0m0
299s  1000
node current glob async mjs     0m0
324s  4880

--- pattern: '**/????/????/????/????/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
673s  100000
node current globSync mjs       0m0
618s  100000
~~ async ~~
node fast-glob async            0m0
366s  100000
node current glob stream        0m0
345s  100000

--- pattern: '
/{**/?{/**/?{/**/?{/**/?,,,,},,,,},,,,},,,}/**/*
588s  100000
node globby sync                0m0
670s  100000
node current globSync mjs       0m0
717s  200023
node current glob syncStream    0m0
519s  200023
node current glob stream        0m0
680s  180023
node current glob syncStream    0m0
/{*/**/


512s  0
node current globSync mjs       0m0
568s  200023

--- pattern: '
/*/**/
/*/**/
/*/**/
/*/**/*
485s  0
node globby sync                0m0
507s  0
node current globSync mjs       0m0
740s  200023
~~ async ~~
node fast-glob async            0m0
297s  0
node current glob async mjs     0m0
464s  200023

--- pattern: '

/*/**/
296s  0
node current glob async mjs     0m0
483s  200023

--- pattern: '
/3/**/
/5/**/
/6/**/
/7/**/*
060s  0
node globby async               0m0
/**/?/**/?/**/?/**/?/**/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
651s  100000
node current globSync mjs       0m0
332s  100000
node globby async               0m0
603s  200113
node globby sync                0m0
693s  222137
~~ async ~~
node fast-glob async            0m0
525s  200113
node current glob async mjs     0m0
695s  200000
~~ async ~~
node fast-glob async            0m0
369s  200000
node globby async               0m0
502s  200000
node current glob stream        0m0
481s  200000

--- pattern: '**/*
684s  200023
node current glob syncStream    0m0
658s  200023
~~ async ~~
node fast-glob async            0m0
352s  200023
node globby async               0m0
682s  200023
node current glob syncStream    0m0
523s  200023
node current glob async mjs     0m0
776s  200023
node current globSync mjs       0m0
659s  200023
~~ async ~~
node fast-glob async            0m0
513s  200023
node current glob async mjs     0m0
585s  200023
node globby sync                0m0
766s  200023
node current globSync mjs       0m0
350s  200023
node globby async               0m0
424s  200023

--- pattern: '**/[0-9]/**/*
360s  100000
node current glob stream        0m0
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE
  The rules of this license are both obligations
under that agreement and conditions to your license
0>


## Excuse

If anyone notifies you in writing that you have not
complied with [Notices](#notices), you can keep your
license by taking all practical steps to comply within 30
days after the notice
  If you do not do so, your license
ends immediately


## No Liability

***As far as the law allows, this software comes as is,
without any warranty or condition, and no contributor
will be liable to anyone for any damages related to this
software or this license, under any kind of legal claim


---

This library is a fork of 'better-json-errors' by Kat Marchán, extended and
distributed under the terms of the MIT license above
im/libnpmaccess)
[![license](https://img
io/npm/l/libnpmaccess
im/libnpmaccess)
[![CI - libnpmaccess](https://github
com/npm/cli/actions/workflows/ci-libnpmaccess
com/npm/cli/actions/workflows/ci-libnpmaccess
 This includes managing account mfa settings, listing
packages and permissions, looking at package collaborators, and defining
package permissions for users, orgs, and teams
log(Object
im/npm-registry-fetch)
getVisibility(spec, opts) -> Promise<Object>`

Gets the visibility of a given package

#### `access


Teams should be in the format `scope:team` or `@scope:team`

#### `access


#### access
setMfa(spec, level, opts) -> Promise<Boolean>`

Sets the publishing mfa requirements for a given package


#### access
io/npm/v/libnpmdiff
shields
im/libnpmdiff)
[![CI - libnpmdiff](https://github
yml/badge


## Table of Contents

* [Example](#example)
* [Install](#install)
* [Contributing](#contributing)
* [API](#api)
* [LICENSE](#license)

## Example

```js
const libdiff = require('libnpmdiff')

const patch = await libdiff([
  'abbrev@1
1
0',
  'abbrev@1
1'
])
console
v1
1 100644
--- a/package
me>"",
   ""main"": ""abbrev
md)
outlines the process for community interaction and contribution
 Please don't
hesitate to jump in if you'd like to, or even ask us questions if something
isn't clear


Please refer to the [Changelog](CHANGELOG
com/npm/npm-package-arg)

- `diffFiles <Array<String>>`: If set only prints patches for the files listed in this array (also accepts globs)

- `diffNameOnly <Boolean>`: Prints only file names and no patch diffs
 Defaults to `false`

- `diffNoPrefix <Boolean>`: If true then skips printing any prefixes in filenames
 Defaults to `false`
 Defaults to `a/`

- `diffText <Boolean>`: Should treat all files as text and try to print diff for binary files
 Defaults to `false`



Throws an error if either `a` or `b` are missing or if trying to diff more than two specs
shields
io/npm/v/libnpmexec
im/libnpmexec)
[![license](https://img
svg)](https://npm
bin` folder of the local project to start scanning for bin files **String**, defaults to `
 **libexec** will walk up the directory structure looking for `node_modules/
bin` folders in parent folders that might satisfy the current `arg` and will use that bin if found

  - `locationMsg`: Overrides ""at location"" message when entering interactive mode **String**
  - `globalBin`: Location to the global space bin folder, same as: `$(npm bin -g)` **String**, defaults to empty string

  - `output`: A function to print output to **Function**
  - `packages`: A list of packages to be used (possibly fetch from the registry) **Array<String>**, defaults to `[]`
  - `path`: Location to where to read local project info (`package
json`) **String**, defaults to `
`
  - `runPath`: Location to where to execute the script **String**, defaults to `
com/npm/arborist/) and [pacote](https://github
shields
io/npm/l/libnpmfund
com/npm/cli/actions/workflows/ci-libnpmfund
js library for
retrieving **funding** information for packages installed using
[`arborist`](https://github


## Table of Contents

* [Example](#example)
* [Install](#install)
* [Contributing](#contributing)
* [API](#api)
* [LICENSE](#license)

## Example

```js
const { read } = require('libnpmfund')

const fundingInfo = await read()
console
log(
  JSON
stringify(fundingInfo, null, 2)
)
// => {
  length: 2,
  name: 'foo',
  version: '1
com' },
  dependencies: {
    bar: {
      version: '1
0',
      funding: { url: 'http://collective


All participants and maintainers in this project are expected to follow the
[npm Code of Conduct](https://www
npmjs


Please refer to the [Changelog](CHANGELOG
read([opts]) -> Promise<Object>`

Reads **funding** info from a npm install and returns a promise for a
tree object that only contains packages in which funding info is defined
com/npm/arborist/) options
readTree""></a> `> fund
readTree(tree, [opts]) -> Promise<Object>`

Reads **funding** info from a given install tree and returns a tree object
that only contains packages in which funding info is defined


- `tree`: An [`arborist`](https://github
cwd() })
const tree = await arb
g:

```js
normalizeFunding('http://example
isValidFunding""></a> `> fund
 IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE
svg)](https://npm
shields
svg)](https://npm
yml/badge
yml)

[`libnpmhook`](https://github
js library for
programmatically managing the npm registry's server-side hooks
stream()`](#ls-stream)
  * [`update()`](#update)

## Example

```js
const hooks = require('libnpmhook')

console
ls('mypkg', {token: 'deadbeef'}))
// array of hook objects on `mypkg`

```

## Install

`$ npm install libnpmhook`

### API

#### <a name=""opts""></a> `opts` for `libnpmhook` commands

`libnpmhook` uses [`npm-registry-fetch`](https://npm
token` - can be passed in and will be used as the authentication token for the registry
otp` - certain operations will require an OTP token to be passed in
 The type is
determined by the name syntax: `'@foo/bar'` and `'foo'` are treated as packages,
`@foo` is treated as a scope, and `~user` is treated as an org name or scope

Each type will attach to different events
find(id, [opts]) -> Promise`

Returns the hook identified by `id`


The returned Promise resolves to the full hook object that was found, or error
with `err
code` of `'E404'` if it didn't exist
com/npm/registry/blob/master/docs/hooks/endpoints
com/api/added',
  secret: 'supersekrit',
  type: 'owner',
  created: '2018-08-21T20:05:25
125Z',
  updated: '2018-08-21T20:05:25


await hooks
update(id, endpoint, secret, [opts]) -> Promise`

The `id` should be a hook ID from a previously-created hook


The returned Promise resolves to the full hook object that was updated, if it
existed


See also: [`PUT
/v1/hooks/hook/:id`](https://github
com/npm/registry/blob/master/docs/hooks/endpoints
limit` - maximum number of hooks to return
* `opts
offset` - pagination offset for results (use with `opts
limit`)

See also:
  * [`hooks

com/npm/registry/blob/master/docs/hooks/endpoints
stream({token: 'myregistrytoken'})) {
  console
io/npm/v/libnpmorg
svg)](https://npm
com/npm/cli/actions/workflows/ci-libnpmorg
yml/badge
com/npm/cli/actions/workflows/ci-libnpmorg
yml)

[`libnpmorg`](https://github
com/npm/libnpmorg) is a Node
md#membership-detail)
stream()`](#ls-stream)

## Example

```js
const org = require('libnpmorg')

console
npmjs
 If a `libnpmorg` command fails with `err


`org` and `user` must be scope names for the org name and user name
respectively


See also: [`PUT
/-/org/:scope/user`](https://github
com/npm/registry/blob/master/docs/orgs/memberships
md#org-membership-replace)

##### Example

```javascript
await org
rm(org, user, [opts]) -> Promise`

The Promise resolves to `null` on success


`org` and `user` must be scope names for the org name and user name
respectively
 They can optionally be prefixed with `@`
com/npm/registry/blob/master/docs/orgs/memberships
md#org-membership-delete)

##### Example

```javascript
await org


`org` must be a scope name for an org, and can be optionally prefixed with `@`
md#org-roster)

##### Example

```javascript
await org


The returned stream is a valid `Symbol
com/npm/registry/blob/master/docs/orgs/memberships
md#org-roster)

##### Example

```javascript
for await (let [user, role] of org
ls
shields
io/npm/v/libnpmpack
im/libnpmpack)
[![license](https://img
shields
io/npm/l/libnpmpack
yml)

[`libnpmpack`](https://github
 If packing from a local source, `libnpmpack` will also run the `prepack` and `postpack` lifecycles


If no options are passed, the tarball file will be saved on the same directory from which `pack` was called in
npmjs


##### Examples

```javascript
// packs from cwd
const tarball = await pack()

// packs from a local directory
const localTar = await pack('/Users/claudiahdz/projects/my-cool-pkg')

// packs from a registry spec
const registryTar = await pack('abbrev@1
yml)

[`libnpmpublish`](https://github
access` - tells the registry whether this package should be
  published as `public` or `restricted`
  Defaults to `public`


* `opts
 The specified file should be a
  [Sigstore Bundle](https://github


#### <a name=""publish""></a> `> libpub
publish(manifest, tarData, [opts]) -> Promise`

Sends the package represented by the `manifest` and `tarData` to the
configured registry
json` for the package being
published (which can also be the manifest pulled from a packument, a git
repo, tarball, etc
)

`tarData` is a `Buffer` of the tarball being published


If `opts
npmVersion` is passed in, it will be used as the `_npmVersion`
field in the outgoing packument

Any algorithm supported by your current node version is allowed -- npm
clients that do not support those algorithms will simply ignore the
unsupported hashes
manifest() and pacote
tarball() can also take
// any spec that npm can install

const path = '/a/path/to/your/source/code'
const pacote = require('pacote') // see: http://npm
tarball(path)
await libpub
publish(manifest, tarData, {
  npmVersion: 'my-pub-script@1
0
2',
  token: 'my-auth-token-here'
}, opts)
// Package has been published to the npm registry

```

#### <a name=""unpublish""></a> `> libpub
unpublish(spec, [opts]) -> Promise`

Unpublishes `spec` from the appropriate registry
 The registry in question may
have its own limitations on unpublishing
 For
legacy compatibility reasons, only `tag` and `version` specs will work as
expected
 `range` specs will fail silently in most cases


##### Example

```js
await libpub
shields
yml/badge
com/npm/cli/actions/workflows/ci-libnpmsearch
log(await search('libnpm'))
=>
[
  {
    name: 'libnpm',
    description: 'programmatic npm API',
    

etc
  },
  {
    name: 'libnpmsearch',
    description: 'Programmatic API for searching in npm and compatible registries',
    

 Default: 20
* `opts
 Used with `opts
detailed` - If true, returns an object with `package`, `score`, and `searchScore` fields, with `package` being what would usually be returned, and the other two containing details about how that package scored
sortBy: 'optimal'`)
* `opts
 Default: `0
sortBy: 'optimal'`)
* `opts
 Default: `0

Most options are passed through directly to that library, so please refer to
[its own `opts`
documentation](https://www
token` - can be passed in and will be used as the authentication token for the registry
limit` is provided, it will be sent to the API to constrain the number
of returned results


The returned Promise resolved to an Array of search results with the following
format:

```js
{
  name: String,
  version: SemverString,
  description: String || null,
  maintainers: [
    {
      username: String,
      email: String
    },
    

limit` is provided, it will be sent to the API to constrain the number
of returned results
 You may receive more, or fewer results, at the endpoint's
discretion


etc
  },
  
more
]
```

#### <a name=""search-stream""></a> `> search


If `opts


The returned Stream emits one entry per search result, with each entry having
the following format:

```js
{
  name: String,
  version: SemverString,
  description: String || null,
  maintainers: [
    {
      username: String,
      email: String
    },
    
on('data', console
log)
=>
// entry 1
{
  name: 'libnpm',
  description: 'programmatic npm API',
  


etc
}
// entry 2
{
  name: 'libnpmsearch',
  description: 'Programmatic API for searching in npm and compatible registries',
  

io/npm/v/libnpmteam
im/libnpmteam)
[![license](https://img
shields
io/npm/l/libnpmteam
im/libnpmteam)
[![CI - libnpmteam](https://github
svg)](https://github
yml)

[`libnpmteam`](https://github
com/npm/libnpmteam) is a Node
js
library that provides programmatic access to the guts of the npm CLI's `npm
team` command and its various subcommands


## Example

```javascript
const team = require('libnpmteam')

// List all teams for the @npm org
 Commit changes to CHANGELOG
md
    ```bash
    $ git commit -m ""chore: updated CHANGELOG
 Runs `npm publish`; publishing directory with **unpushed commit**
    # 4
im/npm-registry-fetch)
 For other ways to pass in auth details, see the n-r-f docs
otp` - certain operations will require an OTP token to be passed in
 If a `libnpmteam` command fails with `err


##### Example

```javascript
await team
create('@npm:cli', {token: 'myregistrytoken'})
// The @npm:cli team now exists
add(user, team, [opts]) -> Promise`

Adds `user` to `team`
rm(user, team, [opts]) -> Promise`

Removes `user` from `team`
lsTeams('@npm', {token: 'myregistrytoken'})
=>
[
  'npm:cli',
  'npm:web',
  'npm:registry',
  'npm:developers'
]
```

#### <a name=""ls-teams-stream""></a> `> team


##### Example

```javascript
for await (let team of team
lsTeams
stream('@npm', {token: 'myregistrytoken'})) {
  console
log(team)
}

// outputs
// npm:cli
// npm:web
// npm:registry
// npm:developers
```

#### <a name=""ls-users""></a> `> team


For a streamed version of these results, see [`team
stream()`](#ls-users-stream)


##### Example

```javascript
await team
lsUsers('@npm:cli', {token: 'myregistrytoken'})
=>
[
  'iarna',
  'zkat'
]
```

#### <a name=""ls-users-stream""></a> `> team
lsUsers
stream(team, [opts]) -> Stream`

Returns a stream of usernames belonging to `team`


For a Promise-based version of these results, see [`team
lsUsers
log(user)
}

// outputs
// iarna
// zkat
```



# libnpmversion

[![npm version](https://img

  tagVersionPrefix: 'v', // tag as 'v1
2
3' when versioning to 1
2
3
  commitHooks: true, // default true, run git commit hooks, default true
  gitTagVersion: true, // default true, tag the version
  signGitCommit: false, // default false, gpg sign the git commit
  signGitTag: false, // default false, gpg sign the git tag
  force: false, // push forward recklessly if any problems happen
  ignoreScripts: false, // do not run pre/post/version lifecycle scripts
  scriptShell: '/bin/bash', // shell to run lifecycle scripts in
  message: 'v%s', // message for tag and commit, replace %s with the version
  silent: false, // passed to @npmcli/run-script to control whether it logs
})
then(newVersion => {
  console
json`
  `from-git` will try to read
the latest git tag, and use that as the new npm version


If run in a git repo, it will also create a version commit and tag
  Your scripts may add files to the commit in future steps
 Run the `preversion` script
json
  A typical use would be running your full
   test suite before deploying

3
json (so they can incorporate it into file headers in
   generated files for example)
 Commit and tag


Take the following example:

```json
{
  ""scripts"": {
    ""preversion"": ""npm test"",
    ""version"": ""npm run build && git add -A dist"",
    ""postversion"": ""git push && git push --tags && rm -rf build/temp""
  }
}
```

This runs all your tests, and proceeds only if they pass


#### `allowSameVersion` Boolean

Allow setting the version to the current version in package
json


#### `preid` String
When the `newversion` is pre, premajor, preminor, or prepatch, this
defines the prerelease string, like 'beta' etc


#### `tagVersionPrefix` String

The prefix to add to the raw semver string for the tag name
  Default true


#### `signGitCommit` Boolean

GPG sign the git commit
  Default `false`


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
js for
compiling native addon modules for Node
 It contains a vendored copy of the
[gyp-next](https://github


Note that `node-gyp` is _not_ used to build Node
js is actually installed on your system
`node-gyp` downloads the necessary development files or headers for the target version
js versions can be found on [Node
org/en/about/previous-releases)


## Features

 * The same build commands work on any of the supported platforms
 * Supports the targeting of different versions of Node
python
org/versions/)
   * `Xcode Command Line Tools` which will install `clang`, `clang++`, and `make`

     * Install the `Xcode Command Line Tools` standalone by running `xcode-select --install`
 -- OR --
     * Alternatively, if you already have the [full Xcode installed](https://developer

`


Install tools and configuration manually:
   * Install Visual C++ Build Environment: For Visual Studio 2019 or later, use the `Desktop development with C++` workload from [Visual Studio Community](https://visualstudio
microsoft
  For a version older than Visual Studio 2019, install [Visual Studio Build Tools](https://visualstudio
microsoft
com/thank-you-downloading-visual-studio/?sku=BuildTools) with the `Visual C++ build tools` option
js Guidelines for Windows](https://github
md#compiling-native-addon-modules) for additional tips


   To target native ARM64 Node
js on Windows on ARM, add the components ""Visual C++ compilers and libraries for ARM64"" and ""Visual C++ ATL for ARM64""


   To use the native ARM64 C++ compiler on Windows on ARM, ensure that you have Visual Studio 2022 [17
4 or later](https://devblogs
com/visualstudio/arm64-visual-studio-is-officially-here/) installed
python

If you have multiple versions of Python installed, you can identify which version
`node-gyp` should use in one of the following ways:

1
 by setting the `--python` command-line option, e
:

``` bash
node-gyp <command> --python /path/to/executable/python
```

2


### Build for Third Party Node
js distribution, you
should use `--dist-url` or `--nodedir` flags to specify the headers of the
runtime to build for
js instance


## How to Use

To compile your native addon first go to its root directory:

``` bash
cd my_node_addon
```

The next step is to generate the appropriate project build files for the current
platform
 At this point,
you can require the `
js and run your tests!

__Note:__ To create a _Debug_ build of the bindings file, pass the `--debug` (or
`-d`) switch when running either the `configure`, `build` or `rebuild` commands


## The `binding
js addon could look like:

```python
{
  ""targets"": [
    {
      ""target_name"": ""binding"",
      ""sources"": [ ""src/binding
gsrc
io/docs/UserDocumentation
md)
 * [gyp input format reference](https://gyp
io/docs/InputFormatReference
js header files for the given version
| `list`        | Lists the currently installed Node
gyp`, you would run:

```bash
npm config set [--global] devdir /tmp/
 See the [LICENSE
file](LICENSE) for details
  The Right Way, and the Wrong Way

Write a package manager, or a source control system, or a service
restarter, or an operating system
js
var nopt = require(""nopt"")
  , Stream = require(""stream"")

             // knownOpts and shorthands default to {}
             // arg list defaults to process
argv
             // slice defaults to 2
  , parsed = nopt(knownOpts, shortHands, process
js --foofoo -- -fp  # -- stops the flag parsing

{ blatzk: true, flag: true, pick: true }

$ node my-program
js --blatzk=1000 -fp # but you need to use = if they have a value
{ blatzk: 1000, flag: true, pick: true }

$ node my-program
js --many1 5 --many1 null --many1 foo
{ many1: [""5"", ""null"", ""foo""] }

$ node my-program
js --many2 foo --many2 bar
{ many2: [""/path/to/foo"", ""path/to/bar""] }
```

Read the tests at the bottom of `lib/nopt

* Stream: An object matching the ""Stream"" class in node
  Valuable
  for use when validating programmatically
  (npm uses this to let you
  supply any WriteStream on the `outfd` and `logfd` config options
  For instance, in the example above, the
`--bloo` option can only be one of `""big""`, `""medium""`, or `""small""`,
and any other value will be rejected
  Each item in that
hash is an object with a `type` member and a `validate` method


## Error Handling

By default, nopt outputs a warning to standard error when invalid values for
known options are found
  This method will be called with
the offending `nopt


## Abbreviations

Yes, they are supported
  If you define options like this:

```javascript
{ ""foolhardyelephants"" : Boolean
, ""pileofmonkeys"" : Boolean }
```

Then this will work:

```bash
node program
js --no-f --pileofmon
# etc




<!-- This file is automatically added by @npmcli/template-oss


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies




<!-- This file is automatically added by @npmcli/template-oss
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE
 Do not edit


## USAGE

```js
const pacote = require('pacote')

// get a package manifest
pacote
log('got it', manifest))

// extract a package into a folder
pacote
extract('github:npm/cli', 'some/path', options)
  
tarball('https://server
then(data => {
  console
  If
you can pass it to the npm CLI, you can pass it to pacote


## CLI

This module exports a command line interface that can do most of what is
described below
1
1

Usage:

  pacote resolve <spec>
    Resolve a specifier and output the fully resolved target
    Returns integrity and from if '--long' flag is set
  Additional flags for this executable:

  --long     Print an object from 'resolve', including integrity and spec

  --json     Print result objects as JSON rather than node's default


For example '--cache=/path/to/folder' will use that folder as the cache
  (In fact,
that's exactly what the npm CLI does


* `pacote
extract(spec, dest, opts)` Extract a package's tarball into a
  destination folder
  Returns a promise that resolves to the
  `{from,resolved,integrity}` of the extracted package

  See below for more on manifests and packuments


* `pacote
tarball
file(spec, dest, opts)`  Save a package tarball data to
  a file on disk
im/npm-registry-fetch) and
[`cacache`](http://npm


* `cache` Where to store cache entries and temp files
im/cacache)

* `integrity` Expected integrity of fetched package tarball
  If specified,
  tarballs with mismatched integrity values will raise an `EINTEGRITY`
  error

* `umask` Permission mode mask for extracted files and directories
  See ""Extracted File Modes"" below

* `fmode` Minimum permission mode for extracted files

* `preferOnline` Prefer to revalidate cache entries, even when it would not
  be strictly necessary
  Default `false`

* `before` When picking a manifest from a packument, only consider
  packages published before the specified date

* `defaultTag` The default `dist-tag` to use when choosing a manifest from a
  packument
  Defaults to `latest`
  Defaults to
  `https://registry
npmjs
org/`

* `fullReadJson` Use the slower `read-package-json` package insted of
  `read-package-json-fast` in order to include extra fields like ""readme"" in
  the manifest
 Defaults to `false`
 There must be a configured `_keys` entry in the
    config that is scoped to the registry the manifest is being fetched from
json` fields, manifests include:

* `manifest
_from` A normalized form of the spec passed in as an argument
)
    * `shasum` Legacy integrity value

    * `unpackedSize` Size on disk of the package when unpacked
  Includes the keyid that
        correlates to a [`key from the npm
        registry`](https://registry
org/-/npm/v1/keys)

## Packuments

A packument is the top-level package document that lists the set of
manifests for available versions for a package
npm
  Additional metadata is returned
when fetched with only `accept: application/json`
before` functionality
 Do not edit
0
0

## Purpose

This license gives everyone as much permission to work with
this software as possible, while protecting contributors
from liability


## Acceptance

In order to receive this license, you must agree to its
rules
  The rules of this license are both obligations
under that agreement and conditions to your license
0
  If you do not do so, your license
ends immediately


## Reliability

No contributor can revoke this license
generate('This will be a QRCode with error level Q!');

If you don't want to display to the terminal but just want to string you can provide a callback:

    qrcode
generate('http://github
generate('This will be a small QRCode, eh!', {small: true}, function (qrcode) {
        console
com' | qrcode-terminal

# Support

- OS X
- Linux
- Windows

# Server-side

[node-qrcode][node-qrcode-url] is a popular server-side QRCode generator that
renders to a `canvas` object
com>
    Micheal Brooks <michael@michaelbrooks
org/gtanner/qrcode-terminal
png
[travis-ci-url]: https://travis-ci
org/gtanner/qrcode-terminal
[basic-example-img]: https://raw
github
2
c') // null
semver
3'
semver
satisfies('1
3', '9
2
3', '9
8
0') // '1
valid(semver
0'
semver
valid(semver
6
3-alpha')) // '42
7'
```

You can also just load the module for the function that you care about, if
you'd like to minimize your footprint
 Schlueter

Usage: semver [options] <version> [<version> [
  Default level is 'patch'


--preid <identifier>
        Identifier to be used to prefix premajor, preminor,
        prepatch or prerelease version increments


-l --loose
        Interpret versions and ranges loosely

-n <0|1>
        This is the base to be used for the prerelease identifier


If no satisfying versions are found, then exits failure
0` specification found at
<https://semver


A leading `""=""` or `""v""` character is stripped off and ignored


## Ranges

A `version range` is a set of `comparators` which specify versions
that satisfy the range
  The set
of primitive `operators` is:

* `<` Less than
* `<=` Less than or equal to
* `>` Greater than
* `>=` Greater than or equal to
* `=` Equal
2
7`, `1
2
1
0`
1
1` or `1
1


Comparators can be joined by whitespace to form a `comparator set`,
which is satisfied by the **intersection** of all of the comparators
it includes


For example, the range `>=1
3
2
2
2
99`, but not the versions `1
2
0`,
or `1
1
2
9 <2
0
2
6`, but not the versions `1
0`
3-alpha
2
7`, but it would *not* be satisfied by
`3
9`, even though `3
5-alpha
9` is technically ""greater
than"" `1
3` version
5` *would* satisfy the range, because it does not have a
prerelease flag, and `3
3-alpha


Second, a user who has opted into using a prerelease version has
clearly indicated the intent to use *that specific* set of
alpha/beta/rc versions
  However, it
is still not appropriate to assume that they have opted into taking a
similar risk on the *next* set of prerelease versions


#### Prerelease Identifiers

The method `
inc` takes an additional `identifier` string argument that
will append the value of the string as a prerelease identifier:

```javascript
semver
2
2
3 -i prerelease --preid beta
1
4-beta
2
inc` takes an optional parameter 'identifierBase' string
that will let you let your prerelease number as zero-based or one-based

If you do not specify this parameter, it will default to zero-based
2
3 -i prerelease --preid beta -n 1
1
2
2
2


Advanced ranges may be combined in the same way as primitive
comparators using white space or `||`
Y
3
2 - 2
2
0 <=2
3
4`

If a partial version is provided as the second version in the
inclusive range, then all versions that start with the supplied parts
of the tuple are accepted, but nothing that would be greater than the
provided tuple parts
3 <2
0-0`
* `1
0-0`

#### X-Ranges `1
2
0 <2
2
2
0 <1
0
0`
* `1` := `1
x` := `>=1
0 <2
2
2
0-0`

#### Tilde Ranges `~1
3` := `>=1
3 <1
3
(2+1)
0` := `>=1
0-0` (Same as `1
0 <(1+1)
2
3 <0
3
2
2
0 <0
0-0` (Same as `0
x`)
* `~0` := `>=0
0
0` := `>=0
2
2
3
2
2
4-beta


#### Caret Ranges `^1
  In other words, this allows patch and
minor updates for versions `1
0
1
0`, and *no* updates for versions `0
X`
4` and `0
3
2
2
5`
  It allows for changes that are presumed to be
additive (but non-breaking), according to commonly observed practices


* `^1
3 <2
0
0
3` := `>=0
0
3 <0
2 <2
0
0-0` Note that prereleases in
  the `1
2
3` version will be allowed, if they are greater than or
  equal to `beta
4-beta

* `^0
3-beta` := `>=0
3` version *only* will be allowed, if they are greater than or
  equal to `beta`
0
x` := `>=1
2
0
1
0
1
0-0`

A missing `minor` and `patch` values will desugar to zero, but also
allow flexibility within those values, even if the major version is
zero
0 <2
0
0-0`

### Range Grammar

Putting all this together, here is a Backus-Naur grammar for ranges,
for the benefit of parser authors:

```bnf
range-set  ::= range ( logical-or range ) *
logical-or ::= ( ' ' ) * '||' ( ' ' ) *
range      ::= hyphen | simple ( ' ' simple ) * | ''
hyphen     ::= partial ' - ' partial
simple     ::= primitive | partial | tilde | caret
primitive  ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial
partial    ::= xr ( '
  The options supported
are:

- `loose`  Be more forgiving about not-quite-valid semver strings

  (Any resulting output will always be 100% strict compliant, of
  course


Strict-mode Comparators and Ranges will be strict about the SemVer
strings that they parse


* `valid(v)`: Return the parsed version, or null if it's not valid
 Example: `prerelease('1
  You already know how to
  compare strings

* `cmp(v1, comparator, v2)`: Pass in a comparison string, and it'll call
  the corresponding function above

* `rcompare(v1, v2)`: The reverse of compare

* `compareBuild(v1, v2)`: The same as `compare` but considers `build` when two versions
  are equal
  Sorts in ascending order if passed to `Array
sort()`

* `diff(v1, v2)`: Returns difference between two versions by the release type
  (`major`, `premajor`, `minor`, `preminor`, `patch`, `prepatch`, or `prerelease`),
  or null if the versions are the same

* `gtr(version, range)`: Return `true` if version is greater than all the
  versions possible in the range
  If the provided range is shorter in string-length than the
  generated range, then that is returned

* `subset(subRange, superRange)`: Return `true` if the `subRange` range is
  entirely contained by the `superRange` range
2 <1
2
2
1` satisfies, which is higher), nor less than the
range (since `1
8` satisfies, which is lower), and it also does not
satisfy the range
 It looks for the first digit in a string, and consumes all
remaining characters which satisfy at least a partial semver (e
3`) up to the max permitted length (256 characters)
6
2-alpha2` becomes `4
6
3
1` becomes
`3
4
4
7
4`)
4
4` is likely invalid)


If the `options
rtl` flag is set, then `coerce` will return the right-most
coercible tuple that does not share an ending index with a longer coercible
tuple
4` will return `2
  `1
2
0
0`, because the `4` is not a part of
any other overlapping SemVer tuple


If the `options
2` in the result
clean(' = v 2
1
1
clean(' = v 2
1
1
5   ')`: `'2
warn('This is NOT a valid release type!');
}
```

### `SEMVER_SPEC_VERSION`

2
log('We are currently using the semver specification version:', semver
  The main
`require('semver')` export uses getter functions to lazily load the parts
of the API that are used
 Schlueter, and Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS
md)

[Bind command](typescript/bindExample
md)

[Associate command](typescript/associateExample
md)
# socks examples

## Example for SOCKS 'associate' command

The associate command tells the SOCKS proxy server to establish a UDP relay
 The server binds to a new UDP port and communicates the newly opened port back to the origin client


This can be used for things such as DNS queries, and other UDP communicates
 Client -(associate)-> Proxy (Tells the proxy to create a UDP relay and bind on a new port)
2


3


**Note:** UDP packets relayed through the proxy servers are encompassed in a special Socks UDP frame format
createUDPFrame() and SocksClient
bind();

// Listen for incoming UDP packets from the proxy server

  // Most SOCKS servers accept 0
0
0 as a wildcard address to accept UDP frames from any source

  destination: {
    host: '0

>,
    remoteHost: { // This is the remote port on the SOCKS proxy server to send UDP frame packets to

      host: '104
from('hello') // A DNS lookup in the real world
send(packet, info
remoteHost


This can be used for things such as FTP clients which require incoming TCP connections, etc
 Client2 --> Proxy    (Other client connects to the proxy on this port)
4

6
SocksClient;

const options = {
  proxy: {
    host: '104
0 as a wildcard address to accept any client

  destination: {
    host: '0
on('bound', (info) => {
  console
log(info);
  /*
  {
    socket: <Socket 

>,
    remoteHost: { // This is the remote ip and port of the SOCKS proxy that is now accepting incoming connections


>,
    remoteHost: { // This is the remote ip and port that connected to the SOCKS proxy on the newly bound port
2
Socket TCP connection between client and client2 (1
2
4) (the client which connected to the proxy on the newly bound port
)

  console

client
 It's worth noting that there are many socks-http-agents that can be used with the node http module (and libraries such as request
 This HTTP request is used as a simple example


The 'connect' command can be used via the SocksClient
createConnection returns a Promise, we can easily use async/await for flow control
SocksClient;

const options  = {
  proxy: {
    host: '104
124
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api

    port: 80
  },

  command: 'connect'
};

async function start() {
  try {
    const info = await SocksClient
createConnection(options);

    console

>  (this is a raw net
Socket that is established to the destination host through the given proxy servers)

    info
socket
131
1 200 OK
        Access-Control-Allow-Origin: *
        Content-Type: application/json; charset=utf-8
        Date: Sun, 24 Dec 2017 03:47:51 GMT
        Content-Length: 300

        {
          ""as"":""AS14061 Digital Ocean, Inc
"",
          ""city"":""Clifton"",
          ""country"":""United States"",
          ""countryCode"":""US"",
          ""isp"":""Digital Ocean"",
          ""lat"":40
1307,
          ""org"":""Digital Ocean"",
          ""query"":""104
com', // host names are supported with SOCKS v4a and SOCKS v5
createConnection(options)

>  (this is a raw net
Socket that is established to the destination host through the given proxy servers)

  info
1\nHost: ip-api

    /*
      HTTP/1
1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        ""as"":""AS14061 Digital Ocean, Inc
catch(err => {
  // handle errors
});
```

### Using createConnection with callbacks

SocksClient
SocksClient;

const options  = {
  proxy: {
    ipaddress: '104
131
124
com', // host names are supported with SOCKS v4a and SOCKS v5
log(info
Socket that is established to the destination host through the given proxy servers)

    info
com\n\n');
    info
socket
"",
          ""city"":""Clifton"",
          ""country"":""United States"",
          ""countryCode"":""US"",
          ""isp"":""Digital Ocean"",
          ""lat"":40
131
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api
on('established', (info) => {
  console
socket
write('GET /json HTTP/1
on('data', (data) => {
    console
com sees that the last proxy (104
8326,
        ""lon"":-74
1307,
        ""org"":""Digital Ocean"",
        ""query"":""104
203"",
        ""region"":""NJ"",
        ""regionName"":""New Jersey"",
        ""status"":""success"",
        ""timezone"":""America/New_York"",
        ""zip"":""07014""
      }
    */
});

// Failed to establish proxy connection to destination
 The server binds to a new UDP port and communicates the newly opened port back to the origin client
 Client <-(port)- Proxy (Tells the origin client which port it opened and is accepting UDP frame packets on)

At this point the proxy is accepting UDP frames on the specified port


3
)
4
 SocksClient
parseUDPFrame() create and parse these special UDP packets

udpSocket
on('message', (message, rinfo) => {
  console
log(SocksClient
0
0

  destination: {
    host: '0
on('established', info => {
  console


8
8
createUDPFrame({
    remoteHost: { host: '8
8
from('hello') // A DNS lookup in the real world

  udpSocket
host);
});

// SOCKS proxy failed to bind

client
on('error', () => {
  // Handle errors
});

// Start connection
client
 It communicates the newly opened port back to the origin client


This can be used for things such as FTP clients which require incoming TCP connections, etc


**Connection Steps**

1
131
203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will connect to the SOCKS proxy server on the newly bound port

  // Most SOCKS servers accept 0

client
log(info);
  /*
  {
    socket: <Socket 

>,
    remoteHost: { // This is the remote ip and port of the SOCKS proxy that is now accepting incoming connections

client
4',
      port: 58232
    }
  }
  */

  // At this point info
socket is a regular net



**Origin Client (you) <-> Proxy Server <-> Destination Server**

In this example, we are connecting to a web server on port 80, and sending a very basic HTTP request to receive a response
 It's worth noting that there are many socks-http-agents that can be used with the node http module (and libraries such as request
 This HTTP request is used as a simple example

    port: 80
  },

  command: 'connect'
};

async function start() {
  try {
    const info = await SocksClient
socket);
    // <Socket 


>  (this is a raw net
socket
toString()); // ip-api
203) is connected to it and not the origin client (you)
1 200 OK
        Access-Control-Allow-Origin: *
        Content-Type: application/json; charset=utf-8
        Date: Sun, 24 Dec 2017 03:47:51 GMT
        Content-Length: 300

        {
          ""as"":""AS14061 Digital Ocean, Inc
8326,
          ""lon"":-74
1307,
          ""org"":""Digital Ocean"",
          ""query"":""104
203"",
          ""region"":""NJ"",
          ""regionName"":""New Jersey"",
          ""status"":""success"",
          ""timezone"":""America/New_York"",
          ""zip"":""07014""
        }
      */
    });
  } catch (err) {
    // Handle errors
  }
}

start();
```

### Using createConnection with Promises

```typescript
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    ipaddress: '104

    port: 80
  },

  command: 'connect'
};

SocksClient
then(info => {
  console

Socket that is established to the destination host through the given proxy servers)

  info
socket
write('GET /json HTTP/1
com\n\n');
  info
log(data

    /*
      HTTP/1
8326,
        ""lon"":-74
1307,
        ""org"":""Digital Ocean"",
        ""query"":""104
createConnection() optionally accepts a callback function as a second parameter
 (tldr: Do not mix callbacks and Promises)


```typescript
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    ipaddress: '104
131
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api
socket);
    // <Socket 

>  (this is a raw net
Socket that is established to the destination host through the given proxy servers)

    info
1\nHost: ip-api
com\n\n');
    info
124
1307,
          ""org"":""Digital Ocean"",
          ""query"":""104


```typescript
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    ipaddress: '104
124
log(info
>  (this is a raw net
write('GET /json HTTP/1
com\n\n');
  info
com sees that the last proxy (104
"",
        ""city"":""Clifton"",
        ""country"":""United States"",
        ""countryCode"":""US"",
        ""isp"":""Digital Ocean"",
        ""lat"":40
203"",
        ""region"":""NJ"",
        ""regionName"":""New Jersey"",
        ""status"":""success"",
        ""timezone"":""America/New_York"",
        ""zip"":""07014""
      }
    */
  });
});

// Failed to establish proxy connection to destination
/examples/index
md)
# socks

## Migrating from v1

For the most part, migrating from v1 takes minimal effort as v2 still supports factory creation of proxy connections with callback support
**
- Sockets are no longer paused after a SOCKS connection is made, so socket
 (Please be sure to attach data handlers immediately to the Socket to avoid losing data)


### Before (v1)

```javascript
var Socks = require('socks');

var options = {
    proxy: {
        ipaddress: ""202
createConnection(options, function(err, socket, info) {
    if (err)
        console
com\n\n"");
        socket
log(data
length);
            console
log(data);
        });

        // PLEASE NOTE: sockets need to be resumed before any data will come in or out as they are paused right before this callback is fired

        socket
228
com"",
        port: 80
    },
    command: 'connect'
};

SocksClient
createConnection(options, function(err, result) {
    if (err)
        console
1\nHost: google
log(data

 IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE


















MIT License

Copyright (c) 2017 Joseph Wynn

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software
1-2001) for Unicode
 No established formal
standards exist at present on which Unicode character shall occupy
how many cell positions on character terminals
 These routines are
a first attempt of defining such behavior based on simple rules
applied to data provided by the Unicode Consortium


For some graphical characters, the Unicode standard explicitly
defines a character-cell width via the definition of the East Asian
FullWidth (F), Wide (W), Half-width (H), and Narrow (Na) classes
cl
ac
sync('node')

// if nothrow option is used, returns null if not found
const resolvedOrNull = which


```

You can learn more about why the binary is `node-which` and not `which`
[here](https://github


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE
im/npm)
[![CI - cli](https://github
com/npm/cli/actions/workflows/ci
com/npm/cli/actions/workflows/ci
svg)](https://github
x
x` >= `18
17
 Officially supported downloads/distributions can be found at: [nodejs
js`** &/or **`npm`**, consider using a [node version manager](https://github
com/search?q=node+version+manager+archived%3Afalse&type=repositories&ref=advsearch)

### Usage

```bash
npm <command>
```

### Links & Resources

* [**Documentation**](https://docs
com/orgs/github/projects/4247/views/1?filterQuery=npm) - Track & follow along with our public roadmap
* [**Feedback**](https://github
com/npm/rfcs) - Contribute ideas & specifications for the API/design of the npm CLI
* [**Service Status**](https://status
npmjs
org/) - Monitor the current status & see incident reports for the website & registry
* [**Project Status**](https://npm
com) - Keep track of our Open RFC calls, releases, meetups, conferences & more
* [**Support**](https://www
com/support) - Experiencing problems with the **npm** [website](https://npmjs
npmjs
org](https://registry
com/policies/terms](https://npmjs
com/policies/terms)
* You can configure `npm` to use any other compatible registry you prefer
npmjs




","svg"" height=""25"" /> corepack

[![Join us on OpenJS slack (channel #nodejs-corepack)](https://img
 Run `yarn install` in Yarn
projects, `pnpm install` in pnpm projects, and `npm` in npm projects
2
953c8233f7a92884eee2de69a1b92d1f2ec1655e66d08071ba9a02fa""
}
```

Here, `yarn` is the name of the package manager, specified at version `3
2


## Utility Commands

### `corepack <binary name>[@<version>] [


This command doesn't change the global version used when running the package
manager from outside the project (use the \`-g,--global\` flag if you wish
to do this)


### `corepack pack [
json file, and automatically
perform an install
 `pnpm …`), it is set to `1`


- `COREPACK_ENABLE_PROJECT_SPEC` can be set to `0` to prevent Corepack from
  checking if the package manager corresponds to the one defined for the current
  project


- `COREPACK_NPM_USERNAME` and `COREPACK_NPM_PASSWORD` to set a Basic
  authorization header when connecting to a npm type registry
md`](
/LICENSE
md)

* You are a member of the team that owns a scope


If you have two-factor authentication enabled then you'll be prompted to provide a second factor, or may use the `--otp=
im/libnpmaccess)
* [npm team](/commands/npm-team)
* [npm publish](/commands/npm-publish)
* [npm config](/commands/npm-config)
* [npm registry](/using-npm/registry)

---
title: npm-adduser
section: 1
description: Add a registry user account
---

### Synopsis

```bash
npm adduser

alias: add-user
```

Note: This command is unaware of workspaces
npmrc` file
mycorp




### See Also

* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm owner](/commands/npm-owner)
* [npm whoami](/commands/npm-whoami)
* [npm token](/commands/npm-token)
* [npm profile](/commands/npm-profile)

---
title: npm-audit
section: 1
description: Run a security audit
---

### Synopsis

```bash
npm audit [fix|signatures]
```

### Description

The audit command submits a description of the dependencies configured in
your project to your default registry and asks for a report of known
vulnerabilities
 To ensure that you're always able to verify attestation signatures check
that you're running the latest version of the npm CLI

0
npm` folder and only re-evaluated if the advisory range
changes, or a new version of the package is published (in which case, the
new version is checked for metavulnerable status as well)
  The `npm audit fix` command will exit with 0 exit code if no
vulnerabilities are found _or_ if the remediation is able to successfully
fix all vulnerabilities




#### `force`

* Default: false
* Type: Boolean

Removes various protections against unfortunate side effects, common
mistakes, unnecessary performance degradation, and malicious input

* Allow installing packages that have an `engines` declaration requiring a
  different version of `node`, even if `--engine-strict` is enabled

* Allow `npm audit fix` to install modules outside your stated dependency
  range (including SemVer-major changes)

* Implicitly set `--yes` during `npm init`
json`




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink


This value is not exported to the environment for child processes
)
will link workspaces into the `node_modules` folder
 This directory is a
[`cacache`](http://npm
 Cache corruption will either trigger an
error, or signal to `pacote` that the data must be refetched, which it will
do automatically




### See Also

* [package spec](/using-npm/package-spec)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm install](/commands/npm-install)
* [npm publish](/commands/npm-publish)
* [npm pack](/commands/npm-pack)
* https://npm
npmrc` file to your repo
/my/npm/project
$ npm install
added 154 packages in 10s
$ ls | grep package-lock
```

Run `npm ci` in that project

```bash
$ npm ci
added 154 packages in 5s
```

Configure Travis CI to build using `npm ci` instead of `npm install`:

```bash
# 
travis
 linked: (experimental) install in node_modules/
 See [`npm
fund`](/commands/npm-fund) for details




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done




If value is omitted, the key will be removed from your config file entirely

 Use `-l` to also show defaults


#### fix

```bash
npm config fix
```

Attempts to repair invalid configuration items
9
    `-- c@1
10
```

In this case, `npm dedupe` will transform the tree to:

```bash
a
+-- b
+-- d
`-- c@1
x
    `-- c@1
json` you can run: `npm update --save` instead
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies
json` file


If a package type appears in both the `--include` and `--omit` lists, then
it will be included




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


It works on [version ranges](https://semver
1"",
       ""description"": ""Like ruby's abbrev module, but in js"",
       ""author"": ""Isaac Z


    This workflow provides a handy way for package authors to see what
    package-tracked files have been changed in comparison with the latest
    published version of that package


    An example: assuming `pkg@1
0` is installed in the current `node_modules`
    folder, running:

    ```bash
    npm diff --diff=pkg@2
0
    ```

    It will effectively be an alias to
    `npm diff --diff=pkg@1


* `npm diff --diff=<semver-a> [--diff=<semver-b>]` (in a package directory):

    Using `npm diff` along with semver-valid version numbers is a shorthand
    to compare different versions of the current package
/lib/` and changed lines of code within the
`CHANGELOG




#### `diff-no-prefix`

* Default: false
* Type: Boolean

Do not show any source or destination prefix in `npm diff` output




#### `diff-text`

* Default: false
* Type: Boolean

Treat all files as text in `npm diff`


When used by the `npm diff` command, this is the tag used to fetch the
tarball that will be compared with the local files by default
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
 If you have
  two-factor authentication on auth-and-writes then you’ll need to include a
  one-time password on the command line with
  `--otp <one-time password>`, or go through a second factor flow based on your `authtype`
 If you have
  two-factor authentication on auth-and-writes then you’ll need to include
  a one-time password on the command line with `--otp <one-time password>`,
  or go through a second factor flow based on your `authtype`

* ls: Show all of the dist-tags for a package, defaulting to the package in
  the current prefix
 This is the default action if none is specified
 For
example, `v1
  See <https://github


This value is not exported to the environment for child processes


This value is not exported to the environment for child processes


This value is not exported to the environment for child processes
js may come bundled with a particular version of npm, it's the
policy of the CLI team that we recommend all users run `npm@latest` if they
can
 That's great! Others may be following tutorials or StackOverflow
questions in an effort to troubleshoot problems you may be having

Sometimes, this may entail changing the registry you're pointing at
 This check ensures
that Git is available


#### Permissions checks

* Your cache must be readable and writable by the user running npm


#### Validate the checksums of cached packages

When an npm package is published, the publishing process generates a
checksum that npm uses at install time to verify that the package didn't
get corrupted in transit




### See Also

* [npm bugs](/commands/npm-bugs)
* [npm help](/commands/npm-help)
* [npm ping](/commands/npm-ping)

---
title: npm-edit
section: 1
description: Edit an installed package
---

### Synopsis

```bash
npm edit <pkg>[/<subpkg>


  If no `--package` options
are provided, then npm will attempt to determine the executable name from
the package specifier provided as the first positional argument according
to the following heuristic:

- If the package has a single entry in its `bin` field in `package


### `npx` vs `npm exec`

When run via the `npx` binary, all flags and options *must* be set prior to
any positional arguments


```bash
npm exec --package yo --package generator-node --call ""yo node""
```



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
/*
 When defining values for
the `workspace` config in the command line, it also possible to use `-w` as a
shorthand, e

- The `--shell` option is replaced with `--script-shell`, but maintained
  in the `npx` executable for backwards compatibility


### A note on caching

The npm cli utilizes its internal package cache when using the package
name specified


#### prefer-online

Forces staleness checks for packages, making the cli look for updates
immediately even if the package is already in the cache


#### workspace

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


If one or more package specs are provided, then only packages matching
one of the specifiers will have their relationships explained
10


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
 nested: (formerly --legacy-bundling) install in
place, no hoisting

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts
com/npmcli-funding
|   `-- @npmcli/test-funding
`-- https://example
0
```

### Configuration

#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
parse() before
  saving them to your `package




#### `unicode`

* Default: false on windows, true on mac/unix systems with a unicode locale,
  as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables


#### `which`

* Default: null
* Type: null or Number

If there are multiple funding sources, which 1-indexed source URL to open


### Description

This command will search the npm markdown documentation files for the terms
provided, and then list the results, sorted by relevance


If only one result is found, then it will show that help topic


If the argument to `npm help` is not a known help topic, then it will call
`help-search`
>]

alias: hlep
```

Note: This command is unaware of workspaces


To create a package hook, simply reference the package name


The shared secret will be sent along to the URL endpoint so you can verify
the request came from your own configured hook
npmjs
org/post/145260155635/introducing-hooks-get-notifications-of-npm)

---
title: npm-init
section: 1
description: Create a package
 You can also use `-y`/`--yes` to skip the questionnaire altogether
3` #  runs `create-foo@1
im/create-react-app):

```bash
$ npm init react-app 
 Similar to the previous example of
creating a new React-based project using
[`create-react-app`](https://npm
im/create-react-app), the following syntax
will make sure to create the new react app as a nested **workspace** within your
project and configure your `package




#### `init-version`

* Default: ""1




#### `yes`

* Default: null
* Type: null or Boolean

Automatically answer ""yes"" to any prompts that npm might print on the
command line

* Allow installing packages that have an `engines` declaration requiring a
  different version of npm
com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

This will cause `@mycorp` to be mapped to the registry for future
installation of packages specified according to the pattern
`@mycorp/package`


```
# accept all defaults, and create a package named ""@foo/whatever"",
# instead of just named ""whatever""
npm init --scope=@foo --yes
```



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 Sets `--install-strategy=nested`




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 It
takes exactly the same arguments as `npm install`




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships
platform`




#### `libc`

* Default: null
* Type: null or String

Override libc of native modules to install


    In global mode (ie, with `-g` or `--global` appended to the command),
    it installs the current package context (ie, the current working
    directory) as a global package


    With the `--production` flag (or when the `NODE_ENV` environment
    variable is set to `production`), npm will not install modules listed
    in `devDependencies`



    Tarball requirements:
    * The filename *must* use `


    * `-B, --save-bundle`: Saved dependencies will also be added to your
      `bundleDependencies` list
 The package will be downloaded from the registry
    associated with the specified scope


    Examples:

    ```bash
    npm install sax
    npm install githubname/reponame
    npm install @myorg/privatepackage
    npm install node-tap --save-dev
    npm install dtrace-provider --save-optional
    npm install readable-stream --save-exact
    npm install ansi-regex --save-bundle
    ```

    **Note**: If there is a file or folder named `<name>` in the current
    working directory, then it will try to install that, and only try to
    fetch the package by name if it is not valid
 Aliasing works only on your
    project and does not rename packages in transitive dependencies

    This will follow the same rules for resolving dependencies described in
    [`package


    If `#<commit-ish>` is provided, it will be used to clone exactly that
    commit
 If the commit-ish has the format `#semver:<semver>`, `<semver>`
    can be any valid semver range or exact version, and npm will look for
    any tags or refs matching that range in the remote repository, much as
    it would for a registry dependency


    The following git environment variables are recognized by npm and will
    be added to the environment when running git:

    * `GIT_ASKPASS`
    * `GIT_EXEC_PATH`
    * `GIT_PROXY_COMMAND`
    * `GIT_SSH`
    * `GIT_SSH_COMMAND`
    * `GIT_SSL_CAINFO`
    * `GIT_SSL_NO_VERIFY`

    See the git man page for details


    Examples:

    ```bash
    npm install git+ssh://git@github
27
    npm install git+ssh://git@github
com/githubname/githubrepo` by
    attempting to clone it using `git`
org/bitbucketname/bitbucketrepo`
    by attempting to clone it using `git`
2


The `-f` or `--force` argument will force npm to fetch remote resources
even if a local copy exists on disk




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging


Set to false to have it not do this


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
json](/configuring-npm/package-json)
* [workspaces](/using-npm/workspaces)

---
title: npm-link
section: 1
description: Symlink a package folder
---

### Synopsis

```bash
npm link [<package-spec>]

alias: ln
```

### Description

This is handy for installing your own stuff, so that you can work on it and
test iteratively without having to continually rebuild


Note that `package-name` is taken from `package

npm link redis              # link-install the package
```

Now, any changes to `~/projects/node-redis` will be reflected in
`~/projects/node-bloggy/node_modules/node-redis/`
/node-redis     # link the dir of your dependency
```

The second line is the equivalent of doing:

```bash
(cd 


```bash
npm link @myorg/privatepackage
```

### Caveat

Note that package dependencies linked in this way are _not_ saved to
`package
0
json` and
`package-lock


### Workspace Usage

`npm link <pkg> --workspace <name>` will link the relevant package as a
dependency of the specified workspace(s)
  Note that It may actually be
linked into the parent project's `node_modules` folder, if there are no
conflicting dependencies


`npm link --workspace <name>` will create a global link to the specified
workspace(s)


When used with the `npm rm` command, removes the dependency from
`package


Will also prevent writing to `package-lock




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 If no registry is specified, the default registry will be
used (see [`config`](/using-npm/config))
npmjs
npmjs
com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

This will cause `@mycorp` to be mapped to the registry for future
installation of packages specified according to the pattern
`@mycorp/package`


This will also cause `npm init` to create a scoped package


```
# accept all defaults, and create a package named ""@foo/whatever"",
# instead of just named ""whatever""
npm init --scope=@foo --yes
```



#### `auth-type`

* Default: ""web""
* Type: ""legacy"" or ""web""

What authentication strategy to use with `login`


### Description

When logged into a registry that supports token-based authentication, tell
the server to end this token's session


When logged into a legacy registry that uses username and password
authentication, this will clear the credentials in your user configuration
  For
example, running `npm ls promzard` in npm's source tree will show:

```bash
npm@10


Also, in the years since npm got an `ls` command (in version 0
2!),
dependency graphs have gotten much larger as a general rule




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
 If `--all` is set, then npm will show all dependencies by default
json` will be updated,
instead of checking `node_modules` and downloading dependencies




#### `unicode`

* Default: false on windows, true on mac/unix systems with a unicode locale,
  as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether


This value is not exported to the environment for child processes


Not supported by all npm commands


  Running `npm publish` with no special configuration will publish the
  package with a dist-tag of `latest`
15"",
  ""nothingness"": ""github:othiym23/nothingness#master"",
  ""npm"": ""^3
1""
}
```

A few things to note:

* `glob` requires `^5`, which prevents npm from installing `glob@6`, which
  is outside the semver range
  The installed committish might satisfy the dependency
  specifier (if it's something immutable, like a commit SHA), or it might
  not, so `npm outdated` and `npm update` have to fetch Git repos to check
2` is marked as ""wanted"", but ""latest"" is `npm@3




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


Not supported by all npm commands
  This immediately revokes
  their privileges
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc


* In `npm pkg set` it enables parsing set values with JSON


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


If the same package is specified multiple times, then the file will be
overwritten the second time


### See Also

* [package spec](/using-npm/package-spec)
* [npm-packlist package](http://npm
<key>=<value> 
json` files


Returned values are always in **json** format
email
    ```

    You may also use numeric indices in square braces to specifically select
    an item in an array field
 For example, in order to remove a script named
    build:

    ```bash
    npm pkg delete scripts
json`
0
0""
  }
}
```

### Configuration

#### `force`

* Default: false
* Type: Boolean

Removes various protections against unfortunate side effects, common
mistakes, unnecessary performance degradation, and malicious input

* Allow the `npm version` command to work on an unclean git repository

* Allow unpublishing all versions of a published package
)
will link workspaces into the `node_modules` folder


### Description

Change your profile information on the registry
  Note that this command
depends on the registry implementation, so third-party registries may not
support this interface
  This is interactive,
  you'll be prompted for your current password and a new password


### Configuration

#### `registry`

* Default: ""https://registry
json`


Not supported by all npm commands




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator


If the `--json` flag is used, then the changes `npm prune` made (or would
have made with `--dry-run`) are printed as a JSON object


In normal operation, extraneous modules are pruned automatically, so you'll
only need this command with the `--production` flag
json` file
json files
 This can be
overridden by specifying a different default registry or using a
[`scope`](/using-npm/scope) in the name, combined with a
scope-configured registry (see
[`package


- If there is a ""files"" list in
  [`package



See [`developers`](/using-npm/developers) for full details on what's
included in the published package, as well as details on how the package is
built


Also the tag that is added to the package@version specified by the `npm tag`
command, if no explicit tag is given




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option
)
will link workspaces into the `node_modules` folder


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project
workspace

// all workspaces that have peer deps




Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
json`,
ignoring `node_modules`


For `update` this means only the `package-lock
js**, where you need to recompile all your C++ add-ons with the updated binary
json` in the current folder and use the
`repository` property


Set to `false` to suppress browser behavior and instead print urls to
terminal


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether


This value is not exported to the environment for child processes
json`, then the following scripts will be run:

1
 prestart
7
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands


### Description

Print the effective `node_modules` folder to standard out
  If no
`""command""` is provided, it will list the available scripts
  Use `--` to
pass `-`-prefixed flags and options which would otherwise be parsed by npm
 For example, if there is a `devDependency` on
`tap` in your package, you should write:

```bash
""scripts"": {""test"": ""tap test/*

You can customize the shell with the
[`script-shell` config](/using-npm/config#script-shell)


If you try to run a script without having a `node_modules` directory and it
fails, you will be given a warning to run `npm install`, just in case you've
forgotten
g:

```

 When defining values for
the `workspace` config in the command line, it also possible to use `-w` as a
shorthand, e


This value is not exported to the environment for child processes
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config
json files




### See Also

* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm start](/commands/npm-start)
* [npm restart](/commands/npm-restart)
* [npm stop](/commands/npm-stop)
* [npm config](/commands/npm-config)
* [npm workspaces](/using-npm/workspaces)

---
title: npm-sbom
section: 1
description: Generate a Software Bill of Materials (SBOM)
---

### Synopsis

```bash
npm sbom
```

### Description

The `npm sbom` command generates a Software Bill of Materials (SBOM) listing the
dependencies for the current project


### Example CycloneDX SBOM

```json
{
  ""$schema"": ""http://cyclonedx
git""
        },
        {
          ""type"": ""website"",
          ""url"": ""https://lodash
0
0""
        }
      ]
    },
    {
      ""name"": ""lodash"",
      ""SPDXID"": ""SPDXRef-Package-lodash-4
tgz"",
      ""filesAnalyzed"": false,
      ""homepage"": ""https://lodash
21"",
      ""relationshipType"": ""DEPENDS_ON""
    }
  ]
}
```

### Package lock only mode

If package-lock-only is enabled, only the information in the package
lock (or shrinkwrap) is loaded


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts


This value is not exported to the environment for child processes
]

aliases: find, s, se
```

Note: This command is unaware of workspaces

The main difference between `--searchopts` and the standard search terms
is that the former does not highlight results in the output and you can
use them more fine-grained filtering
npmjs
 To
allow the CLI to fill in missing cache data, see `--prefer-offline`
 It's needed
when publishing or changing package permissions with `npm access`
npmjs


If the `""scripts""` object does not define a  `""start""` property, npm
will run `node server
`

As of [`npm@2


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands


Unlike with [npm start](/commands/npm-start), there is no default script
that will run if the `""stop""` property is not defined


* add:
  Add a user to an existing team


You must be a *team admin* to create teams and manage team membership, under
the given organization


### Configuration

#### `registry`

* Default: ""https://registry
json files


aliases: unlink, remove, rm, r, un
```

### Description

This uninstalls a package, completely removing everything npm installed
on its behalf
json`
json`, `npm-shrinkwrap
json`, and `package-lock


### Description

This removes a package version from the registry, deleting its entry and
removing the tarball
 If you unpublish the entire package,
you may not publish any new versions of that package until 24 hours have
passed


This value is not exported to the environment for child processes
)
will link workspaces into the `node_modules` folder




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator


If the `-g` flag is specified, this command will update globally installed
packages


If no package name is specified, all packages in the specified location (global
or local) will be updated
json` you can run: `npm update --save` (or add the
`save=true` option to a [configuration file](/configuring-npm/npmrc)
to make that the default behavior)
2`, because `1
4
1
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 linked: (experimental) install in node_modules/
 Sets `--install-strategy=shallow`
 They are just not
physically installed on disk


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc


This value is not exported to the environment for child processes
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project




#### `commit-hooks`

* Default: true
* Type: Boolean

Run git commit hooks when using the `npm version` command




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
json`
2


This value is not exported to the environment for child processes
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc




#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command
json`, and, if present,
`npm-shrinkwrap
json`

3


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


If logged into a registry that uses Basic Auth, then simply print the
`username` portion of the authentication string
5


### Important

npm comes preconfigured to use npm's public registry at
https://registry
 Use of the npm public registry is
subject to terms of use available at
https://docs
npmjs
com/nodejs/node-gyp)
needs Python, make and a buildchain like GCC
  See
  [`package
  When you do this, npm will store
  credentials in the user config file
  See [`npm prefix`](/commands/npm-prefix) for
  more info on the global prefix
0, and the standalone `npx`
package deprecated at that time


This resulted in some shifts in its functionality:

- Any `npm` config value may be provided

- To prevent security and user-experience problems from mistyping package
  names, `npx` prompts before installing anything

- The `-p` argument is a shorthand for `--parseable` in npm, but shorthand
  for `--package` in npx

* If you need both, then install it in both places, or use `npm link`
/node_modules/
)

#### Man Pages

When in global mode, man pages are linked into `{prefix}/share/man`
  So, at every
stage, if a package is already installed in an ancestor `node_modules`
folder, then it is not installed at the current location



This shortcut is only used if the exact same
version would be installed in multiple nested `node_modules` folders
  However, without repeating the
exact same package multiple times, an infinite regress will always be
prevented


#### Example

Consider this dependency graph:

```bash
foo
+-- blerg@1
3 (cycle)
|   `-- asdf@*
`-- baz@1
2
x`,
it does not install another copy under [B]
x`, it cannot
re-use the `baz@1
 It is identical to
`package-lock
json` and `npm-shrinkwrap
json](/configuring-npm/package-json)
* [npm install](/commands/npm-install)

---
title: npmrc
section: 5
description: The npm config files
---

### Description

npm gets its config settings from the command line, environment variables,
and `npmrc` files
 For example:

```bash
key[] = ""first value""
key[] = ""second value""
```

#### Comments

Lines in `
json`) will set
config values specific to this project

* The name ends up being part of a URL, an argument on the command line,
  and a folder name
 See
[`scope`](/using-npm/scope) for more detail
 If you don't plan to publish your package, the name and
version fields are optional
  This helps people discover your
package, as it's listed in `npm search`


If a URL is provided, it will be used by the `npm bugs` command
 Instead, use SPDX expressions, like this:

```json
{
  ""license"": ""ISC""
}
```

```json
{
  ""license"": ""(MIT OR Apache-2
0)""
}
```

Finally, if you do not wish to grant others the right to use a private or
unpublished package under any terms:

```json
{
  ""license"": ""UNLICENSED""
}
```

Consider also setting `""private"": true` to prevent accidental publication
com> (http://barnyrubble


npm also sets a top-level ""maintainers"" field with your npm user info
 A shortcut to visit
each funding url is also available when providing the project name such as:
`npm fund <projectname>` (when there are multiple URLs, the first one will
be visited)

### files

The optional `files` field is an array of file patterns that describes the
entries to be included when your package is installed as a dependency
DS_Store`
* `
log`
* `package-lock
json`
* `pnpm-lock
yaml`
* `yarn
js` in the package's root folder

`window`)

### bin

A lot of packages have one or more executable files that they'd like to
install into the PATH



For example, myapp could have this:

```json
{
  ""bin"": {
    ""myapp"": ""
bin](#directoriesbin)


### man

Specify either a single file or an array of filenames to put in place for
the `man` program to find
2
js"",
  ""man"": ""
/man/doc
1""
  ]
}
```

will create files to do `man foo` and `man foo-bar`


Man files must end with a number, and optionally a `
js"",
  ""man"": [
    ""
 This is helpful for people who
want to contribute


### config

A ""config"" object can be used to set configuration parameters used in
package scripts that persist across upgrades
2
3
0 - 2
3"",
    ""two"": ""2
 If the commit-ish has the format `#semver:<semver>`, `<semver>` can
be any valid semver range or exact version, and npm will look for any tags
or refs matching that range in the remote repository, much as it would for
a registry dependency
com:npm/cli#semver:^5
com/npm/cli

json`

In dev mode (ie, locally running `npm install`), it'll run this script as
well, so that you can test it easily


Assuming the host complies with [semver](https://semver
5
2, use
`""^1
 The
`peerDependenciesMeta` field serves to provide npm more information on how
your peer dependencies are to be used
x"",
    ""soy-milk"": ""1


It is still your program's responsibility to handle the lack of the
dependency

0` no matter
what version your dependencies rely on:

```json
{
  ""overrides"": {
    ""foo"": ""1
"": ""1
0


```json
{
  ""dependencies"": {
    ""foo"": ""^1
 It's
especially handy if you want to set the tag, registry or access, so that
you can ensure that a given package is not tagged with ""latest"", published
to the global public registry or that a scoped module is private by
default


* `""scripts"": {""start"": ""node server



The difference is that `package-lock
package-lock

* `2`: The lockfile version used by npm v7 and v8


Package descriptors have the following fields:

* version: The version found in `package
  If it is strictly part
  of the `optionalDependencies` tree, then `optional` will be set

This is a mapping of package names to dependency objects
2
3`)
    * git sources: This is a git specifier with resolved committish
tgz`)
    * local tarball sources: This is the file URL of the tarball
 (eg
      `file:///opt/storage/example-1


* resolved: For registry sources this is path of the tarball relative to
  the registry URL


* bundled:  If true, this is the bundled dependency and will be installed
  by the parent module
  The version should match via normal matching rules a
  dependency either in our `dependencies` or in a level higher than us
  A `--` argument tells the cli parser to stop
reading flags
com/npm/npm/issues/14528)




#### `audit-level`

* Default: null
* Type: null, ""info"", ""low"", ""moderate"", ""high"", ""critical"", or ""none""

The minimum level of vulnerability for `npm audit` to exit with a non-zero
exit code




#### `browser`

* Default: OS X: `""open""`, Windows: `""start""`, Others: `""xdg-open""`
* Type: null, Boolean, or String

The browser that is called by npm commands to open websites
509 (




#### `cafile`

* Default: null
* Type: Path

A path to a file containing one or multiple Certificate Authority signing
certificates




#### `description`

* Default: true
* Type: Boolean

Show the description in `npm search`



#### `diff`

* Default:
* Type: String (can be set multiple times)

Define arguments to compare in `npm diff`




#### `fetch-timeout`

* Default: 300000 (5 minutes)
* Type: Number

The maximum amount of time to wait for HTTP requests to complete




#### `force`

* Default: false
* Type: Boolean

Removes various protections against unfortunate side effects, common
mistakes, unnecessary performance degradation, and malicious input

* Allow the `npm version` command to work on an unclean git repository

* Allow installing packages that have an `engines` declaration requiring a
  different version of `node`, even if `--engine-strict` is enabled
 If the `HTTPS_PROXY` or
`https_proxy` or `HTTP_PROXY` or `http_proxy` environment variables are set,
proxy settings will be honored by the underlying `make-fetch-happen`
library
json`


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


#### `init-author-email`

* Default: """"
* Type: String

The value `npm init` should use by default for the package author's email
 See the
documentation for the
[init-package-json](https://github




#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink




#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules


* In `npm pkg set` it enables parsing set values with JSON
 Acceptable values are same as
`libc` field of package
 See
[folders](/configuring-npm/folders) for more on the differences in behavior

* Type: null, 1, 2, 3, ""1"", ""2"", or ""3""

Set the lockfile format version to be used in package-lock
 Possible options are:

1: The lockfile version used by npm versions 5 and 6


3: Only the new lockfile information introduced in npm version 7

Ideal if all users are on npm version 7 and higher




#### `node-options`

* Default: null
* Type: null or String

Options to pass through to Node

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk




#### `omit-lockfile-registry-resolved`

* Default: false
* Type: Boolean

This option causes npm to create lock files without a `resolved` key for
registry dependencies




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator
 It's needed
when publishing or changing package permissions with `npm access`




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output


Set to `false` to suppress the progress bar




#### `rebuild-bundle`

* Default: true
* Type: Boolean

Rebuild bundled dependencies after installation
npmjs
 If set to
""never"", then use the registry value
json`
json will be configured with an exact version
rather than using npm's default semver range operator




#### `save-peer`

* Default: false
* Type: Boolean

Save installed packages to a package
mycorp


This will also cause `npm init` to create a scoped package


```
# accept all defaults, and create a package named ""@foo/whatever"",
# instead of just named ""whatever""
npm init --scope=@foo --yes
```



#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd




#### `searchlimit`

* Default: 20
* Type: Number

Number of items to limit search results to




#### `sign-git-tag`

* Default: false
* Type: Boolean

If set to true, then the `npm version` command will tag the version using
`-s` to add a signature


Note that git requires you to have set up GPG keys in your git configs for
this to work properly


When used by the `npm diff` command, this is the tag used to fetch the
tarball that will be compared with the local files by default
json`
npm/_logs/*-timing


Folders and executables are given a mode which is `0o777` masked against
this value
 When
false, it uses ascii characters instead of unicode glyphs




#### `usage`

* Default: false
* Type: Boolean

Show short usage output about the command specified


Only relevant when specified explicitly on the command line




#### `versions`

* Default: false
* Type: Boolean

If true, output the npm version as well as node's `process
tld/:certfile=/path/to/cert
tld/:certfile=/path/to/cert




#### `init


Alias for `--init-author-email`



#### `init


Alias for `--init-module`



#### `init
tld/:keyfile=/path/to/key
pem
  //other-registry
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
json`, or has `""optional"": true` set in its entry in the `peerDependenciesMeta` section of `package
com/cli/v8/using-npm/workspaces) section of `package
org/en-US/docs/Web/CSS/:has)
- [`:is(<selector list>)`](https://developer
mozilla
node` property satisfying the version `16
0


- `versions` an array of every available version of the given node
- `outdated
6
prod:vuln` returns direct production dependencies with any known vulnerability
- `:vuln([severity=high])` returns only dependencies with a vulnerability with a `high` severity


- `[attribute|=value]` attribute value is equal to or starts with
peer`
- `
root` dependency is also considered a `prod` dependency


### Programmatic Usage

- `Arborist`'s `Node` Class has a `
prod')
  console
log(results)
})
```

```js
// iterative
arb
  If you install npm, you should be able to
then do `man npm-thing` to get the documentation on a particular
topic, or `npm help thing` to see the same information
  At the very least, you need:

* name: This should be a string that identifies your project


* version: A semver-compatible version


* main: If you have a single module that serves as the entry point to your
  program (like what the ""foo"" package gives you at require(""foo"")), then
  you need to specify that in the ""main"" field


* directories: This is an object mapping names to folders
gitignore` file, you can create an
empty `
 Like `git`, `npm` looks for
`
npmignore` and `
hg`
* `
npmrc`
* `
 Sometimes manually picking
which items to allow is easier to manage than building a block list


### Create a User Account

Create a user with the adduser command
 Output timing information to the terminal

This file contains a `timers` object where the keys are an identifier for the
portion of the process being timed and the value is the number of milliseconds it took to complete

3
 `npm access` see [npm access](/commands/npm-access) for more details

### Team Admins create teams

* Check who you’ve added to your org:

```bash
npm team ls <org>:developers
```

* Each org is automatically given a `developers` team, so you can see the whole list of team members in your org
  This *should* always be
prefixed with a `/` or `

npm currently will parse a string with more than one `/` in it as a
folder, but this is legacy behavior that may be removed in a future
version
/my-package`
* `/opt/npm/my-package`

### Tarballs

* `<tarball file>`
* `<tarball url>`

Examples:

* `
git`
* `git+ssh://git@github
com/npm/cli#v6
0`
* `github:npm/cli#HEAD`
* `npm/cli#c12ea07`

### See also

* [npm-package-arg](https://npm
org> by default
 Use of someone else's registry may be governed by their
terms of use

Authentication configuration such as auth tokens and certificates are configured
specifically scoped to an individual registry

  This is used to gather better metrics on how npm is used by humans, versus
  build farms
local""}`
to force it to be published only to your internal/private registry
g
 The scope
folder (`@myorg`) is simply the name of the scope preceded by an `@` symbol, and can
contain any number of scoped packages
com prior to trying to publish


You can then publish the module with `npm publish` or `npm publish
--access restricted`, and it will be present in the npm registry, with
restricted access
example
example

* NOTE: ""`npm run pack`"" is NOT the same as ""`npm pack`""
0`, a new event has been introduced, `prepare`, that preserves this existing behavior
json` and `package-lock


#### path

If you depend on modules that define executable scripts, like test
suites, then those executables will be added to the `PATH` for
executing the scripts


#### package
  You can access these variables
in your code with `process


Objects are flattened following this format, so if you had
`{""scripts"":{""install"":""foo
 They just have to be some kind of executable
file


This set of features makes up for a much more streamlined workflow handling
linked packages from the local file system
json` inside it, defining a Node
g:

```

json` `name`
js
const moduleA = require('a')
console
json
   `-- b
       `-- package
json
```

By running a command using the `workspace` option, it's possible to run the
given command in the context of that specific workspace
json` file
 e
 Do not edit
 -->

ISC License

Copyright npm, Inc
svg)](https://npm
com/npm/arborist/main/docs/logo
npmjs
com:_auth': 'aXNhYWNzOm5vdCBteSByZWFsIHBhc3N3b3Jk',
  '//registry
idealTree is set
  The `link
name`, and `edge
  Null if node is top of tree
  If the node is _not_ a
  link, then this matches `node
root ===
  node`
)
* `node
optional`, `node
json or
  version specifiers


### class Link

Link objects represent a symbolic link within the `node_modules` folder
children` This is always an empty map, since links don't have their
  own children directly
  As nodes are moved
within the tree, Edges automatically update to point to the appropriate
location

* `edge
from` node, typically because a new edge was created when a
      dependency specifier was modified
dev` is set, but `node
optional` is set, but `node
devOptional` is set, then the node is a (non-optional)
  dependency within the devDependency hierarchy, _and_ a dependency
  within the `optionalDependency` hierarchy


It does the management of configuration files that npm uses, but
importantly, does _not_ define all the configuration defaults or types, as
those parts make more sense to live within the npm CLI itself

- The `project` config file is loaded based on the local prefix (which can
  only be set by the CLI config options, and otherwise defaults to a walk
  up the folder tree to the first parent containing a `node_modules`
  folder, `package
json` file, or `package-lock
  eg `--some-key=some-value` on the command line

- Default values (passed in by npm when it loads this module)
execPath,
  // optional, defaults to process
on('log', (level, 
args) => {
  console
args)
})

// returns a promise that fails if config loading fails, and
// resolves when the config object is ready for action
conf
catch(er => {
  console

- `execPath` Optional, defaults to `process
  Used to infer the
  `globalPrefix`
get('global')` is true, then `globalPrefix`,
  otherwise `localPrefix`
- `home` The user's home directory, found by looking at `env

- `loaded` A boolean indicating whether or not configs are loaded
- `valid` A getter that returns `true` if all the config objects are valid


### `config


### `config
valid`, since each data object is marked for re-evaluation on every
`config
json `files` lists


An empty or missing package folder will return an empty array


Since the primary use case is to delete a package's contents so that they
can be re-filled with a new version of that package, this caveat does not
pose a problem
 If stdout is not a TTY, not supported, unless the `ignoreTTY`
   option is set
 Make a guess based on the `TERM` environment variable
  Any screen, xterm, vt100,
   color, ansi, cygwin, or linux `TERM` will get 16 colors
  Ignore `TERM=dumb` environ check


## Credits

This is a spiritual, if not actual, fork of
[supports-color](http://npm

 not found 
be/cssescape) (In comparison, _cssesc_ is much more powerful
js](https://nodejs
', {
  'quotes': 'single'
});
// → 'Lorem ipsum ""dolor"" sit \\\'amet\\\' etc
escapeEverything = true;

// Using the global default setting for `escapeEverything`, which is now `true`:
cssesc('foo © bar ≠ baz 𝌆 qux');
// → '\\66\\6F\\6F\\ \\A9\\ \\62\\61\\72\\ \\2260\\ \\62\\61\\7A\\ \\1D306\\ \\71\\75\\78'
```

### `cssesc
js and browser versions mentioned in [`
babelrc)


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE


The most correct and second fastest glob implementation in
JavaScript
timeout(100),
})

// multiple patterns supported as well
const images = await glob(['css/*
im/path-scurry for more info on their API
const g3 = new Glob('**/baz/**', { withFileTypes: true })
g3
sort((a, b) => a


                         This prevents double-expanding, in case the shell
                         expands an argument whose filename is a glob
                         expression
ts'
                         will expand to 'app/[id]
/' on relative matches
  -m --mark              Append a / on any directories matched
  -x --posix             Always resolve to posix style paths, using '/' as the
                         directory separator, even on Windows
 In the case
                         of an entry that cannot be resolved, the entry is
                         omitted


  -s --stat              Call 'fs


                         Note: to *only* match directories, append a '/' at the
                         end of the pattern
 If set, all '\' characters are
                         replaced with '/' in the pattern


  -D<n> --max-depth=<n>  Maximum depth to traverse from the current working
                         directory

  -C<cwd> --cwd=<cwd>    Current working directory to execute/match in
  -r<root> --root=<root> A string path resolved against the 'cwd', which is used
                         as the starting point for absolute patterns that start
                         with '/' (but not drive letters or UNC paths on
                         Windows)

Returns
[Path](https://isaacs
github
sync()`

## `globIterate(pattern: string | string[], options?: GlobOptions) => AsyncGenerator<string>`

Return an async iterator for walking glob pattern matches
iterate()`

## `globIterateSync(pattern: string | string[], options?: GlobOptions) => Generator<string>`

Return a sync iterator for walking glob pattern matches


When `windowsPathsNoEscape` is not set, then both brace escapes
and backslash escapes are removed


### `g


If you are running many `glob` operations, you can pass a Glob
object as the `options` argument to a subsequent operation to
share the previously loaded cache


  To start absolute and non-absolute patterns in the same
  path, you can use `{root:''}`
3}` brace sets


- `nocase` Perform a case-insensitive match


- `maxDepth` Specify a number to limit the depth of the directory
  traversal to this many levels below the `cwd`


- `absolute` Set to true to always receive absolute paths for
  matched files
im/path-scurry) for what can
  be overridden


Before parsing the path part patterns, braced sections are
expanded into a set

 May _not_ contain `/` characters


### Dots

If a file or directory path portion has a `


### Empty Sets

If no matching files are found, then an empty array is returned
**

Though windows uses either `/` or `\` as its path separator, only
`/` characters are used by this glob implementation


For example, `glob('/tmp', { cwd: 'c:/any/thing' })` will return
`['c:/tmp']` as the result


If an explicit `cwd` option is not provided, and the pattern
starts with `/`, then the traversal will run on the root of the
drive provided as the `cwd` option
resolve('/')`
gnu
im/globby)_

` path portions are not handled unless they appear at the
  start of the pattern
- `

- Some brace patterns in the middle of a pattern will result in
  failing to find certain matches
 However, it
adds some API conveniences that may be worth the costs
gitignore` and other ignore files
509s  200364
node current glob async mjs     0m0
486s  0
node globby sync                0m0
769s  200364
node current globSync mjs       0m0
299s  2242
node current glob stream        0m0
290s  10
node globby async               0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
556s  160
node current glob syncStream    0m0
304s  5230
node current glob stream        0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0

484s  0
node globby sync                0m0
414s  100000
node current glob async mjs     0m0
573s  160023
node globby sync                0m0

811s  200023
node current glob syncStream    0m0
/*/**/


/*/**/
/*/**/
506s  200023
node current glob stream        0m0

/2/**/
txt' ---
~~ sync ~~
node fast-glob sync             0m0
622s  200000
node globby sync                0m0
722s  200000
node current glob syncStream    0m0
516s  200023
node current glob async mjs     0m0
589s  200023
node globby sync                0m0
691s  200023
node current glob syncStream    0m0
357s  200023
node globby async               0m0
471s  200023
node current glob stream        0m0
322s  100000
node globby async               0m0
352s  100000
```























ISC License

Copyright npm, Inc




















# Blue Oak Model License

Version 1
org/license/1


## Reliability

No contributor can revoke this license
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE
yml/badge
getPackages('zkat', opts)))
```

### API

#### `opts` for all `libnpmaccess` commands

`libnpmaccess` uses [`npm-registry-fetch`](https://npm


All options are passed through directly to that library, so please refer
to [its own `opts`
documentation](https://www


#### `access
  Level must be one of the
following

`none`: mfa is not required to publish this package
svg)](https://npm


All participants and maintainers in this project are expected to follow the
[npm Code of Conduct](https://docs

npm/_cacache',
  npxCache: '~/
/node_modules/
`
  - `scriptShell`: Default shell to be used **String**, defaults to `sh` on POSIX systems, `process
shields


Happy hacking!

### API

##### <a name=""fund


Options:

- `countOnly`: Uses the tree-traversal logic from **npm fund** but skips over
any obj definition and just returns an obj containing `{ length }` - useful for
things such as printing a `6 packages are looking for funding` msg
g:

```js
const Arborist = require('@npmcli/arborist')
const { readTree } = require('libnpmfund')

const arb = new Arborist({ path: process
normalizeFunding""></a> `> fund
normalizeFunding(funding) -> Object`

From a `funding` `<object|string|array>`, retrieves normalized funding objects
containing a `url` property


Permission to use, copy, modify, and/or distribute this software for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies
im/libnpmhook)
[![license](https://img


A couple of options of note for those in a hurry:

* `opts
125Z',
  deleted: false,
  delivered: false,
  last_delivery: null,
  response_code: 0,
  status: 'active' }
```

#### <a name=""rm""></a> `> hooks


See also: [`DELETE
/v1/hooks/hook/:id`](https://github
125Z',
  deleted: true,
  delivered: false,
  last_delivery: null,
  response_code: 0,
  status: 'active' }

// Repeat it
 Otherwise, it will error with an `'E404'` error code
package` - filter results by package name
* `opts

 },
  { id: 'wnyf98a1', 


The `role` is optional and should be one of `admin`, `owner`, or `developer`
 They can optionally be prefixed with `@`
com/npm/registry/blob/master/docs/orgs/memberships
log(`user: ${user} (${role})`)
}
=>
user: zkat (developer)
user: iarna (admin)
user: isaacs (owner)
```



# libnpmpack

[![npm version](https://img
svg)](https://github
im/libnpmpublish)
[![license](https://img
im/libnpmpublish)
[![CI - libnpmpublish](https://github
com/npm/cli/actions/workflows/ci-libnpmpublish
js
library for programmatically publishing and unpublishing npm packages
  Most options
are passed through directly to that library, so please refer to [its own
`opts` documentation](http://npm
token` - can be passed in and will be used as the authentication
  token for the registry
 For other ways to pass in auth details, see the
  n-r-f docs
com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle
manifest(path)
const tarData = await pacote
io/npm/v/libnpmsearch

more
]
```

## Install

`$ npm install libnpmsearch`

### API

#### <a name=""opts""></a> `opts` for `libnpmsearch` commands

The following opts are used directly by `libnpmsearch` itself:

* `opts
sortBy` - Used as a shorthand to set `opts
quality` - Decimal number between `0` and `1` that defines the weight of `quality` metrics when scoring and sorting packages


A couple of options of note for those in a hurry:

* `opts
etc
  ] || null,
  keywords: [String] || null,
  date: Date || null
}
```

If `opts
shields
stream()`](#ls-teams-stream)
  * [`lsUsers()`](#ls-users)
  * [`lsUsers


##### Example

```javascript
await team

```

#### <a name=""rm""></a> `> team
lsTeams(scope, [opts]) -> Promise`

Resolves to an array of team names belonging to `scope`


##### Example

```javascript
await team
lsTeams


## USAGE

```js
const npmVersion = require('libnpmversion')

// argument can be one of:
// - any semver version string (set to that exact version)
// - 'major', 'minor', 'patch', 'pre{major,minor,patch}' (increment at
//   that value)
// - 'from-git' (set to the latest semver-lookin git tag - this skips
//   gitTagVersion, but will still sign if asked)
npmVersion(arg, {
  path: '/path/to/my/pkg', // defaults to cwd

  allowSameVersion: false, // allow tagging/etc to the current version
  preid: '', // when arg=='pre', define the prerelease string, like 'beta' etc


The `newversion` argument should be a valid semver string, a valid second
argument to [semver

2
  Any files you want added to the commit
   should be explicitly added using `git add`
 Run the `version` script
 These scripts have access to the new `version`
   in package
 Use it to clean up the file system or
   automatically push the commit and/or tag


## API

### `npmVersion(newversion, options = {}) -> Promise<String>`

Do the things
  Defaults to process
3' when versioning to 1
3


#### `gitTagVersion` Boolean

Tag the version, default true
  Default `false`


#### `scriptShell` String

Path to the shell, which should execute the lifecycle scripts


Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software
















# `node-gyp` - Node
svg?branch=main)](https://github
io/npm/dm/node-gyp)

`node-gyp` is a cross-platform command-line tool written in Node
js are supported
 Depending on what version of Node
com/xcode/download/), you can install the Command Line Tools under the menu `Xcode -> Open Developer Tool -> More Developer Tools
com/Microsoft/nodejs-guidelines/blob/master/windows-environment
 If the `PYTHON` environment variable is set to the path of a Python executable,
then that version will be used if it is a supported version


4
gypi` shipped in the headers distribution to generate build
configurations, which is different from the default mode that would use the
`process


Some old versions of Electron shipped malformed `config
json`
io tutorial](http://nodeschool
gsrc
js header files for the given version


## Command Options

`node-gyp` accepts the following command options:

| **Command**                       | **Description**
|:----------------------------------|:------------------------------------------
| `-j n`, `--jobs n`                | Run `make` in parallel


## License

`node-gyp` is available under the MIT license






If you want to write an option parser, and have it be good, there are
two ways to do it


## USAGE

```javascript
// my-program
log(parsed)
```

This would give you support for any of the following:

```console
$ node my-program
 Hand"", flag: true }

$ node my-program
js --baz b/a/z # known paths are resolved
js` for more examples of
what this puppy can do
typeDefs`

* String: A normal string

* url: A url
)
* Array: If `Array` is specified as one of the types, then the value
  will be parsed as a list of options
invalidHandler`
  If it is assigned to boolean `false` then the warning is
suppressed

* `original`: The args as they originally appeared

* `cooked`: The args after flags and shorthands are expanded


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE COPYRIGHT HOLDER DISCLAIMS
ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS
 Do not edit


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies
log('extracted!', from, resolved, integrity)
  })

pacote
length + ' bytes of tarball data')
})
```

`pacote` works with any kind of package specifier that npm can install
  (In fact, that's
exactly what the npm CLI does


* `pacote
manifest(spec, opts)` Fetch (or simulate) a package's manifest
  (basically, the `package
packument(spec, opts)` Fetch (or simulate) a package's packument
  (basically, the top-level package document listing all the manifests that
  the registry returns)

  Returns a Promise that resolves to the packument object
tarball


    This is mostly an internal function, but it is exposed because it does
    provide some functionality that may be difficult to achieve otherwise
  Defaults to
  `0o777`

* `verifySignatures` A boolean that will make pacote verify the
    integrity signature of a manifest, if present

* `dist-tags` An object mapping dist-tags to version numbers
 -->

ISC License

Copyright npm, Inc
0>
png
[node-qrcode-url]: https://github
3'
semver
clean('  =v1
2
7') // false
semver
lt('1
0
9
6
org/ specification
Copyright Isaac Z



Versions are printed in ascending order, so supplying
multiple versions to the utility will just sort them


A `comparator` is composed of an `operator` and a `version`
7` would match the versions
`1
2
8`, `2
 The comparator `>1` is equivalent to `>=2
2
2
2


The purpose for this behavior is twofold
  First, prerelease versions
frequently are updated very quickly, and contain many breaking changes
that are (by the author's design) not yet fit for public consumption
0 -i prerelease
1
4-beta
3', 'prerelease', 'beta', '1')
// '1
1'
```

```javascript
semver
inc('1


#### Hyphen Ranges `X
3 - 2
4`

If a partial version is provided as the first version in the inclusive
range, then the missing pieces are replaced with zeroes
2
x` := `>=1
3
x` := `>=1
3
2
3` `~1
2
0
3 <0
3
0
2 <1
0-0` Note that prereleases in
  the `1
2
4` would be allowed, but
  `1
0
4`

Allows changes that do not modify the left-most non-zero element in the
`[major, minor, patch]` tuple
0
3` := `>=1
3` := `>=0
2
3-beta <0


* `^1
x` := `>=0
' xr qualifier ? )? )?
xr         ::= 'x' | 'X' | '*' | nr
nr         ::= '0' | ['1'-'9'] ( ['0'-'9'] ) *
tilde      ::= '~' partial
caret      ::= '^' partial
qualifier  ::= ( '-' pre )? ( '+' build )?
pre        ::= parts
build      ::= parts
parts      ::= part ( '
  All
options in this object are `false` by default
)  For backwards compatibility reasons, if the `options`
  argument is a boolean value instead of an object, it is interpreted
  to be the `loose` param
3-alpha
sort()`
  (This is
  the function called by `gtr` and `ltr`
  Note
  that it does *not* guarantee that it would match the same versions in all
  cases, only for the set of versions provided


If you want to know if a version satisfies or does not satisfy a
range, use the `satisfies(version, range)` function
7
4` becomes `4
MAX_SAFE_INTEGER || (2**53 - 1)`; higher value
components are invalid (`9999999999999999
2
4` in rtl mode, not
`4
0
  For example, `1
4-rc


ex
1
5')`: `'2
clean('  =v2
5')`: `'2
RELEASE_TYPES
0
md)

[Bind command](javascript/bindExample


**Connection Steps**

1
 SocksClient

const udpSocket = dgram
parseUDPFrame(message));
  /*
  { frameNumber: 0,
    remoteHost: { host: '8
8
0



```typescript
const SocksClient = require('socks')
0',
    port: 0
  },

  command: 'bind'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new port for incoming connections

      host: '1
3
on('error', () => {
  // Handle errors
});
```
# socks examples

## Example for SOCKS 'connect' command

The connect command is the most common use-case for a SOCKS proxy
js) to make this easier
log(info
on('data', (data) => {
      console
com sees that the last proxy (104
124
com\n\n');
  info
"",
        ""city"":""Clifton"",
        ""country"":""United States"",
        ""countryCode"":""US"",
        ""isp"":""Digital Ocean"",
        ""lat"":40


**Note:** If a callback function is provided, a Promise is still returned from the function, but the promise will always resolve regardless of if there was en error


```typescript
const SocksClient = require('socks')


com sees that the last proxy (104
8326,
          ""lon"":-74
1307,
          ""org"":""Digital Ocean"",
          ""query"":""104


```typescript
const SocksClient = require('socks')
com\n\n');
  info
log(data


**Note:** UDP packets relayed through the proxy servers are packaged in a special Socks UDP frame format

const udpSocket = dgram
8', port: 53 }, // The remote host that replied with a UDP packet
    data: <Buffer 74 65 73 74 0a> // The data
  }
  */
});

const options: SocksClientOptions = {
  proxy: {
    host: '104
0
0',
    port: 0
  },

  command: 'associate'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new UDP port for UDP relaying

client
8 on port 53 through the proxy
8
0 as a wildcard address to accept any client


client
js) to make this easier
createConnection(options);

    console
write('GET /json HTTP/1
com\n\n');
    info
on('data', (data) => {
      console
com sees that the last proxy (104
131

    port: 80
  },

  command: 'connect'
};

SocksClient
124
131
124

- **In an options object, 'target' is now known as 'destination'
228
108"",
        port: 1080,
        type: 5
    },
    target: {
        host: ""google
101
opengroup
html

In fixed-width output devices, Latin characters all occupy a single
""cell"" position of equal width, whereas ideographic CJK characters
occupy two such cells
0)

Permission to use, copy, modify, and distribute this software
for any purpose and without fee is hereby granted


- `pathExt`: Use instead of the `PATHEXT` environment variable

- `all`: Return all matches, instead of just the first one















Copyright (c) 2015, Rebecca Turner

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies
svg)](https://npm
svg)](https://npm
org/en/download](https://nodejs
com/) - Official docs & how-tos for all things **npm**
    * Note: you can also search docs locally with `npm help-search <query>`
* [**Bug Tracker**](https://github
org)? File a ticket [here](https://www
 titles on `man` pages)"
nodejs,"/icon
shields
io/badge/OpenJS%20Slack-%23nodejs--corepack-blue)](https://slack-invite
openjsf
js script that acts as a bridge
between Node
 In practical terms, **Corepack lets you use Yarn, npm,
and pnpm without having to install them**


## How to Install

### Default Installs

Corepack is [distributed by default with all recent Node
org/api/corepack
html)


### Manual Installs

<details>
<summary>Install Corepack using npm</summary>

First uninstall your global Yarn and pnpm binaries (just leave npm)
 In general,
you'd do this by running the following command:

```shell
npm uninstall -g yarn pnpm

# That should be enough, but if you installed Yarn without going through npm it might
# be more tedious - for example, you might need to run `brew uninstall yarn` as well

```

Then install Corepack:

```shell
npm install -g corepack
```

We do acknowledge the irony and overhead of using npm to install Corepack, which
is at least part of why the preferred option is to use the Corepack version that
is distributed along with Node
js itself
md`](
/CONTRIBUTING


</details>

## Usage

### When Building Packages

Just use your package managers as you usually would
 Corepack
will catch these calls, and depending on the situation:

- **If the local project is configured for the package manager you're using**,
  Corepack will download and cache the latest compatible version


- **If the local project is configured for a different package manager**,
  Corepack will request you to run the command again using the right package
  manager - thus avoiding corruptions of your install artifacts


- **If the local project isn't configured for any package manager**, Corepack
  will assume that you know what you're doing, and will use whatever package
  manager version has been pinned as ""known good release""
 Check the relevant
  section for more details


### When Authoring Packages

Set your package's manager with the `packageManager` field in `package
json`:

```json
{
  ""packageManager"": ""yarn@3
3+sha224
953c8233f7a92884eee2de69a1b92d1f2ec1655e66d08071ba9a02fa""
}
```

Here, `yarn` is the name of the package manager, specified at version `3
3`,
along with the SHA-224 hash of this version for validation
y


You can also provide a URL to a `
js` file (which will be interpreted as a
CommonJS module) or a `
tgz` file (which will be interpreted as a package, and
the `""bin""` field of the `package


```json
{
  ""packageManager"": ""yarn@https://registry
npmjs
2
3
16a0797d1710d1fb7ec40ab5c3801b68370a612a9b66ba117ad9924b""
}
```

## Known Good Releases

When running Corepack within projects that don't list a supported package
manager, it will default to a set of Known Good Releases


If there is no Known Good Release for the requested package manager, Corepack
looks up the npm registry for the latest available version and cache it for
future use

When Corepack downloads a new version of a given package manager on the same
major line as the Known Good Release, it auto-updates it by default


## Offline Workflow

The utility commands detailed in the next section


- Either you can use the network while building your container image, in which
  case you'll simply run `corepack pack` to make sure that your image
  includes the Last Known Good release for the specified package manager
 After that it'll just be a matter of running
  `corepack install -g --cache-only <path/to/corepack


## Utility Commands

### `corepack <binary name>[@<version>] [


 args]`

This meta-command runs the specified package manager in the local folder
 You
can use it to force an install to run with a given version, which can be useful
when looking for regressions


### `corepack cache clean`

Clears the local `COREPACK_HOME` cache directory


### `corepack cache clear`

Clears the local `COREPACK_HOME` cache directory


### `corepack enable [

 name]`

| Option                | Description                             |
| --------------------- | --------------------------------------- |
| `--install-directory` | Add the shims to the specified location |

This command will detect where Corepack is installed and will create shims next
to it for each of the specified package managers (or all of them if the command
is called without parameters)
 Note that the npm shims will not be installed
unless explicitly requested, as npm is currently distributed with Node
js
through other means


If the file system where the `corepack` binary is located is read-only, this
command will fail
 in `~/
bash_aliases`):

```sh
alias yarn=""corepack yarn""
alias yarnpkg=""corepack yarnpkg""
alias pnpm=""corepack pnpm""
alias pnpx=""corepack pnpx""
alias npm=""corepack npm""
alias npx=""corepack npx""
```

On Windows PowerShell, you can add functions using the `$PROFILE` automatic
variable:

```powershell
echo ""function yarn { corepack yarn `$args }"" >> $PROFILE
echo ""function yarnpkg { corepack yarnpkg `$args }"" >> $PROFILE
echo ""function pnpm { corepack pnpm `$args }"" >> $PROFILE
echo ""function pnpx { corepack pnpx `$args }"" >> $PROFILE
echo ""function npm { corepack npm `$args }"" >> $PROFILE
echo ""function npx { corepack npx `$args }"" >> $PROFILE
```

### `corepack disable [

js is installed and will remove the shims
from there

This command doesn't change the global version used when running the package
manager from outside the project (use the \`-g,--global\` flag if you wish
to do this)


### `corepack install <-g,--global> [


 name[@<version>]]`

Install the selected package managers and install them on the system


Package managers thus installed will be configured as the new default when
calling their respective binaries outside of projects defining the
`packageManager` field


### `corepack pack [


### `corepack up`

Retrieve the latest available version for the current major release line of
the package manager used in the local project, and update the project to use
it


Unlike `corepack use` this command doesn't take a package manager name nor a
version range, as it will always select the latest available version from the
same major line


## Environment Variables

- `COREPACK_DEFAULT_TO_LATEST` can be set to `0` in order to instruct Corepack
  not to lookup on the remote registry for the latest version of the selected
  package manager, and to not update the Last Known Good version when it
  downloads a new version of the same major line


- `COREPACK_ENABLE_AUTO_PIN` can be set to `0` to prevent Corepack from
  updating the `packageManager` field when it detects that the local package
  doesn't list it
 In general we recommend to always list a `packageManager`
  field (which you can easily set through `corepack use [name]@[version]`), as
  it ensures that your project installs are always deterministic


- `COREPACK_ENABLE_DOWNLOAD_PROMPT` can be set to `0` to
  prevent Corepack showing the URL when it needs to download software, or can be
  set to `1` to have the URL shown
 `corepack pnpm …`), it is set to `0`; when Corepack is called
  implicitely (e
g
 `pnpm …`), it is set to `1`

  When standard input is a TTY and no CI environment is detected, Corepack will
  ask for user input before starting the download


- `COREPACK_ENABLE_STRICT` can be set to `0` to prevent Corepack from throwing
  error if the package manager does not correspond to the one defined for the
  current project
 But if the user is using other package
  manager different from the one specified for the current project, it will use
  the system-wide package manager version
 This means that it will always use the system-wide package manager
  regardless of what is being specified in the project's `packageManager` field
 By default it is set to `%LOCALAPPDATA%\node\corepack`
  on Windows, and to `$HOME/


- `COREPACK_ROOT` has no functional impact on Corepack itself; it's
  automatically being set in your environment by Corepack when it shells out to
  the underlying package managers, so that they can feature-detect its presence
  (useful for commands like `yarn init`)


- `COREPACK_NPM_REGISTRY` sets the registry base url used when retrieving
  package managers from npm
npmjs
 Note that both
  environment variables are required and as plain text
 If you want to send an
  empty password, explicitly set `COREPACK_NPM_PASSWORD` to an empty string
com/TooTallNate/node-proxy-agent)


- `COREPACK_INTEGRITY_KEYS` can be set to an empty string to instruct Corepack
  to skip integrity checks, or a JSON string containing custom keys


## Troubleshooting

### Networking

There are a wide variety of networking issues that can occur while running `corepack` commands
 Things to check:

- Make sure your network connection is active

- Check your proxy settings (see [Environment Variables](#environment-variables))


## Contributing

See [`CONTRIBUTING
/CONTRIBUTING


## License (MIT)

See [`LICENSE
md`](
/LICENSE
md)







---
title: npm-access
section: 1
description: Set access level on published packages
---

### Synopsis

```bash
npm access list packages [<user>|<scope>|<scope:team> [<package>]
npm access list collaborators [<package> [<user>]]
npm access get status [<package>]
npm access set status=public|private [<package>]
npm access set mfa=none|publish|automation [<package>]
npm access grant <read-only|read-write> <scope:team> [<package>]
npm access revoke <scope:team> [<package>]
```

Note: This command is unaware of workspaces


### Description

Used to set access controls on private packages


* public / restricted (deprecated):
  Set a package to be either publicly accessible or restricted


* grant / revoke (deprecated):
  Add or remove the ability of users and teams to have read-only or read-write
  access to a package


* 2fa-required / 2fa-not-required (deprecated):
  Configure whether a package requires that anyone publishing it have two-factor
  authentication enabled on their account


* ls-packages (deprecated):
  Show all of the packages a user or a team is able to access, along with the
  access level, except for read-only public packages (it won't print the whole
  registry listing)

* ls-collaborators (deprecated):
  Show all of the access privileges for a package
 If `<user>` is passed in,
  the list is filtered only to teams _that_ user happens to belong to


* edit (not implemented)

### Details

`npm access` always operates directly on the current registry, configurable
from the command line using `--registry=<registry url>`


Unscoped packages are *always public*


Scoped packages *default to restricted*, but you can either publish them as
public using `npm publish --access=public`, or set their access as public using
`npm access public` after the initial publish

* You have been given read-write privileges for a package, either as a member
  of a team or directly as an owner

` option to specify it on
the command line


If your account is not paid, then attempts to publish scoped packages will
fail with an HTTP 402 status code (logically enough), unless you use
`--access=public`


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package
json`


Not supported by all npm commands


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one
org/""
* Type: URL

The base URL of the npm registry
npmrc` file
 If no registry is specified, the default registry
will be used (see [`registry`](/using-npm/registry))


Useful when logging in to or out of a private registry:

```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry
com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

This will cause `@mycorp` to be mapped to the registry for future
installation of packages specified according to the pattern
`@mycorp/package`


```
# accept all defaults, and create a package named ""@foo/whatever"",
# instead of just named ""whatever""
npm init --scope=@foo --yes
```



#### `auth-type`

* Default: ""web""
* Type: ""legacy"" or ""web""

What authentication strategy to use with `login`


Note that some vulnerabilities cannot be fixed automatically and will
require manual intervention or review
  Also note that since `npm audit
fix` runs a full-fledged `npm install` under the hood, all configs that
apply to the installer will also apply to `npm install` -- so things like
`npm audit fix --package-lock-only` will work as expected


By default, the audit command will exit with a non-zero code if any
vulnerability is found


### Audit Signatures

To ensure the integrity of packages you download from the public npm registry, or any registry that supports signatures, you can verify the registry signatures of downloaded packages using the npm CLI
 To ensure that you're always able to verify attestation signatures check
that you're running the latest version of the npm CLI
 Please note this often
means updating npm beyond the version that ships with Node
 Signatures are provided in the package's `packument` in each published version within the `dist` object:

```json
""dist"":{
  ""

omitted
"": ""

omitted



""
  }]
}
```

See this [example](https://registry
npmjs
org/light-cycle/1
3) of a signed package from the public npm registry


The `sig` is generated using the following template: `${package
name}@${package
version}:${package
dist
integrity}` and the `keyid` has to match one of the public signing keys below
 Public signing keys are provided at `registry-host
tld/-/npm/v1/keys` in the following format:

```
{
  ""keys"": [{
    ""expires"": null,
    ""keyid"": ""SHA256:{{SHA256_PUBLIC_KEY}}"",
    ""keytype"": ""ecdsa-sha2-nistp256"",
    ""scheme"": ""ecdsa-sha2-nistp256"",
    ""key"": ""{{B64_PUBLIC_KEY}}""
  }]
}
```

Keys response:

- `expires`: null or a simplified extended [ISO 8601 format](https://en
wikipedia
npmjs
org/-/npm/v1/keys)


#### Bulk Advisory Endpoint

As of version 7, npm uses the much faster `Bulk Advisory` endpoint to
optimize the speed of calculating audit results


Any packages in the tree that do not have a `version` field in their
package
json file will be ignored
  If any `--omit` options are specified
(either via the [`--omit` config](/using-npm/config#omit), or one of the
shorthands such as `--production`, `--only=dev`, and so on), then packages will
be omitted from the submitted payload as appropriate


If the registry responds with an error, or with an invalid response, then
npm will attempt to load advisory data from the `Quick Audit` endpoint


The expected result will contain a set of advisory objects for each
dependency that matches the advisory range
  Each advisory object contains
a `name`, `url`, `id`, `severity`, `vulnerable_versions`, and `title`


#### Quick Audit Endpoint

If the `Bulk Advisory` endpoint returns an error, or invalid data, npm will
attempt to load advisory data from the `Quick Audit` endpoint, which is
considerably slower in most cases


The full package tree as found in `package-lock

Omitted dependency types are skipped when generating the report


#### Scrubbing

Out of an abundance of caution, npm versions 5 and 6 would ""scrub"" any
packages from the submitted report if their name contained a `/` character,
so as to avoid leaking the names of potentially private packages or git
URLs


However, in practice, this resulted in audits often failing to properly
detect meta-vulnerabilities, because the tree would appear to be invalid
due to missing dependencies, and prevented the detection of vulnerabilities
in package trees that used git dependencies or private modules


This scrubbing has been removed from npm as of version 7


#### Calculating Meta-Vulnerabilities and Remediations

npm uses the
[`@npmcli/metavuln-calculator`](http://npm
  A ""meta-vulnerability"" is a dependency that is vulnerable by
virtue of dependence on vulnerable versions of a vulnerable package


For example, if the package `foo` is vulnerable in the range `>=1
0
0
1
0`, then that version
of `bar` can only be installed by installing a vulnerable version of `foo`

In this case, `bar` is a ""metavulnerability""
  The `npm audit fix` command will exit with 0 exit code if no
vulnerabilities are found _or_ if the remediation is able to successfully
fix all vulnerabilities


If vulnerabilities were found the exit code will depend on the
[`audit-level` config](/using-npm/config#audit-level)
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `force`

* Default: false
* Type: Boolean

Removes various protections against unfortunate side effects, common
mistakes, unnecessary performance degradation, and malicious input


* Allow clobbering non-npm files in global installs

* Allow the `npm version` command to work on an unclean git repository

* Allow deleting the cache folder with `npm cache clean`

* Allow installing packages that have an `engines` declaration requiring a
  different version of `node`, even if `--engine-strict` is enabled

* Allow `npm audit fix` to install modules outside your stated dependency
  range (including SemVer-major changes)

* Allow unpublishing all versions of a published package

* Implicitly set `--yes` during `npm init`

* Allow clobbering existing values in `npm pkg`
* Allow unpublishing of entire packages (not just a single version)


If you don't have a clear idea of what you want to do, it is strongly
recommended that you do not use this option!



#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package
json`,
ignoring `node_modules`


For `update` this means only the `package-lock


For `list` this means the output will be based on the tree described by the
`package-lock
json`, rather than the contents of `node_modules`
json` files when installing
 This
will also prevent _writing_ `package-lock




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project




### See Also

* [npm install](/commands/npm-install)
* [config](/using-npm/config)

---
title: npm-bugs
section: 1
description: Report bugs for a package in a web browser
---

### Synopsis

```bash
npm bugs [<pkgname> [<pkgname> 

 If no
package name is provided, it will search for a `package
json` in the current
folder and use the `name` property


### Configuration

#### `browser`

* Default: OS X: `""open""`, Windows: `""start""`, Others: `""xdg-open""`
* Type: null, Boolean, or String

The browser that is called by npm commands to open websites


Set to `false` to suppress browser behavior and instead print urls to
terminal


Set to `true` to use default system URL opener




#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


### See Also

* [npm docs](/commands/npm-docs)
* [npm view](/commands/npm-view)
* [npm publish](/commands/npm-publish)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [package
json](/configuring-npm/package-json)

---
title: npm-cache
section: 1
description: Manipulates packages cache
---

### Synopsis

```bash
npm cache add <package-spec>
npm cache clean [<key>]
npm cache ls [<name>@<version>]
npm cache verify
```

Note: This command is unaware of workspaces


### Description

Used to add, list, or clean the npm cache folder


* add:
  Add the specified packages to the local cache


* clean:
  Delete all data out of the cache folder


* verify:
  Verify the contents of the cache folder, garbage collecting any unneeded
  data, and verifying the integrity of the cache index and all cached data
 This directory is a
[`cacache`](http://npm


All data that passes through the cache is fully verified for integrity on
both insertion and extraction
 Cache corruption will either trigger an
error, or signal to `pacote` that the data must be refetched, which it will
do automatically


There is currently no method exposed through npm to inspect or directly
manage the contents of this cache
 In order to access it, `cacache` must be
used directly


### A note about the cache's design

The npm cache is strictly a cache: it should not be relied upon as a
persistent and reliable data store for package data
 npm makes no guarantee
that a previously-cached piece of data will be available later, and will
automatically delete corrupted contents
 The primary guarantee that the
cache makes is that, if it does return data, that data will be exactly the
data that was inserted


To run an offline verification of existing cache contents, use `npm cache
verify`


### Configuration

#### `cache`

* Default: Windows: `%LocalAppData%\npm-cache`, Posix: `~/
npm`
* Type: Path

The location of npm's cache directory
im/cacache
* https://npm
im/pacote
* https://npm
im/make-fetch-happen

---
title: npm-ci
section: 1
description: Clean install a project
---

### Synopsis

```bash
npm ci

aliases: clean-install, ic, install-clean, isntall-clean
```

### Description

This command is similar to [`npm install`](/commands/npm-install), except
it's meant to be used in automated environments such as test platforms,
continuous integration, and deployment -- or any situation where you want
to make sure you're doing a clean install of your dependencies


The main differences between using `npm install` and `npm ci` are:

* The project **must** have an existing `package-lock
json` or
  `npm-shrinkwrap
json`

* If dependencies in the package lock do not match those in `package

* `npm ci` can only install entire projects at a time: individual
  dependencies cannot be added with this command

* It will never write to `package
json` or any of the package-locks:
  installs are essentially frozen


NOTE: If you create your `package-lock
json` file by running `npm install`
with flags that can affect the shape of your dependency tree, such as
`--legacy-peer-deps` or `--install-links`, you _must_ provide the same
flags to `npm ci` or you are likely to encounter errors
 An easy way to do
this is to run, for example,
`npm config set legacy-peer-deps=true --location=project` and commit the
`


### Example

Make sure you have a package-lock and an up-to-date install:

```bash
$ cd 
/my/npm/project
$ npm install
added 154 packages in 10s
$ ls | grep package-lock
```

Run `npm ci` in that project

```bash
$ npm ci
added 154 packages in 5s
```

Configure Travis CI to build using `npm ci` instead of `npm install`:

```bash
# 
yml
install:
- npm ci
# keep the npm cache around to speed up installs
cache:
  directories:
  - ""$HOME/
npm""
```

### Configuration

#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 shallow (formerly --global-style) only install direct
deps at top-level
store,
link in place, unhoisted
 Sets `--install-strategy=nested`
 Sets `--install-strategy=shallow`




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
 They are just not
physically installed on disk


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 See [`npm
fund`](/commands/npm-fund) for details




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes
json](/configuring-npm/package-lock-json)

---
title: npm-completion
section: 1
description: Tab Completion for npm
---

### Synopsis

```bash
npm completion
```

Note: This command is unaware of workspaces


### Description

Enables tab-completion in all npm commands
  Adding it to
your ~/
bashrc or ~/
zshrc will make the completions available
everywhere:

```bash
npm completion >> ~/
bashrc
npm completion >> ~/


When `COMP_CWORD`, `COMP_LINE`, and `COMP_POINT` are defined in the
environment, `npm completion` acts in ""plumbing mode"", and outputs
completions based on the arguments


### See Also

* [npm developers](/using-npm/developers)
* [npm](/commands/npm)

---
title: npm-config
section: 1
description: Manage the npm configuration files
---

### Synopsis

```bash
npm config set <key>=<value> [<key>=<value> 

]
npm config get [<key> [<key> 


]]
npm config delete <key> [<key> 


]
npm config list [--json]
npm config edit
npm config fix

alias: c
```

Note: This command is unaware of workspaces
json` file


See [npmrc](/configuring-npm/npmrc) for more information about the npmrc
files


The `npm config` command can be used to update and edit the contents
of the user and global npmrc files


### Sub-commands

Config supports the following sub-commands:

#### set

```bash
npm config set key=value [key=value



]
```

Sets each of the config keys to the value provided
 Modifies the user configuration
file unless [`location`](/commands/npm-config#location) is passed


If value is omitted, the key will be removed from your config file entirely


Note: for backwards compatibility, `npm config set key value` is supported
as an alias for `npm config set key=value`


#### get

```bash
npm config get [key 




]
```

Echo the config value(s) to stdout


If multiple keys are provided, then the values will be prefixed with the
key names
 Use `-l` to also show defaults


#### delete

```bash
npm config delete key [key 

]
```

Deletes the specified keys from all configuration files


#### edit

```bash
npm config edit
```

Opens the config file in an editor
  Use the `--global` flag to edit the
global config
 `_auth`, `_authToken`) to the
configured `registry`


### Configuration

#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package


Not supported by all npm commands




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior
exe' on Windows, or 'vi' on Unix systems
* Type: String

The command to run for `npm edit` and `npm config edit`




#### `location`

* Default: ""user"" unless `--global` is passed, which will also set this value
  to ""global""
* Type: ""global"", ""user"", or ""project""

When passed to `npm config` this refers to which config file to use

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`




### See Also

* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [package


For example, consider this dependency graph:

```
a
+-- b <-- depends on c@1
9
    `-- c@1
0
10
```

In this case, `npm dedupe` will transform the tree to:

```bash
a
+-- b
+-- d
`-- c@1
0
10
```

Because of the hierarchical nature of node's module lookup, b and d
will both get their dependency met by the single c package at the root
level of the tree


In some cases, you may have a dependency graph like this:

```
a
+-- b <-- depends on c@1
0
x
+-- c@1
0
x
    `-- c@1
9
```

During the installation process, the `c@1
0
3` dependency for `b` was
placed in the root of the tree
  Though `d`'s dependency on `c@1
x` could
have been satisfied by `c@1
0
3`, the newer `c@1


Running `npm dedupe` will cause npm to note the duplication and
re-evaluate, deleting the nested `c` module, because the one in the root is
sufficient


Arguments are ignored


Note that this operation transforms the dependency tree, but will never
result in new modules being installed


Using `npm find-dupes` will run the command in `--dry-run` mode
json`, if you want to update
values in `package
json` you can run: `npm update --save` instead
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 shallow (formerly --global-style) only install direct
deps at top-level
store,
link in place, unhoisted




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json` files when installing
 This
will also prevent _writing_ `package-lock
json` if `save` is true


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap
json` file


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project




### See Also

* [npm find-dupes](/commands/npm-find-dupes)
* [npm ls](/commands/npm-ls)
* [npm update](/commands/npm-update)
* [npm install](/commands/npm-install)

---
title: npm-deprecate
section: 1
description: Deprecate a version of a package
---

### Synopsis

```bash
npm deprecate <package-spec> <message>
```

Note: This command is unaware of workspaces


### Description

This command will update the npm registry entry for a package, providing a
deprecation warning to all who attempt to install it


It works on [version ranges](https://semver
com/) as well as specific
versions, so you can do something like this:

```bash
npm deprecate my-thing@""< 0
2
3""
```

SemVer ranges passed to this command are interpreted such that they *do*
include prerelease versions
  For example:

```bash
npm deprecate my-thing@1
x ""1
0
0-beta
  See the `owner` and
`adduser` help topics


### Configuration

#### `registry`

* Default: ""https://registry




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one

<paths>]
```

### Description

Similar to its `git diff` counterpart, this command will print diff patches
of files for packages published to the npm registry


* `npm diff --diff=<spec-a> --diff=<spec-b>`

    Compares two package versions using their registry specifiers, e
g:
    `npm diff --diff=pkg@1
0
0 --diff=pkg@^2
0
0`
g: `npm diff --diff=pkg@1
0
0`


    Any valid spec can be used, so that it's also possible to compare
    directories or git repositories,
    e
/packages/pkg`

    Here's an example comparing two different versions of a package named
    `abbrev` from the registry:

    ```bash
    npm diff --diff=abbrev@1
0 --diff=abbrev@1
1
1
    ```

    On success, output looks like:

    ```bash
    diff --git a/package
1

v1
1
json
    +++ b/package
0"",
    +  ""version"": ""1
1
 Schlueter <i@izs
me>"",
       ""main"": ""abbrev
js"",
    ```

    Given the flexible nature of npm specs, you can also target local
    directories or git repos just like when using `npm install`:

    ```bash
    npm diff --diff=https://github
/local-path
    ```

    In the example above we can compare the contents from the package installed
    from the git repo at `github
com/npm/libnpmdiff` with the contents of the
    `
/local-path` that contains a valid package, such as a modified copy of
    the original


* `npm diff` (in a package directory, no arguments):

    If the package is published to the registry, `npm diff` will fetch the
    tarball version tagged as `latest` (this value can be configured using the
    `tag` option) and proceed to compare the contents of files present in that
    tarball, with the current files in your local file system


    This workflow provides a handy way for package authors to see what
    package-tracked files have been changed in comparison with the latest
    published version of that package
 Once that specific
    version is known `npm diff` will print diff patches comparing the
    current version of `<pkg-name>` found in the local file system with
    that specific version returned by the registry


* `npm diff --diff=<spec-a>` (in a package directory):

    Similar to using only a single package name, it's also possible to declare
    a full registry specifier version if you wish to compare the local version
    of an installed package with the specific version/tag/semver-range provided
    in `<spec-a>`
0` is installed in the current `node_modules`
    folder, running:

    ```bash
    npm diff --diff=pkg@2
0
    ```

    It will effectively be an alias to
    `npm diff --diff=pkg@1
0
0`


* `npm diff --diff=<semver-a> [--diff=<semver-b>]` (in a package directory):

    Using `npm diff` along with semver-valid version numbers is a shorthand
    to compare different versions of the current package


    It needs to be run from a package directory, such that for a package named
    `pkg` running `npm diff --diff=1
0
1` is the same as running
    `npm diff --diff=pkg@1


    If only a single argument `<version-a>` is provided, then the current local
    file system is going to be compared against that version


    Here's an example comparing two specific versions (published to the
    configured registry) of the current project directory:

    ```bash
    npm diff --diff=1
0
1
0
    ```

Note that tag names are not valid `--diff` argument values, if you wish to
compare to a published tag, you must use the `pkg@tagname` syntax


#### Filtering files

It's possible to also specify positional arguments using file names or globs
pattern matching in order to limit the result of diff patches to only a subset
of files for a given package, e
/lib/ CHANGELOG
md
  ```

In the example above the diff output is only going to print contents of files
located within the folder `
md` file


### Configuration

#### `diff`

* Default:
* Type: String (can be set multiple times)

Define arguments to compare in `npm diff`




#### `diff-name-only`

* Default: false
* Type: Boolean

Prints only filenames when using `npm diff`




#### `diff-unified`

* Default: 3
* Type: Number

The number of lines of context to print in `npm diff`




#### `diff-ignore-all-space`

* Default: false
* Type: Boolean

Ignore whitespace when comparing lines in `npm diff`


Note: this causes `npm diff` to ignore the `--diff-src-prefix` and
`--diff-dst-prefix` configs




#### `diff-dst-prefix`

* Default: ""b/""
* Type: String

Destination prefix to be used in `npm diff` output




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory


Also the tag that is added to the package@version specified by the `npm tag`
command, if no explicit tag is given


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
 - Commands that do
other things (test, exec, publish, etc


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes
 If you have
  two-factor authentication on auth-and-writes then you’ll need to include a
  one-time password on the command line with
  `--otp <one-time password>`, or go through a second factor flow based on your `authtype`


* rm: Clear a tag that is no longer in use from the package
 If you have
  two-factor authentication on auth-and-writes then you’ll need to include
  a one-time password on the command line with `--otp <one-time password>`,
  or go through a second factor flow based on your `authtype`

* ls: Show all of the dist-tags for a package, defaulting to the package in
  the current prefix
 For example, `npm publish --tag=beta`


By default, `npm install <pkg>` (without any `@<version>` or `@<tag>`
specifier) installs the `latest` tag


### Purpose

Tags can be used to provide an alias instead of version numbers


For example, a project might choose to have multiple streams of development
and use a different tag for each stream, e


### Caveats

This command used to be known as `npm tag`, which only created new tags,
and so had a different syntax


Tags must share a namespace with version numbers, because they are
specified in the same slot: `npm install <pkg>@<version>` vs
`npm install <pkg>@<tag>`
 For
example, `v1
4` cannot be used as a tag, because it is interpreted by
semver as `>=1
  See <https://github
com/npm/npm/issues/6082>


The simplest way to avoid semver problems with tags is to use tags that do
not begin with a number or the letter `v`


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes
 If no package name is provided, it will search for a
`package


### Configuration

#### `browser`

* Default: OS X: `""open""`, Windows: `""start""`, Others: `""xdg-open""`
* Type: null, Boolean, or String

The browser that is called by npm commands to open websites


Set to `false` to suppress browser behavior and instead print urls to
terminal


Set to `true` to use default system URL opener




#### `registry`

* Default: ""https://registry
npmjs




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes
json](/configuring-npm/package-json)

---
title: npm-doctor
section: 1
description: Check the health of your npm environment
---

### Synopsis

```bash
npm doctor [ping] [registry] [versions] [environment] [permissions] [cache]
```

Note: This command is unaware of workspaces


### Description

`npm doctor` runs a set of checks to ensure that your npm installation has
what it needs to manage your JavaScript packages
 npm is mostly a
standalone tool, but it does have some basic requirements that must be met:

+ Node
js and git must be executable by npm
npmjs
com`, or another service that
  uses the registry API, is available

+ The directories that npm uses, `node_modules` (both locally and
  globally), exist and can be written by the current user

+ The npm cache exists, and the package tarballs within it aren't corrupt


Without all of these working properly, npm may not work properly


Also, in addition to this, there are also very many issue reports due to
using old versions of npm
  By default npm
runs all of these checks


#### `npm ping`

By default, npm installs from the primary npm registry,
`registry
npmjs
org`
  `npm doctor` hits a special ping endpoint within the
registry
 This can also be checked with `npm ping`
 If this check fails,
you may be using a proxy that needs to be configured, or may need to talk
to your IT staff to get access over HTTPS to `registry
npmjs


This check is done against whichever registry you've configured (you can
see what that is by running `npm config get registry`), and if you're using
a private registry that doesn't support the `/whoami` endpoint supported by
the primary registry, this check may fail
js may come bundled with a particular version of npm, it's the
policy of the CLI team that we recommend all users run `npm@latest` if they
can
 As the CLI is maintained by a small team of contributors, there are
only resources for a single line of development, so npm's own long-term
support releases typically only receive critical security and regression
fixes


#### `node -v`

For most users, in most circumstances, the best version of Node will be the
latest long-term support (LTS) release
 That's OK!
But in general, the npm team recommends that most users run Node
js LTS


#### `npm config get registry`

You may be installing from private package registries for your project or
company
  This
part of `npm doctor` just lets you, and maybe whoever's helping you with
support, know that you're not using the default registry


#### `which git`

While it's documented in the README, it may not be obvious that npm needs
Git installed to do many of the things that it does
 Also, in some cases
– especially on Windows – you may have Git set up in such a way that it's
not accessible via your `PATH` so that npm can find it
 This check ensures
that Git is available


#### Permissions checks

* Your cache must be readable and writable by the user running npm

* Global package binaries must be writable by the user running npm

* Your local `node_modules` path, if you're running `npm doctor` with a
  project directory, must be readable and writable by the user running npm
 In the event that there are corrupt
packages in your cache, you should probably run `npm cache clean -f` and
reset the cache


### Configuration

#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry




### See Also

* [npm bugs](/commands/npm-bugs)
* [npm help](/commands/npm-help)
* [npm ping](/commands/npm-ping)

---
title: npm-edit
section: 1
description: Edit an installed package
---

### Synopsis

```bash
npm edit <pkg>[/<subpkg>


### Description

Selects a dependency in the current project and opens the package folder in
the default editor (or whatever you've configured as the npm `editor`
config -- see [`npm-config`](npm-config)
)

After it has been edited, the package is rebuilt so as to pick up any
changes in compiled packages


For instance, you can do `npm install connect` to install connect
into your package, and then `npm edit connect` to make a few
changes to your locally installed copy


### Configuration

#### `editor`

* Default: The EDITOR or VISUAL environment variables, or
  '%SYSTEMROOT%\notepad
exe' on Windows, or 'vi' on Unix systems
* Type: String

The command to run for `npm edit` and `npm config edit`




### See Also

* [npm folders](/configuring-npm/folders)
* [npm explore](/commands/npm-explore)
* [npm install](/commands/npm-install)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-exec
section: 1
description: Run a command from a local or remote npm package
---

### Synopsis

```bash
npm exec -- <pkg>[@<version>] [args

]
npm exec --package=<pkg>[@<version>] -- <cmd> [args


]
npm exec -c '<cmd> [args


json` scripts are run
  Interactive mode is not supported in CI
environments when standard input is a TTY, to prevent hangs
  The `--package` option may be
specified multiple times, to execute the supplied command in an environment
where all specified packages are available
 The requested packages are
installed to a folder in the npm cache, which is added to the `PATH`
environment variable in the executed process


Package names provided without a specifier will be matched with whatever
version exists in the local project


If no `-c` or `--call` option is provided, then the positional arguments
are used to generate the command string

- If the package has multiple `bin` entries, and one of them matches the
  unscoped portion of the `name` field, then that command will be used


To run a binary _other than_ the named binary, specify one or more
`--package` options, which will prevent npm from inferring the package from
the first command argument


### `npx` vs `npm exec`

When run via the `npx` binary, all flags and options *must* be set prior to
any positional arguments
  When run via `npm exec`, a double-hyphen `--`
flag can be used to suppress npm's parsing of switches and options that
should be sent to the executed command


For example:

```
$ npx foo@latest bar --package=@npmcli/foo
```

In this case, npm will resolve the `foo` package name, and run the
following command:

```
$ foo bar --package=@npmcli/foo
```

Since the `--package` option comes _after_ the positional arguments, it is
treated as an argument to the executed command


In contrast, due to npm's argument parsing logic, running this command is
different:

```
$ npm exec foo@latest bar --package=@npmcli/foo
```

In this case, npm will parse the `--package` option first, resolving the
`@npmcli/foo` package
  Then, it will execute the following command in that
context:

```
$ foo@latest bar
```

The double-hyphen character is recommended to explicitly tell npm to stop
parsing command line options and switches
  The following command would
thus be equivalent to the `npx` command above:

```
$ npm exec -- foo@latest bar --package=@npmcli/foo
```

### Configuration

#### `package`

* Default:
* Type: String (can be set multiple times)

The package or packages to install for [`npm exec`](/commands/npm-exec)



#### `call`

* Default: """"
* Type: String

Optional companion option for `npm exec`, `npx` that allows for specifying a
custom command to be run along with the installed packages


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


### Examples

Run the version of `tap` in the local dependencies, with the provided
arguments:

```
$ npm exec -- tap --bail test/foo
js
$ npx tap --bail test/foo
js
```

Run a command _other than_ the command whose name matches the package name
by specifying a `--package` option:

```
$ npm exec --package=foo -- bar --bar-argument
# ~ or ~
$ npx --package=foo bar --bar-argument
```

Run an arbitrary shell script, in the context of the current project:

```
$ npm x -c 'eslint && say ""hooray, lint passed""'
$ npx -c 'eslint && say ""hooray, lint passed""'
```

### Workspaces support

You may use the [`workspace`](/using-npm/config#workspace) or
[`workspaces`](/using-npm/config#workspaces) configs in order to run an
arbitrary command from an npm package (either one installed locally, or fetched
remotely) in the context of the specified workspaces

If no positional argument or `--call` option is provided, it will open an
interactive subshell in the context of each of these configured workspaces one
at a time


Given a project with configured workspaces, e

+-- package
json
`-- packages
   +-- a
   |   `-- package
json
```

Assuming the workspace configuration is properly set up at the root level
`package
json` file
 e
g:

```
{
    ""workspaces"": [ ""
/packages/*"" ]
}
```

You can execute an arbitrary command from a package in the context of each of
the configured workspaces when using the
[`workspaces` config options](/using-npm/config#workspace), in this example
we're using **eslint** to lint any js file found within each workspace folder:

```
npm exec --ws -- eslint 
js
```

The `workspace` config can also be specified multiple times in order to run a
specific script in the context of multiple workspaces
 When defining values for
the `workspace` config in the command line, it also possible to use `-w` as a
shorthand, e
/*
/packages/b` folders


### Compatibility with Older npx Versions

The `npx` binary was rewritten in npm v7
0

- The `--no-install` option is deprecated, and will be converted to `--no`

- Shell fallback functionality is removed, as it is not advisable

- The `-p` argument is a shorthand for `--parseable` in npm, but shorthand
  for `--package` in npx
  This is maintained, but only for the `npx`
  executable

- The `--ignore-existing` option is removed

- The `--npm` option is removed
  `npx` will always use the `npm` it ships
  with

- The `--always-spawn` option is redundant, and thus removed

- The `--shell` option is replaced with `--script-shell`, but maintained
  in the `npx` executable for backwards compatibility


### A note on caching

The npm cli utilizes its internal package cache when using the package
name specified
  You can use the following to change how and when the
cli uses this cache
 See [`npm cache`](/commands/npm-cache) for more on
how the cache works


#### prefer-online

Forces staleness checks for packages, making the cli look for updates
immediately even if the package is already in the cache
  Missing data will still be
requested from the server
 Any packages not locally cached will result in
an error


#### workspace

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result to selecting all of the
  nested workspaces)

This value is not exported to the environment for child processes


#### workspaces

* Alias: `--ws`
* Type: Boolean
* Default: `false`

Run scripts in the context of all configured workspaces for the current
project


If one or more package specs are provided, then only packages matching
one of the specifiers will have their relationships explained


The package spec can also refer to a folder within `
/node_modules`

For example, running `npm explain glob` within npm's source tree will show:

```bash
glob@7
1
6
node_modules/glob
  glob@""^7
1
4"" from the root project

glob@7
1
1 dev
node_modules/tacks/node_modules/glob
  glob@""^7
0
5"" from rimraf@2
2"" from tacks@1
3
0
    node_modules/tacks
      dev tacks@""^1


```bash
$ npm explain node_modules/nyc/node_modules/find-up
find-up@3
0 dev
node_modules/nyc/node_modules/find-up
  find-up@""^3
0
1
1
10
8
    node_modules/tap
      dev tap@""^14
8"" from the root project
```

### Configuration
#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* In `npm pkg set` it enables parsing set values with JSON
json`


Not supported by all npm commands


This value is not exported to the environment for child processes


### Configuration

#### `shell`

* Default: SHELL environment variable, or ""bash"" on Posix, or ""cmd
exe"" on
  Windows
* Type: String

The shell to run for the `npm explore` command


### Configuration

#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 nested: (formerly --legacy-bundling) install in
place, no hoisting
store,
link in place, unhoisted




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies
 Sets `--install-strategy=shallow`




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved
json` files when installing




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap
json` file
 They are just not
physically installed on disk


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts


This is the inverse of `--omit=<type>`


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted
cmd` shims on Windows) for package
executables


Set to false to have it not do this




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes
 This option has no effect on
workspaces




### See Also

* [npm dedupe](/commands/npm-dedupe)
* [npm ls](/commands/npm-ls)
* [npm update](/commands/npm-update)
* [npm install](/commands/npm-install)


---
title: npm-fund
section: 1
description: Retrieve funding information
---

### Synopsis

```bash
npm fund [<package-spec>]
```

### Description

This command retrieves information on how to fund the dependencies of a
given project
 If a package name is provided
then it tries to open its funding url using the
[`--browser` config](/using-npm/config#browser) param; if there are multiple
funding sources for the package, the user will be instructed to pass the
`--which` option to disambiguate


The list will avoid duplicated entries and will stack all packages that
share the same url as a single entry
 Thus, the list does not have the
same shape of the output from `npm ls`


#### Example

### Workspaces support

It's possible to filter the results to only include a single workspace
and its dependencies using the
[`workspace` config](/using-npm/config#workspace) option


#### Example:

Here's an example running `npm fund` in a project with a configured
workspace `a`:

```bash
$ npm fund
test-workspaces-fund@1
0
0
+-- https://example
com/a
| | `-- a@1
0
com/maintainer
|     `-- foo@1
0
0
+-- https://example
com/npmcli-funding
|   `-- @npmcli/test-funding
`-- https://example
0
`-- https://example
com/a
  | `-- a@1
0
  `-- https://example
com/maintainer
      `-- foo@2


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package


Not supported by all npm commands


Set to `true` to use default system URL opener




#### `unicode`

* Default: false on windows, true on mac/unix systems with a unicode locale,
  as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables

* Type: Boolean

When set to true, npm uses unicode characters in the tree output




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


#### `which`

* Default: null
* Type: null or Number

If there are multiple funding sources, which 1-indexed source URL to open




## See Also

* [package spec](/using-npm/package-spec)
* [npm install](/commands/npm-install)
* [npm docs](/commands/npm-docs)
* [npm ls](/commands/npm-ls)
* [npm config](/commands/npm-config)
* [npm workspaces](/using-npm/workspaces)

---
title: npm-help-search
section: 1
description: Search npm help documentation
---

### Synopsis

```bash
npm help-search <text>
```

Note: This command is unaware of workspaces


If only one result is found, then it will show that help topic




### See Also

* [npm](/commands/npm)
* [npm help](/commands/npm-help)

---
title: npm-help
section: 1
description: Get help on npm
---

### Synopsis

```bash
npm help <term> [<terms

>]

alias: hlep
```

Note: This command is unaware of workspaces


### Description

If supplied a topic, then show the appropriate documentation page


If the topic does not exist, or if multiple terms are provided, then npm
will run the `help-search` command to find a match
  Note that, if
`help-search` finds a single subject, then it will run `help` on that
topic, so unique matches are equivalent to specifying a topic name


### Configuration

#### `viewer`

* Default: ""man"" on Posix, ""browser"" on Windows
* Type: String

The program to use to view help content




### See Also

* [npm](/commands/npm)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [package
json](/configuring-npm/package-json)
* [npm help-search](/commands/npm-help-search)

---
title: npm-hook
section: 1
description: Manage registry hooks
---

### Synopsis

```bash
npm hook add <pkg> <url> <secret> [--type=<type>]
npm hook ls [pkg]
npm hook rm <id>
npm hook update <id> <url> <secret>
```

Note: This command is unaware of workspaces
npmjs


Hooks allow you to configure URL endpoints that will be notified whenever a
change happens to any of the supported entity types
 Three different types
of entities can be watched by hooks: packages, owners, and scopes


To create a package hook, simply reference the package name


To create an owner hook, prefix the owner name with `~` (as in,
`~youruser`)


### Example

Add a hook to watch a package for changes:

```bash
$ npm hook add lodash https://example
com/ my-shared-secret
```

Add a hook to watch packages belonging to the user `substack`:

```bash
$ npm hook add ~substack https://example




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator




### See Also

* [""Introducing Hooks"" blog post](https://blog
npmjs
0
0
0`
* `npm init @usr/foo@2
0
0` -> `npm exec @usr/create-foo@2
0
0`

If the initializer is omitted (by just calling `npm init`), init will fall
back to legacy init behavior
 It will ask you a bunch of questions, and
then write a package
json for you
 It will attempt to make reasonable
guesses based on existing fields, dependencies, and options selected


*Note:* if a user already has the `create-<initializer>` package
globally installed, that will be what `npm init` uses
2
3` specifically

#### Forwarding additional options

Any additional options will be passed directly to the command, so `npm init
foo -- --hello` will map to `npm exec -- create-foo --hello`


To better illustrate how options are forwarded, here's a more evolved
example showing options passed to both the **npm cli** and a create package,
both following commands are equivalent:

- `npm init foo -y --registry=<url> -- --hello -a`
- `npm exec -y --registry=<url> -- create-foo --hello -a`

### Examples

Create a new React-based project using
[`create-react-app`](https://npm
im/create-react-app):

```bash
$ npm init react-app 
/my-react-app
```

Create a new `esm`-compatible package using
[`create-esm`](https://npm
im/create-esm):

```bash
$ mkdir my-esm-lib && cd my-esm-lib
$ npm init esm --yes
```

Generate a plain old package
json using legacy init:

```bash
$ mkdir my-npm-pkg && cd my-npm-pkg
$ git init
$ npm init
```

Generate it without having it ask any questions:

```bash
$ npm init -y
```

### Workspaces support

It's possible to create a new workspace within your project by using the
`workspace` config option
json` `""workspaces"": []` property in order to make
sure that new generated **workspace** is properly set up as such
g:

```


+-- package
 Similar to the previous example of
creating a new React-based project using
[`create-react-app`](https://npm
im/create-react-app), the following syntax
will make sure to create the new react app as a nested **workspace** within your
project and configure your `package
json` to recognize it as such:

```bash
npm init -w packages/my-react-app react-app 
g: `react-app 
json
   `-- my-react-app
       +-- README
       +-- package
json
       `-- 





#### `init-license`

* Default: ""ISC""
* Type: String

The value `npm init` should use by default for the package license




#### `init-module`

* Default: ""~/
npm-init
js""
* Type: Path

A module that will be loaded by the `npm init` command
 See the
documentation for the
[init-package-json](https://github




#### `init-version`

* Default: ""1
0""
* Type: SemVer string

The value that `npm init` should use by default for the package version
number, if not already set in package
json




#### `yes`

* Default: null
* Type: null or Boolean

Automatically answer ""yes"" to any prompts that npm might print on the
command line




#### `force`

* Default: false
* Type: Boolean

Removes various protections against unfortunate side effects, common
mistakes, unnecessary performance degradation, and malicious input

* Allow the `npm version` command to work on an unclean git repository

* Allow deleting the cache folder with `npm cache clean`

* Allow installing packages that have an `engines` declaration requiring a
  different version of `node`, even if `--engine-strict` is enabled

* Allow clobbering existing values in `npm pkg`
* Allow unpublishing of entire packages (not just a single version)


If you don't have a clear idea of what you want to do, it is strongly
recommended that you do not use this option!



#### `scope`

* Default: the scope of the current project, if any, or """"
* Type: String

Associate an operation with a scope for a scoped registry
mycorp
com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

This will cause `@mycorp` to be mapped to the registry for future
installation of packages specified according to the pattern
`@mycorp/package`


```
# accept all defaults, and create a package named ""@foo/whatever"",
# instead of just named ""whatever""
npm init --scope=@foo --yes
```



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder


This value is not exported to the environment for child processes
json](/configuring-npm/package-json)
* [npm version](/commands/npm-version)
* [npm scope](/using-npm/scope)
* [npm exec](/commands/npm-exec)
* [npm workspaces](/using-npm/workspaces)

---
title: npm-install-ci-test
section: 1
description: Install a project with a clean slate and run tests
---

### Synopsis

```bash
npm install-ci-test

aliases: cit, clean-install-test, sit
```

### Description

This command runs `npm ci` followed immediately by `npm test`


### Configuration

#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 shallow (formerly --global-style) only install direct
deps at top-level
 linked: (experimental) install in node_modules/




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies
 Sets `--install-strategy=shallow`


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` file


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 See [`npm
fund`](/commands/npm-fund) for details
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink


 It
takes exactly the same arguments as `npm install`


### Configuration

#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package
json will be configured with an exact version
rather than using npm's default semver range operator




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 linked: (experimental) install in node_modules/
store,
link in place, unhoisted




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
 Sets `--install-strategy=nested`
 Sets `--install-strategy=shallow`




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
 They are just not
physically installed on disk




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object




#### `prefer-dedupe`

* Default: false
* Type: Boolean

Prefer to deduplicate packages if possible, rather than choosing a newer
version of a dependency




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json` files when installing
 This
will also prevent _writing_ `package-lock




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock


For `update` this means only the `package-lock


For `list` this means the output will be based on the tree described by the
`package-lock




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `cpu`

* Default: null
* Type: null or String

Override CPU architecture of native modules to install
 Acceptable values
are same as `cpu` field of package
json, which comes from `process
arch`
 Acceptable values are same as `os`
field of package
json, which comes from `process
platform`




#### `libc`

* Default: null
* Type: null or String

Override libc of native modules to install
 Acceptable values are same as
`libc` field of package


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink




### See Also

* [npm install](/commands/npm-install)
* [npm install-ci-test](/commands/npm-install-ci-test)
* [npm test](/commands/npm-test)

---
title: npm-install
section: 1
description: Install a package
---

### Synopsis

```bash
npm install [<package-spec> 


 If the
package has a package-lock, or an npm shrinkwrap file, or a yarn lock file,
the installation of dependencies will be driven by that, respecting the
following order of precedence:

* `npm-shrinkwrap
lock`

See [package-lock


A `package` is:

* a) a folder containing a program described by a
  [`package



* `npm install` (in a package directory, no arguments):

    Install the dependencies to the local `node_modules` folder


    In global mode (ie, with `-g` or `--global` appended to the command),
    it installs the current package context (ie, the current working
    directory) as a global package


    By default, `npm install` will install all modules listed as
    dependencies in [`package
 To install all modules listed in both
    `dependencies` and `devDependencies` when `NODE_ENV` environment
    variable is set to `production`, you can use `--production=false`


    > NOTE: The `--production` flag has no particular meaning when adding a
    dependency to a project
 If `<folder>` sits outside the root of your project,
    *npm will not install the package dependencies* in the directory `<folder>`,
    but it will create a symlink to `<folder>`

/
/sub-package
    ```

* `npm install <tarball file>`:

    Install a package that is sitting on the filesystem
  Note: if you just
    want to link a dev directory into your npm root, you can do this more
    easily by using [`npm link`](/commands/npm-link)


    Tarball requirements:
    * The filename *must* use `
tar`, `
tar
gz`, or `
tgz` as the
      extension

    * The package contents should reside in a subfolder inside the tarball
      (usually it is called `package/`)
 npm strips one directory layer
      when installing the package (an equivalent of `tar x
      --strip-components=1` is run)

    * The package must contain a `package
json` file with `name` and
      `version` properties
/package
tgz
    ```

* `npm install <tarball url>`:

    Fetch the tarball url, and then install it
  In order to distinguish between
    this and other options, the argument must start with ""http://"" or ""https://""

    Example:

    ```bash
    npm install https://github
com/indexzero/forever/tarball/v0
6
    ```

* `npm install [<@scope>/]<name>`:

    Do a `<name>@<tag>` install, where `<tag>` is the ""tag"" config
 (See
    [`config`](/using-npm/config#tag)
)

    In most cases, this will install the version of the modules tagged as
    `latest` on the npm registry

    Additionally, you can control where and how they get saved with some
    additional flags:

    * `-P, --save-prod`: Package will appear in your `dependencies`
 This
      is the default unless `-D` or `-O` are present


    * `-O, --save-optional`: Package will appear in your
      `optionalDependencies`


    * `--no-save`: Prevents saving to `dependencies`


    When using any of the above options to save dependencies to your
    package
json, there are two additional, optional flags:

    * `-E, --save-exact`: Saved dependencies will be configured with an
      exact version rather than using npm's default semver range operator


    * `-B, --save-bundle`: Saved dependencies will also be added to your
      `bundleDependencies` list
json`
    then it will be updated as well


    `<scope>` is optional
 The package will be downloaded from the registry
    associated with the specified scope
 If no registry is associated with
    the given scope the default registry is assumed
 See
    [`scope`](/using-npm/scope)
 Scopes names
    must also be followed by a slash
 Allows multiple versions of
    a same-name package side-by-side, more convenient import names for
    packages with otherwise long ones, and using git forks replacements
    or forked npm packages as replacements
 Aliasing works only on your
    project and does not rename packages in transitive dependencies

    Aliases should follow the naming conventions stated in
    [`validate-npm-package-name`](https://www
npmjs
com/package/validate-npm-package-name#naming-rules)


    Examples:

    ```bash
    npm install my-react@npm:react
    npm install jquery2@npm:jquery@2
    npm install jquery3@npm:jquery@3
    npm install npa@npm:npm-package-arg
    ```

* `npm install [<@scope>/]<name>@<tag>`:

    Install the version of the package that is referenced by the specified tag
  This will fail if the
    version has not been published to the registry


    Example:

    ```bash
    npm install sax@0
1
    npm install @myorg/privatepackage@1
5
0
    ```

* `npm install [<@scope>/]<name>@<version range>`:

    Install a version of the package matching the specified version range

    This will follow the same rules for resolving dependencies described in
    [`package
json`](/configuring-npm/package-json)


    Example:

    ```bash
    npm install sax@"">=0
2
0""
    npm install @myorg/privatepackage@""16 - 17""
    ```

* `npm install <git remote url>`:

    Installs the package from the hosted git provider, cloning it with
    `git`
  For a full git remote url, only that URL will be attempted


    ```bash
    <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]
    ```

    `<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or
    `git+file`
 If the commit-ish has the format `#semver:<semver>`, `<semver>`
    can be any valid semver range or exact version, and npm will look for
    any tags or refs matching that range in the remote repository, much as
    it would for a registry dependency


    If the repository makes use of submodules, those submodules will be
    cloned as well
com:npm/cli
com/npm/cli
git
    npm install git://github
com/npm/cli
git#v1
0
com:npm/cli
com/githubname/githubrepo` by
    attempting to clone it using `git`


    If `#<commit-ish>` is provided, it will be used to clone exactly that
    commit
 If the commit-ish has the format `#semver:<semver>`, `<semver>`
    can be any valid semver range or exact version, and npm will look for
    any tags or refs matching that range in the remote repository, much as
    it would for a registry dependency
 If neither `#<commit-ish>` or
    `#semver:<semver>` is specified, then the default branch is used


    Examples:

    ```bash
    npm install mygithubuser/myproject
    npm install github:mygithubuser/myproject
   ```

* `npm install gist:[<githubname>/]<gistID>[#<commit-ish>|#semver:<semver>]`:

    Install the package at `https://gist
github
json`


    As with regular git dependencies, `dependencies` and `devDependencies` will
    be installed if the package has a `prepare` script before the package is
    done installing


    Example:

    ```bash
    npm install gist:101a11beef
    ```

* `npm install bitbucket:<bitbucketname>/<bitbucketrepo>[#<commit-ish>]`:

    Install the package at `https://bitbucket
org/bitbucketname/bitbucketrepo`
    by attempting to clone it using `git`


    Example:

    ```bash
    npm install bitbucket:mybitbucketuser/myproject
    ```

* `npm install gitlab:<gitlabname>/<gitlabrepo>[#<commit-ish>]`:

    Install the package at `https://gitlab


    If `#<commit-ish>` is provided, it will be used to clone exactly that
    commit
 If neither `#<commit-ish>` or `#semver:<semver>` is
    specified, then `master` is used

For example:

```bash
npm install sax@"">=0
1
0 <0
2
0"" bench supervisor
```

The `--tag` argument will apply to all of the specified install targets
 If
a tag with the given name exists, the tagged version is preferred over
newer versions


```bash
npm install sax --force
```

### Configuration

See the [`config`](/using-npm/config) help doc
  Many of the configuration
params have some effect on installation, since that's most of what npm
does


These are some of the most common options related to installation


#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package
json` file as dependencies


When used with the `npm rm` command, removes the dependency from
`package
json`
json` if set to `false`
json will be configured with an exact version
rather than using npm's default semver range operator
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 shallow (formerly --global-style) only install direct
deps at top-level




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 Sets `--install-strategy=nested`




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap
json` file


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved




#### `prefer-dedupe`

* Default: false
* Type: Boolean

Prefer to deduplicate packages if possible, rather than choosing a newer
version of a dependency




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json` files when installing
 This
will also prevent _writing_ `package-lock
json` if `save` is true
json`,
ignoring `node_modules`


For `update` this means only the `package-lock


For `list` this means the output will be based on the tree described by the
`package-lock
json`, rather than the contents of `node_modules`




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts


Set to false to have it not do this




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`




#### `cpu`

* Default: null
* Type: null or String

Override CPU architecture of native modules to install
 Acceptable values
are same as `cpu` field of package
json, which comes from `process
arch`
platform`
json



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This algorithm is deterministic, but different
trees may be produced if two dependencies are requested for installation in
a different order


See [folders](/configuring-npm/folders) for a more detailed description of
the specific folder structures that npm creates
json](/configuring-npm/package-json)
* [workspaces](/using-npm/workspaces)

---
title: npm-link
section: 1
description: Symlink a package folder
---

### Synopsis

```bash
npm link [<package-spec>]

alias: ln
```

### Description

This is handy for installing your own stuff, so that you can work on it and
test iteratively without having to continually rebuild


Package linking is a two-step process


First, `npm link` in a package folder with no arguments will create a
symlink in the global folder `{prefix}/lib/node_modules/<package>` that
links to the package where the `npm link` command was executed
 It will
also link any bins in the package to `{prefix}/bin/{name}`
  Note that
`npm link` uses the global prefix (see `npm prefix -g` for its value)


Next, in some other location, `npm link package-name` will create a
symbolic link from globally-installed `package-name` to `node_modules/` of
the current folder


Note that `package-name` is taken from `package
json`, _not_ from the
directory name


The package name can be optionally prefixed with a scope
 See
[`scope`](/using-npm/scope)


You may also shortcut the two steps in one
/node-redis; npm link)
npm link redis
```

That is, it first creates a global link, and then links the global
installation target into your project's `node_modules` folder
0
1`, and ran `npm link redis`, it would replace
the `^3
0
1` dependency with `file:
/path/to/node-redis`, which you
probably don't want!  Additionally, other users or developers on your
project would run into issues if they do not have their folders set up
exactly the same as yours


If you are adding a _new_ dependency as a link, you should add it to the
relevant metadata by running `npm install <dep> --package-lock-only`
json` and
`package-lock
json` files, you can use `npm link <dep> --save` to do so
  Note that It may actually be
linked into the parent project's `node_modules` folder, if there are no
conflicting dependencies


### Configuration

#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package
json` file as dependencies


When used with the `npm rm` command, removes the dependency from
`package




#### `save-exact`

* Default: false
* Type: Boolean

Dependencies saved to package
json will be configured with an exact version
rather than using npm's default semver range operator




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 shallow (formerly --global-style) only install direct
deps at top-level
 linked: (experimental) install in node_modules/




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
 Sets `--install-strategy=shallow`




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved
 This
will also prevent _writing_ `package-lock

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap
json` file




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install
json files




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 See [`npm
fund`](/commands/npm-fund) for details




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes
json](/configuring-npm/package-json)
* [npm install](/commands/npm-install)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-login
section: 1
description: Login to a registry user account
---

### Synopsis

```bash
npm login
```

Note: This command is unaware of workspaces
npmrc` file


When using `legacy` for your `auth-type`, the username and password, are
read in from prompts


To reset your password, go to <https://www
com/forgot>

To change your email address, go to <https://www
com/email-edit>

You may use this command multiple times with the same user account to
authorize on a new machine
  When authenticating on a new machine,
the username, password and email address must all match with
your existing record


### Configuration

#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry




#### `scope`

* Default: the scope of the current project, if any, or """"
* Type: String

Associate an operation with a scope for a scoped registry


Useful when logging in to or out of a private registry:

```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry
mycorp
com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

This will cause `@mycorp` to be mapped to the registry for future
installation of packages specified according to the pattern
`@mycorp/package`


### Description

When logged into a registry that supports token-based authentication, tell
the server to end this token's session


When logged into a legacy registry that uses username and password
authentication, this will clear the credentials in your user configuration

In this case, it will _only_ affect the current environment


Useful when logging in to or out of a private registry:

```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry


```
# accept all defaults, and create a package named ""@foo/whatever"",
# instead of just named ""whatever""
npm init --scope=@foo --yes
```



### See Also

* [npm adduser](/commands/npm-adduser)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npm whoami](/commands/npm-whoami)

---
title: npm-ls
section: 1
description: List installed packages
---

### Synopsis

```bash
npm ls <package-spec>

alias: list
```

### Description

This command will print to stdout all the versions of packages that are
installed, as well as their dependencies when `--all` is specified, in a
tree structure


Note: to get a ""bottoms up"" view of why a given package is included in the
tree at all, use [`npm explain`](/commands/npm-explain)
  For
example, running `npm ls promzard` in npm's source tree will show:

```bash
npm@10
5
2 /path/to/npm
└─┬ init-package-json@0
0
4
  └── promzard@0
1
5
```

It will print out extraneous, missing, and invalid packages


If a project specifies git urls for dependencies these are shown
in parentheses after the `name@version` to make it easier for users to
recognize potential forks of a project


The tree shown is the logical dependency tree, based on package
dependencies, not the physical layout of your `node_modules` folder


When run as `ll` or `la`, it shows extended information by default


### Note: Design Changes Pending

The `npm ls` command's output and behavior made a _ton_ of sense when npm
created a `node_modules` folder that naively nested every dependency
  In
such a case, the logical dependency graph and physical tree of packages on
disk would be roughly identical


With the advent of automatic install-time deduplication of dependencies in
npm v3, the `ls` output was modified to display the logical dependency
graph as a tree structure, since this was more useful to most users


Also, in the years since npm got an `ls` command (in version 0
0
2!),
dependency graphs have gotten much larger as a general rule
  Therefore, in
order to avoid dumping an excessive amount of content to the terminal, `npm
ls` now only shows the _top_ level dependencies, unless `--all` is
provided


A thorough re-examination of the use cases, intention, behavior, and output
of this command, is currently underway
  Expect significant changes to at
least the default human-readable `npm ls` output in npm v8


### Configuration

#### `all`

* Default: false
* Type: Boolean

When running `npm outdated` and `npm ls`, setting `--all` will show all
outdated or installed packages, rather than only those directly depended
upon by the current project




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


Not supported by all npm commands




#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory
 If `--all` is set, then npm will show all dependencies by default

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk
 They are just not
physically installed on disk


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `link`

* Default: false
* Type: Boolean

Used with `npm ls`, limiting output to only those packages that are linked




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock
json`,
ignoring `node_modules`


For `list` this means the output will be based on the tree described by the
`package-lock
json`, rather than the contents of `node_modules`




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes


This value is not exported to the environment for child processes


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces


### Example

Add a new developer to an org:

```bash
$ npm org set my-org @mx-smith
```

Add a new admin to an org (or change a developer to an admin):

```bash
$ npm org set my-org @mx-santos admin
```

Remove a user from an org:

```bash
$ npm org rm my-org mx-santos
```

List all users in an org:

```bash
$ npm org ls my-org
```

List all users in JSON format:

```bash
$ npm org ls my-org --json
```

See what role a user has in an org:

```bash
$ npm org ls my-org @mx-santos
```

### Description

You can use the `npm org` commands to manage and view users of an
organization


### Configuration

#### `registry`

* Default: ""https://registry




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one
parse() before
  saving them to your `package


Not supported by all npm commands




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output
 For
`npm search`, this will be tab-separated table format




### See Also

* [using orgs](/using-npm/orgs)
* [Documentation on npm Orgs](https://docs
npmjs
com/orgs/)

---
title: npm-outdated
section: 1
description: Check for outdated packages
---

### Synopsis

```bash
npm outdated [<package-spec> 

]
```

### Description

This command will check the registry to see if any (or, specific) installed
packages are currently outdated


By default, only the direct dependencies of the root project and direct
dependencies of your configured *workspaces* are shown

Use `--all` to find all outdated meta-dependencies as well


In the output:

* `wanted` is the maximum version of the package that satisfies the semver
  range specified in `package
  you're running `npm outdated --global`, or the package isn't
  included in `package
json`), then `wanted` shows the currently-installed
  version

  Running `npm publish` with no special configuration will publish the
  package with a dist-tag of `latest`
 This may or may not be the maximum
  version of the package, or the most-recently published version of the
  package, depending on how the package's developer manages the latest
  [dist-tag](/commands/npm-dist-tag)

* `location` is where in the physical tree the package is located
json` are always marked `dependencies`

* `homepage` (when using `--long` / `-l`) is the `homepage` value contained
  in the package's packument
* Red means there's a newer version matching your semver requirements, so
  you should update now

* Yellow indicates that there's a newer version _above_ your semver
  requirements (usually new major, or new 0
x minor) so proceed with
  caution
0
15    6
0
5
1    3
5
5
1  node_modules/npm          dependent-package-name
local-dev      0
3   linked   linked  local-dev                 dependent-package-name
once           1
3
2    1
3
5
1"",
  ""once"": ""^1
1""
}
```

A few things to note:

* `glob` requires `^5`, which prevents npm from installing `glob@6`, which
  is outside the semver range

* Git dependencies will always be reinstalled, because of how they're
  specified
  The installed committish might satisfy the dependency
  specifier (if it's something immutable, like a commit SHA), or it might
  not, so `npm outdated` and `npm update` have to fetch Git repos to check
5

* `once` is just plain out of date
 Reinstalling `node_modules` from
  scratch or running `npm update` will bring it up to spec


* In `npm pkg set` it enables parsing set values with JSON
json`


Not supported by all npm commands




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


### See Also

* [package spec](/using-npm/package-spec)
* [npm update](/commands/npm-update)
* [npm dist-tag](/commands/npm-dist-tag)
* [npm registry](/using-npm/registry)
* [npm folders](/configuring-npm/folders)
* [npm workspaces](/using-npm/workspaces)

---
title: npm-owner
section: 1
description: Manage package owners
---

### Synopsis

```bash
npm owner add <user> <package-spec>
npm owner rm <user> <package-spec>
npm owner ls <package-spec>

alias: author
```

### Description

Manage ownership of published packages


* ls: List all the users who have access to modify a package and push new
  versions
  Handy when you need to know who to bug for help

* add: Add a new user as a maintainer of a package

* rm: Remove a user from the package owner list
  This immediately revokes
  their privileges
  Either you can modify a package,
or you can't


If you have two-factor authentication enabled with `auth-and-writes` (see
[`npm-profile`](/commands/npm-profile)) then you'll need to go through a second factor
flow when changing ownership or include an otp on the command line with `--otp`


### Configuration

#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc


This value is not exported to the environment for child processes


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
parse() before
  saving them to your `package
json`


Not supported by all npm commands
""
* Type: String

Directory in which `npm pack` will save tarballs




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes
tgz`, and then write the filenames out to
stdout


If the same package is specified multiple times, then the file will be
overwritten the second time
im/npm-packlist)
* [npm cache](/commands/npm-cache)
* [npm publish](/commands/npm-publish)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-ping
section: 1
description: Ping npm registry
---

### Synopsis

```bash
npm ping
```

Note: This command is unaware of workspaces


### Description

Ping the configured or given npm registry and verify authentication
org/
npm notice PONG 255ms
```
otherwise you will get an error:
```bash
npm notice PING http://foo
com/
npm ERR! code E404
npm ERR! 404 Not Found - GET http://www
npmjs
org/""
* Type: URL

The base URL of the npm registry




### See Also

* [npm doctor](/commands/npm-doctor)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-pkg
section: 1
description: Manages your package
json
---

### Synopsis

```bash
npm pkg set <key>=<value> [<key>=<value> 


]
npm pkg get [<key> [<key> 


]]
npm pkg delete <key> [<key> 


]
npm pkg set [<array>[<index>]



]
npm pkg fix
```

### Description

A command that automates the management of `package

`npm pkg` provide 3 different sub commands that allow you to modify or retrieve
values for given object keys in your `package


The syntax to retrieve and set fields is a dot separated representation of
the nested object properties to be found within your `package
json`, it's the
same notation used in [`npm view`](/commands/npm-view) to retrieve information
from the registry manifest, below you can find more examples on how to use it


Returned values are always in **json** format
json` file


    For example, in order to retrieve the name of the current package, you
    can run:

    ```bash
    npm pkg get name
    ```

    It's also possible to retrieve multiple values at once:

    ```bash
    npm pkg get name version
    ```

    You can view child fields by separating them with a period
email
    ```

    You may also use numeric indices in square braces to specifically select
    an item in an array field
email
    ```

    For complex fields you can also name a property in square brackets
    to specifically select a child field
]
json` based on the `field` value
json` file the same set of rules used during
    `npm install` and other cli commands that touches the `package
json` file
    are used, making sure to respect the existing indentation and possibly
    applying some validation prior to saving values to the file
json` file
json` that points
    to a file `cli
js`:

    ```bash
    npm pkg set bin
mynewcommand=cli
js
    ```

    Setting multiple fields at once is also possible:

    ```bash
    npm pkg set description='Awesome package' engines
name='Foo' contributors[0]
email='foo@bar
name='Foo' contributors[]
json` file, for example in order to set a `""private"": true`
    property:

    ```bash
    npm pkg set private=true --json
    ```

    It also enables saving values as numbers:

    ```bash
    npm pkg set tap
 For example, in order to remove a script named
    build:

    ```bash
    npm pkg delete scripts
build
    ```

* `npm pkg fix`

    Auto corrects common errors in your `package
  npm already
    does this during `publish`, which leads to subtle (mostly harmless)
    differences between the contents of your `package


For example, setting a `funding` value across all configured workspaces
of a project:

```bash
npm pkg set funding=https://example
com --ws
```

When using `npm pkg get` to retrieve info from your configured workspaces, the
returned result will be in a json format in which top level keys are the
names of each workspace, the values of these keys will be the result values
returned from each of the configured workspaces, e
0
0""
  },
  ""b"": {
    ""name"": ""b"",
    ""version"": ""1
0
0""
  }
}
```

### Configuration

#### `force`

* Default: false
* Type: Boolean

Removes various protections against unfortunate side effects, common
mistakes, unnecessary performance degradation, and malicious input


* Allow clobbering non-npm files in global installs

* Allow the `npm version` command to work on an unclean git repository

* Allow deleting the cache folder with `npm cache clean`

* Allow installing packages that have an `engines` declaration requiring a
  different version of `node`, even if `--engine-strict` is enabled

* Allow `npm audit fix` to install modules outside your stated dependency
  range (including SemVer-major changes)

* Allow clobbering existing values in `npm pkg`
* Allow unpublishing of entire packages (not just a single version)


If you don't have a clear idea of what you want to do, it is strongly
recommended that you do not use this option!



#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package
json`




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


### Description

Print the local prefix to standard output
 This is the closest parent directory
to contain a `package


If `-g` is specified, this will be the value of the global prefix


### Example

```bash
npm prefix
/usr/local/projects/foo
```

```bash
npm prefix -g
/usr/local
```

### Configuration

#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



### See Also

* [npm root](/commands/npm-root)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-profile
section: 1
description: Change settings on your registry profile
---

### Synopsis

```bash
npm profile enable-2fa [auth-only|auth-and-writes]
npm profile disable-2fa
npm profile get [<key>]
npm profile set <key> <value>
```

Note: This command is unaware of workspaces


### Description

Change your profile information on the registry
 You can set the following properties this way: email, fullname,
  homepage, freenode, twitter, github

* `npm profile set password`: Change your password
  This is interactive,
  you'll be prompted for your current password and a new password
 Modes are:
  * `auth-only`: Require an OTP when logging in or making changes to your
    account's authentication
  The OTP will be required on both the website
    and the command line

  * `auth-and-writes`: Requires an OTP at all the times `auth-only` does,
    and also requires one when publishing a module, setting the `latest`
    dist-tag, or changing access via `npm access` and `npm owner`


* `npm profile disable-2fa`: Disables two-factor authentication


### Details

Some of these commands may not be available on non npmjs
com registries


### Configuration

#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
parse() before
  saving them to your `package
json`


Not supported by all npm commands




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one


]
```

### Description

This command removes ""extraneous"" packages
  If a package name is provided,
then only packages matching one of the supplied names are removed


Extraneous packages are those present in the `node_modules` folder that are
not listed as any package's dependency list


If the `--omit=dev` flag is specified or the `NODE_ENV` environment
variable is set to `production`, this command will remove the packages
specified in your `devDependencies`


If the `--json` flag is used, then the changes `npm prune` made (or would
have made with `--dry-run`) are printed as a JSON object


In normal operation, extraneous modules are pruned automatically, so you'll
only need this command with the `--production` flag
  However, in the real
world, operation is not always ""normal""

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
 They are just not
physically installed on disk


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc
parse() before
  saving them to your `package
json`




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder


This value is not exported to the environment for child processes


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes




### See Also

* [npm uninstall](/commands/npm-uninstall)
* [npm folders](/configuring-npm/folders)
* [npm ls](/commands/npm-ls)

---
title: npm-publish
section: 1
description: Publish a package
---

### Synopsis

```bash
npm publish <package-spec>
```

### Description

Publishes a package to the registry so that it can be installed by name
json`](/configuring-npm/package-json))



A `package` is interpreted the same way as other commands (like
`npm install`) and can be:

* a) a folder containing a program described by a
  [`package
json`](/configuring-npm/package-json) file
* b) a gzipped tarball containing (a)
* c) a url that resolves to (b)
* d) a `<name>@<version>` that is published on the registry (see
  [`registry`](/using-npm/registry)) with (c)
* e) a `<name>@<tag>` (see [`npm dist-tag`](/commands/npm-dist-tag)) that
  points to (d)
* f) a `<name>` that has a ""latest"" tag satisfying (e)
* g) a `<git remote url>` that resolves to (a)

The publish will fail if the package name and version combination already
exists in the specified registry


Once a package is published with a given name and version, that specific
name and version combination can never be used again, even if it is removed
with [`npm unpublish`](/commands/npm-unpublish)


As of `npm@5`, both a sha1sum and an integrity field with a sha512sum of the
tarball will be submitted to the registry during publication
 Subsequent
installs will use the strongest supported algorithm to verify downloads


### Files included in package

To see what will be included in your package, run `npm pack --dry-run`
  All
files are included by default, with the following exceptions:

- Certain files that are relevant to package installation and distribution
  are always included
  For example, `package
json`, `README


- If there is a ""files"" list in
  [`package
  (If directories are specified, then they
  will be walked recursively and their contents included, subject to the
  same ignore rules
)

- If there is a `
npmignore` file, then ignored files in
  that and all child directories will be excluded from the package
  If
  _both_ files exist, then the `
npmignore` is used
npmignore` files follow the [same pattern
  rules](https://git-scm
com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#_ignoring)
  as `
gitignore` files

- If the file matches certain patterns, then it will _never_ be included,
  unless explicitly added to the `""files""` list in `package
gitignore` file


- Symbolic links are never included in npm packages



See [`developers`](/using-npm/developers) for full details on what's
included in the published package, as well as details on how the package is
built


When used by the `npm diff` command, this is the tag used to fetch the
tarball that will be compared with the local files by default


Unscoped packages can not be set to `restricted`


Note: This defaults to not changing the current access level for existing
packages
 Specifying a value of `restricted` or `public` during publish will
change the access for an existing package the same way that `npm access set
status` would




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


#### `provenance`

* Default: false
* Type: Boolean

When publishing from a supported cloud CI/CD system, the package will be
publicly linked to where it was built and published from


This config can not be used with: `provenance-file`

#### `provenance-file`

* Default: null
* Type: Path

When publishing, the provenance bundle at the given path will be used


This config can not be used with: `provenance`

### See Also

* [package spec](/using-npm/package-spec)
* [npm-packlist package](http://npm
im/npm-packlist)
* [npm registry](/using-npm/registry)
* [npm scope](/using-npm/scope)
* [npm adduser](/commands/npm-adduser)
* [npm owner](/commands/npm-owner)
* [npm deprecate](/commands/npm-deprecate)
* [npm dist-tag](/commands/npm-dist-tag)
* [npm pack](/commands/npm-pack)
* [npm profile](/commands/npm-profile)

---
title: npm-query
section: 1
description: Dependency selector query
---

### Synopsis

```bash
npm query <selector>
```

### Description

The `npm query` command allows for usage of css selectors in order to retrieve
an array of dependency objects


### Piping npm query to other commands

```bash
# find all dependencies with postinstall scripts & uninstall them
npm query "":attr(scripts, [postinstall])"" | jq 'map(
name)|join(""\n"")' -r | xargs -I {} npm uninstall {}

# find all git dependencies & explain who requires them
npm query "":type(git)"" | jq 'map(
name)' | xargs -I {} npm why {}
```

### Extended Use Cases & Queries

```stylus
// all deps
*

// all direct deps
:root > *

// direct production deps
:root > 
prod

// direct development deps
:root > 
dev

// any peer dep of a direct deps
:root > * > 
peer

// any workspace dep

workspace

// all workspaces that depend on another workspace

workspace > 
workspace:has(
2


[name=""lodash""]:semver(^1
2
3:not(:deduped)

// querying deps with a specific version
#lodash@2
1


5""]

// has any deps
:has(*)

// deps with no other deps (ie
 ""leaf"" nodes)
:empty

// manually querying git dependencies
[repository^=github:],
[repository^=git:],
[repository^=https://github

]

// querying for all git dependencies
:type(git)

// get production dependencies that aren't also dev deps

prod:not(
com])
```

### Example Response Output

- an array of dependency objects is returned which can contain multiple copies of the same package which may or may not have been linked or deduped

```json
[
  {
    ""name"": """",
    ""version"": """",
    ""description"": """",
    ""homepage"": """",
    ""bugs"": {},
    ""author"": {},
    ""license"": {},
    ""funding"": {},
    ""files"": [],
    ""main"": """",
    ""browser"": """",
    ""bin"": {},
    ""man"": [],
    ""directories"": {},
    ""repository"": {},
    ""scripts"": {},
    ""config"": {},
    ""dependencies"": {},
    ""devDependencies"": {},
    ""optionalDependencies"": {},
    ""bundledDependencies"": {},
    ""peerDependencies"": {},
    ""peerDependenciesMeta"": {},
    ""engines"": {},
    ""os"": [],
    ""cpu"": [],
    ""workspaces"": {},
    ""keywords"": [],
    



  This is especially common for
ecosystems like that rely on `typescript` where having state split
across two different but identically-named packages causes bugs
prod' --no-expect-results
```

### Package lock only mode

If package-lock-only is enabled, only the information in the package lock (or shrinkwrap) is loaded
  This means that information from the package
json files of your dependencies will not be included in the result set (e
g
 description, homepage, engines)
 See
[folders](/configuring-npm/folders) for more on the differences in behavior

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes


#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock
json`,
ignoring `node_modules`
json` will be updated,
instead of checking `node_modules` and downloading dependencies


For `list` this means the output will be based on the tree described by the
`package-lock
json`, rather than the contents of `node_modules`


This config can not be used with: `expect-results`
## See Also

* [dependency selectors](/using-npm/dependency-selectors)

---
title: npm-rebuild
section: 1
description: Rebuild a package
---

### Synopsis

```bash
npm rebuild [<package-spec>] 

 Execute lifecycle scripts (`preinstall`, `install`, `postinstall`, `prepare`)
2
 Links bins depending on whether bin links are enabled

This command is particularly useful in scenarios including but not limited to:

1
js**, where you need to recompile all your C++ add-ons with the updated binary


If one or more package specs are provided, then only packages with a name and version matching one of the specifiers will be rebuilt


Usually, you should not need to run `npm rebuild` as it is already done for you as part of npm install (unless you suppressed these steps with `--ignore-scripts` or `--no-bin-links`)


If there is a `binding
gyp` file in the root of your package, then npm will use a default install hook:

```
""scripts"": {
    ""install"": ""node-gyp rebuild""
}
```

This default behavior is suppressed if the `package
 It is also suppressed if the package specifies `""gypfile"": false`

### Configuration

#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
cmd` shims on Windows) for package
executables


Set to false to have it not do this


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging
json files




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes


json` in the current folder and use the
`repository` property


Set to `false` to suppress browser behavior and instead print urls to
terminal
npmjs


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project
  It is equivalent to running `npm run-script
restart`


If the current project has a `""restart""` script specified in
`package
json`, then the following scripts will be run:

1
 prerestart
2
 postrestart

If it does _not_ have a `""restart""` script specified, but it does have
`stop` and/or `start` scripts, then the following scripts will be run:

1
 prestop
3
 stop
4
 prestart
7
 start
8
 poststart
9




#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands




### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm start](/commands/npm-start)
* [npm stop](/commands/npm-stop)
* [npm restart](/commands/npm-restart)

---
title: npm-root
section: 1
description: Display npm root
---

### Synopsis

```bash
npm root
```

Note: This command is unaware of workspaces


Useful for using npm in shell scripts that do things with the
`node_modules` folder
  For example:

```bash
#!/bin/bash
global_node_modules=""$(npm root --global)""
echo ""Global packages installed in: ${global_node_modules}""
```

### Configuration

#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior
 When the scripts in the package are
printed out, they're separated into lifecycle (test, start, restart) and
directly-run scripts


For example:

```bash
npm run test -- --grep=""pattern""
```

The arguments will only be passed to the script specified after `npm run`
and not to any `pre` or `post` script


The `env` script is a special built-in command that can be used to list
environment variables that will be available to the script at runtime
 If an
""env"" command is defined in your package, it will take precedence over the
built-in
bin` to the `PATH` provided to scripts
 Any binaries
provided by locally-installed dependencies can be used without the
`node_modules/
bin` prefix
 For example, if there is a `devDependency` on
`tap` in your package, you should write:

```bash
""scripts"": {""test"": ""tap test/*
js""}
```

instead of

```bash
""scripts"": {""test"": ""node_modules/
bin/tap test/*
js""}
```

The actual shell your script is run within is platform dependent
exe`

The actual shell referred to by `/bin/sh` also depends on the system

You can customize the shell with the
[`script-shell` config](/using-npm/config#script-shell)


`npm run` sets the `NODE` environment variable to the `node` executable
with which `npm` is executed


### Workspaces support

You may use the [`workspace`](/using-npm/config#workspace) or
[`workspaces`](/using-npm/config#workspaces) configs in order to run an
arbitrary command from a package's `""scripts""` object in the context of the
specified workspaces
g:

```

json
   +-- b
   |   `-- package
json
   `-- c
       `-- package
json
```

Assuming the workspace configuration is properly set up at the root level
`package
json` file
 e
/packages/*"" ]
}
```

And that each of the configured workspaces has a configured `test` script,
we can run tests in all of them using the
[`workspaces` config](/using-npm/config#workspaces):

```
npm test --workspaces
```

#### Filtering workspaces

It's also possible to run a script in a single workspace using the `workspace`
config along with a name or directory path:

```
npm test --workspace=a
```

The `workspace` config can also be specified multiple times in order to run a
specific script in the context of multiple workspaces
g:

```
npm test -w a -w b
```

This last command will run `test` in both `
/packages/b`
packages


### Configuration

#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


#### `if-present`

* Default: false
* Type: Boolean

If true, npm will not exit with an error code when `run-script` is invoked
for a script that isn't defined in the `scripts` section of `package
json`

This option can be used when it's desirable to optionally run a script when
it's present and fail if the script fails
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging




#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands




### See Also

* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm start](/commands/npm-start)
* [npm restart](/commands/npm-restart)
* [npm stop](/commands/npm-stop)
* [npm config](/commands/npm-config)
* [npm workspaces](/using-npm/workspaces)

---
title: npm-sbom
section: 1
description: Generate a Software Bill of Materials (SBOM)
---

### Synopsis

```bash
npm sbom
```

### Description

The `npm sbom` command generates a Software Bill of Materials (SBOM) listing the
dependencies for the current project
 SBOMs can be generated in either
[SPDX](https://spdx


### Example CycloneDX SBOM

```json
{
  ""$schema"": ""http://cyclonedx
org/schema/bom-1
schema
json"",
  ""bomFormat"": ""CycloneDX"",
  ""specVersion"": ""1
001Z"",
    ""lifecycles"": [
      {
        ""phase"": ""build""
      }
    ],
    ""tools"": [
      {
        ""vendor"": ""npm"",
        ""name"": ""cli"",
        ""version"": ""10
1
0
0"",
      ""type"": ""library"",
      ""name"": ""simple"",
      ""version"": ""1
0
0
17
21"",
      ""type"": ""library"",
      ""name"": ""lodash"",
      ""version"": ""4
17
"",
      ""purl"": ""pkg:npm/lodash@4
21"",
      ""properties"": [
        {
          ""name"": ""cdx:npm:package:path"",
          ""value"": ""node_modules/lodash""
        }
      ],
      ""externalReferences"": [
        {
          ""type"": ""distribution"",
          ""url"": ""https://registry
npmjs
org/lodash/-/lodash-4
17
tgz""
        },
        {
          ""type"": ""vcs"",
          ""url"": ""git+https://github
com/lodash/lodash
com/""
        },
        {
          ""type"": ""issue-tracker"",
          ""url"": ""https://github
com/lodash/lodash/issues""
        }
      ],
      ""hashes"": [
        {
          ""alg"": ""SHA-512"",
          ""content"": ""bf690311ee7b95e713ba568322e3533f2dd1cb880b189e99d4edef13592b81764daec43e2c54c61d5c558dc5cfb35ecb85b65519e74026ff17675b6f8f916f4a""
        }
      ],
      ""licenses"": [
        {
          ""license"": {
            ""id"": ""MIT""
          }
        }
      ]
    }
  ],
  ""dependencies"": [
    {
      ""ref"": ""simple@1
0
0"",
  ""SPDXID"": ""SPDXRef-DOCUMENT"",
  ""name"": ""simple@1
0"",
  ""documentNamespace"": ""http://spdx
0
0-bf81090e-8bbc-459d-bec9-abeb794e096a"",
  ""creationInfo"": {
    ""created"": ""2023-09-01T00:00:00
1
0""
    ]
  },
  ""documentDescribes"": [
    ""SPDXRef-Package-simple-1
0
0""
  ],
  ""packages"": [
    {
      ""name"": ""simple"",
      ""SPDXID"": ""SPDXRef-Package-simple-1
0
0"",
      ""versionInfo"": ""1
0"",
      ""packageFileName"": """",
      ""description"": ""simple react app"",
      ""primaryPackagePurpose"": ""LIBRARY"",
      ""downloadLocation"": ""NOASSERTION"",
      ""filesAnalyzed"": false,
      ""homepage"": ""NOASSERTION"",
      ""licenseDeclared"": ""MIT"",
      ""externalRefs"": [
        {
          ""referenceCategory"": ""PACKAGE-MANAGER"",
          ""referenceType"": ""purl"",
          ""referenceLocator"": ""pkg:npm/simple@1
0""
        }
      ]
    },
    {
      ""name"": ""lodash"",
      ""SPDXID"": ""SPDXRef-Package-lodash-4
17
21"",
      ""versionInfo"": ""4
17
npmjs
org/lodash/-/lodash-4
21
17
21""
        }
      ],
      ""checksums"": [
        {
          ""algorithm"": ""SHA512"",
          ""checksumValue"": ""bf690311ee7b95e713ba568322e3533f2dd1cb880b189e99d4edef13592b81764daec43e2c54c61d5c558dc5cfb35ecb85b65519e74026ff17675b6f8f916f4a""
        }
      ]
    }
  ],
  ""relationships"": [
    {
      ""spdxElementId"": ""SPDXRef-DOCUMENT"",
      ""relatedSpdxElement"": ""SPDXRef-Package-simple-1
0
17
21"",
      ""relationshipType"": ""DEPENDS_ON""
    }
  ]
}
```

### Package lock only mode

If package-lock-only is enabled, only the information in the package
lock (or shrinkwrap) is loaded
 description, homepage, engines)


### Configuration

#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` file


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock
json`,
ignoring `node_modules`


For `update` this means only the `package-lock
json` will be updated,
instead of checking `node_modules` and downloading dependencies




#### `sbom-format`

* Default: null
* Type: ""cyclonedx"" or ""spdx""

SBOM format to use when generating SBOMs
 For CycloneDX, this is the
value for the `type` field




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes

## See Also

* [package spec](/using-npm/package-spec)
* [dependency selectors](/using-npm/dependency-selectors)
* [package
json](/configuring-npm/package-json)
* [workspaces](/using-npm/workspaces)

---
title: npm-search
section: 1
description: Search for packages
---

### Synopsis

```bash
npm search [search terms 

 `npm search`
performs a linear, incremental, lexically-ordered search through package
metadata for all files in the registry
  This can
be disabled with the config item `color`

Additionally, using the `--searchopts` and `--searchexclude` options
paired with more search terms will include and exclude further patterns

The main difference between `--searchopts` and the standard search terms
is that the former does not highlight results in the output and you can
use them more fine-grained filtering
 Additionally, you can add both of
these to your config to change default search filtering behavior


Search also allows targeting of maintainers in search results, by prefixing
their npm username with `=`
 In this case search will
ignore a trailing `/` 
  (Note you must escape or quote many regular
expression characters in most shells




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
json`


Not supported by all npm commands
 If `""always""` then always shows colors
 If
true, then only prints color codes for tty file descriptors
 For
`npm search`, this will be tab-separated table format




#### `description`

* Default: true
* Type: Boolean

Show the description in `npm search`



#### `searchlimit`

* Default: 20
* Type: Number

Number of items to limit search results to
 Will not apply at all to legacy
searches
npmjs




#### `prefer-offline`

* Default: false
* Type: Boolean

If true, staleness checks for cached data will be bypassed, but missing data
will be requested from the server




### See Also

* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm view](/commands/npm-view)
* [npm cache](/commands/npm-cache)
* https://npm


### Description

This command repurposes `package-lock
json` into a publishable
`npm-shrinkwrap
json` or simply creates a new one
 The file created and
updated by this command will then take precedence over any other existing
or future `package-lock
json` files
 For a detailed explanation of the
design and purpose of package locks in npm, see
[package-lock-json](/configuring-npm/package-lock-json)
json](/configuring-npm/package-json)
* [package-lock
json](/configuring-npm/npm-shrinkwrap-json)
* [npm ls](/commands/npm-ls)

---
title: npm-star
section: 1
description: Mark your favorite packages
---

### Synopsis

```bash
npm star [<package-spec>




### Description

""Starring"" a package means that you have some interest in it


It's a boolean thing


### More

There's also these extra commands to help you manage your favorite packages:

#### Unstar

You can also ""unstar"" a package using [`npm unstar`](/commands/npm-unstar)

""Unstarring"" is the same thing, but in reverse


#### Listing stars

You can see all your starred packages using [`npm stars`](/commands/npm-stars)

### Configuration

#### `registry`

* Default: ""https://registry
npmjs




#### `unicode`

* Default: false on windows, true on mac/unix systems with a unicode locale,
  as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables

* Type: Boolean

When set to true, npm uses unicode characters in the tree output
 It's needed
when publishing or changing package permissions with `npm access`




### See Also

* [package spec](/using-npm/package-spec)
* [npm unstar](/commands/npm-unstar)
* [npm stars](/commands/npm-stars)
* [npm view](/commands/npm-view)
* [npm whoami](/commands/npm-whoami)
* [npm adduser](/commands/npm-adduser)

---
title: npm-stars
section: 1
description: View packages marked as favorites
---

### Synopsis

```bash
npm stars [<user>]
```

Note: This command is unaware of workspaces


You may also want to see your friend's favorite packages, in this case
you will most certainly enjoy this command


### Configuration

#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry




### See Also

* [npm star](/commands/npm-star)
* [npm unstar](/commands/npm-unstar)
* [npm view](/commands/npm-view)
* [npm whoami](/commands/npm-whoami)
* [npm adduser](/commands/npm-adduser)

---
title: npm-start
section: 1
description: Start a package
---

### Synopsis

```bash
npm start [-- <args>]
```

### Description

This runs a predefined command specified in the `""start""` property of
a package's `""scripts""` object


If the `""scripts""` object does not define a  `""start""` property, npm
will run `node server
0`](https://blog
npmjs
org/post/98131109725/npm-2-0-0), you can
use custom arguments when executing scripts


### Example

```json
{
  ""scripts"": {
    ""start"": ""node foo
js""
  }
}
```

```bash
npm start

> npm@x
js

(foo
json files
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands


Unlike with [npm start](/commands/npm-start), there is no default script
that will run if the `""stop""` property is not defined
js""
  }
}
```

```bash
npm stop

> npm@x
x
x stop
> node bar
js

(bar
js output would be here)

```

### Configuration

#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts


### Description

Used to manage teams in organizations, and change team memberships
 Does not
handle permissions for packages


Teams must always be fully qualified with the organization/scope they belong to
when operating on them, separated by a colon (`:`)
 That is, if you have a
`newteam` team in an `org` organization, you must always refer to that team
as `@org:newteam` in these commands


If you have two-factor authentication enabled in `auth-and-writes` mode, then
you can provide a code from your authenticator with `[--otp <otpcode>]`

If you don't include this then you will be taken through a second factor flow based
on your `authtype`


* create / destroy:
  Create a new team, or destroy an existing one
](https://docs
npmjs
com/about-developers-team)

  Here's how to create a new team `newteam` under the `org` org:

  ```bash
  npm team create @org:newteam
  ```

  You should see a confirming message such as: `+@org:newteam` once the new
  team has been created


* add:
  Add a user to an existing team
 If performed on a team, it will instead return a list
  of all users belonging to that particular team


  Here's an example of how to list all teams from an org named `org`:

  ```bash
  npm team ls @org
  ```

  Example listing all members of a team named `newteam`:

  ```bash
  npm team ls @org:newteam
  ```

### Details

`npm team` always operates directly on the current registry, configurable from
the command line using `--registry=<registry url>`


You must be a *team admin* to create teams and manage team membership, under
the given organization
 Listing teams and team memberships may be done by
any member of the organization


Organization creation and management of team admins and *organization* members
is done through the website, not the npm CLI


To use teams to manage permissions on packages belonging to your organization,
use the `npm access` command to grant or revoke the appropriate permissions


### Configuration

#### `registry`

* Default: ""https://registry
npmjs
org/""
* Type: URL

The base URL of the npm registry
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output
 For
`npm search`, this will be tab-separated table format




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
parse() before
  saving them to your `package
json`




### See Also

* [npm access](/commands/npm-access)
* [npm config](/commands/npm-config)
* [npm registry](/using-npm/registry)

---
title: npm-test
section: 1
description: Test a package
---

### Synopsis

```bash
npm test [-- <args>]

aliases: tst, t
```

### Description

This runs a predefined command specified in the `""test""` property of
a package's `""scripts""` object


### Example

```json
{
  ""scripts"": {
    ""test"": ""node test
x
x test
> node test
js

(test
js output would be here)
```

### Configuration

#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm start](/commands/npm-start)
* [npm restart](/commands/npm-restart)
* [npm stop](/commands/npm-stop)

---
title: npm-token
section: 1
description: Manage your authentication tokens
---

### Synopsis

```bash
npm token list
npm token revoke <id|token>
npm token create [--read-only] [--cidr=list]
```

Note: This command is unaware of workspaces


### Description

This lets you list, create and revoke authentication tokens


* `npm token list`:
  Shows a table of all active authentication tokens
 You can request
  this as JSON with `--json` or tab-separated values with `--parseable`


```bash
+--------+---------+------------+----------+----------------+
| id     | token   | created    | read-only | CIDR whitelist |
+--------+---------+------------+----------+----------------+
| 7f3134 | 1fa9ba… | 2017-10-02 | yes      |                |
+--------+---------+------------+----------+----------------+
| c03241 | af7aef… | 2017-10-02 | no       | 192
168
0
1/24 |
+--------+---------+------------+----------+----------------+
| e0cf92 | 3a436a… | 2017-10-02 | no       |                |
+--------+---------+------------+----------+----------------+
| 63eb9d | 74ef35… | 2017-09-28 | no       |                |
+--------+---------+------------+----------+----------------+
| 2daaa8 | cbad5f… | 2017-09-26 | no       |                |
+--------+---------+------------+----------+----------------+
| 68c2fe | 127e51… | 2017-09-23 | no       |                |
+--------+---------+------------+----------+----------------+
| 6334e1 | 1dadd1… | 2017-09-23 | no       |                |
+--------+---------+------------+----------+----------------+
```

* `npm token create [--read-only] [--cidr=<cidr-ranges>]`:
  Create a new authentication token
org/wiki/Classless_Inter-Domain_Routing)
  ranges with which to limit use of this token
 This will prompt you for
  your password, and, if you have two-factor authentication enabled, an
  otp


  Currently, the cli can not generate automation tokens
com/creating-and-viewing-access-tokens)
  for more information on generating automation tokens
838Z             |
+----------------+--------------------------------------+
```

* `npm token revoke <token|id>`:
  Immediately removes an authentication token from the registry
  This can accept both complete
  tokens (such as those you get back from `npm token create`, and those
  found in your `
npmjs




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one




### See Also

* [npm adduser](/commands/npm-adduser)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm owner](/commands/npm-owner)
* [npm whoami](/commands/npm-whoami)
* [npm profile](/commands/npm-profile)

---
title: npm-uninstall
section: 1
description: Remove a package
---

### Synopsis

```bash
npm uninstall [<@scope>/]<pkg>

json`, npm
will update those files as well


`--no-save` will tell npm not to remove the package from your
`package
json`, or `package-lock
json` files


`--save` or `-S` will tell npm to remove the package from your
`package
json`, `npm-shrinkwrap

`--no-save` is ignored in this case


Scope is optional and follows the usual rules for [`scope`](/using-npm/scope)


### Examples

```bash
npm uninstall sax
```

`sax` will no longer be in your `package
json` files


```bash
npm uninstall lodash --no-save
```

`lodash` will not be removed from your `package
json` files


### Configuration

#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package
json`


Will also prevent writing to `package-lock
json` if set to `false`




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces




### See Also

* [npm prune](/commands/npm-prune)
* [npm install](/commands/npm-install)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-unpublish
section: 1
description: Remove a package from the registry
---

### Synopsis

```bash
npm unpublish [<package-spec>]
```

To learn more about how the npm registry treats unpublish, see our
[unpublish policies](https://docs
npmjs
com/policies/unpublish)


### Description

This removes a package version from the registry, deleting its entry and
removing the tarball
 In order to publish the package again,
you must use a new version number
 If you unpublish the entire package,
you may not publish any new versions of that package until 24 hours have
passed
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`

* Allow the `npm version` command to work on an unclean git repository

* Allow `npm audit fix` to install modules outside your stated dependency
  range (including SemVer-major changes)

* Allow clobbering existing values in `npm pkg`
* Allow unpublishing of entire packages (not just a single version)


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


### See Also

* [package spec](/using-npm/package-spec)
* [npm deprecate](/commands/npm-deprecate)
* [npm publish](/commands/npm-publish)
* [npm registry](/using-npm/registry)
* [npm adduser](/commands/npm-adduser)
* [npm owner](/commands/npm-owner)
* [npm login](/commands/npm-adduser)

---
title: npm-unstar
section: 1
description: Remove an item from your favorite packages
---

### Synopsis

```bash
npm unstar [<package-spec>



### More

There's also these extra commands to help you manage your favorite packages:

#### Star

You can ""star"" a package using [`npm star`](/commands/npm-star)

#### Listing stars

You can see all your starred packages using [`npm stars`](/commands/npm-stars)

### Configuration

#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry

* Type: Boolean

When set to true, npm uses unicode characters in the tree output
 When
false, it uses ascii characters instead of unicode glyphs




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one




### See Also

* [npm star](/commands/npm-star)
* [npm stars](/commands/npm-stars)
* [npm view](/commands/npm-view)
* [npm whoami](/commands/npm-whoami)
* [npm adduser](/commands/npm-adduser)


---
title: npm-update
section: 1
description: Update packages
---

### Synopsis

```bash
npm update [<pkg>


]

aliases: up, upgrade, udpate
```

### Description

This command will update all the packages listed to the latest version
(specified by the [`tag` config](/using-npm/config#tag)), respecting the semver
constraints of both your package and its dependencies (if they also require the
same package)


It will also install missing packages


If no package name is specified, all packages in the specified location (global
or local) will be updated


Note that by default `npm update` will not update the semver values of direct
dependencies in your project `package
json`
 If you want to also update
values in `package

2"" },
  ""versions"": [
    ""1
2"",
    ""1
2
1"",
    ""1
2
1
2"",
    ""1
0
0"",
    ""0
4
0""
  ]
}
```

#### Caret Dependencies

If `app`'s `package
json` contains:

```json
""dependencies"": {
  ""dep1"": ""^1
1
1""
}
```

Then `npm update` will install `dep1@1
2`, because `1
2
2
2` satisfies `^1
1`


#### Tilde Dependencies

However, if `app`'s `package
json` contains:

```json
""dependencies"": {
  ""dep1"": ""~1
1
1
2`
2
1
1
1 <1
0`
  So the highest-sorting version that satisfies
`~1
1
1` is used, which is `1
1
2`


#### Caret Dependencies below 1
0

Suppose `app` has a caret dependency on a version below `1
0
0`, for example:

```json
""dependencies"": {
  ""dep1"": ""^0
2
2


If the dependence were on `^0
0`:

```json
""dependencies"": {
  ""dep1"": ""^0
4
0""
}
```

Then `npm update` will install `dep1@0
4
0` (`>= 0
4
0 <0
5
0`)


#### Subdependencies

Suppose your app now also has a dependency on `dep2`

```json
{
  ""name"": ""my-app"",
  ""dependencies"": {
      ""dep1"": ""^1
0
2` because that is the highest
version that `dep2` allows
  npm will prioritize having a single version
of `dep1` in your tree rather than two when that single version can
satisfy the semver requirements of multiple dependencies in your tree

In this case if you really did need your package to use a newer version
you would need to use `npm install`



#### Updating Globally-Installed Packages

`npm update -g` will apply the `update` action to each globally installed
package that is `outdated` -- that is, has a version that is different from
`wanted`


Note: Globally installed packages are treated as if they are installed with a
caret semver range specified
 So if you require to update to `latest` you may
need to run `npm install -g [<pkg>

]`

NOTE: If a package has been upgraded to a version newer than `latest`, it will
be _downgraded_
json` file as dependencies


When used with the `npm rm` command, removes the dependency from
`package


Will also prevent writing to `package-lock
json` if set to `false`




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 linked: (experimental) install in node_modules/




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
 Sets `--install-strategy=shallow`


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json` files when installing
 This
will also prevent _writing_ `package-lock
json` if `save` is true




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
cmd` shims on Windows) for package
executables


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes
 This option has no effect on
workspaces




#### `git-tag-version`

* Default: true
* Type: Boolean

Tag the commit when using the `npm version` command
 Setting this to false
results in no commit being made at all




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
json`
 Like the `rc` in `1
0-rc




#### `sign-git-tag`

* Default: false
* Type: Boolean

If set to true, then the `npm version` command will tag the version using
`-s` to add a signature


Note that git requires you to have set up GPG keys in your git configs for
this to work properly


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `workspaces-update`

* Default: true
* Type: Boolean

If set to true, the npm cli will run an update after operations that may
possibly change the workspaces installed to the `node_modules` folder




#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes
json`, and, if present,
`npm-shrinkwrap


The `newversion` argument should be a valid semver string, a valid second
argument to [semver
inc](https://github
  `from-git` will try to read
the latest git tag, and use that as the new npm version


If run in a git repo, it will also create a version commit and tag
  This
behavior is controlled by `git-tag-version` (see below), and can be
disabled on the command line by running `npm --no-git-tag-version version`
 Note that you must have a default
GPG key set up in your git config for this to work properly
 For example:

```bash
$ npm config set sign-git-tag true
$ npm version patch

You need a passphrase to unlock the secret key for
user: ""isaacs (http://blog
izs
me/) <i@izs
me>""
2048-bit RSA key, ID 6C481CF6, created 2010-08-31

Enter passphrase:
```

If `preversion`, `version`, or `postversion` are in the `scripts` property
of the package
json, they will be executed as part of running `npm
version`


The exact order of execution is as follows:

1

2
 Run the `preversion` script
 These scripts have access to the old
   `version` in package
  A typical use would be running your full
   test suite before deploying
 Bump `version` in `package
json` as requested (`patch`, `minor`,
   `major`, etc)

4
 Run the `version` script
  Again, scripts should explicitly add
   generated files to the commit using `git add`
 Commit and tag

6
 Run the `postversion` script
 Use it to clean up the file system or
   automatically push the commit and/or tag

After the commit, it pushes the new commit and tag up to the server, and
deletes the `build/temp` directory
subfield]




As an example, to view information about the `connect` package from the registry, you would run:

```bash
npm view connect
```

The default version is `""latest""` if unspecified


Field names can be specified after the package descriptor

For example, to show the dependencies of the `ronn` package at version
`0
5`, you could do the following:

```bash
npm view ronn@0
3
5 dependencies
```

By default, `npm view` shows data about the current project context (by looking for a `package

To show field data for the current project use a file path (i
 `
`):

```bash
npm view 

To view the git repository URL for the latest version of `npm`, you would run the following command:

```bash
npm view npm repository
url
```

This makes it easy to view information about a dependency with a bit of
shell scripting
name contributors
email
```

""Person"" fields are shown as a string if they would be shown as an
object
json`](/configuring-npm/package-json) for more on this
4' dependencies


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package
json`


Not supported by all npm commands




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


### Output

If only a single string field for a single version is output, then it
will not be colorized or quoted, to enable piping the output to
another command
 If the field is an object, it will be output as a JavaScript object literal


If the `--json` flag is given, the outputted fields will be JSON


### Description

Display the npm username of the currently logged-in user


If logged into a registry that provides token-based authentication, then
connect to the `/-/whoami` registry endpoint to find the username
associated with the token, and print to standard output


### Configuration

#### `registry`

* Default: ""https://registry


### Version

10
5
2

### Description

npm is the package manager for the Node JavaScript platform
  Most
commonly, you use it to publish, discover, install, and develop node
programs


Run `npm help` to get a list of available commands


### Important

npm comes preconfigured to use npm's public registry at
https://registry
org by default
 Use of the npm public registry is
subject to terms of use available at
https://docs
npmjs
 Use of someone else's registry is governed by
their terms of use


### Introduction

You probably got npm because you want to install stuff
  It can do a lot of stuff


Use the `npm search` command to show everything that's available in the
public registry
com/git-guides/install-git)
command and will generate an error if it is not installed
com/nodejs/node-gyp) for that task
com/nodejs/node-gyp)
needs Python, make and a buildchain like GCC
 On Windows,
Python and Microsoft Visual Studio C++ are needed
 For more information
visit [the node-gyp repository](https://github
com/nodejs/node-gyp) and
the [node-gyp Wiki](https://github


### Directories

See [`folders`](/configuring-npm/folders) to learn about where npm puts
stuff
  Packages install to
  `
/node_modules`, and bins to `

* global mode:
  npm installs packages into the install prefix at
  `$npm_config_prefix/lib/node_modules` and bins to
  `$npm_config_prefix/bin`


Local mode is the default
  Use `-g` or `--global` on any command to
run in global mode instead
json`](/configuring-npm/package-json)
  Use [`npm
  link`](/commands/npm-link) to do this

* install:
  It's a good idea to install things if you don't need the symbolic
  link

* publish:
  Use the [`npm publish`](/commands/npm-publish) command to upload your
  code to the registry


* Command line switches:
  Set a config with `--key val`

* Environment Variables:
  Set any config by prefixing the name in an environment variable with
  `npm_config_`
  For example, `export npm_config_key=val`

* User Configs:
  The file at `$HOME/
/etc/npmrc` (relative to the global prefix will be
  parsed if it is found
  See [`npm prefix`](/commands/npm-prefix) for
  more info on the global prefix
  If the `globalconfig` option is set
  in the cli, env, or user config, then that file is parsed instead
  These must not be changed


See [`config`](/using-npm/config) for much much more information


### Contributions

Patches welcome!

If you would like to help, but don't know what to work on, read the
[contributing
guidelines](https://github


### Bugs

When you find issues, please report them:
<https://github
com/npm/cli/issues>

Please be sure to follow the template and bug reporting guidelines


### Feature Requests

Discuss new feature ideas on our discussion forum:

* <https://github
com/npm/rfcs>

### See Also

* [npm help](/commands/npm-help)
* [package

]
npx --package=<pkg>[@<version>] -- <cmd> [args



]'
npx --package=foo -c '<cmd> [args
]'
```

### Description

This command allows you to run an arbitrary command from an npm package
(either one installed locally, or fetched remotely), in a similar context
as running it via `npm run`


Whatever packages are specified by the `--package` option will be
provided in the `PATH` of the executed command, along with any locally
installed package executables
  The `--package` option may be
specified multiple times, to execute the supplied command in an environment
where all specified packages are available


If any requested packages are not present in the local project
dependencies, then they are installed to a folder in the npm cache, which
is added to the `PATH` environment variable in the executed process
  A
prompt is printed (which can be suppressed by providing either `--yes` or
`--no`)


Package names provided without a specifier will be matched with whatever
version exists in the local project
  Package names with a specifier will
only be considered a match if they have the exact same name and version as
the local dependency


If no `-c` or `--call` option is provided, then the positional arguments
are used to generate the command string
json`,
  or if all entries are aliases of the same command, then that command
  will be used

- If the package has multiple `bin` entries, and one of them matches the
  unscoped portion of the `name` field, then that command will be used

- If this does not result in exactly one option (either because there are
  no bin entries, or none of them match the `name` of the package), then
  `npm exec` exits with an error
  When run via `npm exec`, a double-hyphen `--`
flag can be used to suppress npm's parsing of switches and options that
should be sent to the executed command


For example:

```
$ npx foo@latest bar --package=@npmcli/foo
```

In this case, npm will resolve the `foo` package name, and run the
following command:

```
$ foo bar --package=@npmcli/foo
```

Since the `--package` option comes _after_ the positional arguments, it is
treated as an argument to the executed command


In contrast, due to npm's argument parsing logic, running this command is
different:

```
$ npm exec foo@latest bar --package=@npmcli/foo
```

In this case, npm will parse the `--package` option first, resolving the
`@npmcli/foo` package
  Then, it will execute the following command in that
context:

```
$ foo@latest bar
```

The double-hyphen character is recommended to explicitly tell npm to stop
parsing command line options and switches
  The following command would
thus be equivalent to the `npx` command above:

```
$ npm exec -- foo@latest bar --package=@npmcli/foo
```

### Examples

Run the version of `tap` in the local dependencies, with the provided
arguments:

```
$ npm exec -- tap --bail test/foo
0
  `npx` uses the `npm exec`
command instead of a separate argument parser and install process, with
some affordances to maintain backwards compatibility with the arguments it
accepted in previous versions

- To prevent security and user-experience problems from mistyping package
  names, `npx` prompts before installing anything
  Suppress this
  prompt with the `-y` or `--yes` option

- The `-p` argument is a shorthand for `--parseable` in npm, but shorthand
  for `--package` in npx
  This is maintained, but only for the `npx`
  executable

- The `--ignore-existing` option is removed
  Locally installed bins are
  always present in the executed process `PATH`
  `npx` will always use the `npm` it ships
  with

- The `--node-arg` and `-n` options have been removed
 Use [`NODE_OPTIONS`](https://nodejs
org/api/cli
html#node_optionsoptions) instead: e
g
,
 `NODE_OPTIONS=""--trace-warnings --trace-exit"" npx foo --random=true`
- The `--always-spawn` option is redundant, and thus removed

- The `--shell` option is replaced with `--script-shell`, but maintained
  in the `npx` executable for backwards compatibility


### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm start](/commands/npm-start)
* [npm restart](/commands/npm-restart)
* [npm stop](/commands/npm-stop)
* [npm config](/commands/npm-config)
* [npm exec](/commands/npm-exec)


---
title: folders
section: 5
description: Folder Structures Used by npm
---

### Description

npm puts various things on your computer


#### tl;dr

* Local install (default): puts stuff in `
/node_modules` of the current
  package root

* Install it **locally** if you're going to `require()` it

* If you need both, then install it in both places, or use `npm link`


#### prefix Configuration

The [`prefix` config](/using-npm/config#prefix) defaults to the location where
node is installed
 On Windows, it's
`%AppData%\npm`


When the `global` flag is set, npm installs things into this prefix

When it is not set, it uses the root of the current package, or the
current working directory if not in a package already


#### Node Modules

Packages are dropped into the `node_modules` folder under the `prefix`

Global installs on Windows go to `{prefix}/node_modules` (that is, no
`lib` folder
)

Scoped packages are installed the same way, except they are grouped together
in a sub-folder of the relevant `node_modules` folder with the name of that
scope prefix by the @ symbol, e


#### Executables

When in global mode, executables are linked into `{prefix}/bin` on Unix,
or directly into `{prefix}` on Windows


When in local mode, executables are linked into
`
)

#### Man Pages

When in global mode, man pages are linked into `{prefix}/share/man`


#### Cache

See [`npm cache`](/commands/npm-cache)
  Cache files are stored in `~/
npm` on Posix, or
`%LocalAppData%/npm-cache` on Windows


This is controlled by the [`cache` config](/using-npm/config#cache) param


#### Temp Files

Temporary files are stored by default in the folder specified by the
[`tmp` config](/using-npm/config#tmp), which defaults to the TMPDIR, TMP, or
TEMP environment variables, or `/tmp` on Unix and `c:\windows\temp` on Windows


Temp files are given a unique folder under this root for each run of the
program, and are deleted upon successful exit
2
3` will install
to the sensible root of your package, even if you happen to have `cd`ed
into some other folder


Starting at the $PWD, npm will walk up the folder tree checking for a
folder that contains either a `package
json` file, or a `node_modules`
folder
)

If no package root is found, then the current folder is used
3`, then the package is loaded into
the cache, and then unpacked into `
  Then, any of
foo's dependencies are similarly unpacked into
`
/node_modules/foo/node_modules/


`


Any bin files are symlinked to `


#### Global Installation

If the [`global` config](/using-npm/config#global) is set to true, then npm will
install packages ""globally""


  It
is still possible to have `a/node_modules/b/node_modules/a` if the two
""a"" packages are different versions
  However, without repeating the
exact same package multiple times, an infinite regress will always be
prevented


Another optimization can be made by installing dependencies at the
highest level possible, below the localized ""target"" folder (hoisting)

Since version 3, npm hoists dependencies by default


#### Example

Consider this dependency graph:

```bash
foo
+-- blerg@1
2
5
+-- bar@1
2
x (latest=1
3
x
|   |       `-- bar@1
2
3 (cycle)
|   `-- asdf@*
`-- baz@1
2
3
    `-- quux@3
x
        `-- bar
```

In this case, we might expect a folder structure like this
(with all dependencies hoisted to the highest level possible):

```bash
foo
+-- node_modules
    +-- blerg (1
2
5) <---[A]
    +-- bar (1
3
2
3) <---[D]
    +-- quux (3
0) <---[E]
```

Since foo depends directly on `bar@1
2
3`, those are
installed in foo's `node_modules` folder
5
  So, that gets installed at [A]
  Since the
parent installation of blerg satisfies bar's dependency on `blerg@1


Bar [B] also has dependencies on baz and asdf
x`, it cannot
re-use the `baz@1
 In order to minimize duplication, npm hoists
dependencies to the top level by default, so asdf is installed under [A]


Underneath bar, the `baz -> quux -> bar` dependency creates a cycle


For a graphical breakdown of what is installed where, use `npm ls`
  If any of
the items there are not in the `bundleDependencies` array, then they will
not be included in the package tarball


This allows a package maintainer to install all of their dependencies
(and dev dependencies) locally, but only re-publish those items that
cannot be found elsewhere


### See also

* [package
 **We strongly recommend using a Node
version manager to install Node
js and npm
** We do not recommend using a
Node installer, since the Node installation process installs npm in a
directory with local permissions and can cause permissions errors when you
run npm packages globally


### Overview

- [Checking your version of npm and
  Node
js and
  npm](#using-a-node-installer-to-install-nodejs-and-npm)

### Checking your version of npm and Node
js

To see if you already have Node
js and npm installed and check the
installed version, run the following commands:

```
node -v
npm -v
```

### Using a Node version manager to install Node
js and npm

If you are unable to use a Node version manager, you can use a Node
installer to install both Node
org/en/download/)
* [NodeSource installer](https://github


#### OS X or Windows Node installers

If you're using OS X or Windows, use one of the installers from the
[Node
js download page](https://nodejs
org/en/download/)


#### Linux or other operating systems Node installers

If you're using Linux or another operating system, use one of the following
installers:

- [NodeSource installer](https://github
js download
  page](https://nodejs
org/en/download/package-manager/) to
install npm for Linux in the way many Linux developers prefer


#### Less-common operating systems

For more information on installing Node


[pkg-mgr]: https://nodejs
json`,
`npm-shrinkwrap
json` may be included when publishing a package


The recommended use-case for `npm-shrinkwrap
json` is applications deployed
through the publishing process on the registry: for example, daemons and
command-line tools intended as global installs or `devDependencies`
json` are present in a
package root, `npm-shrinkwrap
json` will be preferred over the
`package-lock
json` file
json` file format,
refer to the manual page for
[package-lock


### See also

* [npm shrinkwrap](/commands/npm-shrinkwrap)
* [package-lock


For a list of available configuration options, see
[config](/using-npm/config)
npmrc`)
* per-user config file (`~/

Environment variables can be replaced using `${VARIABLE_NAME}`
 For
example:

```bash
prefix = ${HOME}/
npm-packages
```

Each of these files is loaded, and config options are resolved in priority
order
  For example, a setting in the userconfig file would override the
setting in the globalconfig file


Array values are specified by adding ""[]"" after the key name
npmrc` files are parsed by
[npm/ini](https://github
example
org
```

#### Per-project config file

When working locally in a project, a `
npmrc` file in the root of the
project (ie, a sibling of `node_modules` and `package
json`) will set
config values specific to this project
  It has no effect when your module is published
  For example, you
can't publish a module that forces itself to install globally, or in a
different location


#### Per-user config file

`$HOME/
npmrc` (or the `userconfig` param, if set in the environment or on
the command line)

#### Global config file

`$PREFIX/etc/npmrc` (or the `globalconfig` param, if set above): This file
is an ini-file formatted list of `key = value` parameters


#### Built-in config file

`path/to/npm/itself/npmrc`

This is an unchangeable ""builtin"" configuration file that npm keeps
consistent across updates
  Set fields in here using the `
/configure`
script that comes with npm
  This is primarily for distribution maintainers
to override default configs in a standard and consistent manner


### Auth related configuration

The settings `_auth`, `_authToken`, `username` and `_password` must all be
scoped to a specific registry
 This ensures that `npm` will never send
credentials to the wrong host


The full list is:
 - `_auth` (base64 authentication string)
 - `_authToken` (authentication token)
 - `username`
 - `_password`
 - `email`
 - `certfile` (path to certificate file)
 - `keyfile` (path to key file)

In order to scope these values, they must be prefixed by a URI fragment

If the credential is meant for any request to a registry on a single host,
the scope may look like `//registry
npmjs
org/unique/path:`


```
; bad config
_authToken=MYTOKEN

; good config
@myorg:registry=https://somewhere-else
com/myorg
@another:registry=https://somewhere-else
org/:_authToken=MYTOKEN
; would apply to both @myorg and @another
; //somewhere-else
com/:_authToken=MYTOKEN
; would apply only to @myorg
//somewhere-else
com/myorg/:_authToken=MYTOKEN1
; would apply only to @another
//somewhere-else
json](/configuring-npm/package-json)
* [npm](/commands/npm)

---
title: package
json
section: 5
description: Specifics of npm's package
json handling
---

### Description

This document is all you need to know about what's required in your
package


A lot of the behavior described in this document is affected by the config
settings described in [`config`](/using-npm/config)
 The
name and version together form an identifier that is assumed to be
completely unique
 This includes the
  scope for scoped packages
 This
  is not permitted without a scope

* New packages must not have uppercase letters in the name


Some tips:

* Don't use the same name as a core Node module

* Don't put ""js"" or ""node"" in the name
json file, and you can specify the engine using
  the ""[engines](#engines)"" field
  (See below
)
* The name will probably be passed as an argument to require(), so it
  should be something short, but also reasonably descriptive
com/>

A name can be optionally prefixed by a scope, e
g
 `@myorg/mypackage`
 See
[`scope`](/using-npm/scope) for more detail


### version

If you plan to publish your package, the *most* important things in your
package
json are the name and version fields as they will be required
  Changes to the package should come along with changes
to the version
 If you don't plan to publish your package, the name and
version fields are optional


Version must be parseable by
[node-semver](https://github
)

### description

Put a description in it
  This helps people discover your
package, as it's listed in `npm search`


### keywords

Put keywords in it
  It's an array of strings
  This helps people discover
your package as it's listed in `npm search`


### homepage

The URL to the project homepage
com/owner/project/issues"",
    ""email"": ""project@hostname
com""
  }
}
```

You can specify either one or both values


### license

You should specify a license for your package so that people know how they
are permitted to use it, and any restrictions you're placing on it


If you're using a common license such as BSD-2-Clause or MIT, add a current
SPDX license identifier for the license you're using, like this:

```json
{
  ""license"" : ""BSD-3-Clause""
}
```

You can check [the full list of SPDX license
IDs](https://spdx
org/licenses/)
  Ideally you should pick one that is
[OSI](https://opensource
org/licenses/) approved


If your package is licensed under multiple common licenses, use an [SPDX
license expression syntax version 2
0
string](https://spdx
dev/specifications/), like this:

```json
{
  ""license"" : ""(ISC OR GPL-3
0)""
}
```
If you are using a license that hasn't been assigned an SPDX identifier, or if
you are using a custom license, use a string value like this one:

```json
{
  ""license"" : ""SEE LICENSE IN <filename>""
}
```
Then include a file named `<filename>` at the top level of the package


Some old packages used license objects or a ""licenses"" property containing
an array of license objects:

```json
// Not valid metadata
{
  ""license"" : {
    ""type"" : ""ISC"",
    ""url"" : ""https://opensource
org/licenses/ISC""
  }
}

// Not valid metadata
{
  ""licenses"" : [
    {
      ""type"": ""MIT"",
      ""url"": ""https://www
opensource
org/licenses/mit-license
php""
    },
    {
      ""type"": ""Apache-2
0"",
      ""url"": ""https://opensource
org/licenses/apache2
php""
    }
  ]
}
```

Those styles are now deprecated
 Instead, use SPDX expressions, like this:

```json
{
  ""license"": ""ISC""
}
```

```json
{
  ""license"": ""(MIT OR Apache-2
0)""
}
```

Finally, if you do not wish to grant others the right to use a private or
unpublished package under any terms:

```json
{
  ""license"": ""UNLICENSED""
}
```

Consider also setting `""private"": true` to prevent accidental publication


### people fields: author, contributors

The ""author"" is one person
  ""contributors"" is an array of people
  A
""person"" is an object with a ""name"" field and optionally ""url"" and ""email"",
like this:

```json
{
  ""name"" : ""Barney Rubble"",
  ""email"" : ""b@rubble
com"",
  ""url"" : ""http://barnyrubble
tumblr
tumblr


npm also sets a top-level ""maintainers"" field with your npm user info


### funding

You can specify an object containing a URL that provides up-to-date
information about ways to help fund development of your package, or a
string URL, or an array of these:

```json
{
  ""funding"": {
    ""type"" : ""individual"",
    ""url"" : ""http://example
com/donate""
  },

  ""funding"": {
    ""type"" : ""patreon"",
    ""url"" : ""https://www
patreon
com/my-account""
  },

  ""funding"": ""http://example
com/donate"",

  ""funding"": [
    {
      ""type"" : ""individual"",
      ""url"" : ""http://example
com/donateAlso"",
    {
      ""type"" : ""patreon"",
      ""url"" : ""https://www
patreon
com/my-account""
    }
  ]
}
```

Users can use the `npm fund` subcommand to list the `funding` URLs of all
dependencies of their project, direct and indirect
 A shortcut to visit
each funding url is also available when providing the project name such as:
`npm fund <projectname>` (when there are multiple URLs, the first one will
be visited)

### files

The optional `files` field is an array of file patterns that describes the
entries to be included when your package is installed as a dependency
 Omitting the field
will make it default to `[""*""]`, which means it will include all files


You can also provide a `
 At the root of
your package it will not override the ""files"" field, but in subdirectories
it will
 The `
npmignore` file works just like a `
gitignore`
 If there is
a `
npmignore` is missing, `
gitignore`'s contents
will be used instead


Certain files are always included, regardless of settings:

* `package


Some files are always ignored by default:

* `*
orig`
* `
swp`
* `
DS_Store`
* `
_*`
* `
lock-wscript`
* `
npmrc`
* `
svn`
* `
wafpickle-N`
* `CVS`
* `config
log`
* `package-lock
json` (use
  [`npm-shrinkwrap
yaml`
* `yarn
npmrc`
* `node_modules`
* `package-lock
yaml`
* `yarn
lock`

These can not be included
  That is, if your package is named `foo`, and a user installs it,
and then does `require(""foo"")`, then your main module's exports object will
be returned


This should be a module relative to the root of your package folder


If `main` is not set, it defaults to `index
js` in the package's root folder


### browser

If your module is meant to be used client-side the browser field should be
used instead of the main field
 This is helpful to hint users that it might
rely on primitives that aren't available in Node
js modules
g

`window`)

### bin

A lot of packages have one or more executable files that they'd like to
install into the PATH
)

To use this, supply a `bin` field in your package
 When this package is installed globally,
that file will be either linked inside the global bins directory or
a cmd (Windows Command File) will be created which executes the specified
file in the `bin` field, so it is available to run by `name` or `name
cmd` (on
Windows PowerShell)



For example, myapp could have this:

```json
{
  ""bin"": {
    ""myapp"": ""
/cli
js""
  }
}
```

So, when you install myapp, in case of unix-like OS it'll create a symlink
from the `cli
cmd`
which runs the `cli
js` script


If you have a single executable, and its name should be the name of the
package, then you can just supply it as a string
2
/path/to/program""
}
```

would be the same as this:

```json
{
  ""name"": ""my-program"",
  ""version"": ""1
2
5"",
  ""bin"": {
    ""my-program"": ""
/path/to/program""
  }
}
```

Please make sure that your file(s) referenced in `bin` starts with
`#!/usr/bin/env node`, otherwise the scripts are started without the node
executable!

Note that you can also set the executable files using [directories


If only a single file is provided, then it's installed such that it is the
result from `man <pkgname>`, regardless of its actual filename
  For
example:

```json
{
  ""name"": ""foo"",
  ""version"": ""1
2
3"",
  ""description"": ""A packaged foo fooer for fooing foos"",
  ""main"": ""foo
js"",
  ""man"": ""
1` file in such that it is the target for `man
foo`

If the filename doesn't start with the package name, then it's prefixed
2
js"",
  ""man"": [
    ""
/man/foo
1"",
    ""
/man/bar


Man files must end with a number, and optionally a `
gz` suffix if they are
compressed
  The number dictates which man section the file is installed
into
2
3"",
  ""description"": ""A packaged foo fooer for fooing foos"",
  ""main"": ""foo
/man/foo
org/wiki/Packages/1
0) spec
details a few ways that you can indicate the structure of your package
using a `directories` object
 If you look at [npm's
package
npmjs


In the future, this information may be used in other creative ways


#### directories
bin

If you specify a `bin` directory in `directories


Because of the way the `bin` directive works, specifying both a `bin` path
and setting `directories
 If you want to specify
individual files, use `bin`, and for all the files in an existing `bin`
directory, use `directories
bin`


#### directories
man

A folder that is full of man pages


### repository

Specify the place where your code lives
 This is helpful for people who
want to contribute
  If the git repo is on GitHub, then the `npm docs`
command will be able to find you
com/npm/cli
git""
  }
}
```

The URL should be a publicly available (perhaps read-only) URL that can be
handed directly to a VCS program without any modification
  It should not
be a URL to an html project page that you put in your browser
  It's for
computers


For GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the
same shortcut syntax you use for `npm install`:

```json
{
  ""repository"": ""npm/npm"",

  ""repository"": ""github:user/repo"",

  ""repository"": ""gist:11081aaa281"",

  ""repository"": ""bitbucket:user/repo"",

  ""repository"": ""gitlab:user/repo""
}
```

If the `package
json` for your package is not in the root directory (for
example if it is part of a monorepo), you can specify the directory in
which it lives:

```json
{
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""https://github
git"",
    ""directory"": ""packages/react-dom""
  }
}
```

### scripts

The ""scripts"" property is a dictionary containing script commands that are
run at various times in the lifecycle of your package
  The key is the
lifecycle event, and the value is the command to run at that point


See [`scripts`](/using-npm/scripts) to find out more about writing package
scripts
  For instance, if a package
had the following:

```json
{
  ""name"": ""foo"",
  ""config"": {
    ""port"": ""8080""
  }
}
```

It could also have a ""start"" command that referenced the
`npm_package_config_port` environment variable
  Dependencies can also be identified with a
tarball or git URL


**Please do not put test harnesses or transpilers or other ""development""
time tools in your `dependencies` object
**  See `devDependencies`, below


See [semver](https://github
com/npm/node-semver#versions) for more details about specifying version ranges
com/npm/node-semver#versions)
* `1
2
0, 1
1, etc
3
0
* `http://

` See 'URLs as Dependencies' below
* `*` Matches any version
* `""""` (just an empty string) Same as `*`
* `version1 - version2` Same as `>=version1 <=version2`

* `range1 || range2` Passes if either range1 or range2 are satisfied

* `git

` See 'Git URLs as Dependencies' below
* `user/repo` See 'GitHub URLs' below
* `tag` A specific version tagged and published as `tag`  See [`npm
  dist-tag`](/commands/npm-dist-tag)
* `path/path/path` See [Local Paths](#local-paths) below

For example, these are all valid:

```json
{
  ""dependencies"": {
    ""foo"": ""1
0 - 2
9999
9999"",
    ""bar"": "">=1
0
2 <2
1
2 <=2
3
0
0 || >=2
4
5 || >=2
5
2 <3
0"",
    ""asd"": ""http://asdf
com/asdf
gz"",
    ""til"": ""~1
2
x"",
    ""thr"": ""3
3
x"",
    ""lat"": ""latest"",
    ""dyl"": ""file:


If `#<commit-ish>` is provided, it will be used to clone exactly that
commit
 If the commit-ish has the format `#semver:<semver>`, `<semver>` can
be any valid semver range or exact version, and npm will look for any tags
or refs matching that range in the remote repository, much as it would for
a registry dependency
 If neither `#<commit-ish>` or `#semver:<semver>` is
specified, then the default branch is used
git#v1
0
0
git+https://isaacs@github
git
git://github
com/npm/cli
git#v1
0
27
```

When installing from a `git` repository, the presence of certain fields in the
`package
 To do so
your repository will be cloned into a temporary directory, all of its deps
installed, relevant scripts run, and the resulting directory packed and
installed


This flow will occur if your git dependency uses `workspaces`, or if any of the
following scripts are present:

* `build`
* `prepare`
* `prepack`
* `preinstall`
* `install`
* `postinstall`

If your git repository includes pre-built artifacts, you will likely want to
make sure that none of the above scripts are defined, or your dependency
will be rebuilt for every installation


#### GitHub URLs

As of version 1
65, you can refer to GitHub URLs as just ""foo"":
""user/foo-project""
  For example:

```json
{
  ""name"": ""foo"",
  ""version"": ""0
0
0"",
  ""dependencies"": {
    ""express"": ""expressjs/express"",
    ""mocha"": ""mochajs/mocha#4727d357ea"",
    ""module"": ""user/repo#feature\/branch""
  }
}
```

#### Local Paths

As of version 2
/foo/bar
~/foo/bar

/foo/bar
/foo/bar
```

in which case they will be normalized to a relative path and added to your
`package
json`

/foo/bar""
  }
}
```

This feature is helpful for local offline development and creating tests
that require npm installing where you don't want to hit an external server,
but should not be used when publishing your package to the public registry


*note*: Packages linked by local path will not have their own
dependencies installed when `npm install` is ran in this case
  You must
run `npm install` from inside the local path itself


For example:

```json
{
  ""name"": ""ethopia-waza"",
  ""description"": ""a delightfully fruity coffee varietal"",
  ""version"": ""1
2
6
3""
  },
  ""scripts"": {
    ""prepare"": ""coffee -o lib/ -c src/waza
coffee""
  },
  ""main"": ""lib/waza

In dev mode (ie, locally running `npm install`), it'll run this script as
well, so that you can test it easily


### peerDependencies

In some cases, you want to express the compatibility of your package with a
host tool or library, while not necessarily doing a `require` of this host

This is usually referred to as a *plugin*


For example:

```json
{
  ""name"": ""tea-latte"",
  ""version"": ""1
x""
  }
}
```

This ensures your package `tea-latte` can be installed *along* with the
second major version of the host package `tea` only
3
5
└── tea@2
2
  As of npm v7, peerDependencies _are_
installed by default


Trying to install another plugin with a conflicting requirement may cause
an error if the tree cannot be resolved correctly
 For this reason, make
sure your plugin requirement is as broad as possible, and not to lock it
down to specific patch versions


Assuming the host complies with [semver](https://semver
org/), only changes
in the host package's major version will break your plugin
x version of the host package, use `""^1
0""` or `""1
x""`
to express this
5
2, use
`""^1
2""`


### peerDependenciesMeta

When a user installs your package, npm will emit warnings if packages
specified in `peerDependencies` are not already installed
 The
`peerDependenciesMeta` field serves to provide npm more information on how
your peer dependencies are to be used
 Specifically, it allows peer
dependencies to be marked as optional


For example:

```json
{
  ""name"": ""tea-latte"",
  ""version"": ""1


In cases where you need to preserve npm packages locally or have them
available through a single file download, you can bundle the packages in a
tarball file by specifying the package names in the `bundleDependencies`
array and executing `npm pack`
json like this:

```json
{
  ""name"": ""awesome-web-framework"",
  ""version"": ""1
0
0"",
  ""bundleDependencies"": [
    ""renderized"",
    ""super-streams""
  ]
}
```

we can obtain `awesome-web-framework-1
0
0


If this is spelled `""bundledDependencies""`, then that is also honored


Alternatively, `""bundleDependencies""` can be defined as a boolean value
  This is a map of package name to version or
URL, just like the `dependencies` object
  The difference is that build
failures do not cause installation to fail
  Running `npm install
--omit=optional` will prevent these dependencies from being installed


It is still your program's responsibility to handle the lack of the
dependency
  For example, something like this:

```js
try {
  var foo = require('foo')
  var fooVersion = require('foo/package
json')
version
} catch (er) {
  foo = null
}
if ( notGoodFooVersion(fooVersion) ) {
  foo = null
}

// 

 then later in your program 


if (foo) {
  foo
0` no matter
what version your dependencies rely on:

```json
{
  ""overrides"": {
    ""foo"": ""1
0
0""
  }
}
```

The above is a short hand notation, the full object form can be used to allow
overriding a package itself as well as a child of the package
0
0` while also making `bar` at any depth beyond `foo`
also `1
0
0"",
      ""bar"": ""1
0
0""
    }
  }
}
```

To only override `foo` to be `1
0
0""
    }
  }
}
```

Keys can be nested to any arbitrary length
0
0""
      }
    }
  }
}
```

The key of an override can also include a version, or range of versions

To override `foo` to `1
0
0
0
0
0
0""
  },
  ""overrides"": {
    // BAD, will throw an EOVERRIDE error
    // ""foo"": ""^2
0""
    // GOOD, specs match so override is allowed
    // ""foo"": ""^1
0""
    // BEST, the override is defined as a reference to the dependency
    ""foo"": ""$foo"",
    // the referenced package does not need to match the overridden one
    ""bar"": ""$foo""
  }
}
```

### engines

You can specify the version of node that your stuff works on:

```json
{
  ""engines"": {
    ""node"": "">=0
10


You can also use the ""engines"" field to specify which versions of npm are
capable of properly installing your program
  For example:

```json
{
  ""engines"": {
    ""npm"": ""~1
platform`

It is allowed to both block and allow an item, although there isn't any
good reason to do this


### cpu

If your code only runs on certain cpu architectures,
you can specify which ones
json, then npm will refuse to
publish it


This is a way to prevent accidental publication of private repositories

If you would like to ensure that a given package is only ever published to
a specific registry (for example, an internal registry), then use the
`publishConfig` dictionary described below to override the `registry`
config param at publish-time
 It's
especially handy if you want to set the tag, registry or access, so that
you can ensure that a given package is not tagged with ""latest"", published
to the global public registry or that a scoped module is private by
default


It can describe either the direct paths of the folders to be used as
workspaces or it can define globs that will resolve to these same folders


In the following example, all folders located inside the folder
`
/packages` will be treated as workspaces as long as they have valid
`package


### DEFAULT VALUES

npm will default some values based on package contents


* `""scripts"": {""start"": ""node server


* `""scripts"":{""install"": ""node-gyp rebuild""}`

  If there is a `binding


* `""contributors"": [

]`

  If there is an `AUTHORS` file in the root of your package, npm will treat
  each line as a `Name <email> (url)` format, where email and url are
  optional
json` is automatically generated for any operations where npm
modifies either the `node_modules` tree, or `package
json`


This file is intended to be committed into source repositories, and serves
various purposes:

* Describe a single representation of a dependency tree such that
  teammates, deployments, and continuous integration are guaranteed to
  install exactly the same dependencies


* Facilitate greater visibility of tree changes through readable source
  control diffs


### `package-lock
json`

Both of these files have the same format, and perform similar functions in
the root of a project
json](/configuring-npm/npm-shrinkwrap-json) allows
publication, and defines the dependency tree from the point encountered

This is not recommended unless deploying a CLI tool or otherwise using the
publication process for producing production packages


If both `package-lock
json` will be ignored


### Hidden Lockfiles

In order to avoid processing the `node_modules` folder repeatedly, npm as
of v7 uses a ""hidden"" lockfile present in
`node_modules/
json`

- No package folders exist in the `node_modules` hierarchy that are not
  listed in the lockfile


That is, the hidden lockfile will only be relevant if it was created as
part of the most recent update to the package tree


Note that it _is_ possible to manually change the _contents_ of a package
in such a way that the modified time of the package folder is unaffected
  If you
are manually editing files in `node_modules`, it is generally best to
delete the file at `node_modules/
  That is, it is `lockfileVersion: 3`, rather than
`lockfileVersion: 2`


### Handling Old Lockfiles

When npm detects a lockfile from npm v6 or before during the package
installation process, it is automatically updated to fetch missing
information from either the `node_modules` tree or (in the case of empty
`node_modules` trees or very old lockfile formats) the npm registry


### File Format

#### `name`

The name of the package this is a package-lock for
 This will match what's
in `package


#### `version`

The version of the package this is a package-lock for


#### `lockfileVersion`

An integer version, starting at `1` with the version number of this
document whose semantics were used when generating this
`package-lock
json`


Note that the file format changed significantly in npm v7 to track
information that would have otherwise required looking in `node_modules` or
the npm registry
  Lockfiles generated by npm v7 will contain
`lockfileVersion: 2`

* `1`: The lockfile version used by npm v5 and v6

* `2`: The lockfile version used by npm v7 and v8


npm will always attempt to get whatever data it can out of a lockfile, even
if it is not a version that it was designed to support


#### `packages`

This is an object that maps package locations to an object containing the
information about that package


The root project is typically listed with a key of `""""`, and all other
packages are listed with their relative paths from the root project folder


Package descriptors have the following fields:

* version: The version found in `package
json`

* resolved: The place where the package was actually resolved from
  In
  the case of packages fetched from the registry, this will be a url to a
  tarball
  In the case of git dependencies, this will be the full git url
  with commit sha
 `registry
org` is a magic value meaning
  ""the currently configured registry""


* integrity: A `sha512` or `sha1` [Standard Subresource
  Integrity](https://w3c
io/webappsec/specs/subresourceintegrity/)
  string for the artifact that was unpacked in this location
  If it is strictly part
  of the `optionalDependencies` tree, then `optional` will be set
  If it
  is both a `dev` dependency _and_ an `optional` dependency of a non-dev
  dependency, then `devOptional` will be set


* hasInstallScript: A flag to indicate that the package has a `preinstall`,
  `install`, or `postinstall` script


* hasShrinkwrap: A flag to indicate that the package has an
  `npm-shrinkwrap
  Because the
object structure is strictly hierarchical, symbolic link dependencies are
somewhat challenging to represent in some cases


npm v7 ignores this section entirely if a `packages` section is present,
but does keep it up to date in order to support switching between npm v6
and npm v7


    * bundled dependencies: Regardless of source, this is a version number
      that is purely for informational purposes

    * registry sources: This is a version number
 (eg, `1
3`)
    * git sources: This is a git specifier with resolved committish
 (eg,
      `git+https://example
3
tgz`)
    * local tarball sources: This is the file URL of the tarball
3
tgz`)
    * local link sources: This is the file URL of the link
 (eg
      `file:libs/our-module`)

* integrity: A `sha512` or `sha1` [Standard Subresource
  Integrity](https://w3c
github
  For git
  dependencies, this is the commit sha


* resolved: For registry sources this is path of the tarball relative to
  the registry URL
 `registry
npmjs
org` is a magic
  value meaning ""the currently configured registry""


* bundled:  If true, this is the bundled dependency and will be installed
  by the parent module
  When installing, this module will be extracted
  from the parent module during the extract phase, not installed as a
  separate dependency
  This is false
  for dependencies that are both a development dependency of the top level
  and a transitive dependency of a non-development dependency of the top
  level


* optional: If true then this dependency is either an optional dependency
  ONLY of the top level module or a transitive dependency of one
  This is a list of
  everything this module requires, regardless of where it will be
  installed


* dependencies: The dependencies of this dependency, exactly as at the top
  level


### See also

* [npm shrinkwrap](/commands/npm-shrinkwrap)
* [npm-shrinkwrap
json](/configuring-npm/package-json)
* [npm install](/commands/npm-install)


---
title: config
section: 7
description: More than you probably want to know about npm configuration
---

### Description

This article details npm configuration in general
 To learn about the `config` command,
see [`npm config`](/commands/npm-config)


npm gets its configuration values from the following sources, sorted by priority:

#### Command Line Flags

Putting `--foo bar` on the command line sets the `foo` configuration
parameter to `""bar""`
  A `--` argument tells the cli parser to stop
reading flags
  Using `--flag` without specifying any value will set
the value to `true`


Example: `--flag1 --flag2` will set both configuration parameters
to `true`, while `--flag1 --flag2 bar` will set `flag1` to `true`,
and `flag2` to `bar`


#### Environment Variables

Any environment variables that start with `npm_config_` will be
interpreted as a configuration parameter
  For example, putting
`npm_config_foo=bar` in your environment will set the `foo`
configuration parameter to `bar`
  Any environment configurations that
are not given a value will be given the value of `true`
 However, please note that inside [`scripts`](/using-npm/scripts)
npm will set its own environment variables and Node will prefer
those lowercase versions over any uppercase ones that you might set

For details see [this issue](https://github


Notice that you need to use underscores instead of dashes, so `--allow-same-version`
would become `npm_config_allow_same_version=true`
npmrc`; configurable via CLI
  option `--userconfig` or environment variable `$NPM_CONFIG_USERCONFIG`)
* global configuration file (defaults to `$PREFIX/etc/npmrc`; configurable via
  CLI option `--globalconfig` or environment variable `$NPM_CONFIG_GLOBALCONFIG`)
* npm's built-in configuration file (`/path/to/npm/npmrc`)

See [npmrc](/configuring-npm/npmrc) for more details


### Shorthands and Other CLI Niceties

The following shorthands are parsed on the command-line:

* `-a`: `--all`
* `--enjoy-by`: `--before`
* `-c`: `--call`
* `--desc`: `--description`
* `-f`: `--force`
* `-g`: `--global`
* `--iwr`: `--include-workspace-root`
* `-L`: `--location`
* `-d`: `--loglevel info`
* `-s`: `--loglevel silent`
* `--silent`: `--loglevel silent`
* `--ddd`: `--loglevel silly`
* `--dd`: `--loglevel verbose`
* `--verbose`: `--loglevel verbose`
* `-q`: `--loglevel warn`
* `--quiet`: `--loglevel warn`
* `-l`: `--long`
* `-m`: `--message`
* `--local`: `--no-global`
* `-n`: `--no-yes`
* `--no`: `--no-yes`
* `-p`: `--parseable`
* `--porcelain`: `--parseable`
* `-C`: `--prefix`
* `--readonly`: `--read-only`
* `--reg`: `--registry`
* `-S`: `--save`
* `-B`: `--save-bundle`
* `-D`: `--save-dev`
* `-E`: `--save-exact`
* `-O`: `--save-optional`
* `-P`: `--save-prod`
* `-?`: `--usage`
* `-h`: `--usage`
* `-H`: `--usage`
* `--help`: `--usage`
* `-v`: `--version`
* `-w`: `--workspace`
* `--ws`: `--workspaces`
* `-y`: `--yes`

If the specified configuration param resolves unambiguously to a known
configuration parameter, then it is expanded to that configuration
parameter
  For
example:

```bash
npm ls -gpld
# same as:
npm ls --global --parseable --long --loglevel info
```

### Config Settings

#### `_auth`

* Default: null
* Type: null or String

A basic-auth string to use when authenticating against the npm registry

This will ONLY be used to authenticate against the npm registry
 For other
registries you will need to scope it like ""//other-registry
tld/:_auth""

Warning: This should generally not be set via a command-line option
npmrc file by running `npm login`




#### `access`

* Default: 'public' for new packages, existing packages it will not change the
  current level
* Type: null, ""restricted"", or ""public""

If you do not want your scoped package to be publicly viewable (and
installable) set `--access=restricted`




#### `all`

* Default: false
* Type: Boolean

When running `npm outdated` and `npm ls`, setting `--all` will show all
outdated or installed packages, rather than only those directly depended
upon by the current project




#### `allow-same-version`

* Default: false
* Type: Boolean

Prevents throwing an error when `npm version` is used to set the new version
to the same value as the current version
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted




#### `audit-level`

* Default: null
* Type: null, ""info"", ""low"", ""moderate"", ""high"", ""critical"", or ""none""

The minimum level of vulnerability for `npm audit` to exit with a non-zero
exit code




#### `auth-type`

* Default: ""web""
* Type: ""legacy"" or ""web""

What authentication strategy to use with `login`




#### `before`

* Default: null
* Type: null or Date

If passed to `npm install`, will rebuild the npm tree such that only
versions that were available **on or before** the `--before` time get
installed
 If there's no versions available for the current set of direct
dependencies, the command will error
 For example, `foo@latest` might install `foo@1
2` even though
`latest` is `2




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
cmd` shims on Windows) for package
executables


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems


Set to `false` to suppress browser behavior and instead print urls to
terminal


Set to `true` to use default system URL opener




#### `ca`

* Default: null
* Type: null or String (can be set multiple times)

The Certificate Authority signing certificate that is trusted for SSL
connections to the registry
 Values should be in PEM format (Windows calls
it ""Base-64 encoded X
509 (
CER)"") with newlines replaced by the string
""\n""
 For example:

```ini
ca=""-----BEGIN CERTIFICATE-----\nXXXX\nXXXX\n-----END CERTIFICATE-----""
```

Set to `null` to only allow ""known"" registrars, or to a specific CA cert to
trust only that specific signing authority


Multiple CAs can be trusted by specifying an array of certificates:

```ini
ca[]=""

""
ca[]=""

""
```

See also the `strict-ssl` config




#### `cache`

* Default: Windows: `%LocalAppData%\npm-cache`, Posix: `~/




#### `cafile`

* Default: null
* Type: Path

A path to a file containing one or multiple Certificate Authority signing
certificates
 Similar to the `ca` setting, but allows for multiple CA's, as
well as for the CA information to be stored in a file on disk


```bash
npm exec --package yo --package generator-node --call ""yo node""
```



#### `cidr`

* Default: null
* Type: null or String (can be set multiple times)

This is a list of CIDR address to be used when configuring limited access
tokens with the `npm token create` command




#### `color`

* Default: true unless the NO_COLOR environ is set to something other than '0'
* Type: ""always"" or Boolean

If false, never shows colors
 If
true, then only prints color codes for tty file descriptors
 Acceptable values
are same as `cpu` field of package
json, which comes from `process
arch`




#### `depth`

* Default: `Infinity` if `--all` is set, otherwise `1`
* Type: null or Number

The depth to go when recursing packages for `npm ls`
 If `--all` is set, then npm will show all dependencies by default




#### `description`

* Default: true
* Type: Boolean

Show the description in `npm search`



#### `diff`

* Default:
* Type: String (can be set multiple times)

Define arguments to compare in `npm diff`




#### `diff-dst-prefix`

* Default: ""b/""
* Type: String

Destination prefix to be used in `npm diff` output




#### `diff-no-prefix`

* Default: false
* Type: Boolean

Do not show any source or destination prefix in `npm diff` output


Note: this causes `npm diff` to ignore the `--diff-src-prefix` and
`--diff-dst-prefix` configs




#### `diff-text`

* Default: false
* Type: Boolean

Treat all files as text in `npm diff`




#### `diff-unified`

* Default: 3
* Type: Number

The number of lines of context to print in `npm diff`




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc
exe' on Windows, or 'vi' on Unix systems
* Type: String

The command to run for `npm edit` and `npm config edit`


This can be overridden by setting the `--force` flag




#### `expect-result-count`

* Default: null
* Type: null or Number

Tells to expect a specific number of results from the command


This config can not be used with: `expect-results`

#### `expect-results`

* Default: null
* Type: null or Boolean

Tells npm whether or not to expect results from the command


This config can not be used with: `expect-result-count`

#### `fetch-retries`

* Default: 2
* Type: Number

The ""retries"" config for the `retry` module to use when fetching packages
from the registry


npm will retry idempotent read requests to the registry in the case of
network failures or 5xx HTTP errors




#### `fetch-retry-maxtimeout`

* Default: 60000 (1 minute)
* Type: Number

The ""maxTimeout"" config for the `retry` module to use when fetching
packages




#### `fetch-retry-mintimeout`

* Default: 10000 (10 seconds)
* Type: Number

The ""minTimeout"" config for the `retry` module to use when fetching
packages




#### `fetch-timeout`

* Default: 300000 (5 minutes)
* Type: Number

The maximum amount of time to wait for HTTP requests to complete

* Allow the `npm version` command to work on an unclean git repository

* Allow installing packages that have an `engines` declaration requiring a
  different version of npm

* Allow installing packages that have an `engines` declaration requiring a
  different version of `node`, even if `--engine-strict` is enabled

* Allow unpublishing all versions of a published package

* Allow conflicting peerDependencies to be installed in the root project

* Implicitly set `--yes` during `npm init`


If you don't have a clear idea of what you want to do, it is strongly
recommended that you do not use this option!



#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging




#### `format-package-lock`

* Default: true
* Type: Boolean

Format `package-lock
json` or `npm-shrinkwrap




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 See [`npm
fund`](/commands/npm-fund) for details




#### `git`

* Default: ""git""
* Type: String

The command to use for git commands




#### `git-tag-version`

* Default: true
* Type: Boolean

Tag the commit when using the `npm version` command
 Setting this to false
results in no commit being made at all
 See
[folders](/configuring-npm/folders) for more on the differences in behavior




#### `heading`

* Default: ""npm""
* Type: String

The string that starts all the debugging log output




#### `https-proxy`

* Default: null
* Type: null or URL

A proxy to use for outgoing https requests
 If the `HTTPS_PROXY` or
`https_proxy` or `HTTP_PROXY` or `http_proxy` environment variables are set,
proxy settings will be honored by the underlying `make-fetch-happen`
library




#### `if-present`

* Default: false
* Type: Boolean

If true, npm will not exit with an error code when `run-script` is invoked
for a script that isn't defined in the `scripts` section of `package
json`

This option can be used when it's desirable to optionally run a script when
it's present and fail if the script fails


#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`
com/npm/rfcs/pull/92)


This is experimental, and not implemented by the npm public registry




#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command




#### `init-author-name`

* Default: """"
* Type: String

The value `npm init` should use by default for the package author's name




#### `init-license`

* Default: ""ISC""
* Type: String

The value `npm init` should use by default for the package license




#### `init-module`

* Default: ""~/
npm-init
 See the
documentation for the
[init-package-json](https://github
com/npm/init-package-json) module for
more information, or [npm init](/commands/npm-init)




#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 shallow (formerly --global-style) only install direct
deps at top-level
store,
link in place, unhoisted
parse() before
  saving them to your `package


Not supported by all npm commands


If a package cannot be installed because of overly strict `peerDependencies`
that collide, it provides a way to move forward resolving the situation


This differs from `--omit=peer`, in that `--omit=peer` will avoid unpacking
`peerDependencies` on disk, but will still design a tree such that
`peerDependencies` _could_ be unpacked in a correct place


Use of `legacy-peer-deps` is not recommended, as it will not enforce the
`peerDependencies` contract that meta-dependencies may rely on




#### `libc`

* Default: null
* Type: null or String

Override libc of native modules to install
 Acceptable values are same as
`libc` field of package
json



#### `link`

* Default: false
* Type: Boolean

Used with `npm ls`, limiting output to only those packages that are linked




#### `local-address`

* Default: null
* Type: IP Address

The IP address of the local interface to use when making connections to the
npm registry
12


When set to ""global"" mode, packages are installed into the `prefix` folder
instead of the current working directory

* Type: null, 1, 2, 3, ""1"", ""2"", or ""3""

Set the lockfile format version to be used in package-lock
 Possible options are:

1: The lockfile version used by npm versions 5 and 6
 Prevents lockfile churn when interoperating with
older npm versions
 Includes both
the version 1 lockfile data and version 3 lockfile data, for maximum
determinism and interoperability, at the expense of more bytes on disk


3: Only the new lockfile information introduced in npm version 7

Ideal if all users are on npm version 7 and higher
 All logs are written to a debug log, with the
path to that file printed if the execution of a command fails
 The default is
""notice""


See also the `foreground-scripts` config




#### `logs-dir`

* Default: A directory named `_logs` inside the cache
* Type: null or Path

The location of npm's log directory
 See [`npm logging`](/using-npm/logging)
for more information




#### `logs-max`

* Default: 10
* Type: Number

The maximum number of log files to store




#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`




#### `noproxy`

* Default: The value of the NO_PROXY environment variable
* Type: String (can be set multiple times)

Domain extensions that should bypass any proxies


Also accepts a comma-delimited string
 To
allow the CLI to fill in missing cache data, see `--prefer-offline`

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap


If a package type appears in both the `--include` and `--omit` lists, then
it will be included
 Subsequent installs will need to resolve tarball
endpoints with the configured registry, likely resulting in a longer install
time




#### `os`

* Default: null
* Type: null or String

Override OS of native modules to install
platform`
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one




#### `pack-destination`

* Default: ""
json` files when installing
 This
will also prevent _writing_ `package-lock
json` if `save` is true
json`,
ignoring `node_modules`


For `update` this means only the `package-lock
json` will be updated,
instead of checking `node_modules` and downloading dependencies


For `list` this means the output will be based on the tree described by the
`package-lock




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output
 For
`npm search`, this will be tab-separated table format




#### `prefer-dedupe`

* Default: false
* Type: Boolean

Prefer to deduplicate packages if possible, rather than choosing a newer
version of a dependency
 To force full offline mode, use
`--offline`
2
8`




#### `progress`

* Default: `true` unless running in a known CI system
* Type: Boolean

When set to `true`, npm will display a progress bar during time intensive
operations, if `process
stderr` is a TTY




#### `provenance`

* Default: false
* Type: Boolean

When publishing from a supported cloud CI/CD system, the package will be
publicly linked to where it was built and published from


This config can not be used with: `provenance`

#### `proxy`

* Default: null
* Type: null, false, or URL

A proxy to use for outgoing http requests
 If the `HTTP_PROXY` or
`http_proxy` environment variables are set, proxy settings will be honored
by the underlying `request` library




#### `read-only`

* Default: false
* Type: Boolean

This is used to mark a token as unable to publish when configuring limited
access tokens with the `npm token create` command




#### `registry`

* Default: ""https://registry
org) to the configured registry
g
, ""registry
npmjs




#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package


Will also prevent writing to `package-lock


Ignored if `--save-peer` is set, since peerDependencies cannot be bundled




#### `save-dev`

* Default: false
* Type: Boolean

Save installed packages to a package
json file as `devDependencies`




#### `save-exact`

* Default: false
* Type: Boolean

Dependencies saved to package




#### `save-optional`

* Default: false
* Type: Boolean

Save installed packages to a package
json file as `optionalDependencies`
2
2
2
 This is useful if
a package already exists in `devDependencies` or `optionalDependencies`, but
you want to move it to be a non-optional production dependency


This is the default behavior if `--save` is true, and neither `--save-dev`
or `--save-optional` are true




#### `sbom-type`

* Default: ""library""
* Type: ""library"", ""application"", or ""framework""

The type of package described by the generated SBOM
 For SPDX, this is the
value for the `primaryPackagePurpose` field
mycorp


This will also cause `npm init` to create a scoped package




#### `searchexclude`

* Default: """"
* Type: String

Space-separated options that limit the results from search




#### `searchlimit`

* Default: 20
* Type: Number

Number of items to limit search results to
 Will not apply at all to legacy
searches




#### `searchopts`

* Default: """"
* Type: String

Space-separated options that are always passed to search




#### `shell`

* Default: SHELL environment variable, or ""bash"" on Posix, or ""cmd
exe"" on
  Windows
* Type: String

The shell to run for the `npm explore` command


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved




#### `strict-ssl`

* Default: true
* Type: Boolean

Whether or not to do SSL key validation when making requests to the registry
via https


See also the `ca` config


When used by the `npm diff` command, this is the tag used to fetch the
tarball that will be compared with the local files by default




#### `tag-version-prefix`

* Default: ""v""
* Type: String

If set, alters the prefix used when tagging a new version when performing a
version increment using `npm version`
 In
particular, use care when overriding this setting for public packages




#### `timing`

* Default: false
* Type: Boolean

If true, writes timing information to a process specific json file in the
cache or `logs-dir`
json`


You can quickly view it with this [json](https://npm
im/json) command line:
`cat ~/
npm/_logs/*-timing
json | npm exec -- json -g`


Timing information will also be reported in the terminal


511)

The ""umask"" value to use when setting the file creation mode on files and
folders


Folders and executables are given a mode which is `0o777` masked against
this value
 Other files are given a mode which is `0o666` masked against
this value


Thus, the effective default umask value on most POSIX systems is 0o22,
meaning that folders and executables are created with a mode of 0o755 and
other files are created with a mode of 0o644




#### `unicode`

* Default: false on windows, true on mac/unix systems with a unicode locale,
  as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables
 When
false, it uses ascii characters instead of unicode glyphs




#### `update-notifier`

* Default: true
* Type: Boolean

Set to false to suppress the update notification when using an older version
of npm than the latest




#### `usage`

* Default: false
* Type: Boolean

Show short usage output about the command specified




#### `user-agent`

* Default: ""npm/{npm-version} node/{node-version} {platform} {arch}
  workspaces/{workspaces} {ci}""
* Type: String

Sets the User-Agent request header
js version in use
* `{platform}` - The value of `process
platform`
* `{arch}` - The value of `process
arch`
* `{workspaces}` - Set to `true` if the `workspaces` or `workspace` options
  are set

* `{ci}` - The value of the `ci-name` config, if set, prefixed with `ci/`, or
  an empty string if `ci-name` is empty




#### `userconfig`

* Default: ""~/


This may be overridden by the `npm_config_userconfig` environment variable
or the `--userconfig` command line option, but may _not_ be overridden by
settings in the `globalconfig` file
versions` map and
the version in the current working directory's `package
json` file if one
exists, and exit successfully




#### `viewer`

* Default: ""man"" on Posix, ""browser"" on Windows
* Type: String

The program to use to view help content




#### `which`

* Default: null
* Type: null or Number

If there are multiple funding sources, which 1-indexed source URL to open


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
)
will link workspaces into the `node_modules` folder


This value is not exported to the environment for child processes




#### `yes`

* Default: null
* Type: null or Boolean

Automatically answer ""yes"" to any prompts that npm might print on the
command line


When set to `dev` or `development`, this is an alias for `--include=dev`


`--cache-min=9999 (or bigger)` is an alias for `--prefer-offline`
tld/:keyfile=/path/to/key
tld/:certfile=/path/to/cert
crt

A client certificate to pass when accessing the registry
 Values should be
in PEM format (Windows calls it ""Base-64 encoded X
509 (
tld/:certfile=/path/to/cert
pem""




#### `dev`

* Default: false
* Type: Boolean
* DEPRECATED: Please use --include=dev instead


Alias for `--include=dev`




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies
 Sets `--install-strategy=shallow`
author
email`

* Default: """"
* Type: String
* DEPRECATED: Use `--init-author-email` instead


Alias for `--init-author-email`



#### `init
author
name`

* Default: """"
* Type: String
* DEPRECATED: Use `--init-author-name` instead
author


Alias for `--init-author-url`



#### `init
license`

* Default: ""ISC""
* Type: String
* DEPRECATED: Use `--init-license` instead


Alias for `--init-license`



#### `init
module`

* Default: ""~/
npm-init


Alias for `--init-module`



#### `init
version`

* Default: ""1
0
 Example:
  //other-registry
 Values should be in PEM
format with newlines replaced by the string ""\n""
 For example:

```ini
key=""-----BEGIN PRIVATE KEY-----\nXXXX\nXXXX\n-----END PRIVATE KEY-----""
```

It is _not_ the path to a key file, though you can set a registry-scoped
""keyfile"" path like ""//other-registry




#### `only`

* Default: null
* Type: null, ""prod"", or ""production""
* DEPRECATED: Use `--omit=dev` to omit dev dependencies from the install


When set to `prod` or `production`, this is an alias for `--omit=dev`


Default value does install optional deps unless otherwise omitted


Alias for --include=optional or --omit=optional



#### `production`

* Default: null
* Type: null or Boolean
* DEPRECATED: Use `--omit=dev` instead
w3
org/csswg/selectors4/#relational)) which:

- Standardizes the shape of, & querying of, dependency graphs with a robust object model, metadata & selector syntax
- Leverages existing, known language syntax & operators from CSS to make disparate package information broadly accessible
- Unlocks the ability to answer complex, multi-faceted questions about dependencies, their relationships & associative metadata
- Consolidates redundant logic of similar query commands in `npm` (ex

 `div, h1, a`) as a dependency/target is the only type of `Node` that can be queried
- the term ""dependencies"" is in reference to any `Node` found in a `tree` returned by `Arborist`

#### Combinators

- `>` direct descendant/child
- ` ` any descendant/child
- `~` sibling

#### Selectors

- `*` universal selector
- `#<name>` dependency selector (equivalent to `[name=""
""]`)
- `#<name>@<version>` (equivalent to `[name=<name>]:semver(<version>)`)
- `,` selector list delimiter
- `
` dependency type selector
- `:` pseudo selector

#### Dependency Type Selectors

- `
prod` dependency found in the `dependencies` section of `package
json`, or is a child of said dependency
- `
dev` dependency found in the `devDependencies` section of `package
json`, or is a child of said dependency
- `
optional` dependency found in the `optionalDependencies` section of `package
json`, or has `""optional"": true` set in its entry in the `peerDependenciesMeta` section of `package
json`, or a child of said dependency
- `
npmjs
com/cli/v8/using-npm/workspaces) section of `package
json`
- `
mozilla
org/en-US/docs/Web/CSS/:not)
- [`:has(<selector>)`](https://developer
org/en-US/docs/Web/CSS/:has)
- [`:is(<selector list>)`](https://developer
org/en-US/docs/Web/CSS/:is)
- [`:root`](https://developer
mozilla
org/en-US/docs/Web/CSS/:scope) matches node/dependency it was queried against
- [`:empty`](https://developer
mozilla
npmjs
com/cli/v8/configuring-npm/package-json#private) when a dependency is private
- `:link` when a dependency is linked (for instance, workspaces or packages manually [`linked`](https://docs
npmjs
com/npm/node-semver) version or range to a selector
- `:path(<path>)` [glob](https://www
npmjs
com/npm/node-semver#readme) methods


- `spec` a semver version or range
- `selector` an attribute selector for each node (default `[version]`)
- `function` a semver method to apply, one of: `satisfies`, `intersects`, `subset`, `gt`, `gte`, `gtr`, `lt`, `lte`, `ltr`, `eq`, `neq` or the special function `infer` (default `infer`)

When the special `infer` function is used the `spec` and the actual value from the node are compared
 If both are versions, according to `semver
 If the values are mixed types `satisfies` is used


Some examples:

- `:semver(^1
0
0`
- `:semver(16
0
0, :attr(engines, [node]))` returns every node which has an `engines
0
0
0
0`

##### `:outdated(<type>)`

The `:outdated` pseudo selector retrieves data from the registry and returns information about which of your dependencies are outdated
 The type parameter may be one of the following:

- `any` (default) a version exists that is greater than the current one
- `in-range` a version exists that is greater than the current one, and satisfies at least one if its parent's dependencies
- `out-of-range` a version exists that is greater than the current one, does not satisfy at least one of its parent's dependencies
- `major` a version exists that is a semver major greater than the current one
- `minor` a version exists that is a semver minor greater than the current one
- `patch` a version exists that is a semver patch greater than the current one

In addition to the filtering performed by the pseudo selector, some extra data is added to the resulting objects
 This is only populated if `:outdated(in-range)` is used
outOfRange` an array of objects, identical in shape to `inRange`, but where the `versions` array is every available version that does not satisfy the dependency
 This is only populated if `:outdated(out-of-range)` is used


Some examples:

- `:root > :outdated(major)` returns every direct dependency that has a new semver major release
- `
3
1` will not match


You can also filter results by certain attributes in advisories
  Currently that includes `severity` and `cwe`


In addition to the filtering performed by the pseudo selector, info about each relevant advisory will be added to the `queryContext` attribute of each node under the `advisories` attribute


Some examples:

- `:root > 
mozilla
org/en-US/docs/Web/CSS/Attribute_selectors)

The attribute selector evaluates the key/value pairs in `package
json` if they are `String`s



- `[attribute~=value]` attribute value contains word


- `[attribute*=value]` attribute value contains string

- `[attribute|=value]` attribute value is equal to or starts with


- `[attribute^=value]` attribute value starts with




 The last argument passed to `:attr()` must be an `attribute` selector or a nested `:attr()`
 See examples below:

#### `Objects`

```css
/* return dependencies that have a `scripts


```css
/* return dependencies that have a testling config for opera browsers */
*:attr(testling, browsers, [~=opera])
```

#### `Arrays`

`Array`s specifically uses a special/reserved `
` character in place of a typical attribute name
 `Arrays` also support exact `value` matching when a `String` is passed to the selector


##### Example of an `Array` Attribute Selection:
```css
/* removes the distinction between properties & arrays */
/* ie
 we'd have to check the property & iterate to match selection */
*:attr([keywords^=react])
*:attr(contributors, :attr([name~=Jordan]))
```

##### Example of an `Array` matching directly to a value:
```css
/* return dependencies that have the exact keyword ""react"" */
/* this is equivalent to `*:keywords([value=""react""])` */
*:attr([keywords=react])
```

##### Example of an `Array` of `Object`s:
```css
/* returns */
*:attr(contributors, [email=ruyadorno@github
json`)
 This approach is user-centric as the ecosystem has been taught to think about dependencies in these groups first-and-foremost
 Dependencies are allowed to be included in multiple groups (ex
 a `prod` dependency may also be a `dev` dependency (in that it's also required by another `dev` dependency) & may also be `bundled` - a selector for that type of dependency would look like: `*
prod`
- `
dev`
- `
optional`
- `
peer`
- `
bundled`
- `
workspace`

Please note that currently `workspace` deps are always `prod` dependencies
  Additionally the `


### Programmatic Usage

- `Arborist`'s `Node` Class has a `
querySelectorAll()` method
  - this method will return a filtered, flattened dependency Arborist `Node` list based on a valid query selector

```js
const Arborist = require('@npmcli/arborist')
const arb = new Arborist({})
```

```js
// root-level
arb
querySelectorAll('
prod')
  console
loadActual()
then(async (tree) => {
  // query for the deduped version of react
  const results = await tree
querySelectorAll('#react:not(:deduped)')
  // query the deduped react for git deps
  const deps = await results[0]
log(deps)
})
```

## See Also

* [npm query](/commands/npm-query)
* [@npmcli/arborist](https://npm
im/@npmcli/arborist)

---
title: developers
section: 7
description: Developer Guide
---

### Description

So, you've decided to use npm to develop (and maybe publish/deploy)
your project
  If you install npm, you should be able to
then do `man npm-thing` to get the documentation on a particular
topic, or `npm help thing` to see the same information
json file
* b) a gzipped tarball containing (a)
* c) a url that resolves to (b)
* d) a `<name>@<version>` that is published on the registry with (c)
* e) a `<name>@<tag>` that points to (d)
* f) a `<name>` that has a ""latest"" tag satisfying (e)
* g) a `git` url that, when cloned, results in (a)


Git urls can be of the form:

```bash
git://github
git#commit-ish
git+ssh://user@hostname:project
git#commit-ish
git+http://user@hostname/project/blah
git#commit-ish
```

The `commit-ish` can be any tag, sha, or branch which can be supplied as
an argument to `git checkout`
json File

You need to have a `package
json` file in the root of your project to do
much of anything with npm
  That is basically the whole interface
json`](/configuring-npm/package-json) for details about what
goes in that file

  You can use the ""engines"" field to explicitly state the versions of node
  (or whatever else) that your program requires, and it's pretty well
  assumed that it's JavaScript


  So, `node-foo` and `bar-js` are bad names
  `foo` or `bar` are better


* engines: Specify the versions of node (or whatever else) that your
  program runs on
  The node API changes a lot, and there may be bugs or
  new functionality that you depend on
  Be explicit
  You should definitely have at
  least a basic smoke-test command as the ""scripts
test"" field
  See
  [scripts](/using-npm/scripts)


* main: If you have a single module that serves as the entry point to your
  program (like what the ""foo"" package gives you at require(""foo"")), then
  you need to specify that in the ""main"" field


* directories: This is an object mapping names to folders
  The best ones
  to include are ""lib"" and ""doc"", but if you use ""man"" to specify a folder
  full of man pages, they'll get installed just like these ones


You can use `npm init` in the root of your package in order to get you
started with a pretty basic package
json file
npmignore` file to keep stuff out of your package
npmignore` file, but there *is* a `
 Like `git`, `npm` looks for
`
npmignore` and `
gitignore` files in all subdirectories of your package,
not only the root directory


`
npmignore` files follow the [same pattern
rules](https://git-scm
com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#_ignoring)
as `
gitignore` files:

* Blank lines or lines starting with `#` are ignored

* Standard glob patterns work

* You can end patterns with a forward slash `/` to specify a directory

* You can negate a pattern by starting it with an exclamation point `!`


By default, the following paths and files are ignored, so there's no
need to add them to `
npmignore` explicitly:

* `
*
swp`
* `
_*`
* `
gitignore`
* `
hg`
* `
npmrc`
* `
svn`
* `
wafpickle-*`
* `config
log`

Additionally, everything in `node_modules` is ignored, except for
bundled dependencies


The following paths and files are never ignored, so adding them to
`
npmignore` is pointless:

* `package
json`
* `README` (and its variants)
* `CHANGELOG` (and its variants)
* `LICENSE` / `LICENCE`

If, given the structure of your project, you find `
json`, which is an array of file or directory names
that should be included in your package
 Sometimes manually picking
which items to allow is easier to manage than building a block list


#### Testing whether your `
npmignore` or `files` config works

If you want to double check that your package will include only the files
you intend it to when published, you can run the `npm pack` command locally
which will generate a tarball in the working directory, the same way it
does for publishing
  (You do
need to either re-link or `npm rebuild -g` to update compiled packages,
of course
)

More info at [`npm link`](/commands/npm-link)


### Before Publishing: Make Sure Your Package Installs and Works

**This is important
**

If you can not install it locally, you'll have
problems trying to publish it
  Or, worse yet, you'll be able to
publish it, but you'll be publishing a broken or pointless package

So don't do that


In the root of your package, do this:

```bash
npm install 
  If you'd rather just create a symlink
package that points to your working directory, then do this:

```bash
npm link
```

Use `npm ls -g` to see if it's there


To test a local install, go into some other folder, and then do:

```bash
cd 

/some-other-folder
npm install 

/my-package
```

to install it locally into the node_modules folder in that other place


Then go into the node-repl, and try using require(""my-thing"") to
bring in your module's main module


### Create a User Account

Create a user with the adduser command


This is documented better in [npm adduser](/commands/npm-adduser)
  In the root of your folder, do this:

```bash
npm publish
```

You can give publish a url to a tarball, or a filename of a tarball,
or a path to a folder


Note that pretty much **everything in that folder will be exposed**
by default
  So, if you have secret stuff in there, use a
`
npmignore` file to list out the globs to ignore, or publish
from a fresh checkout


Tell the world how easy it is to install your program!

### See also

* [npm](/commands/npm)
* [npm init](/commands/npm-init)
* [package


### Setting Log File Location

All logs are written to a debug log, with the path to that file printed if the execution of a command fails


The default location of the logs directory is a directory named `_logs` inside the npm cache
  This is especially helpful in debugging a specific `npm` issue as you can run
a command multiple times with different config values and then diff all the log files


Log files will be removed from the `logs-dir` when the number of log files exceeds `logs-max`, with the oldest logs being deleted first


To turn off logs completely set `--logs-max=0`


### Setting Log Levels

#### `loglevel`

`loglevel` is a global argument/config that can be set to determine the type of information to be displayed


##### Aliases

The log levels listed above have various corresponding aliases, including:

- `-d`: `--loglevel info`
- `--dd`: `--loglevel verbose`
- `--verbose`: `--loglevel verbose`
- `--ddd`: `--loglevel silly`
- `-q`: `--loglevel warn`
- `--quiet`: `--loglevel warn`
- `-s`: `--loglevel silent`
- `--silent`: `--loglevel silent`

#### `foreground-scripts`

The `npm` CLI began hiding the output of lifecycle scripts for `npm install` as of `v7`
 Notably, this means you will not see logs/output from packages that may be using ""install scripts"" to display information back to you or from your own project's scripts defined in `package
json`
 If you'd like to change this behavior & log this output you can set `foreground-scripts` to `true`


### Timing Information

The [`--timing` config](/using-npm/config#timing) can be set which does a few
things:

1
 For
example, the performance might be affected by writing to the terminal


### Registry Response Headers

#### `npm-notice`

The `npm` CLI reads from & logs any `npm-notice` headers that are returned from the configured registry
 This mechanism can be used by third-party registries to provide useful information when network-dependent requests occur


This header is not cached, and will not be logged if the request is served from the cache


### See also

* [config](/using-npm/config)

---
title: orgs
section: 7
description: Working with Teams & Orgs
---

### Description

There are three levels of org users:

1
 Super admin, controls billing & adding people to the org

2
 Team admin, manages team membership & package access

3
 Developer, works on packages they are given access to


The team admin is the person who manages team creation, team membership, and package access for teams
 The team admin grants package access to teams, not individuals


The developer will be able to access packages based on the teams they are on
 Access is either read-write or read-only


There are two main commands:

1
 `npm team` see [npm team](/commands/npm-team) for more details
2


* Create a new team:

```bash
npm team create <org:team>
```

* Add members to that team:

```bash
npm team add <org:team> <user>
```

### Publish a package and adjust package access

* In package directory, run

```bash
npm init --scope=<org>
```
to scope it for your org & publish as usual

* Grant access:  

```bash
npm access grant <read-only|read-write> <org:team> [<package>]
```

* Revoke access:

```bash
npm access revoke <org:team> [<package>]
```

### Monitor your package access

* See what org packages a team member can access:

```bash
npm access ls-packages <org> <user>
```

* See packages available to a specific team:

```bash
npm access ls-packages <org:team>
```

* Check which teams are collaborating on a package:

```bash
npm access ls-collaborators <pkg>
```

### See also

* [npm team](/commands/npm-team)
* [npm access](/commands/npm-access)
* [npm scope](/using-npm/scope)

---
title: package-spec
section: 7
description: Package name specifier
---

### Description

Commands like `npm install` and the dependency sections in the
`package
json` use a package name specifier
  This can be many different
things that all refer to a ""package""


### Package name

* `[<@scope>/]<pkg>`
* `[<@scope>/]<pkg>@<tag>`
* `[<@scope>/]<pkg>@<version>`
* `[<@scope>/]<pkg>@<version range>`

Refers to a package by name, with or without a scope, and optionally
tag, version, or version range


Examples:
* `npm`
* `@npmcli/arborist`
* `@npmcli/arborist@latest`
* `npm@6
1`
* `npm@^4
0
0`

### Aliases

* `<alias>@npm:<name>`

Primarily used by commands like `npm install` and in the dependency
sections in the `package
json`, this refers to a package by an alias

The `<alias>` is the name of the package as it is reified in the
`node_modules` folder, and the `<name>` refers to a package name as
found in the configured registry


Examples:
* `semver:@npm:@npmcli/semver-with-patch`
* `semver:@npm:semver@7
2`
* `semver:@npm:semver@legacy`

### Folders

* `<folder>`

This refers to a package on the local filesystem
  Specifically this is
a folder with a `package
json` file in it
  This *should* always be
prefixed with a `/` or `
/` (or your OS equivalent) to reduce confusion
/my-package`
* `/opt/npm/my-package`

### Tarballs

* `<tarball file>`
* `<tarball url>`

Examples:

* `
/my-package
tgz`
* `https://registry
npmjs
org/semver/-/semver-1
0
0
  You can specify a
git tag, branch, or other git ref by appending `#ref`


Examples:

* `https://github
com/npm/cli
com/npm/cli#v6
0
im/npm-package-arg)
* [scope](/using-npm/scope)
* [config](/using-npm/config)

---
title: registry
section: 7
description: The JavaScript Package Registry
---

### Description

To resolve packages by name and version, npm talks to a registry website
that implements the CommonJS Package Registry specification for reading
package info


npm is configured to use the **npm public registry** at
<https://registry
org> by default
com/policies/terms>
npmjs
com/registry>


The registry URL used is determined by the scope of the package (see
[`scope`](/using-npm/scope)
 If no scope is specified, the default registry is
used, which is supplied by the [`registry` config](/using-npm/config#registry)
parameter

Authentication configuration such as auth tokens and certificates are configured
specifically scoped to an individual registry


### Does npm send any information about me back to the registry?

Yes


When making requests of the registry npm adds two headers with information
about your environment:

* `Npm-Scope` – If your project is scoped, this header will contain its
  scope
 In the future npm hopes to build registry features that use this
  information to allow you to customize your experience for your
  organization
 If you'd like to learn more you may find
  the [original PR](https://github
com/npm/npm-registry-client/pull/129)
  interesting


The npm registry does not try to correlate the information in these headers
with any authenticated accounts that may be used in the same requests


### How can I prevent my package from being published in the official registry?

Set `""private"": true` in your `package


See [`package


### Where can I find my (and others') published packages?

<https://www


```bash
sudo npm uninstall npm -g
```

Or, if that fails, get the npm source code, and do:

```bash
sudo make uninstall
```

### More Severe Uninstalling

Usually, the above instructions are sufficient
  That will remove
npm, but leave behind anything you've installed
  Local
installs are completely contained within a project's `node_modules`
folder
  If
you configured node with a different `--prefix`, or installed npm with a
different prefix setting, then adjust the paths accordingly, replacing
`/usr/local` with your install prefix


To remove everything npm-related manually:

```bash
rm -rf /usr/local/{lib/node{,/
npm},bin,share/man} | grep npm
```

Prior to version 0
  To track those down, you can do the following:

```bash
find /usr/local/{lib/node,bin} -exec grep -l npm \{\} \; ;
```

### See also

* [npm uninstall](/commands/npm-uninstall)
* [npm prune](/commands/npm-prune)

---
title: scope
section: 7
description: Scoped packages
---

### Description

All npm packages have a name
 Unscoped packages can depend on scoped packages and
vice versa
 The npm client is backwards-compatible with unscoped registries,
so it can be used to work with scoped and unscoped registries at the same time
g
 if your other packages are installed in `node_modules/packagename`,
scoped modules will be installed in `node_modules/@myorg/packagename`
 The scope
folder (`@myorg`) is simply the name of the scope preceded by an `@` symbol, and can
contain any number of scoped packages
json`:

```json
""dependencies"": {
  ""@myorg/mypackage"": ""^1
0""
}
```

Note that if the `@` symbol is omitted, in either case, npm will instead attempt to
install from GitHub; see [`npm install`](/commands/npm-install)


### Requiring scoped packages

Because scoped packages are installed into a scope folder, you have to
include the name of the scope when requiring them in your code, e
g


### Publishing scoped packages

Scoped packages can be published from the CLI as of `npm@2` and can be
published to any registry that supports them, including the primary npm
registry
0 or better, the primary npm registry
**does** support scoped packages
)

If you wish, you may associate a scope with a registry; see below
com prior to trying to publish


Scoped packages are not public by default
  You do not need to do this when publishing new versions of
an existing scoped package


#### Publishing private scoped packages to the npm registry

To publish a private scoped package to the npm registry, you must have
an [npm Private Modules](https://docs
npmjs


### Associating a scope with a registry

Scopes can be associated with a separate registry
com/features/packages) or the open source [Verdaccio](https://verdaccio
org)
project


You can associate a scope with a registry at login, e
g


```bash
npm login --registry=http://reg
example
com --scope=@myco
```

Scopes have a many-to-one relationship with registries: one registry can
host multiple scopes, but a scope only ever points to one registry


You can also associate a scope with a registry using `npm config`:

```bash
npm config set @myco:registry=http://reg
example
com
```

Once a scope is associated with a registry, any `npm install` for a package
with that scope will request packages from that registry instead
 Any
`npm publish` for a package name that contains the scope will be published to
that registry instead


### See also

* [npm install](/commands/npm-install)
* [npm publish](/commands/npm-publish)
* [npm access](/commands/npm-access)
* [npm registry](/using-npm/registry)

---
title: scripts
section: 7
description: How npm handles the ""scripts"" field
---

### Description

The `""scripts""` property of your `package
 `premyscript`,
`myscript`, `postmyscript`)


```json
{
  ""scripts"": {
    ""precompress"": ""{{ executes BEFORE the `compress` script }}"",
    ""compress"": ""{{ run command to compress files }}"",
    ""postcompress"": ""{{ executes AFTER `compress` script }}""
  }
}
```

In this example `npm run compress` would execute these scripts as
described


### Life Cycle Scripts

There are some special life cycle scripts that happen only in certain
situations
 These scripts happen in addition to the `pre<event>`, `post<event>`, and
`<event>` scripts
0`)
* Runs BEFORE the package is packed, i
e


* As of `npm@7` these scripts run in the background

  To see the output, run with: `--foreground-scripts`
 See below for more info


**prepublishOnly**
* Runs BEFORE the package is prepared and packed, ONLY on `npm publish`


**prepack**
* Runs BEFORE a tarball is packed (on ""`npm pack`"", ""`npm publish`"", and when installing a git dependency)

* NOTE: ""`npm run pack`"" is NOT the same as ""`npm pack`""
 ""`npm run pack`"" is an arbitrary user defined script name, where as, ""`npm pack`"" is a CLI defined command


**postpack**
* Runs AFTER the tarball has been generated but before it is moved to its final destination (if at all, publish does not save the tarball locally)

**dependencies**
* Runs AFTER any operations that modify the `node_modules` directory IF changes occurred
71`, the npm CLI has run the `prepublish` script for both `npm publish` and `npm install`, because it's a convenient way to prepare a package for use (some common use cases are described in the section below)
  It has also turned out to be, in practice, [very confusing](https://github
  As of `npm@4
 A _new_ event, `prepublishOnly` has been added as a transitional strategy to allow users to avoid the confusing behavior of existing npm versions and only run on `npm publish` (for instance, running the tests one last time to ensure they're in good shape)


See <https://github
com/npm/npm/issues/10074> for a much lengthier justification, with further reading, for this change


**Use Cases**

If you need to perform operations on your package before it is used, in a way that is not dependent on the operating system or architecture of the target system, use a `prepublish` script

* You don't need to include minifiers in your package, reducing
  the size for your users

* You don't need to rely on your users having `curl` or `wget` or
  other system tools on the target machines


#### Dependencies

The `dependencies` script is run any time an `npm` command causes changes to the `node_modules` directory
json` and `package-lock


### Life Cycle Operation Order

#### [`npm cache add`](/commands/npm-cache)

* `prepare`

#### [`npm ci`](/commands/npm-ci)

* `preinstall`
* `install`
* `postinstall`
* `prepublish`
* `preprepare`
* `prepare`
* `postprepare`

 These all run after the actual installation of modules into
 `node_modules`, in order, with no internal actions happening in between

#### [`npm diff`](/commands/npm-diff)

* `prepare`

#### [`npm install`](/commands/npm-install)

These also run when you run `npm install -g <pkg-name>`

* `preinstall`
* `install`
* `postinstall`
* `prepublish`
* `preprepare`
* `prepare`
* `postprepare`

If there is a `binding
js` file in the root of your package, then npm
will default the `start` command to `node server
js`
  `prestart` and
`poststart` will still run in this case


#### [`npm stop`](/commands/npm-stop)

* `prestop`
* `stop`
* `poststop`

#### [`npm test`](/commands/npm-test)

* `pretest`
* `test`
* `posttest`

#### [`npm version`](/commands/npm-version)

* `preversion`
* `version`
* `postversion`

#### A Note on a lack of [`npm uninstall`](/commands/npm-uninstall) scripts

While npm v6 had `uninstall` lifecycle scripts, npm v7 does not


Due to the lack of necessary context, `uninstall` lifecycle scripts are not implemented and will not function


### User

When npm is run as root, scripts are always run with the effective uid
and gid of the working directory owner


### Environment

Package scripts run in an environment where many pieces of information
are made available regarding the setup of npm and the current state of
the process


#### path

If you depend on modules that define executable scripts, like test
suites, then those executables will be added to the `PATH` for
executing the scripts
  So, if your package
json has this:

```json
{
  ""name"" : ""foo"",
  ""dependencies"" : {
    ""bar"" : ""0
/test""
  }
}
```

then you could run `npm start` to execute the `bar` script, which is
exported into the `node_modules/
bin` directory on `npm install`


#### package
json vars

The package
2
5""}` in your
package
  You can access these variables
in your code with `process
env
npm_package_name` and
`process
npm_package_version`, and so on for other fields


See [`package


#### current lifecycle event

Lastly, the `npm_lifecycle_event` environment variable is set to
whichever stage of the cycle is being executed


Objects are flattened following this format, so if you had
`{""scripts"":{""install"":""foo
env
json contains this:

```json
{
  ""scripts"" : {
    ""install"" : ""scripts/install
js""
  }
}
```

then `scripts/install
js` will be called for the install and post-install
stages of the lifecycle


If you want to run a make command, you can do so
  This works just
fine:

```json
{
  ""scripts"" : {
    ""preinstall"" : ""
/configure"",
    ""install"" : ""make && make install"",
    ""test"" : ""make test""
  }
}
```

### Exiting

Scripts are run by passing the line as a script argument to `sh`


Note that these script files don't have to be Node
js or even
JavaScript programs

  If the failure is minor or only will prevent some optional features, then
  it's better to just print a warning and exit successfully

* Try not to use scripts to do what npm can do for you
  Read through
  [`package
json`](/configuring-npm/package-json) to see all the things that you can specify and enable
  by simply describing your package appropriately
  In general, this
  will lead to a more robust and consistent state
  The user
  probably set it up that way for a reason

* Don't prefix your script commands with ""sudo""
  If root permissions
  are required for some reason, then it'll fail with that error, and
  the user will sudo the npm command in question

* Don't use `install`
 You should almost never have to explicitly set a
  preinstall or install script
 The only valid use of `install` or `preinstall`
  scripts is for compilation which must be done on the target architecture


### See Also

* [npm run-script](/commands/npm-run-script)
* [package


We also refer to these packages being auto-symlinked during `npm install` as a
single **workspace**, meaning it's a nested package within the current local
file system that is explicitly defined in the [`package
json`](/configuring-npm/package-json#workspaces)
`workspaces` configuration


### Defining workspaces

Workspaces are usually defined via the `workspaces` property of the
[`package
` that contains a folder named `packages/a` that itself contains
a `package
json` inside it, defining a Node
js package, e
g:

```


+-- package
json
```

The expected result once running `npm install` in this current working
directory `
` is that the folder `packages/a` will get symlinked to the
`node_modules` folder of the current working dir


Below is a post `npm install` example, given that same previous example
structure of files and folders:

```


+-- node_modules
|  `-- a -> 

json
```

### Getting started with workspaces

You may automate the required steps to define a new workspace using
[npm init](/commands/npm-init)
 For example in a project that already has a
`package
json
   `-- b
       `-- package
json
```

If you want to add a dependency named `abbrev` from the registry as a
dependency of your workspace **a**, you may use the workspace config to tell
the npm installer that package should be added as a dependency of the provided
workspace:

```
npm install abbrev -w a
```

Note: other installing commands such as `uninstall`, `ci`, etc will also
respect the provided `workspace` configuration
js handles module resolution](https://nodejs
org/dist/latest-v14
html#modules_all_together) it's possible to consume any defined workspace
by its declared `package
js script that will require the workspace `a`
example module, e
g:

```
// 
/packages/a/index
/lib/index
js
const moduleA = require('a')
console


### Running commands in the context of workspaces

You can use the `workspace` configuration option to run commands in the context
of a configured workspace

Additionally, if your current directory is in a workspace, the `workspace`
configuration is implicitly set, and `prefix` is set to the root workspace
g:

```


+-- package
json
`-- packages
   +-- a
   |   `-- package
json
   `-- b
       `-- package
 e
g:

```
npm run test --workspace=a
```

You could also run the command within the workspace
/packages/a/package
json` file


Please note that you can also specify this argument multiple times in the
command-line in order to target multiple workspaces, e
g:

```
npm run test --workspaces
```

Will run the `test` script in both `
/packages/a` and `
json`

```
{
  ""workspaces"": [ ""packages/a"", ""packages/b"" ]
}
```

Order of run is different with:

```
{
  ""workspaces"": [ ""packages/b"", ""packages/a"" ]
}
```

### Ignoring missing scripts

It is not required for all of the workspaces to implement scripts run with the `npm run` command


```
npm run test --workspaces --if-present
```

### See also

* [npm install](/commands/npm-install)
* [npm publish](/commands/npm-publish)
* [npm run-script](/commands/npm-run-script)
* [config](/using-npm/config)






























Copyright (c) 2015, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies
 IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies


# @npmcli/arborist

[![npm version](https://img
svg)](https://npm
im/@npmcli/arborist)
[![license](https://img
shields
im/@npmcli/arborist)
[![CI - @npmcli/arborist](https://github
com/npm/cli/actions/workflows/ci-npmcli-arborist
com/npm/cli/actions/workflows/ci-npmcli-arborist
yml)

Inspect and manage `node_modules` trees
githubusercontent
svg?sanitize=true)

There's more documentation [in the docs
folder](https://github
com/npm/cli/tree/latest/workspaces/arborist/docs)


## USAGE

```js
const Arborist = require('@npmcli/arborist')

const arb = new Arborist({
  // options object

  // where we're doing stuff
  defaults to cwd
npmjs
org',

  // scopes can be mapped to a different registry
  '@foo:registry': 'https://registry
foo
com/',

  // Auth can be provided in a couple of different ways
  If none are
  // provided, then requests are anonymous, and private packages will 404


  // Safest: a bearer token provided by a registry:
  // 1
 an npm auth token, used with the default registry
  token: 'deadbeefcafebad',
  // 2
 an alias for the same thing:
  _authToken: 'deadbeefcafebad',

  // insecure options:
  // 3
 username and base64 encoded password
  username: 'isaacs',
  password: 'bm90IG15IHJlYWwgcGFzc3dvcmQ=',

  // auth configs can also be scoped to a given registry with this
  // rather unusual pattern:
  '//registry
foo
com:token': 'blahblahblah',
  '//basic
auth
com:_auth': 'aXNhYWNzOm5vdCBteSByZWFsIHBhc3N3b3Jk',
  '//registry
foo
com:always-auth': true,
})

// READING

// returns a promise
then(tree => {
  // tree is also stored at arb
virtualTree
})

// read just what the package-lock
lock file, but that's only relevant
// when building the ideal tree
loadVirtual()
then(tree => {
  // tree is also stored at arb
virtualTree
  // now arb
virtualTree is loaded
  // this fails if there's no package-lock
json in the folder
  // note that loading this way should only be done if there's no
  // node_modules folder
})

// OPTIMIZING AND DESIGNING

// build an ideal tree from the package
json and various lockfiles
buildIdealTree(options)

  // options can be:
  // rm: array of package names to remove at top level
  // add: Array of package specifiers to add at the top level
  Each of
  //   these will be resolved with pacote
manifest if the name can't be
  //   determined from the spec
  (Eg, `github:foo/bar` vs `foo@somespec`
dependencies) unless a different saveType is specified

  //   - null (default) Wherever they exist already, or 'dependencies'
  //   - prod: definitely in 'dependencies'
  //   - optional: in 'optionalDependencies'
  //   - dev: devDependencies
  //   - peer: save in peerDependencies, and remove any optional flag from
  //     peerDependenciesMeta if one exists
  //   - peerOptional: save in peerDependencies, and add a
  //     peerDepsMeta[name]
optional flag
  // saveBundle: add newly added deps to the bundleDependencies list
  // update: Either `true` to just go ahead and update everything, or an
  //   object with any or all of the following fields:
  //   - all: boolean
  set to true to just update everything
  //   - names: names of packages update (like `npm update foo`)
  // prune: boolean, default true
  Defaults to false, ie,
  //   always try to get the latest and greatest deps

  // legacyBundling: Nest every dep under the node requiring it, npm v2 style

  //   No unnecessary deduplication
  Default false


  // At the end of this process, arb
idealTree is set
reify({
  // write the lockfile(s) back to disk, and package
json with any updates
  // defaults to 'true'
  save: true,
})
then(() => {
  // node modules has been written to match the idealTree
})
```

## DATA STRUCTURES

A `node_modules` tree is a logical graph of dependencies overlaid on a
physical tree of folders


A `Node` represents a package folder on disk, either at the root of the
package, or within a `node_modules` folder
parent` reference to the containing
folder, and `node
children` map of nodes within its `node_modules`
folder, where the key in the map is the name of the folder in
`node_modules`, and the value is the child node


A node without a parent is a top of tree


A `Link` represents a symbolic link to a package on disk
  This can be a
symbolic link to a package folder within the current tree, or elsewhere on
disk
  The `link
  Links differ
from Nodes in that dependencies are resolved from the _target_ location,
rather than from the link location
  Each node has an `edgesIn`
set, and an `edgesOut` map
  `edge
from` is a reference to the
node that has the dependency, and `edge


As nodes are moved around in the tree, the graph edges are automatically
updated to point at the new module resolution targets
from`, `edge
name`, and `edge
spec` are immutable; `edge
to` is
updated automatically when a node's parent changes
  A `Node` refers
to a package folder, which may have children in `node_modules`
parent` Physical parent node in the tree
  Null if node is top of tree
parent` will automatically update `node
location` and all
    graph edges affected by the move


* `node
meta` A `Shrinkwrap` object which looks up `resolved` and
  `integrity` values for all modules in this tree
  Only relevant on `root`
  nodes
children` Map of packages located in the node's `node_modules`
  folder

* `node
json` file

* `node
path` File path to this package
  If the node is _not_ a
  link, then this matches `node
realpath`

* `node

* `node
location` A slash-normalized relative path from the root node to
  this node's path

* `node
isRoot` True if this node is a root node
  If not assigned to some
  other value, resolves to the node itself
  (Ie, the root node's `root`
  property refers to itself

* `node
top` The top node in this node's tree
  This will be equal to
  `node
root` for simple trees, but link targets will frequently be outside
  of (or nested somewhere within) a `node_modules` hierarchy, and so will
  have a different `top`
optional`, `node
devOptional`, `node
peer`, Indicators
  as to whether this node is a dev, optional, and/or peer dependency
  See **Package Dependency Flags** below for
  explanations

* `node
edgesOut` Edges in the dependency graph indicating nodes that this
  node depends on, which resolve its dependencies

* `node


* `extraneous` True if this package is not required by any other for any
  reason


* `node
resolve(name)`  Identify the node that will be returned when code
  in this package runs `require(name)`

* `node


### class Link

Link objects represent a symbolic link within the `node_modules` folder

They have most of the same properties and methods as `Node` objects, with a
few differences


* `link
target` A Node object representing the package that the link
  references
  If it's outside of the tree, then it will be
  treated as the top of its own tree
isLink` Always true

* `link
children` This is always an empty map, since links don't have their
  own children directly
  As nodes are moved
within the tree, Edges automatically update to point to the appropriate
location


* `new Edge({ from, type, name, spec })`  Creates a new edge with the
  specified fields
  After instantiation, none of the fields can be
  changed directly
from` The node that has the dependency
  One of `'prod'`, `'dev'`, `'peer'`,
  or `'optional'`
  Ie, the key in the
  relevant `package
json` dependencies object
  This can be a version,
  range, tag name, git url, or tarball URL

* `edge
valid` True if `edge
error` A string indicating the type of error if there is a problem,
  or `null` if it's valid
  Values, in order of precedence:
    * `DETACHED` Indicates that the edge has been detached from its
      `edge
from` node, typically because a new edge was created when a
      dependency specifier was modified
  Note that this is
      _not_ set for unmet dependencies of the `optional` type
  This violates the `peerDependency` contract, because it
      means that the dependency is not a peer
reload()` Re-resolve to find the appropriate value for `edge

  Called automatically from the `Node` class when the tree is mutated


### Package Dependency Flags

The dependency type of a node can be determined efficiently by looking at
the `dev`, `optional`, and `devOptional` flags on the node object


```
| extraneous | peer | dev | optional | devOptional | meaning             | prune?            |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |      |     |          |             | production dep      | never             |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|     X      | N/A  | N/A |   N/A    |     N/A     | nothing depends on  | always            |
|            |      |     |          |             | this, it is trash   |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |      |  X  |          |      X      | devDependency, or   | if pruning dev    |
|            |      |     |          | not in lock | only depended upon  |                   |
|            |      |     |          |             | by devDependencies  |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |      |     |    X     |      X      | optionalDependency, | if pruning        |
|            |      |     |          | not in lock | or only depended on | optional          |
|            |      |     |          |             | by optionalDeps     |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |      |  X  |    X     |      X      | Optional dependency | if pruning EITHER |
|            |      |     |          | not in lock | of dep(s) in the    | dev OR optional   |
|            |      |     |          |             | dev hierarchy       |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |      |     |          |      X      | BOTH a non-optional | if pruning BOTH   |
|            |      |     |          |   in lock   | dep within the dev  | dev AND optional  |
|            |      |     |          |             | hierarchy, AND a    |                   |
|            |      |     |          |             | dep within the      |                   |
|            |      |     |          |             | optional hierarchy  |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |  X   |     |          |             | peer dependency, or | if pruning peers  |
|            |      |     |          |             | only depended on by |                   |
|            |      |     |          |             | peer dependencies   |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |  X   |  X  |          |      X      | peer dependency of  | if pruning peer   |
|            |      |     |          | not in lock | dev node hierarchy  | OR dev deps       |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |  X   |     |    X     |      X      | peer dependency of  | if pruning peer   |
|            |      |     |          | not in lock | optional nodes, or  | OR optional deps  |
|            |      |     |          |             | peerOptional dep    |                   |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |  X   |  X  |    X     |      X      | peer optional deps  | if pruning peer   |
|            |      |     |          | not in lock | of the dev dep      | OR optional OR    |
|            |      |     |          |             | hierarchy           | dev               |
|------------+------+-----+----------+-------------+---------------------+-------------------|
|            |  X   |     |          |      X      | BOTH a non-optional | if pruning peers  |
|            |      |     |          |   in lock   | peer dep within the | OR:               |
|            |      |     |          |             | dev hierarchy, AND  | BOTH optional     |
|            |      |     |          |             | a peer optional dep | AND dev deps      |
+------------+------+-----+----------+-------------+---------------------+-------------------+
```

* If none of these flags are set, then the node is required by the
  dependency and/or peerDependency hierarchy
  It should not be pruned

* If _both_ `node
optional` are set, then the node is an
  optional dependency of one of the packages in the devDependency
  hierarchy
dev` is set, but `node

* If `node
dev` is not, then the node is
  required in the optionalDependency hierarchy
  It should be pruned if
  optional dependencies are being removed

* If `node
  It should be pruned if
  _both_ dev and optional dependencies are being removed


Note: `devOptional` is only set in the shrinkwrap/package-lock file if
_neither_ `dev` nor `optional` are set, as it would be redundant
 This script is currently not part of the public API and is subject to breaking changes outside of major version bumps


To see the usage run:

```
npx @npmcli/arborist --help
```




# `@npmcli/config`

Configuration management for the npm cli
im/npmconf), and the code that once lived in npm's
`lib/config/` folder


It does the management of configuration files that npm uses, but
importantly, does _not_ define all the configuration defaults or types, as
those parts make more sense to live within the npm CLI itself

- The `project` config file is loaded based on the local prefix (which can
  only be set by the CLI config options, and otherwise defaults to a walk
  up the folder tree to the first parent containing a `node_modules`
  folder, `package
json` file
)
- The `userconfig` value, as set by the environment and CLI (defaulting to
  `~/

- A `builtin` config, read from a `npmrc` file in the root of the npm
  project itself, overrides all defaults


The resulting hierarchy of configs:

- CLI switches
  These are
  parsed by [`nopt`](http://npm
im/nopt), which is not a great choice, but
  it's the one that npm has used forever, and changing it will be
  difficult

- Environment variables
  There is no way at this time to modify this prefix
)
- INI-formatted userconfig file
  The `globalconfig` value at any of those
  levels can override this

- INI-formatted builtin config file
  eg `some-key = some-value` in
  `/usr/local/lib/node_modules/npm/npmrc`
  This is not configurable, and
  is determined by looking in the `npmPath` folder


## USAGE

```js
const Config = require('@npmcli/config')
const { shorthands, definitions, flatten } = require('@npmcli/config/lib/definitions')

const conf = new Config({
  // path to the npm module being run
  npmPath: resolve(__dirname, '

'),
  definitions,
  shorthands,
  flatten,
  // optional, defaults to process
argv,
  // optional, defaults to process
execPath
  execPath: process
platform,
  // optional, defaults to process
cwd()
  cwd: process
cwd(),
})

// emits log events on the process object
// see `proc-log` for more info
process



load()
then(() => {
  conf
validate()
  console
error('error loading configs!', er)
})
```

## API

The `Config` class is the sole export


```js
const Config = require('@npmcli/config')
```

### static `Config


### constructor `new Config(options)`

Options:

- `types` Types of all known config values
  Note that some are effectively
  given semantic value in the config loading process itself

- `defaults` Default values for each of the known configuration keys

  These should be defined for all configs given a type, and must be valid

- `npmPath` The path to the `npm` module, for loading the `builtin` config
  file
cwd()`, used for inferring the
  `localPrefix` and loading the `project` config

- `platform` Optional, defaults to `process
platform`

- `execPath` Optional, defaults to `process
  Used to infer the
  `globalPrefix`

- `env` Optional, defaults to `process
  Source of the environment
  variables for configuration

- `argv` Optional, defaults to `process
  Source of the CLI options
  used for configuration


Returns a `config` object, which is not yet loaded


Fields:

- `config
globalPrefix` The prefix for `global` operations

- `config
  Set by the
  `prefix` config value on the CLI only, or defaults to either the `cwd` or
  its nearest ancestor containing a `node_modules` folder or `package
sources` A read-only `Map` of the file (or a comment, if no file
  found, or relevant) to the config level loaded from that source
data` A `Map` of config level to `ConfigData` objects
  These
  objects should not be modified directly under any circumstances

  - `source` The source where this data was loaded from

  - `raw` The raw data used to generate this config data, as it was parsed
    initially from the environment, config file, or CLI options

  - `data` The data object reflecting the inheritance of configs up to this
    point in the chain

- `config
list` A list sorted in priority of all the config data objects in
  the prototype chain
  `config

- `cwd` The `cwd` param
- `env` The `env` param
- `argv` The `argv` param
- `execPath` The `execPath` param
- `platform` The `platform` param
- `defaults` The `defaults` param
- `shorthands` The `shorthands` param
- `types` The `types` param
- `npmPath` The `npmPath` param
- `globalPrefix` The effective `globalPrefix`
- `localPrefix` The effective `localPrefix`
- `prefix` If `config
homedir()`

- `loaded` A boolean indicating whether or not configs are loaded
- `valid` A getter that returns `true` if all the config objects are valid

  Any data objects that have been modified with `config
set(


valid` is read


### `config
load()`

Load configuration from the various sources of information


Returns a `Promise` that resolves when configuration is loaded, and fails
if a fatal error is encountered


### `config


Returns `null` if the key is not set
get(key, where = 'cli')`

Load the given key from the config stack


### `config


### `config
delete(key, where = 'cli')`

Delete the configuration key from the specified level in the config stack
validate(where)`

Verify that all known configuration options are set to valid values, and
log a warning if they are invalid


Invalid auth options will cause this method to throw an error with a `code`
property of `ERR_INVALID_AUTH`, and a `problems` property listing the specific
concerns with the current configuration


Returns `true` if all configs are valid


Note that it's usually enough (and more efficient) to just check
`config
repair(problems)`

Accept an optional array of problems (as thrown by `config
validate()`) and
perform the necessary steps to resolve them
 If no problems are provided,
this method will call `config
validate()` internally to retrieve them
save('user')` in order to persist the changes










<!-- This file is automatically added by @npmcli/template-oss
 -->

ISC License

Copyright npm, Inc


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS






# @npmcli/installed-package-contents

Get the list of files installed in a package in node_modules, including
bundled dependencies


It's sort of the reflection of [npm-packlist](http://npm
im/npm-packlist),
but for listing out the _installed_ files rather than the files that _will_
be installed
  This is of course a much simpler operation, because we don't
have to handle ignore files or package
json `files` lists


## USAGE

```js
// programmatic usage
const pkgContents = require('@npmcli/installed-package-contents')

pkgContents({ path: 'node_modules/foo', depth: 1 })

  // If the folder doesn't exist, this returns an empty array

})

pkgContents({ path: 'node_modules/foo', depth: Infinity })

})
```

As a CLI:

```bash
$ installed-package-contents node_modules/bundle-some -d1
node_modules/
bin/some
node_modules/bundle-some/package
json
node_modules/bundle-some/node_modules/@scope/baz
node_modules/bundle-some/node_modules/

                      Default=1
  -h --help           Show this usage information
```

## OPTIONS

* `depth` Number, default `1`
  How deep to traverse through folders to get
    contents
  Typically you'd want to set this to either `1` (to get the
    surface files and folders) or `Infinity` (to get all files), but any
    other positive number is supported as well

* `path` Required
bin` that the
package caused to be installed


An empty or missing package folder will return an empty array
  Empty
directories _within_ package contents are listed, even if the `depth`
argument would cause them to be traversed into


## CAVEAT

If using this module to generate a list of files that should be recursively
removed to clear away the package, note that this will leave empty
directories behind in certain cases:

- If all child packages are bundled dependencies, then the
    `node_modules` folder will remain
bin`
    folder will remain


In the interest of speed and algorithmic complexity, this module does _not_
do a subsequent readdir to see if it would remove all directory entries,
though it would be easier to look at if it returned `node_modules` or
`
bin` in that case rather than the contents


Since the primary use case is to delete a package's contents so that they
can be re-filled with a new version of that package, this caveat does not
pose a problem
  Empty directories are already ignored by both npm and git




<!-- This file is automatically added by @npmcli/template-oss
 Do not edit
 -->

ISC License

Copyright npm, Inc


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE
com&gt;

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the ""Software""), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE











ISC License

Copyright (c) npm, Inc


Permission to use, copy, modify, and/or distribute this software for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE COPYRIGHT HOLDER DISCLAIMS
ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS




















# color-support

A module which will endeavor to guess your terminal's level of color
support
org/isaacs/color-support
io/repos/github/isaacs/color-support/badge
io/github/isaacs/color-support?branch=master)

This is similar to `supports-color`, but it does not read
`process
argv`


1
 If not in a node environment, not supported
 If stdout is not a TTY, not supported, unless the `ignoreTTY`
   option is set
 If using Tmux, then support 256 colors
 Handle continuous-integration servers
  If `CI` or
   `TEAMCITY_VERSION` are set in the environment, and `TRAVIS` is not
   set, then color is not supported, unless `ignoreCI` option is set
  These terminals support
   16m colors:

    - `iTerm
app` version 3
 Make a guess based on the `TERM` environment variable
  Any screen, xterm, vt100,
   color, ansi, cygwin, or linux `TERM` will get 16 colors


9
 If `COLORTERM` environment variable is set, then support 16 colors


## USAGE

```javascript
var testColorSupport = require('color-support')
var colorSupport = testColorSupport(/* options object */)

if (!colorSupport) {
  console
has16m) {
  console
log('\x1b[38;2;102;194;255m16m colors\x1b[0m')
} else if (colorSupport
has256) {
  console
hasBasic) {
  console
log('\x1b[31mbasic colors\x1b[0m')
} else {
  console
log('this is impossible, but colors are not supported')
}
```

If you don't have any options to set, you can also just look at the
flags which will all be set on the test function itself
  (Of course,
this doesn't return a falsey value when colors aren't supported, and
doesn't allow you to set options
)

```javascript
var colorSupport = require('color-support')

if (colorSupport
has16m) {
  console
log('\x1b[38;2;102;194;255m16m colors\x1b[0m')
} else if (colorSupport
has256) {
  console
log('\x1b[38;5;119m256 colors\x1b[0m')
} else if (colorSupport
log('\x1b[31mbasic colors\x1b[0m')
} else {
  console


* ignoreTTY - default false

* ignoreCI - default false
 Defaults to `process

* stream - Stream for `isTTY` check
stdout`

* term - String for `TERM` checking
 Defaults to `env
TERM`

* alwaysReturn - default false

* level - A number from 0 to 3
  This will return a result for the
  specified level
  This is useful if you want to be able to set the
  color support level explicitly as a number in an environment
  variable or config, but then use the object flags in your program

  Except for `alwaysReturn` to return an object for level 0, all other
  options are ignored, since no checking is done if a level is
  explicitly set


## Return Value

If no color support is available, then `false` is returned by default,
unless the `alwaysReturn` flag is set to `true`
  This is so that the
simple question of ""can I use colors or not"" can treat any truthy
return as ""yes""


## Credits

This is a spiritual, if not actual, fork of
[supports-color](http://npm
im/supports-color) by the ever prolific
[Sindre Sorhus](http://npm









# which

Like the unix `which` utility
  Does not cache the results, so `hash -r` is not
needed when the PATH changes
then(resolvedPath => { 

 })
catch(er => { 


 not found 



which('node', { path: someOtherPath }, function (er, resolved) {
  if (er)
    throw er
  console
log('found at %j', resolved)
})
```

## CLI USAGE

Same as the BSD `which(1)` binary


```
usage: which [-as] program 



```

## OPTIONS

You may pass an options object as the second argument

- `pathExt`: Use instead of the `PATHEXT` environment variable

- `all`: Return all matches, instead of just the first one
  Note that
  this means the function returns an array of strings instead of a
  single string







# cssesc [![Build status](https://travis-ci
org/mathiasbynens/cssesc
shields
svg)](https://codecov


This is a JavaScript library for [escaping text for use in CSS strings or identifiers](https://mathiasbynens
](https://mothereff
in/css-escapes)

[A polyfill for the CSSOM `CSS
escape()` method is available in a separate repository
](https://mths
be/cssescape) (In comparison, _cssesc_ is much more powerful
)

Feel free to fork if you see possible improvements!

## Installation

Via [npm](https://www
com/):

```bash
npm install cssesc
```

In a browser:

```html
<script src=""cssesc
escape('I ♥ Ruby', is_identifier: true)
```

In Sass using [`sassy-escape`](https://github
com/borodean/sassy-escape):

```bash
gem install sassy-escape
```

```scss
body {
  content: escape('I ♥ Sass', $is-identifier: true);
}
```

## API

### `cssesc(value, options)`

This function takes a value and returns an escaped version of the value where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in CSS strings or identifiers](https://mathiasbynens
be/notes/css-escapes)
 If the target is a CSS identifier rather than a CSS string, use the `isIdentifier: true` setting (see below)


The optional `options` argument accepts an object with the following options:

#### `isIdentifier`

The default value for the `isIdentifier` option is `false`
 This means that the input text will be escaped for use in a CSS string literal
 If you want to use the result as a CSS identifier instead (in a selector, for example), set this option to `true`


```js
cssesc('123a2b');
// → '123a2b'

cssesc('123a2b', {
  'isIdentifier': true
});
// → '\\31 23a2b'
```

#### `quotes`

The default value for the `quotes` option is `'single'`
 This means that any occurences of `'` in the input text will be escaped as `\'`, so that the output can be used in a CSS string literal wrapped in single quotes


```js
cssesc('Lorem ipsum ""dolor"" sit \'amet\' etc
'
// → ""Lorem ipsum \""dolor\"" sit \\'amet\\' etc
', {
  'quotes': 'single'
});
// → 'Lorem ipsum ""dolor"" sit \\\'amet\\\' etc
'
// → ""Lorem ipsum \""dolor\"" sit \\'amet\\' etc
""
```

If you want to use the output as part of a CSS string literal wrapped in double quotes, set the `quotes` option to `'double'`
', {
  'quotes': 'double'
});
// → 'Lorem ipsum \\""dolor\\"" sit \'amet\' etc
\''
// → ""\'Lorem ipsum \""dolor\"" sit \\\'amet\\\' etc
\'""

cssesc('Lorem ipsum ""dolor"" sit \'amet\' etc
""'
// → ""\""Lorem ipsum \\\""dolor\\\"" sit \'amet\' etc
\""""
```

#### `escapeEverything`

The `escapeEverything` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled)
 When enabled, all the symbols in the output will be escaped, even printable ASCII symbols


```js
cssesc('lolwat""foo\'bar', {
  'escapeEverything': true
});
// → '\\6C\\6F\\6C\\77\\61\\74\\""\\66\\6F\\6F\\\'\\62\\61\\72'
// → ""\\6C\\6F\\6C\\77\\61\\74\\\""\\66\\6F\\6F\\'\\62\\61\\72""
```

#### Overriding the default options globally

The global default settings can be overridden by modifying the `css
options` object
 This saves you from passing in an `options` object for every call to `encode` if you want to use the non-default setting
options
escapeEverything;
// → `false` by default

// Override the global default setting for `escapeEverything`:
cssesc
options
escapeEverything = true;

// Using the global default setting for `escapeEverything`, which is now `true`:
cssesc('foo © bar ≠ baz 𝌆 qux');
// → '\\66\\6F\\6F\\ \\A9\\ \\62\\61\\72\\ \\2260\\ \\62\\61\\7A\\ \\1D306\\ \\71\\75\\78'
```

### `cssesc
version`

A string representing the semantic version number


### Using the `cssesc` binary

To use the `cssesc` binary in your shell, simply install cssesc globally using npm:

```bash
npm install -g cssesc
```

After that you will be able to escape text for use in CSS strings or identifiers from the command line:

```bash
$ cssesc 'föo ♥ bår 𝌆 baz'
f\F6o \2665  b\E5r \1D306  baz
```

If the output needs to be a CSS identifier rather than part of a string literal, use the `-i`/`--identifier` option:

```bash
$ cssesc --identifier 'föo ♥ bår 𝌆 baz'
f\F6o\ \2665\ b\E5r\ \1D306\ baz
```

See `cssesc --help` for the full list of options


## Support

This library supports the Node
com/mathiasbynens/cssesc/blob/master/
babelrc)
 For a version that supports a wider variety of legacy browsers and environments out-of-the-box, [see v0
0](https://github
com/mathiasbynens/cssesc/releases/tag/v0
0)


## Author

| [![twitter/mathias](https://gravatar
be/) |

## License

This library is available under the [MIT](https://mths
be/mit) license



The MIT License (MIT)

Copyright (c) 2016 Zeit, Inc
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE






























MIT License

Copyright (c) 2020 Kasper Unn Weihe

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT










<!-- This file is automatically added by @npmcli/template-oss
 Do not edit


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE






# Glob

Match files using the patterns the shell uses
)

![a fun cartoon logo made of glob characters](https://github
png)

## Usage

Install with npm

```
npm i glob
```

**Note** the npm package name is _not_ `node-glob` that's a
different thing that was abandoned years ago
timeout(100),
})

// multiple patterns supported as well
const images = await glob(['css/*
{png,jpeg}'])

// but of course you can do that with the glob pattern also
// the sync function is the same, just returns a string[] instead
// of Promise<string[]>
const imagesAlt = globSync('{css,public}/*
{png,jpeg}')

// you can also stream them, this is a Minipass stream
const filesStream = globStream(['**/*
log'])

// construct a Glob object if you wanna do it that way, which
// allows for much faster walks if you have to look in the same
// folder multiple times
iterate(), same deal
for await (const file of g) {
  console
log('found a foo file:', file)
}
// pass a glob as the glob options to reuse its settings and caches
const g2 = new Glob('**/bar', g)
// sync iteration works as well
for (const file of g2) {
  console
log('found a bar file:', file)
}

// you can also pass withFileTypes: true to get Path objects
// these are like a Dirent, but with some more added powers
// check out http://npm
on('data', path => {
  console
log(
    'got a path object',
    path
fullpath(),
    path
name)
  )
})

// if you use stat:true and withFileTypes, you can sort results
// by things like modified time, filter by permission mode, etc

// All Stats fields will be available in that case
 Slightly
// slower, though

// For example:
const results = await glob('**', { stat: true, withFileTypes: true })

const timeSortedFiles = results
  
sort((a, b) => a
mtimeMs)
  
fullpath())

const groupReadableFiles = results
  
filter(path => path
mode & 0o040)
  
name),
    childrenIgnored: p => p
isNamed('docs'),
  },
})

// another fun use case, only return files with the same name as
// their parent folder, plus either `
ts` or `
js`
const folderNamedModules = await glob('**/*
{ts,js}', {
  ignore: {
    ignored: p => {
      const pp = p
parent
      return !(p
isNamed(pp
name + '
isNamed(pp
name + '
js'))
    },
  },
})

// find all files edited in the last hour, to do this, we ignore
// all of them that are more than an hour old
const newFiles = await glob('**', {
  // need stat so we have mtime
  stat: true,
  // only want the files, not the dirs
  nodir: true,
  ignore: {
    ignored: p => {
      return new Date() - p

  },
})
```

**Note** Glob patterns should always use `/` as a path separator,
even on Windows systems, as `\` is used to escape glob
characters
 If you wish to use `\` as a path separator _instead
of_ using it as an escape character on Windows platforms, you may
set `windowsPathsNoEscape:true` in the options
 In this mode,
special glob characters cannot be escaped, making it impossible
to match a literal `*` `?` and so on in filenames


## Command Line Interface

```
$ glob -h

Usage:
  glob [options] [<pattern> [<pattern> 


]]

Expand the positional glob expression arguments into any matching file system
paths found


  -c<command> --cmd=<command>
                         Run the command provided, passing the glob expression
                         matches as arguments


  -A --all               By default, the glob cli command will not expand any
                         arguments that are an exact match to a file on disk
ts' would match 'app/[id]
ts',
                         then on Windows powershell or cmd
ts', as expected
 However, in
                         posix shells such as bash or zsh, the shell will first
                         expand 'app/*
ts' to a list of filenames
ts' or 'app/d
ts'), which is unexpected


                         Setting '--all' prevents this behavior, causing glob to
                         treat ALL patterns as glob expressions to be expanded,
                         even if they are an exact match to a file on disk


  -a --absolute          Expand to absolute paths
  -d --dot-relative      Prepend '
/' on relative matches
  -m --mark              Append a / on any directories matched
  -x --posix             Always resolve to posix style paths, using '/' as the
                         directory separator, even on Windows


  -f --follow            Follow symlinked directories when expanding '**'
  -R --realpath          Call 'fs
 In the case
                         of an entry that cannot be resolved, the entry is
                         omitted
 This incurs a slight performance penalty, of
                         course, because of the added system calls
lstat' on all entries, whether required or not
                         to determine if it's a valid match
 That is, '*
js', matching js files
                         in all directories
'

  --nobrace              Do not expand {


 This defaults to
                         'true' on macOS and Windows platforms, and false on all
                         others
 If set 'true' on
                         case-insensitive file systems, then the walk may return
                         more or less results than expected


                         Note: to *only* match directories, append a '/' at the
                         end of the pattern


  --noext                Do not expand extglob patterns, such as '+(a|b)'
  --noglobstar           Do not expand '**' against multiple path portions
 Ie,
                         treat it as a normal '*' instead


  --windows-path-no-escape
                         Use '\' as a path separator *only*, and *never* as an
                         escape character
 If set, all '\' characters are
                         replaced with '/' in the pattern


  -D<n> --max-depth=<n>  Maximum depth to traverse from the current working
                         directory

  -C<cwd> --cwd=<cwd>    Current working directory to execute/match in
  -r<root> --root=<root> A string path resolved against the 'cwd', which is used
                         as the starting point for absolute patterns that start
                         with '/' (but not drive letters or UNC paths on
                         Windows)


                         Note that this *doesn't* necessarily limit the walk to
                         the 'root' directory, and doesn't affect the cwd
                         starting point for non-absolute patterns
 A pattern
                         containing '

' will still be able to traverse out of
                         the root directory, if it is not an actual root
                         directory on the filesystem, and any non-absolute
                         patterns will still be matched in the 'cwd'
 However, be aware that on Windows systems, a
                         pattern like 'x:/*' or '//host/share/*' will *always*
                         start in the 'x:/' or '//host/share/' directory,
                         regardless of the --root setting


  --platform=<platform>  Defaults to the value of 'process
platform' if
                         available, or 'linux' if not


  -h --help              Show this usage information
```

## `glob(pattern: string | string[], options?: GlobOptions) => Promise<string[] | Path[]>`

Perform an asynchronous glob search for the pattern(s) specified

Returns
[Path](https://isaacs
io/path-scurry/classes/PathBase)
objects if the `withFileTypes` option is set to `true`
 See below
for full options field desciptions


## `globSync(pattern: string | string[], options?: GlobOptions) => string[] | Path[]`

Synchronous form of `glob()`


Alias: `glob


Alias: `glob


Alias: `glob
iterate
sync()`, `glob
sync
iterate()`

## `globStream(pattern: string | string[], options?: GlobOptions) => Minipass<string | Path>`

Return a stream that emits all the strings or `Path` objects and
then emits `end` when completed


Alias: `glob


Brace expansion is not considered ""magic"" unless the
`magicalBraces` option is set, as brace expansion just turns one
string into an array of strings
 So a pattern like `'x{a,b}y'`
would return `false`, because `'xay'` and `'xby'` both do not
contain any magic glob characters, and it's treated the same as
if you had called it on `['xay', 'xby']`
 When
`magicalBraces:true` is in the options, brace expansion _is_
treated as a pattern having magic
 For example, it
will turn the string `'[*]'` into `*`, but it will not turn
`'\\*'` into `'*'`, because `\` is a path separator in
`windowsPathsNoEscape` mode


Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot
be escaped or unescaped


### `const g = new Glob(pattern: string | string[], options: GlobOptions)`

Options object is required


See full options descriptions below


Traversal functions can be called multiple times to run the walk
again


### `g
stream()`

Stream results asynchronously,

### `g


### `g
iterate()`

Default async iteration function


### `g
iterateSync()`

Default sync iteration function
 Returns a Generator that
iterates over the results


### `g
walk()`

Returns a Promise that resolves to the results array


### Properties

All options are stored as properties on the `Glob` object


- `opts` The options provided to the constructor


All options are optional, boolean, and false by default, unless
otherwise noted


If you are running many `glob` operations, you can pass a Glob
object as the `options` argument to a subsequent operation to
share the previously loaded cache


- `cwd` String path or `file://` string or URL object
cwd()`
 See also: ""Windows, CWDs, Drive Letters, and
  UNC Paths"", below


- `root` A string path resolved against the `cwd` option, which
  is used as the starting point for absolute patterns that start
  with `/`, (but not drive letters or UNC paths on Windows)


  Note that this _doesn't_ necessarily limit the walk to the
  `root` directory, and doesn't affect the cwd starting point for
  non-absolute patterns
 A pattern containing `

` will still be
  able to traverse out of the root directory, if it is not an
  actual root directory on the filesystem, and any non-absolute
  patterns will be matched in the `cwd`
 For example, the
  pattern `/

/*` with `{root:'/some/path'}` will return all
  files in `/some`, not all files in `/some/path`
 The pattern
  `*` with `{root:'/some/path'}` will return all the entries in
  the cwd, not the entries in `/some/path`
 However, be aware that on
  Windows systems, a pattern like `x:/*` or `//host/share/*` will
  _always_ start in the `x:/` or `//host/share` directory,
  regardless of the `root` setting
 If set, all `\\` characters are
  replaced with `/` in the pattern
join()` and
  `path
resolve()` on Windows platforms, mimicking the (buggy!)
  behavior of Glob v7 and before on Windows
dot` files in normal matches and `globstar`
  matches
 Note that an explicit dot in a portion of the pattern
  will always match dot files


  Only has effect on the {@link hasMagic} function, no effect on
  glob pattern matching itself


- `dotRelative` Prepend all relative path strings with `
/` (or
  `
\` on Windows)


  Without this option, returned relative paths are ""bare"", so
  instead of returning `'


  Relative patterns starting with `'

/`, even if this option is set


- `mark` Add a `/` character to directory matches
 Note that this
  requires additional stat calls


- `noglobstar` Do not match `**` against multiple filenames
)

- `noext` Do not match ""extglob"" patterns such as `+(a|b)`


- `nocase` Perform a case-insensitive match
 This defaults to
  `true` on macOS and Windows systems, and `false` on all others
 If set `true` on case-sensitive file
  systems, or `false` on case-insensitive file systems, then the
  walk may return more or less results than expected


- `matchBase` Perform a basename-only match if the pattern does
  not contain any slash characters
 That is, `*
js` would be
  treated as equivalent to `**/*


- `nodir` Do not match directories, only files
 When used with
  `withFileTypes`, this means that matches will include data such
  as modified time, permissions, and so on


  If a string or string[] is provided, then this is treated as a
  glob pattern or array of glob patterns to exclude from matches


  **Note** `ignore` patterns are _always_ in `dot:true` mode,
  regardless of any other settings


  If an object is provided that has `ignored(path)` and/or
  `childrenIgnored(path)` methods, then these methods will be
  called to determine whether any Path is a match or if its
  children should be traversed, respectively


- `follow` Follow symlinked directories when expanding `**`
  patterns
 This can result in a lot of duplicate references in
  the presence of cyclic links, and make performance quite bad


  By default, a `**` in a pattern will follow 1 symbolic link if
  it is not the first item in the pattern, or none if it is the
  first item in the pattern, following the same behavior as Bash


  Note: when `follow` and `nodir` are both set, then symbolic
  links to directories are also omitted


- `realpath` Set to true to call `fs
realpath` on all of the
  results


- `absolute` Set to true to always receive absolute paths for
  matched files
 Set to `false` to always receive relative paths
  for matched files


  `absolute` may not be used along with `withFileTypes`


- `posix` Set to true to use `/` as the path separator in
  returned results
 On
  Windows systems, this will return `/` delimited path results,
  and absolute paths will be returned in their full resolved UNC
  path form, eg insted of `'C:\\foo\\bar'`, it will return
  `//?/C:/foo/bar`
platform` if
  available, or `'linux'` if not


- `withFileTypes` Return [PathScurry](http://npm
 These are similar to a
  NodeJS `Dirent` object, but with additional methods and
  properties


  `withFileTypes` may not be used along with `absolute`


- `signal` An AbortSignal which will cancel the Glob walk when
  triggered


- `fs` An override object to pass in custom filesystem methods
 If the `nocase` option is set
  explicitly, then any provided `scurry` object must match this
  setting


## Glob Primer

Much more information about glob pattern expansion can be found
by running `man bash` and searching for `Pattern Matching`
js` on the command line, or put `build/*` in a `
gitignore`
file


Before parsing the path part patterns, braced sections are
expanded into a set
 Braced sections start with `{` and end with
`}`, with 2 or more comma-delimited sections within


The following characters have special magic meaning when used in
a path portion


- `*` Matches 0 or more characters in a single path portion

  When alone in a path portion, it must match at least 1
  character
 If `dot:true` is not specified, then `*` will not
  match against a `
 If `dot:true` is not specified, then
  `?` will not match against a `

]` Matches a range of characters, similar to a RegExp
  range
 May _not_ contain `/`
  characters
 Similar to `*`, if alone in a path portion, then
  the path portion must have at least one character
 May _not_ contain `/` characters

- `+(pattern|pattern|pattern)` Matches one or more occurrences of
  the patterns provided
 May _not_ contain `/` characters

- `*(a|b|c)` Matches zero or more occurrences of the patterns
  provided

- `@(pattern|pat*|pat?erN)` Matches exactly one of the patterns
  provided
 May _not_ contain `/` characters

- `**` If a ""globstar"" is alone in a path portion, then it
  matches zero or more directories and subdirectories searching
  for matches

  Follows 1 symbolic link if not the first item in the pattern,
  or 0 if it is the first item, unless `follow:true` is set, in
  which case it follows all symbolic links


`[:class:]` patterns are supported by this implementation, but
`[=c=]` and `[


### Dots

If a file or directory path portion has a `
` as its first
character
*/c` would match the file at
`a/
b/c`


You can make glob treat dots as normal characters by setting
`dot:true` in the options
 For example, `*
js` would match
`test/simple/basic
js`

This differs from the shell, where the pattern itself is
returned
 For example:

```sh
$ echo a*s*d*f
a*s*d*f
```

## Comparisons to other fnmatch/glob implementations

While strict compliance with the existing standards is a
worthwhile goal, some discrepancies exist between node-glob and
other implementations, and are intentional


The double-star character `**` is supported by default, unless
the `noglobstar` flag is set
 That is, `a/**/b` will match
`a/x/y/b`, but `a/**b` will not


Note that symlinked directories are not traversed as part of a
`**`, though their contents may match against subsequent portions
of the pattern
 You can force glob to traverse symlinks with `**` by
setting `{follow:true}` in the options


There is no equivalent of the `nonull` option
 A pattern that
does not find any matches simply resolves to nothing
 (An empty
array, immediately ended stream, etc
 Thus, a pattern
like `+(a|{b),c)}`, which would not be valid in bash or zsh, is
expanded **first** into the set of `+(a|b)` and `+(a|c)`, and
those patterns are checked for validity
 Since those two are
valid, matching proceeds


These options were deprecated in version 5, and removed in
version 6


To specify things that should not match, use the `ignore` option
**

Though windows uses either `/` or `\` as its path separator, only
`/` characters are used by this glob implementation
 You must use
forward-slashes **only** in glob expressions
 Back-slashes will
always be interpreted as escape characters, not path separators
join`
 On windows, this will by
default result in `/foo/*` matching `C:\foo\bar


To automatically coerce all `\` characters to `/` in pattern
strings, **thus making it impossible to escape literal glob
characters**, you may set the `windowsPathsNoEscape` option to
`true`


### Windows, CWDs, Drive Letters, and UNC Paths

On posix systems, when a pattern starts with `/`, any `cwd`
option is ignored, and the traversal starts at `/`, plus any
non-magic path portions specified in the pattern


#### UNC Paths

A UNC path may be used as the start of a pattern on Windows
platforms
 For example, a pattern like: `//?/x:/*` will return
all file entries in the root of the `x:` drive


UNC path roots are always compared case insensitively


#### Drive Letters

A pattern starting with a drive letter, like `c:/*`, will search
in that drive, regardless of any `cwd` option provided


If the pattern starts with `/`, and is not a UNC path, and there
is an explicit `cwd` option set with a drive letter, then the
drive letter in the `cwd` is used as the root of the directory
traversal


For example, `glob('/tmp', { cwd: 'c:/any/thing' })` will return
`['c:/tmp']` as the result


If an explicit `cwd` option is not provided, and the pattern
starts with `/`, then the traversal will run on the root of the
drive provided as the `cwd` option
 (That is, it is the result of
`path
 However, this
also makes it even more susceptible to races, especially if the
cache object is reused between glob calls
gnu
org/software/bash/manual/html_node/Pattern-Matching
html)
- `man 3 fnmatch`
- `man 5 gitignore`
- [minimatch documentation](https://github
com/isaacs/minimatch)

## Glob Logo

Glob's logo was created by [Tanya
Brassie](http://tanyabrassie
com/)
 Logo files can be found
[here](https://github
com/isaacs/node-glob/tree/master/logo)
0 International
License](https://creativecommons
org/licenses/by-sa/4
0/)


## Contributing

Any change to behavior (including bugfixes) must come with a
test


Patches that fail tests or reduce performance will be rejected


```sh
# to run tests
npm test

# to re-generate test fixtures
npm run test-regen

# run the benchmarks
npm run bench

# to profile javascript
npm run prof
```

## Comparison to Other JavaScript Glob Implementations

**tl;dr**

- If you want glob matching that is as faithful as possible to
  Bash pattern expansion semantics, and as fast as possible
  within that constraint, _use this module_

- If you are reasonably sure that the patterns you will encounter
  are relatively simple, and want the absolutely fastest glob
  matcher out there, _use [fast-glob](http://npm
im/fast-glob)_
gitignore` files, _use
  [globby](http://npm


---

**full explanation**

Every library reflects a set of opinions and priorities in the
trade-offs it makes
im/fast-glob), though they differ in their
benefits and drawbacks
 However, there are many
cases where the choices that `fast-glob` makes in pursuit of
speed mean that its results differ from the results returned by
Bash and other sh-like shells, which may be surprising


In my testing, `fast-glob` is around 10-20% faster than this
module when walking over 200k files nested 4 directories
deep[1](#fn-webscale)

` path portions are not handled unless they appear at the
  start of the pattern
- `
/!(<pattern>)` will not match any files that _start_ with
  `<pattern>`, even if they do not match `<pattern>`
 For
  example, `!(9)
txt`

- Some brace patterns in the middle of a pattern will result in
  failing to find certain matches


Globby exhibits all of the same pattern semantics as fast-glob,
(as it is a wrapper around fast-glob) and is slightly slower than
node-glob (by about 10-20% in the benchmark test set, or in other
words, anywhere from 20-50% slower than fast-glob)
 However, it
adds some API conveniences that may be worth the costs
gitignore` and other ignore files


Note that prior versions of `node-glob` are _not_ on this list


---

<small id=""fn-webscale"">[1]: In the cases where this module
returns results and `fast-glob` doesn't, it's even faster, of
course
765s  200364
node current globSync mjs       0m0
683s  222656
node current glob syncStream    0m0
649s  222656
~~ async ~~
node fast-glob async            0m0
350s  200364
node globby async               0m0
411s  222656

--- pattern: '**/
' ---
~~ sync ~~
node fast-glob sync             0m0
564s  2242
node current glob syncStream    0m0
583s  2242
~~ async ~~
node fast-glob async            0m0
283s  0
node globby async               0m0
512s  200364
node current glob async mjs     0m0
299s  2242
node current glob stream        0m0
/**/0/**/0/**/0/**/0/**/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
490s  10
node globby sync                0m0
540s  10
node current glob syncStream    0m0
296s  10
node current glob async mjs     0m0
278s  10
node current glob stream        0m0
302s  10

--- pattern: '
/**/[01]/**/[12]/**/[23]/**/[45]/**/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
500s  160
node globby sync                0m0
556s  160
node current glob syncStream    0m0
306s  160
node current glob stream        0m0
322s  160

--- pattern: '
txt' ---
~~ sync ~~
node fast-glob sync             0m0
502s  5230
node globby sync                0m0
557s  5230
~~ async ~~
node fast-glob async            0m0
304s  5230
node current glob stream        0m0
310s  5230

--- pattern: '**/*
580s  200023
node globby sync                0m0
771s  200023
node current globSync mjs       0m0
649s  200023
~~ async ~~
node fast-glob async            0m0
388s  200023

--- pattern: '{**/*
txt,**/?/**/?/**/*
txt,**/?/**/?/**/?/**/*
txt,**/?/**/?/**/?/**/?/**/*
589s  200023
node globby sync                0m0
771s  200023
node current globSync mjs       0m0
684s  200023
~~ async ~~
node fast-glob async            0m0
518s  200023
node current glob async mjs     0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
496s  1000
node globby sync                0m0
539s  1000
node current glob syncStream    0m0
567s  1000
~~ async ~~
node fast-glob async            0m0
285s  1000
node globby async               0m0
299s  1000
node current glob async mjs     0m0
305s  1000
node current glob stream        0m0
301s  1000

--- pattern: '


/**/0/*
577s  4880
node current glob syncStream    0m0
586s  4880
~~ async ~~
node fast-glob async            0m0
298s  0
node current glob async mjs     0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
618s  100000
~~ async ~~
node fast-glob async            0m0
315s  100000
node globby async               0m0
414s  100000
node current glob async mjs     0m0
366s  100000
node current glob stream        0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
670s  100000
node current globSync mjs       0m0
343s  100000
node globby async               0m0
519s  200023
node current glob stream        0m0
451s  200023

--- pattern: '**/!(0|9)
680s  180023
node current glob syncStream    0m0
659s  180023
~~ async ~~
node fast-glob async            0m0
427s  180023
node current glob stream        0m0
388s  180023

--- pattern: '
/{*/**/

txt' ---
~~ sync ~~
node fast-glob sync             0m0
512s  0
node current globSync mjs       0m0
811s  200023
node current glob syncStream    0m0
773s  200023
~~ async ~~
node fast-glob async            0m0
280s  0
node globby async               0m0
299s  0
node current glob async mjs     0m0


/*/**/
/*/**/

/*/**/

/*/**/

txt' ---
~~ sync ~~
node fast-glob sync             0m0
464s  200023

--- pattern: '

/*/**/

/*/**/

/*/**/
/*/**/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
513s  0
node current globSync mjs       0m0
696s  200023
~~ async ~~
node fast-glob async            0m0
286s  0
node globby async               0m0
296s  0
node current glob async mjs     0m0
506s  200023
node current glob stream        0m0
483s  200023

--- pattern: '
/0/**/

/1/**/

/5/**/

/7/**/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
060s  0
node globby sync                0m0
074s  0
node current globSync mjs       0m0
067s  0
node current glob syncStream    0m0
066s  0
~~ async ~~
node fast-glob async            0m0
060s  0
node globby async               0m0
075s  0
node current glob async mjs     0m0
/**/?/**/?/**/?/**/?/**/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
568s  100000
node globby sync                0m0
619s  100000
node current glob syncStream    0m0
332s  100000
node globby async               0m0
409s  100000
node current glob async mjs     0m0
351s  100000

--- pattern: '**/*/**/*/**/*/**/*/**' ---
~~ sync ~~
node fast-glob sync             0m0
798s  200113
node current globSync mjs       0m0
693s  222137
~~ async ~~
node fast-glob async            0m0
356s  200113
node globby async               0m0
525s  200113
node current glob async mjs     0m0
455s  222137

--- pattern: '
txt' ---
~~ sync ~~
node fast-glob sync             0m0
622s  200000
node globby sync                0m0
792s  200000
node current globSync mjs       0m0
722s  200000
node current glob syncStream    0m0
527s  200000
node current glob async mjs     0m0
502s  200000
node current glob stream        0m0
771s  200023
node current globSync mjs       0m0
684s  200023
node current glob syncStream    0m0
658s  200023
~~ async ~~
node fast-glob async            0m0
352s  200023
node globby async               0m0
516s  200023
node current glob async mjs     0m0
432s  200023
node current glob stream        0m0
/**/**/**/**/**/**/**/**/*
682s  200023
node current glob syncStream    0m0
352s  200023
node globby async               0m0
436s  200023
node current glob stream        0m0
380s  200023

--- pattern: '**/*/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
776s  200023
node current globSync mjs       0m0
691s  200023
node current glob syncStream    0m0
513s  200023
node current glob async mjs     0m0
471s  200023
node current glob stream        0m0
424s  200023

--- pattern: '**/*/**/*
664s  200023
~~ async ~~
node fast-glob async            0m0
514s  200023
node current glob async mjs     0m0
472s  200023
node current glob stream        0m0
621s  100000
~~ async ~~
node fast-glob async            0m0
322s  100000
node globby async               0m0
404s  100000
node current glob async mjs     0m0
360s  100000
node current glob stream        0m0


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE




















# Blue Oak Model License

Version 1
0


## Acceptance

In order to receive this license, you must agree to its
rules
  The rules of this license are both obligations
under that agreement and conditions to your license


## Copyright

Each contributor licenses you to do everything with this
software that would otherwise infringe that contributor's
copyright in it


## Notices

You must ensure that everyone who gets a copy of
any part of this software from you, with or without
changes, also gets the text of this license or a link to
<https://blueoakcouncil
org/license/1
0


## Excuse

If anyone notifies you in writing that you have not
complied with [Notices](#notices), you can keep your
license by taking all practical steps to comply within 30
days after the notice
  If you do not do so, your license
ends immediately


## Reliability

No contributor can revoke this license


## No Liability

***As far as the law allows, this software comes as is,
without any warranty or condition, and no contributor
will be liable to anyone for any damages related to this
software or this license, under any kind of legal claim


Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the ""Software""),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software










# libnpmaccess

[![npm version](https://img
shields
io/npm/v/libnpmaccess
im/libnpmaccess)
[![license](https://img
shields
svg)](https://npm
im/libnpmaccess)
[![CI - libnpmaccess](https://github
com/npm/cli/actions/workflows/ci-libnpmaccess
yml/badge
com/npm/cli/actions/workflows/ci-libnpmaccess
yml)

[`libnpmaccess`](https://github
com/npm/libnpmaccess) is a Node
js
library that provides programmatic access to the guts of the npm CLI's `npm
access` command
 This includes managing account mfa settings, listing
packages and permissions, looking at package collaborators, and defining
package permissions for users, orgs, and teams


## Example

```javascript
const access = require('libnpmaccess')
const opts = { '//registry
npmjs
org/:_authToken: 'npm_token }

// List all packages @zkat has access to on the npm registry
im/npm-registry-fetch)


All options are passed through directly to that library, so please refer
to [its own `opts`
documentation](https://www
npmjs
com/package/npm-registry-fetch#fetch-options)
for options that can be passed in
im/npm-package-arg)-compatible
registry spec
getCollaborators(spec, opts) -> Promise<Object>`

Gets collaborators for a given package

#### `access


Teams should be in the format `scope:team` or `@scope:team`

Users and scopes can be in the format `@scope` or `scope`

#### `access
removePermissions(team, spec, opts) -> Promise<Boolean>`

Removes the access for a given team to a package
setAccess(package, access, opts) -> Promise<Boolean>`

Sets access level for package described by `spec`


The npm registry accepts the following `access` levels:

`public`: package is public
`private`: package is private

The npm registry also only allows scoped packages to have their access
level set
setMfa(spec, level, opts) -> Promise<Boolean>`

Sets the publishing mfa requirements for a given package

`publish`: mfa is required to publish this package, automation tokens
cannot be used to publish

`automation`: mfa is required to publish this package, automation tokens
may also be used for publishing from continuous integration workflows


#### access


Teams should be in the format `scope:team` or `@scope:team`

The npm registry accepts the following `permissions`:

`read-only`: Read only permissions
`read-write`: Read and write (aka publish) permissions



# libnpmdiff

[![npm version](https://img
shields
im/libnpmdiff)
[![license](https://img
shields
svg)](https://npm
im/libnpmdiff)
[![CI - libnpmdiff](https://github
com/npm/cli/actions/workflows/ci-libnpmdiff
svg)](https://github
1
1
1'
])
console
log(
  patch
)
```

Returns:

```patch
diff --git a/package
1

1 100644
--- a/package
json
+++ b/package
json
@@ -1,6 +1,6 @@
 {
   ""name"": ""abbrev"",
-  ""version"": ""1
1
 Schlueter <i@izs
me>"",
   ""main"": ""abbrev
js"",

```

## Install

`$ npm install libnpmdiff`

### Contributing

The npm team enthusiastically welcomes contributions and project participation!
There's a bunch of things you can do if you want to contribute! The
[Contributor Guide](https://github
md)
outlines the process for community interaction and contribution
 Please don't
hesitate to jump in if you'd like to, or even ask us questions if something
isn't clear
npmjs


Please refer to the [Changelog](CHANGELOG
md) for project history details, too
 **npm** spec types are usually described in `<pkg-name>@<version>` form but multiple other types are alsos supported, for more info on valid specs take a look at [`npm-package-arg`](https://github


**Options**:

- `color <Boolean>`: Should add ANSI colors to string output? Defaults to `false`
 Defaults to `v`
- `diffUnified <Number>`: How many lines of code to print before/after each diff

- `diffFiles <Array<String>>`: If set only prints patches for the files listed in this array (also accepts globs)
 Defaults to `undefined`
 Defaults to `false`

- `diffNameOnly <Boolean>`: Prints only file names and no patch diffs
 Defaults to `false`

- `diffNoPrefix <Boolean>`: If true then skips printing any prefixes in filenames
 Defaults to `false`


`cache`, `registry`, `where` and other common options accepted by [pacote](https://github
com/npm/pacote#options)

Returns a `Promise` that fullfils with a `String` containing the resulting patch diffs


Throws an error if either `a` or `b` are missing or if trying to diff more than two specs
shields
io/npm/l/libnpmexec
im/libnpmexec)
[![CI - libnpmexec](https://github
com/npm/cli/actions/workflows/ci-libnpmexec
yml/badge
svg)](https://github
npm/_cacache',
  npxCache: '~/
npm/_npx',
  yes: true,
})
```

## API:

### `libexec(opts)`

- `opts`:
  - `args`: List of pkgs to execute **Array<String>**, defaults to `[]`
  - `call`: An alternative command to run when using `packages` option **String**, defaults to empty string

  - `cache`: The path location to where the npm cache folder is placed **String**
  - `npxCache`: The path location to where the npx cache folder is placed **String**
  - `chalk`: Chalk instance to use for colors? **Required**
  - `localBin`: Location to the `node_modules/
/node_modules/

  - `output`: A function to print output to **Function**
  - `packages`: A list of packages to be used (possibly fetch from the registry) **Array<String>**, defaults to `[]`
  - `path`: Location to where to read local project info (`package
json`) **String**, defaults to `
`
  - `runPath`: Location to where to execute the script **String**, defaults to `
com/npm/arborist/) and [pacote](https://github
com/npm/pacote/#options) **Object**

## LICENSE

[ISC](
io/npm/v/libnpmfund
svg)](https://npm
im/libnpmfund)
[![license](https://img
io/npm/l/libnpmfund
svg)](https://npm
svg)](https://github
com/npm/cli/actions/workflows/ci-libnpmfund
com/npm/libnpmfund) is a Node
js library for
retrieving **funding** information for packages installed using
[`arborist`](https://github
com/npm/arborist)


## Table of Contents

* [Example](#example)
* [Install](#install)
* [Contributing](#contributing)
* [API](#api)
* [LICENSE](#license)

## Example

```js
const { read } = require('libnpmfund')

const fundingInfo = await read()
console
stringify(fundingInfo, null, 2)
)
// => {
  length: 2,
  name: 'foo',
  version: '1
0
com' },
  dependencies: {
    bar: {
      version: '1
com/npm/cli/blob/latest/CONTRIBUTING


All participants and maintainers in this project are expected to follow the
[npm Code of Conduct](https://www
com/policies/conduct), and just
generally be excellent to each other
md) for project history details, too


Happy hacking!

### API

##### <a name=""fund
read""></a> `> fund
read([opts]) -> Promise<Object>`

Reads **funding** info from a npm install and returns a promise for a
tree object that only contains packages in which funding info is defined


Options:

- `countOnly`: Uses the tree-traversal logic from **npm fund** but skips over
any obj definition and just returns an obj containing `{ length }` - useful for
things such as printing a `6 packages are looking for funding` msg

- `workspaces`: `Array<String>` List of workspaces names to filter for,
the result will only include a subset of the resulting tree that includes
only the nodes that are children of the listed workspaces names

- `path`, `registry` and more [Arborist](https://github
com/npm/arborist/) options


##### <a name=""fund
readTree""></a> `> fund
readTree(tree, [opts]) -> Promise<Object>`

Reads **funding** info from a given install tree and returns a tree object
that only contains packages in which funding info is defined


- `tree`: An [`arborist`](https://github
g:

```js
const Arborist = require('@npmcli/arborist')
const { readTree } = require('libnpmfund')

const arb = new Arborist({ path: process
cwd() })
const tree = await arb
loadActual()

return readTree(tree, { countOnly: false })
```

Options:

- `countOnly`: Uses the tree-traversal logic from **npm fund** but skips over
any obj definition and just returns an obj containing `{ length }` - useful for
things such as printing a `6 packages are looking for funding` msg
normalizeFunding(funding) -> Object`

From a `funding` `<object|string|array>`, retrieves normalized funding objects
containing a `url` property


e
g:

```js
normalizeFunding('http://example
isValidFunding""></a> `> fund
isValidFunding(funding) -> Boolean`

Returns `<true>` if `funding` is a valid funding object, e
com')
// => true
```

## LICENSE

[ISC](
/LICENSE)



ISC License

Copyright (c) npm, Inc


# libnpmhook

[![npm version](https://img
io/npm/v/libnpmhook
svg)](https://npm
im/libnpmhook)
[![license](https://img
io/npm/l/libnpmhook
svg)](https://npm
yml/badge
yml)

[`libnpmhook`](https://github
js library for
programmatically managing the npm registry's server-side hooks
npmjs
org/post/145260155635/introducing-hooks-get-notifications-of-npm)
log(await hooks
ls('mypkg', {token: 'deadbeef'}))
// array of hook objects on `mypkg`
im/npm-registry-fetch)
token` - can be passed in and will be used as the authentication token for the registry
 For other ways to pass in auth details, see the n-r-f docs

* `opts
otp` - certain operations will require an OTP token to be passed in
 If a `libnpmhook` command fails with `err
 The type is
determined by the name syntax: `'@foo/bar'` and `'foo'` are treated as packages,
`@foo` is treated as a scope, and `~user` is treated as an org name or scope


The `endpoint` should be a fully-qualified http URL for the endpoint the hook
will send its payload to when it fires
 `secret` is a shared secret that the
hook will send to that endpoint to verify that it's actually coming from the
registry hook


See also: [`POST
/v1/hooks/hook`](https://github
com/npm/registry/blob/master/docs/hooks/endpoints
md#post-v1hookshook)

##### Example

```javascript
await hooks
com/api/added', 'supersekrit', {
  token: 'myregistrytoken',
  otp: '694207'
})

=>

{ id: '16f7xoal',
  username: 'zkat',
  name: 'zkat',
  endpoint: 'https://example
com/api/added',
  secret: 'supersekrit',
  type: 'owner',
  created: '2018-08-21T20:05:25
125Z',
  updated: '2018-08-21T20:05:25
125Z',
  deleted: false,
  delivered: false,
  last_delivery: null,
  response_code: 0,
  status: 'active' }
```

#### <a name=""find""></a> `> hooks
find(id, [opts]) -> Promise`

Returns the hook identified by `id`
code` of `'E404'` if it didn't exist
com/npm/registry/blob/master/docs/hooks/endpoints
com/api/added',
  secret: 'supersekrit',
  type: 'owner',
  created: '2018-08-21T20:05:25
125Z',
  updated: '2018-08-21T20:05:25
125Z',
  deleted: false,
  delivered: false,
  last_delivery: null,
  response_code: 0,
  status: 'active' }
```

#### <a name=""rm""></a> `> hooks
rm(id, [opts]) -> Promise`

Removes the hook identified by `id`


The returned Promise resolves to the full hook object that was removed, if it
existed, or `null` if no such hook was there (instead of erroring)
com/npm/registry/blob/master/docs/hooks/endpoints
md#delete-v1hookshookid)

##### Example

```javascript
await hooks
rm('16f7xoal', {
  token: 'myregistrytoken',
  otp: '694207'
})

=>

{ id: '16f7xoal',
  username: 'zkat',
  name: 'zkat',
  endpoint: 'https://example



await hooks
rm('16f7xoal', {
  token: 'myregistrytoken',
  otp: '694207'
})

=> null
```

#### <a name=""update""></a> `> hooks
update(id, endpoint, secret, [opts]) -> Promise`

The `id` should be a hook ID from a previously-created hook


The `endpoint` should be a fully-qualified http URL for the endpoint the hook
will send its payload to when it fires
 Otherwise, it will error with an `'E404'` error code
com/npm/registry/blob/master/docs/hooks/endpoints
md#put-v1hookshookid)

##### Example

```javascript
await hooks
update('16fxoal', 'https://example
com/api/other',
  secret: 'newsekrit',
  type: 'owner',
  created: '2018-08-21T20:05:25
964Z',
  deleted: false,
  delivered: false,
  last_delivery: null,
  response_code: 0,
  status: 'active' }
```

#### <a name=""ls""></a> `> hooks
ls([opts]) -> Promise`

Resolves to an array of hook objects associated with the account you're
authenticated as
package` - filter results by package name
* `opts
offset` - pagination offset for results (use with `opts
limit`)

See also:
  * [`hooks
ls
stream()`](#ls-stream)
  * [`GET
/v1/hooks`](https://github
md#get-v1hooks)

##### Example

```javascript
await hooks
ls({token: 'myregistrytoken'})

=>
[
  { id: '16f7xoal', 
 },
  { id: 'wnyf98a1', 


 },
  
 The returned stream is a valid `Symbol
asyncIterator` on
`node@>=10`


Results can be further filtered with three values that can be passed in through
`opts`:

* `opts
package` - filter results by package name
* `opts
limit` - maximum number of hooks to return
* `opts
offset` - pagination offset for results (use with `opts
limit`)

See also:
  * [`hooks
ls()`](#ls)
  * [`GET
/v1/hooks`](https://github
md#get-v1hooks)

##### Example

```javascript
for await (let hook of hooks
ls
stream({token: 'myregistrytoken'})) {
  console
log('found hook:', hook
id)
}

=>
// outputs:
// found hook: 16f7xoal
// found hook: wnyf98a1
```



# libnpmorg

[![npm version](https://img
shields
io/npm/l/libnpmorg
im/libnpmorg)
[![CI - libnpmorg](https://github
yml/badge
svg)](https://github
com/npm/libnpmorg) is a Node
js library for
programmatically accessing the [npm Org membership
API](https://github
com/npm/registry/blob/master/docs/orgs/memberships


## Table of Contents

* [Example](#example)
* [Install](#install)
* [Contributing](#contributing)
* [API](#api)
  * [hook opts](#opts)
  * [`set()`](#set)
  * [`rm()`](#rm)
  * [`ls()`](#ls)
  * [`ls
stream()`](#ls-stream)

## Example

```js
const org = require('libnpmorg')

console
ls('myorg', {token: 'deadbeef'}))
=>
Roster {
  zkat: 'developer',
  iarna: 'admin',
  isaacs: 'owner'
}
```

## Install

`$ npm install libnpmorg`

### API

#### <a name=""opts""></a> `opts` for `libnpmorg` commands

`libnpmorg` uses [`npm-registry-fetch`](https://npm
im/npm-registry-fetch)

All options are passed through directly to that library, so please refer to [its
own `opts`
documentation](https://www
npmjs


A couple of options of note for those in a hurry:

* `opts
token` - can be passed in and will be used as the authentication token for the registry
 For other ways to pass in auth details, see the n-r-f docs

* `opts
code === EOTP`, please retry the request with `{otp: <2fa token>}`

#### <a name=""set""></a> `> org
com/npm/registry/blob/master/docs/orgs/memberships
md#membership-detail)
object


The `role` is optional and should be one of `admin`, `owner`, or `developer`


See also: [`PUT
/-/org/:scope/user`](https://github
com/npm/registry/blob/master/docs/orgs/memberships
md#org-membership-replace)

##### Example

```javascript
await org
set('@myorg', '@myuser', 'admin', {token: 'deadbeef'})
=>
MembershipDetail {
  org: {
    name: 'myorg',
    size: 15
  },
  user: 'myuser',
  role: 'admin'
}
```

#### <a name=""rm""></a> `> org


`org` and `user` must be scope names for the org name and user name
respectively
 They can optionally be prefixed with `@`


See also: [`DELETE
/-/org/:scope/user`](https://github
com/npm/registry/blob/master/docs/orgs/memberships
rm('myorg', 'myuser', {token: 'deadbeef'})
```

#### <a name=""ls""></a> `> org
ls(org, [opts]) -> Promise`

The Promise resolves to a
[Roster](https://github
com/npm/registry/blob/master/docs/orgs/memberships
md#roster)
object
md#org-roster)

##### Example

```javascript
await org
ls('myorg', {token: 'deadbeef'})
=>
Roster {
  zkat: 'developer',
  iarna: 'admin',
  isaacs: 'owner'
}
```

#### <a name=""ls-stream""></a> `> org
com/npm/registry/blob/master/docs/orgs/memberships
md#roster),
with each emitted entry in `[key, value]` format


`org` must be a scope name for an org, and can be optionally prefixed with `@`


The returned stream is a valid `Symbol
asyncIterator`
com/npm/registry/blob/master/docs/orgs/memberships
md#org-roster)

##### Example

```javascript
for await (let [user, role] of org
ls
stream('myorg', {token: 'deadbeef'})) {
  console
log(`user: ${user} (${role})`)
}
=>
user: zkat (developer)
user: iarna (admin)
user: isaacs (owner)
```



# libnpmpack

[![npm version](https://img
shields
svg)](https://npm
shields
io/npm/l/libnpmpack
im/libnpmpack)
[![CI - libnpmpack](https://github
com/npm/cli/actions/workflows/ci-libnpmpack
yml/badge
svg)](https://github
com/npm/cli/actions/workflows/ci-libnpmpack
com/npm/libnpmpack) is a Node
 If packing from a local source, `libnpmpack` will also run the `prepack` and `postpack` lifecycles


If no options are passed, the tarball file will be saved on the same directory from which `pack` was called in


`libnpmpack` uses [`pacote`](https://npm
im/pacote)

Most options are passed through directly to that library, so please refer to
[its own `opts`
documentation](https://www
3')

// packs from a github spec
const githubTar = await pack('isaacs/rimraf#PR-192')
```



# libnpmpublish

[![npm version](https://img
shields
svg)](https://npm
im/libnpmpublish)
[![license](https://img
shields
io/npm/l/libnpmpublish
im/libnpmpublish)
[![CI - libnpmpublish](https://github
com/npm/cli/actions/workflows/ci-libnpmpublish
com/npm/cli/actions/workflows/ci-libnpmpublish
yml)

[`libnpmpublish`](https://github
com/npm/libnpmpublish) is a Node
js
library for programmatically publishing and unpublishing npm packages
  Most options
are passed through directly to that library, so please refer to [its own
`opts` documentation](http://npm
im/npm-registry-fetch#fetch-options) for
options that can be passed in
defaultTag` - registers the published package with the given tag,
  defaults to `latest`


* `opts
access` - tells the registry whether this package should be
  published as `public` or `restricted`
 Only applies to scoped
  packages
  Defaults to `public`
token` - can be passed in and will be used as the authentication
  token for the registry


* `opts
provenance` - when running in a supported CI environment, will trigger
  the generation of a signed provenance statement to be published alongside
  the package
 Mutually exclusive with the `provenanceFile` option


* `opts
 The specified file should be a
  [Sigstore Bundle](https://github
com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle
proto)
  containing a [DSSE](https://github
com/secure-systems-lab/dsse)-packaged
  provenance statement


#### <a name=""publish""></a> `> libpub
publish(manifest, tarData, [opts]) -> Promise`

Sends the package represented by the `manifest` and `tarData` to the
configured registry
json` for the package being
published (which can also be the manifest pulled from a packument, a git
repo, tarball, etc
)

`tarData` is a `Buffer` of the tarball being published


If `opts
  You may put your own user-agent string in
there to identify your publishes


If `opts
algorithms` is passed in, it should be an array of hashing
algorithms to generate `integrity` hashes for
 The default is `['sha512']`,
which means you end up with `dist


##### Example

```js
// note that pacote
  a folder shown here, since that's
// far and away the most common use case
im/pacote
const manifest = await pacote
manifest(path)
const tarData = await pacote
0
 The registry in question may
have its own limitations on unpublishing


`spec` should be either a string, or a valid
[`npm-package-arg`](https://npm
 For
legacy compatibility reasons, only `tag` and `version` specs will work as
expected
 `range` specs will fail silently in most cases
unpublish('lodash', { token: 'i-am-the-worst'})
//
// `lodash` has now been unpublished, along with all its versions
```



# libnpmsearch

[![npm version](https://img
shields
io/npm/v/libnpmsearch
svg)](https://npm
io/npm/l/libnpmsearch
svg)](https://npm
com/npm/cli/actions/workflows/ci-libnpmsearch
svg)](https://github
yml)

[`libnpmsearch`](https://github
js library for
programmatically accessing the npm search endpoint
 It does **not** support
legacy search through `/-/all`
stream()`](#search-stream)

## Example

```js
const search = require('libnpmsearch')

console
log(await search('libnpm'))
=>
[
  {
    name: 'libnpm',
    description: 'programmatic npm API',
    
etc
  },
  {
    name: 'libnpmsearch',
    description: 'Programmatic API for searching in npm and compatible registries',
    

etc
  },
  

limit` - Number of results to limit the query to
 Used with `opts
detailed` - If true, returns an object with `package`, `score`, and `searchScore` fields, with `package` being what would usually be returned, and the other two containing details about how that package scored
 Default: false
* `opts
quality`, `opts
maintenance`, and `opts
popularity` with values that prioritize each one
 Default: `'optimal'`
* `opts
maintenance` - Decimal number between `0` and `1` that defines the weight of `maintenance` metrics when scoring and sorting packages
 Default: `0
65` (same as `opts
sortBy: 'optimal'`)
* `opts
popularity` - Decimal number between `0` and `1` that defines the weight of `popularity` metrics when scoring and sorting packages
 Default: `0
98` (same as `opts
sortBy: 'optimal'`)
* `opts
 Default: `0
5` (same as `opts
npmjs
com/package/npm-registry-fetch#fetch-options)
for options that can be passed in


A couple of options of note for those in a hurry:

* `opts


#### <a name=""search""></a> `> search(query, [opts]) -> Promise`

`query` must be either a String or an Array of search terms
 You may receive more, or fewer results, at the endpoint's
discretion


The returned Promise resolved to an Array of search results with the following
format:

```js
{
  name: String,
  version: SemverString,
  description: String || null,
  maintainers: [
    {
      username: String,
      email: String
    },
    
etc
  ] || null,
  keywords: [String] || null,
  date: Date || null
}
```

If `opts
limit` is provided, it will be sent to the API to constrain the number
of returned results
 You may receive more, or fewer results, at the endpoint's
discretion


For streamed results, see [`search
stream`](#search-stream)

etc
  },
  {
    name: 'libnpmsearch',
    description: 'Programmatic API for searching in npm and compatible registries',
    

etc
  },
  


stream(query, [opts]) -> Stream`

`query` must be either a String or an Array of search terms
limit` is provided, it will be sent to the API to constrain the number
of returned results
 You may receive more, or fewer results, at the endpoint's
discretion


The returned Stream emits one entry per search result, with each entry having
the following format:

```js
{
  name: String,
  version: SemverString,
  description: String || null,
  maintainers: [
    {
      username: String,
      email: String
    },
    


etc
  ] || null,
  keywords: [String] || null,
  date: Date || null
}
```

For getting results in one chunk, see [`search`](#search-stream)


##### Example

```javascript
search
stream('libnpm')

etc
}
// entry 2
{
  name: 'libnpmsearch',
  description: 'Programmatic API for searching in npm and compatible registries',
  

shields
svg)](https://npm
im/libnpmteam)
[![license](https://img
shields
im/libnpmteam)
[![CI - libnpmteam](https://github
svg)](https://github
js
library that provides programmatic access to the guts of the npm CLI's `npm
team` command and its various subcommands

console
 Manually create CHANGELOG
md file
1
 Commit changes to CHANGELOG
md""
    ```
1
 Run `npm version {newVersion}`
    ```bash
    # Example
    $ npm version patch
    # 1
 Runs `coverage` and `lint` scripts
    # 2
 Bumps package version; and **create commit/tag**
    # 3
stream()`](#ls-users-stream)

### Install

`$ npm install libnpmteam`

### API

#### <a name=""opts""></a> `opts` for `libnpmteam` commands

`libnpmteam` uses [`npm-registry-fetch`](https://npm
im/npm-registry-fetch)

All options are passed through directly to that library, so please refer to [its
own `opts`
documentation](https://www
npmjs
com/package/npm-registry-fetch#fetch-options)
for options that can be passed in


A couple of options of note for those in a hurry:

* `opts
token` - can be passed in and will be used as the authentication token for the registry
 For other ways to pass in auth details, see the n-r-f docs
 If a `libnpmteam` command fails with `err
code === EOTP`, please retry the request with `{otp: <2fa token>}`

#### <a name=""create""></a> `> team
 Team names use the format `@<scope>:<name>`, with
the `@` being optional


Additionally, `opts
description` may be passed in to include a description


##### Example

```javascript
await team

```

#### <a name=""destroy""></a> `> team
destroy(team, [opts]) -> Promise`

Destroys a team named `team`
 Team names use the format `@<scope>:<name>`, with
the `@` being optional


##### Example

```javascript
await team
add(user, team, [opts]) -> Promise`

Adds `user` to `team`


##### Example

```javascript
await team
add('zkat', '@npm:cli', {token: 'myregistrytoken'})
// @zkat now belongs to the @npm:cli team

```

#### <a name=""rm""></a> `> team


##### Example

```javascript
await team


##### Example

```javascript
await team
lsTeams('@npm', {token: 'myregistrytoken'})
=>
[
  'npm:cli',
  'npm:web',
  'npm:registry',
  'npm:developers'
]
```

#### <a name=""ls-teams-stream""></a> `> team
lsTeams
stream(scope, [opts]) -> Stream`

Returns a stream of teams belonging to `scope`
lsTeams()`](#ls-teams)


##### Example

```javascript
for await (let team of team
stream('@npm', {token: 'myregistrytoken'})) {
  console
log(team)
}

// outputs
// npm:cli
// npm:web
// npm:registry
// npm:developers
```

#### <a name=""ls-users""></a> `> team
lsUsers(team, [opts]) -> Promise`

Resolves to an array of usernames belonging to `team`


For a streamed version of these results, see [`team
lsUsers
stream()`](#ls-users-stream)


##### Example

```javascript
await team
lsUsers('@npm:cli', {token: 'myregistrytoken'})
=>
[
  'iarna',
  'zkat'
]
```

#### <a name=""ls-users-stream""></a> `> team
lsUsers


For a Promise-based version of these results, see [`team
lsUsers()`](#ls-users)


##### Example

```javascript
for await (let user of team
shields
io/npm/v/libnpmversion
svg)](https://npm
im/libnpmversion)
[![license](https://img
shields
svg)](https://npm
com/npm/cli/actions/workflows/ci-libnpmversion
yml/badge
com/npm/cli/actions/workflows/ci-libnpmversion


## USAGE

```js
const npmVersion = require('libnpmversion')

// argument can be one of:
// - any semver version string (set to that exact version)
// - 'major', 'minor', 'patch', 'pre{major,minor,patch}' (increment at
//   that value)
// - 'from-git' (set to the latest semver-lookin git tag - this skips
//   gitTagVersion, but will still sign if asked)
npmVersion(arg, {
  path: '/path/to/my/pkg', // defaults to cwd

  allowSameVersion: false, // allow tagging/etc to the current version
  preid: '', // when arg=='pre', define the prerelease string, like 'beta' etc
3' when versioning to 1
3
  commitHooks: true, // default true, run git commit hooks, default true
  gitTagVersion: true, // default true, tag the version
  signGitCommit: false, // default false, gpg sign the git commit
  signGitTag: false, // default false, gpg sign the git tag
  force: false, // push forward recklessly if any problems happen
  ignoreScripts: false, // do not run pre/post/version lifecycle scripts
  scriptShell: '/bin/bash', // shell to run lifecycle scripts in
  message: 'v%s', // message for tag and commit, replace %s with the version
  silent: false, // passed to @npmcli/run-script to control whether it logs
})
then(newVersion => {
  console
error('version updated!', newVersion)
})
```

## Description

Run this in a package directory to bump the version and write the new data
back to `package
json`, `package-lock
json`, and, if present,
`npm-shrinkwrap
json`
 In the second case, the existing version will
be incremented by 1 in the specified field
  `from-git` will try to read
the latest git tag, and use that as the new npm version
  This
behavior is controlled by `gitTagVersion` (see below), and can be
disabled by setting `gitTagVersion: false` in the options

It will fail if the working directory is not clean, unless `force: true` is
set


If the `signGitTag` option is set, then the tag will be signed using
the `-s` flag to git
  Note that you must have a default GPG key set up in
your git config for this to work properly


If `preversion`, `version`, or `postversion` are in the `scripts` property
of the package
json, they will be executed in the appropriate sequence
  Your scripts may add files to the commit in future steps
  These scripts have access to the old
   `version` in package
  A typical use would be running your full
   test suite before deploying

3

4
 Run the `version` script

5
 Commit and tag

6
 Run the `postversion` script


Take the following example:

```json
{
  ""scripts"": {
    ""preversion"": ""npm test"",
    ""version"": ""npm run build && git add -A dist"",
    ""postversion"": ""git push && git push --tags && rm -rf build/temp""
  }
}
```

This runs all your tests, and proceeds only if they pass


## API

### `npmVersion(newversion, options = {}) -> Promise<String>`

Do the things
  Returns a promise that resolves to the new version if
all is well, or rejects if any errors are encountered
  Defaults to process
cwd()
  Default
`false`
  Defaults to
`'v'`
2
3' when versioning to 1
3
)

#### `commitHooks` Boolean

Run git commit hooks
  Default true


#### `gitTagVersion` Boolean

Tag the version, default true
  Default `false`


#### `signGitTag` Boolean

GPG sign the git tag
  Default `false`
  Default `false`


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
















# `node-gyp` - Node
js native addon build tool

[![Build Status](https://github
com/nodejs/node-gyp/workflows/Tests/badge
svg?branch=main)](https://github
shields
js
js native
addons


Note that `node-gyp` is _not_ used to build Node
js itself


All current and LTS target versions of Node
 Depending on what version of Node
js is actually installed on your system
`node-gyp` downloads the necessary development files or headers for the target version
 List of stable Node
js versions can be found on [Node
js website](https://nodejs
js

## Installation

You can install `node-gyp` using `npm`:

``` bash
npm install -g node-gyp
```

Depending on your operating system, you will need to install:

### On Unix

   * [A supported version of Python](https://devguide
python
org/versions/)
   * `make`
   * A proper C/C++ compiler toolchain, like [GCC](https://gcc
gnu
org)

### On macOS

   * [A supported version of Python](https://devguide
python

     * Install the `Xcode Command Line Tools` standalone by running `xcode-select --install`
apple
com/xcode/download/), you can install the Command Line Tools under the menu `Xcode -> Open Developer Tool -> More Developer Tools




### On Windows

Install the current [version of Python](https://devguide
microsoft


Install tools and configuration manually:
   * Install Visual C++ Build Environment: For Visual Studio 2019 or later, use the `Desktop development with C++` workload from [Visual Studio Community](https://visualstudio
microsoft
com/thank-you-downloading-visual-studio/?sku=BuildTools) with the `Visual C++ build tools` option


   If the above steps didn't work for you, please visit [Microsoft's Node
md#compiling-native-addon-modules) for additional tips


   To target native ARM64 Node
js on Windows on ARM, add the components ""Visual C++ compilers and libraries for ARM64"" and ""Visual C++ ATL for ARM64""
microsoft
com/visualstudio/arm64-visual-studio-is-officially-here/) installed


It's advised to install following Powershell module: [VSSetup](https://github
com/microsoft/vssetup

This will make Visual Studio detection logic to use more flexible and accessible method, avoiding Powershell's `ConstrainedLanguage` mode


### Configuring Python Dependency

`node-gyp` requires that you have installed a [supported version of Python](https://devguide
python
org/versions/)

If you have multiple versions of Python installed, you can identify which version
`node-gyp` should use in one of the following ways:

1
:

``` bash
node-gyp <command> --python /path/to/executable/python
```

2
exe
```

3


4
 If the `NODE_GYP_FORCE_PYTHON` environment variable is set to the path of a
Python executable, it will be used instead of any of the other configured or
built-in Python search paths
 If it's not a compatible version, no further
searching will be done


### Build for Third Party Node
js Runtimes

When building modules for third-party Node
js distribution, you
should use `--dist-url` or `--nodedir` flags to specify the headers of the
runtime to build for
js instance
 Use `configure` for that:

``` bash
node-gyp configure
```

Auto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`
needs to be added (not needed when run by npm as configured above):
``` bash
node-gyp configure --msvs_version=2015
```

__Note__: The `configure` step looks for a `binding
gyp` file
node` bindings file! The compiled bindings end up
in `build/Debug/` or `build/Release/`, depending on the build mode
 At this point,
you can require the `
node` file with Node
js and run your tests!

__Note:__ To create a _Debug_ build of the bindings file, pass the `--debug` (or
`-d`) switch when running either the `configure`, `build` or `rebuild` commands


## The `binding
gyp` file

A `binding
gyp` file describes the configuration to build your module, in a
JSON-like format
json`


A barebones `gyp` file appropriate for building a Node
js addon could look like:

```python
{
  ""targets"": [
    {
      ""target_name"": ""binding"",
      ""sources"": [ ""src/binding
com/nodejs/node/tree/main/test/addons/hello-world)
 * [gyp user documentation](https://gyp
gsrc
io/docs/UserDocumentation
io/docs/InputFormatReference
md)
 * [*""binding
gyp"" files out in the wild* wiki page](
gyp-files-in-the-wild
md)

## Commands

`node-gyp` responds to the following commands:

| **Command**   | **Description**
|:--------------|:---------------------------------------------------------------
| `help`        | Shows the help dialog
| `build`       | Invokes `make`/`msbuild
exe` and builds the native addon
| `clean`       | Removes the `build` directory if it exists
| `configure`   | Generates project build files for the current platform
| `rebuild`     | Runs `clean`, `configure` and `build` all in a row
| `install`     | Installs Node
js header files for the given version
| `list`        | Lists the currently installed Node
js header versions
| `remove`      | Removes the Node
js header files for the given version


## Command Options

`node-gyp` accepts the following command options:

| **Command**                       | **Description**
|:----------------------------------|:------------------------------------------
| `-j n`, `--jobs n`                | Run `make` in parallel
 The value `max` will use all available CPU cores
| `--target=v6
2
1`                 | Node
 `gmake`)
| `--thin=yes`                      | Enable thin static libraries
| `--arch=$arch`                    | Set target architecture (e
g
 ia32)
| `--tarball=$path`                 | Get headers from a local tarball
| `--devdir=$path`                  | SDK download directory (default is OS cache directory)
| `--ensure`                        | Don't reinstall headers if already present
| `--dist-url=$url`                 | Download header tarball from custom URL
| `--proxy=$url`                    | Set HTTP(S) proxy for downloading header tarball
| `--noproxy=$urls`                 | Set urls to ignore proxies when downloading header tarball
| `--cafile=$cafile`                | Override default CA chain (to download tarball)
| `--nodedir=$path`                 | Set the path to the node source code
| `--python=$path`                  | Set path to the Python binary
| `--msvs_version=$version`         | Set Visual Studio version (Windows only)
| `--solution=$solution`            | Set Visual Studio Solution version (Windows only)
| `--force-process-config`          | Force using runtime's `process
config` object to generate `config
gypi` file

## Configuration

### Environment variables

Use the form `npm_config_OPTION_NAME` for any of the command options listed
above (dashes in option names should be replaced by underscores)


For example, to set `devdir` equal to `/tmp/
gyp
```

Or this on Windows:

```console
set npm_config_devdir=c:\temp\


For example, to set `devdir` equal to `/tmp/
gyp`, you would run:

```bash
npm config set [--global] devdir /tmp/
gyp
```

**Note:** Configuration set via `npm` will only be used when `node-gyp`
is run via `npm`, not when `node-gyp` is run directly


## License

`node-gyp` is available under the MIT license
 See the [LICENSE
file](LICENSE) for details


The Wrong Way is to sit down and write an option parser


The Right Way is to write some complex configurable program with so many
options that you hit the limit of your frustration just trying to
manage them all, and defer it with duct-tape solutions until you see
exactly to the core of the problem, and finally snap and write an
awesome option parser


If you want to write an option parser, don't write an option parser

Write a package manager, or a source control system, or a service
restarter, or an operating system


## USAGE

```javascript
// my-program
Stream
  , path = require(""path"")
  , knownOpts = { ""foo"" : [String, null]
                , ""bar"" : [Stream, Number]
                , ""baz"" : path
                , ""bloo"" : [ ""big"", ""medium"", ""small"" ]
                , ""flag"" : Boolean
                , ""pick"" : Boolean
                , ""many1"" : [String, Array]
                , ""many2"" : [path, Array]
                }
  , shortHands = { ""foofoo"" : [""--foo"", ""Mr
 Foo""]
                 , ""b7"" : [""--bar"", ""7""]
                 , ""m"" : [""--bloo"", ""medium""]
                 , ""p"" : [""--pick""]
                 , ""f"" : [""--flag""]
                 }
             // everything is optional
argv
             // slice defaults to 2
  , parsed = nopt(knownOpts, shortHands, process
argv, 2)
console
js --foo ""blerp"" --no-flag
{ ""foo"" : ""blerp"", ""flag"" : false }

$ node my-program
js ---bar 7 --foo ""Mr
 Hand"" --flag
{ bar: 7, foo: ""Mr
 Hand"", flag: true }

$ node my-program
js --foo ""blerp"" -f -----p
{ foo: ""blerp"", flag: true, pick: true }

$ node my-program
 Foo"", flag: true, pick: true }

$ node my-program
js --foofoo -- -fp  # -- stops the flag parsing
 Foo"", argv: { remain: [""-fp""] } }

$ node my-program
js --blatzk -fp # unknown opts are ok

{ blatzk: true, flag: true, pick: true }

$ node my-program

{ baz: ""/Users/isaacs/b/a/z"" }

# if Array is one of the types, then it can take many
# values, and will always be an array


$ node my-program
js --many1 5 --many1 null --many1 foo
{ many1: [""5"", ""null"", ""foo""] }

$ node my-program
js` for more examples of
what this puppy can do


## Types

The following types are supported, and defined on `nopt
typeDefs`

* String: A normal string
  No parsing is done
  If it doesn't parse, it isn't accepted

* Number: Must be numeric

* Date: Must parse as a date
  If an option is a boolean,
  then it does not need a value, and its presence will imply `true` as
  the value
  To negate boolean flags, do `--no-whatever` or `--whatever
  false`
* NaN: Means that the option is strictly not allowed
  Any value will
  fail

* Stream: An object matching the ""Stream"" class in node
  (npm uses this to let you
  supply any WriteStream on the `outfd` and `logfd` config options
)
* Array: If `Array` is specified as one of the types, then the value
  will be parsed as a list of options
  When types are ordered, this implies a
preference, and the first type that can be used to properly interpret
the value will be used


To define a new type, add it to `nopt
  Each item in that
hash is an object with a `type` member and a `validate` method
  The
`type` member is an object that matches what goes in the type list
  The
`validate` method is a function that gets called with `validate(data,
key, val)`
  Validate methods should assign `data[key]` to the valid
value of `val` if it can be handled properly, or return boolean
`false` if it cannot
  You can change this behavior by assigning a method
to `nopt
invalidHandler`


If no `nopt
invalidHandler` is assigned, then it will console
error
its whining


## Abbreviations

Yes, they are supported
js --foolhar --pil
node program

```

## Shorthands

Shorthands are a hash of shorter option names to a snippet of args that
they expand to


If multiple one-character shorthands are all combined, and the
combination does not unambiguously match any other option or shorthand,
then they will be broken up into their constituent parts
  For example:

```json
{ ""s"" : [""--loglevel"", ""silent""]
, ""g"" : ""--global""
, ""f"" : ""--force""
, ""p"" : ""--parseable""
, ""l"" : ""--long""
}
```

```bash
npm ls -sgflp
# just like doing this:
npm ls --loglevel silent --global --force --long --parseable
```

## The Rest of the args

The config object returned by nopt is given a special member called
`argv`, which is an object with the following fields:

* `remain`: The remaining args after all the parsing has occurred
  So they're sliced off by
default
  If you want them, then you can pass in `0` as the last
argument, or any other number that you'd like to slice off the start of
the list


Permission to use, copy, modify, and/or distribute this software for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE COPYRIGHT HOLDER DISCLAIMS
ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE




<!-- This file is automatically added by @npmcli/template-oss
 Do not edit
 -->

ISC License

Copyright npm, Inc
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS






<!-- This file is automatically added by @npmcli/template-oss
 Do not edit
 -->

ISC License

Copyright npm, Inc


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE


## USAGE

```js
const pacote = require('pacote')

// get a package manifest
pacote
manifest('foo@1
extract('github:npm/cli', 'some/path', options)
  
log('extracted!', from, resolved, integrity)
  })

pacote
com/package
tgz')
then(data => {
  console
log('got ' + data
length + ' bytes of tarball data')
})
```

`pacote` works with any kind of package specifier that npm can install
  If
you can pass it to the npm CLI, you can pass it to pacote
)

Anything that you can do with one kind of package, you can do with another


Data that isn't relevant (like a packument for a tarball) will be
simulated


## CLI

This module exports a command line interface that can do most of what is
described below


  pacote extract <spec> <folder>
    Extract a package to the destination folder


Configuration values all match the names of configs passed to npm, or
options passed to Pacote

  --json     Print result objects as JSON rather than node's default

             (This is the default if stdout is not a TTY
)
  --help -h  Print this helpful text


For example '--cache=/path/to/folder' will use that folder as the cache

```

## API

The `spec` refers to any kind of package specifier that npm can install
)

See below for valid `opts` values
extract(spec, dest, opts)` Extract a package's tarball into a
  destination folder
json` file, plus a bit of metadata)

  See below for more on manifests and packuments
  Returns a Promise that
  resolves to the manifest object


* `pacote
  See below for more on manifests and packuments

  Returns a Promise that resolves to the packument object
  Returns a Promise that resolves to the tarball data Buffer, with
  `from`, `resolved`, and `integrity` fields attached


* `pacote
tarball
file(spec, dest, opts)`  Save a package tarball data to
  a file on disk
tarball
stream(spec, streamHandler, opts)`  Fetch a tarball and
  make the stream available to the `streamHandler` function


    This is mostly an internal function, but it is exposed because it does
    provide some functionality that may be difficult to achieve otherwise


    The `streamHandler` function MUST return a Promise that resolves when
    the stream (and all associated work) is ended, or rejects if the stream
    has an error


    The `streamHandler` function MAY be called multiple times, as Pacote
    retries requests in some scenarios, such as cache corruption or
    retriable network failures


### Options

Options are passed to
[`npm-registry-fetch`](http://npm
im/npm-registry-fetch) and
[`cacache`](http://npm


Options object is cloned, and mutated along the way to add integrity,
resolved, and other properties, as they are determined


* `cache` Where to store cache entries and temp files
  Passed to
  [`cacache`](http://npm
im/cacache)

* `integrity` Expected integrity of fetched package tarball
  If specified,
  tarballs with mismatched integrity values will raise an `EINTEGRITY`
  error

* `fmode` Minimum permission mode for extracted files
  Defaults to
  `0o666`
  Defaults to
  `0o777`
  Default `false`

* `before` When picking a manifest from a packument, only consider
  packages published before the specified date

* `defaultTag` The default `dist-tag` to use when choosing a manifest from a
  packument
  Defaults to `latest`

* `registry` The npm registry to use by default
  Defaults to
  `https://registry
org/`

* `fullMetadata` Fetch the full metadata from the registry for packuments,
  including information not strictly required for installation (author,
  description, etc
)  Defaults to `true` when `before` is set, since the
  version publish time is part of the extended packument metadata
 Defaults to `false`

* `silent` A boolean that determines whether the banner is displayed
  when calling `@npmcli/run-script`

* `verifySignatures` A boolean that will make pacote verify the
    integrity signature of a manifest, if present

* `tufCache` Where to store metadata/target files when retrieving the package
  attestation key material via TUF
 Defaults to the same cache directory that
  npm will use by default, based on platform and environment


### Advanced API

Each different type of fetcher is exposed for more advanced usage such as
using helper methods from this classes:

* `DirFetcher`
* `FileFetcher`
* `GitFetcher`
* `RegistryFetcher`
* `RemoteFetcher`

## Extracted File Modes

Files are extracted with a mode matching the following formula:

```
( (tarball entry mode value) | (minimum mode option) ) ~ (umask)
```

This is in order to prevent unreadable files or unlistable directories from
cluttering a project's `node_modules` folder, even if the package tarball
specifies that the file should be inaccessible


So, a file which is `0o771` in the tarball, using the default `fmode` of
`0o666` and `umask` of `0o22`, will result in a file mode of `0o755`:

```
(0o771 | 0o666) => 0o777
(0o777 ~ 0o22) => 0o755
```

In almost every case, the defaults are appropriate
  Otherwise, the `umask` config
should be used in most cases where file mode modifications are required,
and this functions more or less the same as the `umask` value in most Unix
systems
json` file
  However, it has a few
pieces of extra metadata, and sometimes lacks metadata that is inessential
to package installation


In addition to the common `package
_resolved` The tarball url or file path where the package
  artifact can be found

* `manifest
_from` A normalized form of the spec passed in as an argument

* `manifest

* `manifest

* `manifest
  Only `tarball` is required, though at least one of
  `shasum` or `integrity` is almost always present
  (Copied by
      Pacote to `manifest
_resolved`
)
    * `integrity` The integrity SRI string for the artifact
  This may not
      be present for older packages on the npm registry
  (Copied by Pacote
      to `manifest
)
    * `shasum` Legacy integrity value
  Hexadecimal-encoded sha1 hash

      (Converted to an SRI string and copied by Pacote to
      `manifest
_integrity` when `dist
)
    * `fileCount` Number of files in the tarball

    * `unpackedSize` Size on disk of the package when unpacked
org/-/npm/v1/keys)

## Packuments

A packument is the top-level package document that lists the set of
manifests for available versions for a package
  Additional metadata is returned
when fetched with only `accept: application/json`

* `dist-tags` An object mapping dist-tags to version numbers

* `time` In the full packument, an object mapping version numbers to
  publication times, for the `opts
before` functionality


Pacote adds the following field, regardless of the accept header:

* `_contentLength` The size of the packument
 Do not edit


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE







# Blue Oak Model License

Version 1
0
0

## Purpose

This license gives everyone as much permission to work with
this software as possible, while protecting contributors
from liability


## Notices

You must ensure that everyone who gets a copy of
any part of this software from you, with or without
changes, also gets the text of this license or a link to
<https://blueoakcouncil
org/license/1
0


## Excuse

If anyone notifies you in writing that you have not
complied with [Notices](#notices), you can keep your
license by taking all practical steps to comply within 30
days after the notice
  If you do not do so, your license
ends immediately


## Reliability

No contributor can revoke this license


## No Liability

***As far as the law allows, this software comes as is,
without any warranty or condition, and no contributor
will be liable to anyone for any damages related to this
software or this license, under any kind of legal claim
***




















# QRCode Terminal Edition [![Build Status][travis-ci-img]][travis-ci-url]

> Going where no QRCode has gone before


![Basic Example][basic-example-img]

# Node Library

## Install

Can be installed with:

    $ npm install qrcode-terminal

and used:

    var qrcode = require('qrcode-terminal');

## Usage

To display some data to the terminal just call:

    qrcode
log(qrcode);
    });

If you want to display small output, provide `opts` with `small`:

    qrcode
generate('This will be a small QRCode, eh!', {small: true});

    qrcode
generate('This will be a small QRCode, eh!', {small: true}, function (qrcode) {
        console
org/gtanner/qrcode-terminal
org/gtanner/qrcode-terminal
[basic-example-img]: https://raw
github
com/gtanner/qrcode-terminal/master/example/basic
2
2
3'
semver
2
3   ') // '1
satisfies('1
3', '1
x || >=2
0 - 7
3') // true
semver
2
3', '9
8
lt('1
2
3', '9
7') // true
semver
minVersion('>=1
0') // '1
0
0'
semver
valid(semver
0
coerce('42
6
7
9
6
7'
```

You can also just load the module for the function that you care about, if
you'd like to minimize your footprint


```js
// load the whole API at once in a single object
const semver = require('semver')

// or just load the bits you need
// all of them listed here, just pick and choose what you want

// classes
const SemVer = require('semver/classes/semver')
const Comparator = require('semver/classes/comparator')
const Range = require('semver/classes/range')

// functions for working with versions
const semverParse = require('semver/functions/parse')
const semverValid = require('semver/functions/valid')
const semverClean = require('semver/functions/clean')
const semverInc = require('semver/functions/inc')
const semverDiff = require('semver/functions/diff')
const semverMajor = require('semver/functions/major')
const semverMinor = require('semver/functions/minor')
const semverPatch = require('semver/functions/patch')
const semverPrerelease = require('semver/functions/prerelease')
const semverCompare = require('semver/functions/compare')
const semverRcompare = require('semver/functions/rcompare')
const semverCompareLoose = require('semver/functions/compare-loose')
const semverCompareBuild = require('semver/functions/compare-build')
const semverSort = require('semver/functions/sort')
const semverRsort = require('semver/functions/rsort')

// low-level comparators between versions
const semverGt = require('semver/functions/gt')
const semverLt = require('semver/functions/lt')
const semverEq = require('semver/functions/eq')
const semverNeq = require('semver/functions/neq')
const semverGte = require('semver/functions/gte')
const semverLte = require('semver/functions/lte')
const semverCmp = require('semver/functions/cmp')
const semverCoerce = require('semver/functions/coerce')

// working with ranges
const semverSatisfies = require('semver/functions/satisfies')
const semverMaxSatisfying = require('semver/ranges/max-satisfying')
const semverMinSatisfying = require('semver/ranges/min-satisfying')
const semverToComparators = require('semver/ranges/to-comparators')
const semverMinVersion = require('semver/ranges/min-version')
const semverValidRange = require('semver/ranges/valid')
const semverOutside = require('semver/ranges/outside')
const semverGtr = require('semver/ranges/gtr')
const semverLtr = require('semver/ranges/ltr')
const semverIntersects = require('semver/ranges/intersects')
const simplifyRange = require('semver/ranges/simplify')
const rangeSubset = require('semver/ranges/subset')
```

As a command-line utility:

```
$ semver -h

A JavaScript implementation of the https://semver
org/ specification
Copyright Isaac Z
 Schlueter

Usage: semver [options] <version> [<version> [



--preid <identifier>
        Identifier to be used to prefix premajor, preminor,
        prepatch or prerelease version increments


Versions are printed in ascending order, so supplying
multiple versions to the utility will just sort them

```

## Versions

A ""version"" is described by the `v2
0
org/>


A `comparator` is composed of an `operator` and a `version`
  If no operator is specified, then equality is assumed,
  so this operator is optional, but MAY be included


For example, the comparator `>=1
7` would match the versions
`1
2
7`, `1
2
3
2
6`
or `1
1
0` and `3
1` or `1
0`


Comparators can be joined by whitespace to form a `comparator set`,
which is satisfied by the **intersection** of all of the comparators
it includes


A range is composed of one or more comparator sets, joined by `||`
  A
version matches a range if and only if every comparator in at least
one of the `||`-separated comparator sets is satisfied by the version


For example, the range `>=1
2
7 <1
3
0` would match the versions
`1
2
2
8`, and `1
2
6`, `1
1
0`


The range `1
7 || >=1
2
9 <2
0` would match the versions `1
2
9`, and `1
4
8` or `2
0`


### Prerelease Tags

If a version has a prerelease tag (for example, `1
2
3-alpha
2
3-alpha
7`, but it would *not* be satisfied by
`3
4
5-alpha
3-alpha
  The version
range only accepts prerelease tags on the `1
2
3` version
  The
version `3
4
5` *would* satisfy the range, because it does not have a
prerelease flag, and `3
2
3-alpha
7`
  First, prerelease versions
frequently are updated very quickly, and contain many breaking changes
that are (by the author's design) not yet fit for public consumption

Therefore, by default, they are excluded from range matching
semantics


Second, a user who has opted into using a prerelease version has
clearly indicated the intent to use *that specific* set of
alpha/beta/rc versions
  By including a prerelease tag in the range,
the user is indicating that they are aware of the risk
com/npm/node-semver#functions) that do
range matching


#### Prerelease Identifiers

The method `
inc('1
4-beta
0'
```

command-line example:

```bash
$ semver 1
2
3 -i prerelease --preid beta
1
2
4-beta
0 -i prerelease
1
2
4-beta
inc` takes an optional parameter 'identifierBase' string
that will let you let your prerelease number as zero-based or one-based


```javascript
semver
inc('1
2
4-beta
1'
```

```javascript
semver
4-beta'
```

command-line example:

```bash
$ semver 1
3 -i prerelease --preid beta -n 1
1
2
1
```

```bash
$ semver 1
4-beta
```

### Advanced Range Syntax

Advanced range syntax desugars to primitive comparators in
deterministic ways


#### Hyphen Ranges `X
Y
B
3 - 2
4` := `>=1
2
3 <=2
3


* `1
2 - 2
3
4` := `>=1
0 <=2
3


* `1
2
3 - 2
2
3 <2
0-0`
* `1
2
3 - 2` := `>=1
2
3 <3
0
0-0`

#### X-Ranges `1
x` `1
X` `1
2


* `*` := `>=0
0
0
0-0` (Matching major version)
* `1
2


* `""""` (empty string) := `*` := `>=0
0
0`
* `1` := `1
x
x` := `>=1
0 <2
0
x` := `>=1
2
0-0`

#### Tilde Ranges `~1
2
3` `~1
2` `~1`

Allows patch-level changes if a minor version is specified on the
comparator


* `~1
3` := `>=1
2
2
3 <1
3
0-0`
* `~1
2
0 <1
0` := `>=1
2
0 <1
3
0
0 <(1+1)
0
0 <2
x`)
* `~0
3 <0
0-0`
* `~0
2
0 <0
(2+1)
0` := `>=0
2
0 <0
3
0-0` (Same as `0
2
x`)
* `~0` := `>=0
0 <(0+1)
0
0 <1
0
x`)
* `~1
2
3-beta
2
3-beta
2 <1
3
2
3` version will be allowed, if they are greater than or
  equal to `beta
2`
2
4-beta


#### Caret Ranges `^1
2
0
4`

Allows changes that do not modify the left-most non-zero element in the
`[major, minor, patch]` tuple
0
X >=0
0`, and *no* updates for versions `0
0
X`
2
3
0` releases, which is a common practice
2
  It allows for changes that are presumed to be
additive (but non-breaking), according to commonly observed practices


* `^1
2
3` := `>=1
2
3 <2
2
3 <0
0-0`
* `^0
0
3` := `>=0
0
3 <0
0
4-0`
* `^1
2
2
2 <2
0
0-0` Note that prereleases in
  the `1
2
3` version will be allowed, if they are greater than or
  equal to `beta
  So, `1
2
3-beta
4-beta
0
3-beta` := `>=0
0
3-beta <0
4-0`  Note that prereleases in the
  `0
0
0
3-pr


When parsing caret ranges, a missing `patch` value desugars to the
number `0`, but will allow flexibility within that value, even if the
major and minor versions are both `0`


* `^1
2
2
0 <2
0
x` := `>=0
0
1
0-0`
* `^0
0
0 <0
0-0`

A missing `minor` and `patch` values will desugar to zero, but also
allow flexibility within those values, even if the major version is
zero
0
0 <2
0-0`
* `^0
0 <1
0-0`

### Range Grammar

Putting all this together, here is a Backus-Naur grammar for ranges,
for the benefit of parser authors:

```bnf
range-set  ::= range ( logical-or range ) *
logical-or ::= ( ' ' ) * '||' ( ' ' ) *
range      ::= hyphen | simple ( ' ' simple ) * | ''
hyphen     ::= partial ' - ' partial
simple     ::= primitive | partial | tilde | caret
primitive  ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial
partial    ::= xr ( '
' xr ( '
' xr qualifier ? )? )?
xr         ::= 'x' | 'X' | '*' | nr
nr         ::= '0' | ['1'-'9'] ( ['0'-'9'] ) *
tilde      ::= '~' partial
caret      ::= '^' partial
qualifier  ::= ( '-' pre )? ( '+' build )?
pre        ::= parts
build      ::= parts
parts      ::= part ( '
  The options supported
are:

- `loose`  Be more forgiving about not-quite-valid semver strings
)  For backwards compatibility reasons, if the `options`
  argument is a boolean value instead of an object, it is interpreted
  to be the `loose` param

- `includePrerelease`  Set to suppress the [default
  behavior](https://github
com/npm/node-semver#prerelease-tags) of
  excluding prerelease tagged versions from ranges unless they are
  explicitly opted into


Strict-mode Comparators and Ranges will be strict about the SemVer
strings that they parse

* `inc(v, release)`: Return the version incremented by the release
  type (`major`,   `premajor`, `minor`, `preminor`, `patch`,
  `prepatch`, or `prerelease`), or null if it's not valid
  * `premajor` in one call will bump the version up to the next major
    version and down to a prerelease of that major version

    `preminor`, and `prepatch` work the same way

  * If called from a non-prerelease version, the `prerelease` will work the
    same as `prepatch`
 It increments the patch version, then makes a
    prerelease
 If the input version is already a prerelease it simply
    increments it
2
3-alpha
1') -> ['alpha', 1]`
* `major(v)`: Return the major version number

* `minor(v)`: Return the minor version number

* `intersects(r1, r2, loose)`: Return true if the two supplied ranges
  or comparators intersect


### Comparison

* `gt(v1, v2)`: `v1 > v2`
* `gte(v1, v2)`: `v1 >= v2`
* `lt(v1, v2)`: `v1 < v2`
* `lte(v1, v2)`: `v1 <= v2`
* `eq(v1, v2)`: `v1 == v2` This is true if they're logically equivalent,
  even if they're not the exact same string

* `neq(v1, v2)`: `v1 != v2` The opposite of `eq`

* `cmp(v1, comparator, v2)`: Pass in a comparison string, and it'll call
  the corresponding function above
  `""===""` and `""!==""` do simple
  string comparison, but are included for completeness
  Throws if an
  invalid comparison string is provided

* `rcompare(v1, v2)`: The reverse of compare
  Sorts an array of versions
  in descending order when passed to `Array
sort()`

* `compareBuild(v1, v2)`: The same as `compare` but considers `build` when two versions
  are equal
  Sorts in ascending order if passed to `Array

  `v2` is greater
  Sorts in ascending order if passed to `Array
sort()`

* `maxSatisfying(versions, range)`: Return the highest version in the list
  that satisfies the range, or `null` if none of them do

* `minSatisfying(versions, range)`: Return the lowest version in the list
  that satisfies the range, or `null` if none of them do

* `gtr(version, range)`: Return `true` if version is greater than all the
  versions possible in the range

* `ltr(version, range)`: Return `true` if version is less than all the
  versions possible in the range

* `outside(version, range, hilo)`: Return true if the version is outside
  the bounds of the range in either the high or low direction
  The
  `hilo` argument must be either the string `'>'` or `'<'`
  (This is
  the function called by `gtr` and `ltr`
)
* `intersects(range)`: Return true if any of the ranges comparators intersect
* `simplifyRange(versions, range)`: Return a ""simplified"" range that
  matches the same items in `versions` list as the range specified
  Note
  that it does *not* guarantee that it would match the same versions in all
  cases, only for the set of versions provided
  This is useful when
  generating ranges by joining together multiple versions with `||`
  programmatically, to provide the user with something a bit more
  ergonomic
  If the provided range is shorter in string-length than the
  generated range, then that is returned

* `subset(subRange, superRange)`: Return `true` if the `subRange` range is
  entirely contained by the `superRange` range


Note that, since ranges may be non-contiguous, a version might not be
greater than a range, less than a range, *or* satisfy a range!  For
example, the range `1
9 || >2
0
2
0`, so the version `1
0
2
8` satisfies, which is lower), and it also does not
satisfy the range


If you want to know if a version satisfies or does not satisfy a
range, use the `satisfies(version, range)` function
 It looks for the first digit in a string, and consumes all
remaining characters which satisfy at least a partial semver (e
g
, `1`,
`1
2`, `1
2
3`) up to the max permitted length (256 characters)
  Longer
versions are simply truncated (`4
6
2-alpha2` becomes `4
  All
surrounding text is simply ignored (`v3
4
  Only text which lacks digits will fail coercion (`version one`
is not valid)
4
7
4` becomes `4
  The maximum value for any
semver component is `Number
MAX_SAFE_INTEGER || (2**53 - 1)`; higher value
components are invalid (`9999999999999999
4
rtl` flag is set, then `coerce` will return the right-most
coercible tuple that does not share an ending index with a longer coercible
tuple
2
3
0
  `1
2
3/4` will return `4
0`, because the `4` is not a part of
any other overlapping SemVer tuple
includePrerelease` flag is set, then the `coerce` result will contain
prerelease and build parts of a version
3
2`
will preserve prerelease `rc
1` and build `rev
2` in the result


### Clean

* `clean(version)`: Clean a string to be a valid semver if possible

This will return a cleaned and trimmed semver version
 If the provided
version is not valid a null will be returned


ex

* `s
1
5foo')`: `null`
* `s
1
5foo', { loose: true })`: `'2
1
5-foo'`
* `s
clean(' = v 2
1
clean(' = v 2
1
clean('=v2
1
5')`: `'2
5'`
* `s
clean('  =v2
1
1
clean('      2
1
5   ')`: `'2
1
5'`
* `s
clean('~1
0')`: `null`

## Constants

As a convenience, helper constants are exported to provide information about what `node-semver` supports:

### `RELEASE_TYPES`

- major
- premajor
- minor
- preminor
- patch
- prepatch
- prerelease

```
const semver = require('semver');

if (semver
RELEASE_TYPES
log('This is a valid release type!');
} else {
  console
warn('This is NOT a valid release type!');
}
```

### `SEMVER_SPEC_VERSION`

2
0
0

```
const semver = require('semver');

console
log('We are currently using the semver specification version:', semver

-->

You may pull in just the part of this semver utility that you need, if you
are sensitive to packing and tree-shaking concerns
  The main
`require('semver')` export uses getter functions to lazily load the parts
of the API that are used
 IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE








The ISC License

Copyright (c) 2015-2023 Benjamin Coe, Isaac Z
 Schlueter, and Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS
 IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE












# socks examples

## TypeScript Examples

[Connect command](typescript/connectExample
md)

## JavaScript Examples

[Connect command](javascript/connectExample
md)

[Associate command](javascript/associateExample
 From here, any SOCKS UDP frame packets sent to this special UDP port on the Proxy server will be forwarded to the desired destination, and any responses will be forwarded back to the origin client (you)


This can be used for things such as DNS queries, and other UDP communicates
 Client -(associate)-> Proxy (Tells the proxy to create a UDP relay and bind on a new port)
2
 Client <-(port)- Proxy (Tells the origin client which port it opened and is accepting UDP frame packets on)

At this point the proxy is accepting UDP frames on the specified port
 Client --(udp frame) -> Proxy -> Destination (The origin client sends a UDP frame to the proxy on the UDP port, and the proxy then forwards it to the destination specified in the UDP frame
 Client <--(udp frame) <-- Proxy <-- Destination (The destination client responds to the udp packet sent in #3)

## Usage

The 'associate' command can only be used by creating a new SocksClient instance and listening for the 'established' event


**Note:** UDP packets relayed through the proxy servers are encompassed in a special Socks UDP frame format
 SocksClient
parseUDPFrame() create and parse these special UDP packets


```typescript
const dgram = require('dgram');
const SocksClient = require('socks')
SocksClient;

// Create a local UDP socket for sending/receiving packets to/from the proxy

const udpSocket = dgram
createSocket('udp4');
udpSocket
bind();

// Listen for incoming UDP packets from the proxy server

udpSocket
log(SocksClient
parseUDPFrame(message));
  /*
  { frameNumber: 0,
    remoteHost: { host: '8
131
124

  // Most SOCKS servers accept 0
0
0

  destination: {
    host: '0
0',
    port: 0
  },

  command: 'associate'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new UDP port for UDP relaying

client
on('established', info => {
  console

131
124
203',
      port: 58232
    }
  }
  */

  // Send a udp frame to 8
8
8

  const packet = SocksClient
createUDPFrame({
    remoteHost: { host: '8
8
8
from('hello') // A DNS lookup in the real world
remoteHost
host);
});

// SOCKS proxy failed to bind

client
 It communicates the newly opened port back to the origin client
 Once a incoming connection is accepted by the SOCKS proxy server it then communicates the remote host that connected to the SOCKS proxy back through the same initial connection via the origin client
 Client <--(client2's host info)  (Proxy tells the origin client who connected to it)
5
 Original connection to the proxy is now a full TCP stream between client (you) and client2
 Client <--> Proxy <--> Client2


## Usage

The 'bind' command can only be used by creating a new SocksClient instance and listening for 'bound' and 'established' events
SocksClient;

const options = {
  proxy: {
    host: '104
131
124
0
0 as a wildcard address to accept any client
0
0

>,
    remoteHost: { // This is the remote ip and port of the SOCKS proxy that is now accepting incoming connections
131
203',
      port: 49928
    }
  }
  */
});

// This event is fired when the SOCKS server has accepted an incoming connection on the newly bound port

client


2
3
4',
      port: 58232
    }
  }
  */

  // At this point info
2
3
4) (the client which connected to the proxy on the newly bound port
log(info
socket);
  // <Socket 


>  (this is a raw net
Socket that is established to the destination host through the given proxy servers)
});

// SOCKS proxy failed to bind
 This establishes a direct connection to a destination host through a proxy server
 The destination host only has knowledge of the proxy server connecting to it and does not know about the origin client (you)


**Origin Client (you) <-> Proxy Server <-> Destination Server**

In this example, we are connecting to a web server on port 80, and sending a very basic HTTP request to receive a response
js) to make this easier
 This HTTP request is used as a simple example


The 'connect' command can be used via the SocksClient
createConnection returns a Promise, we can easily use async/await for flow control

    port: 80
  },

  command: 'connect'
};

async function start() {
  try {
    const info = await SocksClient
createConnection(options);

    console

>  (this is a raw net
socket
write('GET /json HTTP/1
1\nHost: ip-api
on('data', (data) => {
      console
124
1 200 OK
        Access-Control-Allow-Origin: *
        Content-Type: application/json; charset=utf-8
        Date: Sun, 24 Dec 2017 03:47:51 GMT
        Content-Length: 300

        {
          ""as"":""AS14061 Digital Ocean, Inc
"",
          ""city"":""Clifton"",
          ""country"":""United States"",
          ""countryCode"":""US"",
          ""isp"":""Digital Ocean"",
          ""lat"":40
1307,
          ""org"":""Digital Ocean"",
          ""query"":""104
131
124
124
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api

    port: 80
  },

  command: 'connect'
};

SocksClient
createConnection(options)

log(info

Socket that is established to the destination host through the given proxy servers)

  info
socket
write('GET /json HTTP/1
1\nHost: ip-api
com\n\n');
  info
on('data', (data) => {
    console
com sees that the last proxy (104
131
1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        ""as"":""AS14061 Digital Ocean, Inc
"",
        ""city"":""Clifton"",
        ""country"":""United States"",
        ""countryCode"":""US"",
        ""isp"":""Digital Ocean"",
        ""lat"":40
8326,
        ""lon"":-74
203"",
        ""region"":""NJ"",
        ""regionName"":""New Jersey"",
        ""status"":""success"",
        ""timezone"":""America/New_York"",
        ""zip"":""07014""
      }
    */
})

catch(err => {
  // handle errors
});
```

### Using createConnection with callbacks

SocksClient


**Note:** If a callback function is provided, a Promise is still returned from the function, but the promise will always resolve regardless of if there was en error
 (tldr: Do not mix callbacks and Promises)


```typescript
const SocksClient = require('socks')
SocksClient;

const options  = {
  proxy: {
    ipaddress: '104
131
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api
com', // host names are supported with SOCKS v4a and SOCKS v5

    port: 80
  },

  command: 'connect'
};

SocksClient
createConnection(options, (err, info) => {
  if (err) {
    // handle errors
  } else {
    console
log(info
socket);
    // <Socket 


>  (this is a raw net
Socket that is established to the destination host through the given proxy servers)

    info
socket
1\nHost: ip-api
com\n\n');
    info
log(data
131
124
203) is connected to it and not the origin client (you)

      /*
        HTTP/1
8326,
          ""lon"":-74
131
124


```typescript
const SocksClient = require('socks')
131
124
com', // host names are supported with SOCKS v4a and SOCKS v5

Socket that is established to the destination host through the given proxy servers)

  info
socket
write('GET /json HTTP/1
1\nHost: ip-api
com\n\n');
  info
socket
on('data', (data) => {
    console
toString()); // ip-api
com sees that the last proxy (104
131
"",
        ""city"":""Clifton"",
        ""country"":""United States"",
        ""countryCode"":""US"",
        ""isp"":""Digital Ocean"",
        ""lat"":40
8326,
        ""lon"":-74
131
124
 The server binds to a new UDP port and communicates the newly opened port back to the origin client


This can be used for things such as DNS queries, and other UDP communicates


**Connection Steps**

1
 Client <-(port)- Proxy (Tells the origin client which port it opened and is accepting UDP frame packets on)

At this point the proxy is accepting UDP frames on the specified port


3
 Client --(udp frame) -> Proxy -> Destination (The origin client sends a UDP frame to the proxy on the UDP port, and the proxy then forwards it to the destination specified in the UDP frame


**Note:** UDP packets relayed through the proxy servers are packaged in a special Socks UDP frame format
 SocksClient


```typescript
import * as dgram from 'dgram';
import { SocksClient, SocksClientOptions } from 'socks';

// Create a local UDP socket for sending/receiving packets to/from the proxy

const udpSocket = dgram

udpSocket
on('message', (message, rinfo) => {
  console
parseUDPFrame(message));
  /*
  { frameNumber: 0,
    remoteHost: { host: '8
8
203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will be sending UDP frames to the newly opened UDP port on the server

  // Most SOCKS servers accept 0
0
0
on('established', info => {
  console


>,
    remoteHost: { // This is the remote port on the SOCKS proxy server to send UDP frame packets to

      host: '104
203',
      port: 58232
    }
  }
  */

  // Send a udp frame to 8
8
8', port: 53 },
    data: Buffer
from('hello') // A DNS lookup in the real world

  });

  // Send packet
send(packet, info
remoteHost
host);
});

// SOCKS proxy failed to bind

client
on('error', () => {
  // Handle errors
});

// Start connection
client
connect();
```

# socks examples

## Example for SOCKS 'bind' command

The bind command tells the SOCKS proxy server to bind and listen on a new TCP port for an incoming connection
 Once a incoming connection is accepted by the SOCKS proxy server it then communicates the remote host that connected to the SOCKS proxy back through the same initial connection via the origin client


This can be used for things such as FTP clients which require incoming TCP connections, etc


**Connection Steps**

1
 Client -(bind)-> Proxy    (Tells the proxy to bind to a new port)
2
 Client <--(client2's host info)  (Proxy tells the origin client who connected to it)
5

6
 Client <--> Proxy <--> Client2


## Usage

The 'bind' command can only be used by creating a new SocksClient instance and listening for 'bound' and 'established' events



```typescript
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    host: '104
131
124
0
0
0
0
0',
    port: 0
  },

  command: 'bind'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new port for incoming connections
on('bound', (info) => {
  console
log(info);
  /*
  {
    socket: <Socket 


      host: '104
124
203',
      port: 49928
    }
  }
  */
});

// This event is fired when the SOCKS server has accepted an incoming connection on the newly bound port
on('established', (info) => {
  console
log(info);
  /*
  {
    socket: <Socket 


>,
    remoteHost: { // This is the remote ip and port that connected to the SOCKS proxy on the newly bound port

      host: '1
3
4',
      port: 58232
    }
  }
  */

  // At this point info
socket is a regular net
2
3
4) (the client which connected to the proxy on the newly bound port
log(info
socket);
  // <Socket 

>  (this is a raw net

client
 The destination host only has knowledge of the proxy server connecting to it and does not know about the origin client (you)


**Origin Client (you) <-> Proxy Server <-> Destination Server**

In this example, we are connecting to a web server on port 80, and sending a very basic HTTP request to receive a response


The 'connect' command can be used via the SocksClient
createConnection() factory function as well as by creating a SocksClient instance and using event handlers


### Using createConnection with async/await

Since SocksClient


```typescript
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    host: '104
124
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api
com', // host names are supported with SOCKS v4a and SOCKS v5

    port: 80
  },

  command: 'connect'
};

async function start() {
  try {
    const info = await SocksClient
createConnection(options);

    console
log(info


>  (this is a raw net
Socket that is established to the destination host through the given proxy servers)

    info
socket
write('GET /json HTTP/1
socket
on('data', (data) => {
      console
log(data
com sees that the last proxy (104
131
1 200 OK
        Access-Control-Allow-Origin: *
        Content-Type: application/json; charset=utf-8
        Date: Sun, 24 Dec 2017 03:47:51 GMT
        Content-Length: 300

        {
          ""as"":""AS14061 Digital Ocean, Inc
"",
          ""city"":""Clifton"",
          ""country"":""United States"",
          ""countryCode"":""US"",
          ""isp"":""Digital Ocean"",
          ""lat"":40
8326,
          ""lon"":-74
124
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api
then(info => {
  console
log(info
socket);
  // <Socket 


>  (this is a raw net
socket
write('GET /json HTTP/1
com\n\n');
  info
socket
on('data', (data) => {
    console
log(data
com sees that the last proxy (104
131
124
1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        ""as"":""AS14061 Digital Ocean, Inc
8326,
        ""lon"":-74
124
203"",
        ""region"":""NJ"",
        ""regionName"":""New Jersey"",
        ""status"":""success"",
        ""timezone"":""America/New_York"",
        ""zip"":""07014""
      }
    */
  });
})

createConnection() optionally accepts a callback function as a second parameter


**Note:** If a callback function is provided, a Promise is still returned from the function, but the promise will always resolve regardless of if there was en error
 (tldr: Do not mix callbacks and Promises)


```typescript
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    ipaddress: '104
124
com', // host names are supported with SOCKS v4a and SOCKS v5
createConnection(options, (err, info) => {
  if (err) {
    // handle errors
  } else {
    console
log(info
socket);
    // <Socket 

>  (this is a raw net
socket
write('GET /json HTTP/1
socket
on('data', (data) => {
      console
com sees that the last proxy (104
124

      /*
        HTTP/1
1 200 OK
        Access-Control-Allow-Origin: *
        Content-Type: application/json; charset=utf-8
        Date: Sun, 24 Dec 2017 03:47:51 GMT
        Content-Length: 300

        {
          ""as"":""AS14061 Digital Ocean, Inc
8326,
          ""lon"":-74
124
 This allows for event based flow control


```typescript
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    ipaddress: '104
131
124
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api
com', // host names are supported with SOCKS v4a and SOCKS v5

    port: 80
  },

  command: 'connect'
};

const client = new SocksClient(options);

client
log(info
socket);
  // <Socket 

>  (this is a raw net
socket
write('GET /json HTTP/1
1\nHost: ip-api
on('data', (data) => {
    console
com sees that the last proxy (104
124
203) is connected to it and not the origin client (you)

    /*
      HTTP/1
1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        ""as"":""AS14061 Digital Ocean, Inc
203"",
        ""region"":""NJ"",
        ""regionName"":""New Jersey"",
        ""status"":""success"",
        ""timezone"":""America/New_York"",
        ""zip"":""07014""
      }
    */
  });
});

// Failed to establish proxy connection to destination

client
on('error', () => {
  // Handle errors
});

// Start connection
client
connect();
```


# Documentation

- [API Reference](https://github
com/JoshGlazebrook/socks#api-reference)

- [Code Examples](
md)
# socks

## Migrating from v1

For the most part, migrating from v1 takes minimal effort as v2 still supports factory creation of proxy connections with callback support


### Notable breaking changes

- In an options object, the proxy 'command' is now required and does not default to 'connect'

- In v2, only the 'connect' command is supported via the factory SocksClient
createConnection function

- In v2, the factory SocksClient


### Before (v1)

```javascript
var Socks = require('socks');

var options = {
    proxy: {
        ipaddress: ""202
108"",
        port: 1080,
        type: 5
    },
    target: {
        host: ""google
com"",
        port: 80
    },
    command: 'connect'
};

Socks
createConnection(options, function(err, socket, info) {
    if (err)
        console
write(""GET / HTTP/1
1\nHost: google
com\n\n"");
        socket
on('data', function(data) {
            console
log(data
length);
            console
log(data);
        });

        // PLEASE NOTE: sockets need to be resumed before any data will come in or out as they are paused right before this callback is fired
resume();

        // 569
        // <Buffer 48 54 54 50 2f 31 2e 31 20 33 30 31 20 4d 6f 76 65 64 20 50 65



    }
});
```

### After (v2)
```javascript
const SocksClient = require('socks')
SocksClient;

let options = {
    proxy: {
        ipaddress: ""202
228
socket
write(""GET / HTTP/1
1\nHost: google
socket
log(data
length);
            console
log(data);
        });

        // 569
        // <Buffer 48 54 54 50 2f 31 2e 31 20 33 30 31 20 4d 6f 76 65 64 20 50 65



Permission to use, copy, modify, and/or distribute this software for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
























### Javascript porting of Markus Kuhn's wcwidth() implementation

The following explanation comes from the original C implementation:

This is an implementation of wcwidth() and wcswidth() (defined in
IEEE Std 1002
1-2001) for Unicode


http://www
opengroup
org/onlinepubs/007904975/functions/wcswidth
html

In fixed-width output devices, Latin characters all occupy a single
""cell"" position of equal width, whereas ideographic CJK characters
occupy two such cells
 No established formal
standards exist at present on which Unicode character shall occupy
how many cell positions on character terminals

In all these cases, there is no ambiguity about which width a
terminal shall use
 For characters in the East Asian Ambiguous (A)
class, the width choice depends purely on a preference of backward
compatibility with either historic CJK or Western practice

Choosing single-width for these characters is easy to justify as
the appropriate long-term solution, as the CJK practice of
displaying these characters as double-width comes from historic
implementation simplicity (8-bit encoded characters were displayed
single-width and 16-bit ones double-width, even for Greek,
Cyrillic, etc
 The following
routines at present merely assign a single-cell width to all
neutral characters, in the interest of simplicity
 At the moment, the
decision which Not East Asian (Neutral) characters should be
represented by double-width glyphs cannot yet be answered by
applying a simple rule from the Unicode database content
 Setting
up a proper standard for the behavior of UTF-8 character terminals
will require a careful analysis not only of each Unicode character,
but also of each presentation form, something the author of these
routines has avoided to do so far
org/unicode/reports/tr11/

Markus Kuhn -- 2007-05-26 (Unicode 5


Latest version: http://www
cl
cam
uk/~mgk25/ucs/wcwidth


Finds the first instance of a specified executable in the PATH
environment variable
  Does not cache the results, so `hash -r` is not
needed when the PATH changes


## USAGE

```javascript
const which = require('which')

// async usage
// rejects if not found
const resolved = await which('node')

// if nothrow option is used, returns null if not found
const resolvedOrNull = await which('node', { nothrow: true })

// sync usage
// throws if not found
const resolved = which
sync('node')

// if nothrow option is used, returns null if not found
const resolvedOrNull = which


```
usage: node-which [-as] program 



```

You can learn more about why the binary is `node-which` and not `which`
[here](https://github


- `path`: Use instead of the `PATH` environment variable
  Note that
  this means the function returns an array of strings instead of a
  single string


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE





# npm - a JavaScript package manager

[![npm version](https://img
shields
svg)](https://npm
im/npm)
[![license](https://img
shields
io/npm/l/npm
svg)](https://npm
com/npm/cli/actions/workflows/ci
yml/badge
svg)](https://github
yml)
[![Benchmark Suite](https://github
svg)](https://github
yml)

### Requirements

One of the following versions of [Node
x
x` >= `18
17
5
org/), & most third-party distributions, by default
 Officially supported downloads/distributions can be found at: [nodejs
org/en/download](https://nodejs
org/en/download)

#### Direct Download

You can download & install **`npm`** directly from [**npmjs**
com](https://npmjs
com/) using our custom `install
sh` script:

```bash
curl -qL https://www
npmjs
com/install
sh | sh
```

#### Node Version Managers

If you're looking to manage multiple versions of **`Node
js`** &/or **`npm`**, consider using a [node version manager](https://github
npmjs
com/) - Official docs & how-tos for all things **npm**
    * Note: you can also search docs locally with `npm help-search <query>`
* [**Bug Tracker**](https://github
com/npm/cli/issues) - Search or submit bugs against the CLI
* [**Roadmap**](https://github
npmjs
org/) - Monitor the current status & see incident reports for the website & registry
* [**Project Status**](https://npm
github
io/statusboard/) - See the health of all our maintained OSS projects in one view
* [**Events Calendar**](https://calendar
com/calendar/u/0/embed?src=npmjs
com_oonluqt8oftrt0vmgrfbg6q6go@group
npmjs
com) or [registry](https://registry
npmjs
org)? File a ticket [here](https://www
npmjs
com/support)

### Acknowledgments

* `npm` is configured to use the **npm Public Registry** at [https://registry
npmjs
org](https://registry
com/policies/terms](https://npmjs
com/policies/terms)
* You can configure `npm` to use any other compatible registry you prefer
 You can read more about configuring third-party registries [here](https://docs
com/cli/v7/using-npm/registry)

### FAQ on Branding

#### Is it ""npm"" or ""NPM"" or ""Npm""?

**`npm`** should never be capitalized unless it is being displayed in a location that is customarily all-capitals (ex
 titles on `man` pages)
 The precursor to **`npm`** was actually a bash utility named **""pm""**, which was the shortform name of **""pkgmakeinst""** - a bash function that installed various things on various platforms
 If **`npm`** were to ever have been considered an acronym, it would be as ""node pm"" or, potentially ""new pm""




","

**Copyright © Corepack contributors**

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
svg"" height=""25"" /> corepack

[![Join us on OpenJS slack (channel #nodejs-corepack)](https://img
org/)

Corepack is a zero-runtime-dependency Node
js projects and the package managers they are intended to be used
with during development
js versions](https://nodejs

Run `corepack enable` to install the required Yarn and pnpm binaries on your path


</details>

<details><summary>Install Corepack from source</summary>

See [`CONTRIBUTING
 Run `yarn install` in Yarn
projects, `pnpm install` in pnpm projects, and `npm` in npm projects
2
2
 The hash is optional but strongly
recommended as a security practice
 Permitted values for the package manager are
`yarn`, `npm`, and `pnpm`
json` will be used to determine which file to
use in the archive)
tgz#sha224


The Known Good Releases can be updated system-wide using `corepack install -g`


Note that those commands still check whether the local project is configured for
the given package manager (ie you won't be able to run `corepack yarn install`
on a project where the `packageManager` field references `pnpm`)

 A workaround is to add the binaries as alias in your
shell configuration file (e
g

 name]`

| Option                | Description                                |
| --------------------- | ------------------------------------------ |
| `--install-directory` | Remove the shims to the specified location |

This command will detect where Node



### `corepack use <name[@<version>]>`

When run, this command will retrieve the latest release matching the provided
descriptor, assign it to the project's package
json file, and automatically
perform an install
g


- `COREPACK_ENABLE_UNSAFE_CUSTOM_URLS` can be set to `1` to allow use of
  custom URLs to load a package manager known by Corepack (`yarn`, `npm`, and
  `pnpm`)


- `COREPACK_ENABLE_NETWORK` can be set to `0` to prevent Corepack from accessing
  the network (in which case you'll be responsible for hydrating the package
  manager versions that will be required for the projects you'll run, using
  `corepack install -g --cache-only`)
 This means that if a user is using the package manager
  specified in the current project, it will use the version specified by the
  project's `packageManager` field


- `COREPACK_ENABLE_PROJECT_SPEC` can be set to `0` to prevent Corepack from
  checking if the package manager corresponds to the one defined for the current
  project


- `COREPACK_HOME` can be set in order to define where Corepack should install
  the package managers
cache/node/corepack` everywhere else
 Default value is `https://registry


- `COREPACK_NPM_USERNAME` and `COREPACK_NPM_PASSWORD` to set a Basic
  authorization header when connecting to a npm type registry

- Make sure the host for your request can be resolved by your DNS; try using
  `curl [URL]` (ipv4) and `curl -6 [URL]` (ipv6) from your shell
md`](
md)


For all of the subcommands, `npm access` will perform actions on the packages
in the current working directory if no package name is passed to the
subcommand
 Will only show permissions
  for packages to which you have at least read access


You must have privileges to set the access of a package:

* You are an owner of an unscoped or scoped package

* You are a member of the team that owns a scope


If you have two-factor authentication enabled then you'll be prompted to provide a second factor, or may use the `--otp=



Management of teams and team memberships is done with the `npm team` command


### Configuration

#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
 It's needed
when publishing or changing package permissions with `npm access`




#### `registry`

* Default: ""https://registry




### See Also

* [`libnpmaccess`](https://npm


### Description

Create a new user in the specified registry, and save the credentials to
the `
org/""
* Type: URL

The base URL of the npm registry




#### `scope`

* Default: the scope of the current project, if any, or """"
* Type: String

Associate an operation with a scope for a scoped registry


This will also cause `npm init` to create a scoped package




### See Also

* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm owner](/commands/npm-owner)
* [npm whoami](/commands/npm-whoami)
* [npm token](/commands/npm-token)
* [npm profile](/commands/npm-profile)

---
title: npm-audit
section: 1
description: Run a security audit
---

### Synopsis

```bash
npm audit [fix|signatures]
```

### Description

The audit command submits a description of the dependencies configured in
your project to your default registry and asks for a report of known
vulnerabilities
  If any vulnerabilities are found, then the impact and
appropriate remediation will be calculated
  If the `fix` argument is
provided, then remediations will be applied to the package tree


The command will exit with a 0 exit code if no vulnerabilities were found
 It may be useful in CI environments to include the
`--audit-level` parameter to specify the minimum vulnerability level that
will cause the command to fail
 This option does not filter the report
output, it simply changes the command's failure threshold
  You can bypass the package lock with `--no-package-lock` but be
aware the results may be different with every run, since npm will
re-build the dependency tree each time


Registry signatures can be verified using the following `audit` command:

```bash
$ npm audit signatures
```

The `audit signatures` command will also verify the provenance attestations of
downloaded packages
 Because provenance attestations are such a new feature,
security features may be added to (or changed in) the attestation format over
time

"",
  ""signatures"": [{
    ""keyid"": ""SHA256:{{SHA256_PUBLIC_KEY}}"",
    ""sig"": ""a312b9c3cb4a1b693e8ebac5ee1ca9cc01f2661c14391917dcb111517f72370809


2
org/wiki/ISO_8601): `YYYY-MM-DDTHH:mm:ss
sssZ`
- `keydid`: sha256 fingerprint of the public key
- `keytype`: only `ecdsa-sha2-nistp256` is currently supported by the npm CLI
- `scheme`: only `ecdsa-sha2-nistp256` is currently supported by the npm CLI
- `key`: base64 encoded public key

See this [example key's response from the public npm registry](https://registry


### Audit Endpoints

There are two audit endpoints that npm may use to fetch vulnerability
information: the `Bulk Advisory` endpoint and the `Quick Audit` endpoint


npm then uses these advisory objects to calculate vulnerabilities and
meta-vulnerabilities of the dependencies within the tree
json` is submitted, along
with the following pieces of additional metadata:

* `npm_version`
* `node_version`
* `platform`
* `arch`
* `node_env`

All packages in the tree are submitted to the Quick Audit endpoint
im/@npmcli/metavuln-calculator)
module to turn a set of security advisories into a set of ""vulnerability""
objects
2
<2
0`, and the package `bar` depends on `foo@^1


Once metavulnerabilities for a given package are calculated, they are
cached in the `~/
npm` folder and only re-evaluated if the advisory range
changes, or a new version of the package is published (in which case, the
new version is checked for metavulnerable status as well)


If the chain of metavulnerabilities extends all the way to the root
project, and it cannot be updated without changing its dependency ranges,
then `npm audit fix` will require the `--force` option to apply the
remediation
  If remediations do not require changes to the dependency
ranges, then all vulnerable packages will be updated to a version that does
not have an advisory or metavulnerability posted against it


### Examples

Scan your project for vulnerabilities and automatically install any compatible
updates to vulnerable dependencies:

```bash
$ npm audit fix
```

Run `audit fix` without modifying `node_modules`, but still updating the
pkglock:

```bash
$ npm audit fix --package-lock-only
```

Skip updating `devDependencies`:

```bash
$ npm audit fix --only=prod
```

Have `audit fix` install SemVer-major updates to toplevel dependencies, not
just SemVer-compatible ones:

```bash
$ npm audit fix --force
```

Do a dry run to get an idea of what `audit fix` will do, and _also_ output
install information in JSON format:

```bash
$ npm audit fix --dry-run --json
```

Scan your project for vulnerabilities and just show the details, without
fixing anything:

```bash
$ npm audit
```

Get the detailed audit report in JSON format:

```bash
$ npm audit --json
```

Fail an audit only if the results include a vulnerability with a level of moderate or higher:

```bash
$ npm audit --audit-level=moderate
```

### Configuration

#### `audit-level`

* Default: null
* Type: null, ""info"", ""low"", ""moderate"", ""high"", ""critical"", or ""none""

The minimum level of vulnerability for `npm audit` to exit with a non-zero
exit code




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done

* Allow conflicting peerDependencies to be installed in the root project


Not supported by all npm commands




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock
json` will be updated,
instead of checking `node_modules` and downloading dependencies




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json` if `save` is true
json` or `npm-shrinkwrap
json` file
 They are just not
physically installed on disk


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces



Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes
  This command is primarily
  intended to be used internally by npm, but it can provide a way to
  add data to the local installation cache explicitly
  Note that this is typically
  unnecessary, as npm's cache is self-healing and resistant to data
  corruption issues
im/cacache)-based content-addressable cache that
stores all http request data as well as other package-related data
 This
directory is primarily accessed through `pacote`, the library responsible
for all package fetching as of npm@5


npm will not remove data by itself: the cache will grow as new packages are
installed




### See Also

* [package spec](/using-npm/package-spec)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm install](/commands/npm-install)
* [npm publish](/commands/npm-publish)
* [npm pack](/commands/npm-pack)
* https://npm
im/@npmcli/arborist
* https://npm
json`,
  `npm ci` will exit with an error, instead of updating the package lock

* If a `node_modules` is already present, it will be automatically removed
  before `npm ci` begins its install
 linked: (experimental) install in node_modules/




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
json` or `npm-shrinkwrap
json` file


If a package type appears in both the `--include` and `--omit` lists, then
it will be included




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships
json files




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
cmd` shims on Windows) for package
executables


Set to false to have it not do this
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink




### See Also

* [npm install](/commands/npm-install)
* [package-lock


The synopsis above
loads the completions into your current shell
zshrc
```

You may of course also pipe the output of `npm completion` to a file
such as `/usr/local/etc/bash_completion
d/npm` or 
`/etc/bash_completion
d/npm` if you have a system that will read 
that file for you

]
npm set key=value [key=value
]
npm get [key 


If no keys are provided, then this command behaves the same as `npm config
list`


#### list

```bash
npm config list
```

Show all the config settings
 Use `--json`
to show the settings in json format



#### fix

```bash
npm config fix
```

Attempts to repair invalid configuration items
  Usually this means
attaching authentication config (i
e


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `editor`

* Default: The EDITOR or VISUAL environment variables, or
  '%SYSTEMROOT%\notepad


When set to ""global"" mode, packages are installed into the `prefix` folder
instead of the current working directory


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory
json](/configuring-npm/package-json)
* [npmrc](/configuring-npm/npmrc)
* [npm](/commands/npm)

---
title: npm-dedupe
section: 1
description: Reduce duplication in the package tree
---

### Synopsis

```bash
npm dedupe

alias: ddp
```

### Description

Searches the local package tree and attempts to simplify the overall
structure by moving dependencies further up the tree, where they can
be more effectively shared by multiple dependent packages
0
0
3
`-- d <-- depends on c@~1
0
3
`-- d <-- depends on c@1
9
0` dependency was used,
because npm favors updates by default, even when doing so causes
duplication


To prefer deduplication over novelty during the installation process, run
`npm install --prefer-dedupe` or `npm config set prefer-dedupe true`
 Dedupe always acts on the entire tree


Note: `npm dedupe` will never update the semver values of direct
dependencies in your project `package


### Configuration

#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 linked: (experimental) install in node_modules/
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
 Sets `--install-strategy=nested`
 Sets `--install-strategy=shallow`


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk
 They are just not
physically installed on disk
cmd` shims on Windows) for package
executables




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces
npmjs
3"" ""critical bug fixed in v0
2
x is no longer supported""
```

In this case, a version `my-thing@1
0` will also be deprecated


To un-deprecate a package, specify an empty string (`""""`) for the `message`
argument
npmjs
org/""
* Type: URL

The base URL of the npm registry




### See Also

* [package spec](/using-npm/package-spec)
* [npm publish](/commands/npm-publish)
* [npm registry](/using-npm/registry)
* [npm owner](/commands/npm-owner)
* [npm adduser](/commands/npm-adduser)

---
title: npm-diff
section: 1
description: The registry diff command
---

### Synopsis

```bash
npm diff [

 It's also possible to
    compare across forks of any package,
    e
0
g: `npm diff --diff=pkg@latest --diff=
1
json b/package
json
    index v1
0
1 100644
    --- a/package
json
    @@ -1,6 +1,6 @@
     {
       ""name"": ""abbrev"",
    -  ""version"": ""1
1"",
       ""description"": ""Like ruby's abbrev module, but in js"",
       ""author"": ""Isaac Z
com/npm/libnpmdiff --diff=


    An example: assuming `pkg@1
0
0
0 --diff=pkg@2
0
0
0 --diff=pkg@1
0
1`
0 --diff=1
/lib/` and changed lines of code within the
`CHANGELOG




#### `diff-no-prefix`

* Default: false
* Type: Boolean

Do not show any source or destination prefix in `npm diff` output




#### `diff-src-prefix`

* Default: ""a/""
* Type: String

Source prefix to be used in `npm diff` output




#### `diff-text`

* Default: false
* Type: Boolean

Treat all files as text in `npm diff`
 See
[folders](/configuring-npm/folders) for more on the differences in behavior

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `tag`

* Default: ""latest""
* Type: String

If you ask npm to install a package and don't tell it a specific version,
then it will install the specified tag




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config

## See Also

* [npm outdated](/commands/npm-outdated)
* [npm install](/commands/npm-install)
* [npm config](/commands/npm-config)
* [npm registry](/using-npm/registry)

---
title: npm-dist-tag
section: 1
description: Modify package distribution tags
---

### Synopsis

```bash
npm dist-tag add <package-spec (with version)> [<tag>]
npm dist-tag rm <package-spec> <tag>
npm dist-tag ls [<package-spec>]

alias: dist-tags
```

### Description

Add, remove, and enumerate distribution tags on a package:

* add: Tags the specified version of the package with the specified tag,
  or the [`--tag` config](/using-npm/config#tag) if not specified
 This is the default action if none is specified


A tag can be used when installing packages as a reference to a version instead
of using a specific version number:

```bash
npm install <name>@<tag>
```

When installing dependencies, a preferred tagged version may be specified:

```bash
npm install --tag <tag>
```

(This also applies to any other commands that resolve and install
dependencies, such as `npm dedupe`, `npm update`, and `npm audit fix`
)

Publishing a package sets the `latest` tag to the published version unless the
`--tag` option is used
, `stable`, `beta`, `dev`,
`canary`


By default, the `latest` tag is used by npm to identify the current version
of a package, and `npm install <pkg>` (without any `@<version>` or `@<tag>`
specifier) installs the `latest` tag
 Typically, projects only use the
`latest` tag for stable release versions, and use other tags for unstable
versions such as prereleases


The `next` tag is used by some projects to identify the upcoming version


Other than `latest`, no tag has any special significance to npm itself


Tags that can be interpreted as valid semver ranges will be rejected
0 <1
5


### Configuration

#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether


### See Also

* [package spec](/using-npm/package-spec)
* [npm publish](/commands/npm-publish)
* [npm install](/commands/npm-install)
* [npm dedupe](/commands/npm-dedupe)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-docs
section: 1
description: Open documentation for a package in a web browser
---

### Synopsis

```bash
npm docs [<pkgname> [<pkgname> 


]]

alias: home
```

### Description

This command tries to guess at the likely location of a package's
documentation URL, and then tries to open it using the
[`--browser` config](/using-npm/config#browser) param
json` in the current folder and use the `name` property


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


### See Also

* [npm view](/commands/npm-view)
* [npm publish](/commands/npm-publish)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [package

+ The primary npm registry, `registry
  Many
issues are often attributable to things that are outside npm's code base,
so `npm doctor` confirms that the npm installation is in a good state
 Since npm is constantly improving, running
`npm@latest` is better than an old version


`npm doctor` verifies the following items in your environment, and if
there are any recommended changes, it will display them
 You can limit what checks are ran by
specifying them as extra arguments
org`
 That's great! Others may be following tutorials or StackOverflow
questions in an effort to troubleshoot problems you may be having
npmjs


]
```

Note: This command is unaware of workspaces


]'
npm exec --package=foo -c '<cmd> [args



Run without positional arguments or `--call`, this allows you to
interactively run commands in the same sort of shell environment that
`package


Whatever packages are specified by the `--package` option will be
provided in the `PATH` of the executed command, along with any locally
installed package executables


If any requested packages are not present in the local project
dependencies, then a prompt is printed, which can be suppressed by
providing either `--yes` or `--no`
 When standard input is not a TTY or a
CI environment is detected, `--yes` is assumed
  Package names with a specifier will
only be considered a match if they have the exact same name and version as
the local dependency
  If no `--package` options
are provided, then npm will attempt to determine the executable name from
the package specifier provided as the first positional argument according
to the following heuristic:

- If the package has a single entry in its `bin` field in `package

- If this does not result in exactly one option (either because there are
  no bin entries, or none of them match the `name` of the package), then
  `npm exec` exits with an error


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes
json
   +-- b
   |   `-- package
json
   `-- c
       `-- package
/*
js
```

#### Filtering workspaces

It's also possible to execute a command in a single workspace using the
`workspace` config along with a name or directory path:

```
npm exec --workspace=a -- eslint 
/*
g:

```
npm exec -w a -w b -- eslint 
js
```

This last command will run the `eslint` command in both `
/packages/a` and
`
0, and the standalone `npx`
package deprecated at that time

- To prevent security and user-experience problems from mistyping package
  names, `npx` prompts before installing anything
  Suppress this
  prompt with the `-y` or `--yes` option

- The `--node-arg` and `-n` options are removed


#### prefer-offline

Bypasses staleness checks for packages
 To force full offline mode, use `offline`


### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm start](/commands/npm-start)
* [npm restart](/commands/npm-restart)
* [npm stop](/commands/npm-stop)
* [npm config](/commands/npm-config)
* [npm workspaces](/using-npm/workspaces)
* [npx](/commands/npx)

---
title: npm-explain
section: 1
description: Explain installed packages
---

### Synopsis

```bash
npm explain <package-spec>

alias: why
```

### Description

This command will print the chain of dependencies causing a given package
to be installed in the current project
6
3
0"" from the root project
```

To explain just the package residing at a specific folder, pass that as the
argument to the command
  This can be useful when trying to figure out
exactly why a given dependency is being duplicated to satisfy conflicting
version requirements within the project
0
0"" from nyc@14
1
  node_modules/nyc
    nyc@""^14
1"" from tap@14
10
parse() before
  saving them to your `package




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


### See Also

* [package spec](/using-npm/package-spec)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm folders](/configuring-npm/folders)
* [npm ls](/commands/npm-ls)
* [npm install](/commands/npm-install)
* [npm link](/commands/npm-link)
* [npm prune](/commands/npm-prune)
* [npm outdated](/commands/npm-outdated)
* [npm update](/commands/npm-update)

---
title: npm-explore
section: 1
description: Browse an installed package
---

### Synopsis

```bash
npm explore <pkg> [ -- <command>]
```

Note: This command is unaware of workspaces


### Description

Spawn a subshell in the directory of the installed package specified


This is particularly handy in the case of git submodules in the
`node_modules` folder:

```bash
npm explore some-dependency -- git pull origin master
```

Note that the package is *not* automatically rebuilt afterwards, so be
sure to use `npm rebuild <pkg>` if you make any changes




### See Also

* [npm folders](/configuring-npm/folders)
* [npm edit](/commands/npm-edit)
* [npm rebuild](/commands/npm-rebuild)
* [npm install](/commands/npm-install)

---
title: npm-find-dupes
section: 1
description: Find duplication in the package tree
---

### Synopsis

```bash
npm find-dupes
```

### Description

Runs `npm dedupe` in `--dry-run` mode, making npm only output the
duplications, without actually changing the package tree
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 shallow (formerly --global-style) only install direct
deps at top-level
 Sets `--install-strategy=nested`
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json` if `save` is true




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems
 See [`npm
fund`](/commands/npm-fund) for details


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 If no package name is provided, it will list all
dependencies that are looking for funding in a tree structure, listing
the type of funding and the url to visit
0
| `-- https://example
com/org
    `-- bar@2
0
```

And here is an example of the expected result when filtering only by a
specific workspace `a` in the same project:

```bash
$ npm fund -w a
test-workspaces-fund@1
0
0
0
0
```

### Configuration

#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output




#### `browser`

* Default: OS X: `""open""`, Windows: `""start""`, Others: `""xdg-open""`
* Type: null, Boolean, or String

The browser that is called by npm commands to open websites


Set to `false` to suppress browser behavior and instead print urls to
terminal


### Description

This command will search the npm markdown documentation files for the terms
provided, and then list the results, sorted by relevance


### Configuration

#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`


Set to `""browser""` to view html help content in the default web browser
org/post/145260155635/introducing-hooks-get-notifications-of-npm),
including adding, removing, listing, and updating


To create a scope hook, prefix the scope name with `@` (as in,
`@yourscope`)


The hook `id` used by `update` and `rm` are the IDs listed in `npm hook ls`
for that particular hook


The shared secret will be sent along to the URL endpoint so you can verify
the request came from your own configured hook
com/ my-shared-secret
```

Add a hook to watch packages in the scope `@npm`

```bash
$ npm hook add @npm https://example
com/ my-shared-secret
```

List all your active hooks:

```bash
$ npm hook ls
```

List your active hooks for the `lodash` package:

```bash
$ npm hook ls lodash
```

Update an existing hook's url:

```bash
$ npm hook update id-deadbeef https://my-new-website
npmjs
 It's needed
when publishing or changing package permissions with `npm access`


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one
org/post/145260155635/introducing-hooks-get-notifications-of-npm)

---
title: npm-init
section: 1
description: Create a package
json` and
running any other initialization-related operations


The init command is transformed to a corresponding `npm exec` operation as
follows:

* `npm init foo` -> `npm exec create-foo`
* `npm init @usr/foo` -> `npm exec @usr/create-foo`
* `npm init @usr` -> `npm exec @usr/create`
* `npm init @usr@2
 It is
strictly additive, so it will keep any fields and values that were already
set
 You can also use `-y`/`--yes` to skip the questionnaire altogether
 If
you pass `--scope`, it will create a scoped package
  If you want npm
to use the latest version, or another specific version you must specify
it:

* `npm init foo@latest` # fetches and runs the latest `create-foo` from
    the registry
* `npm init foo@1
3` #  runs `create-foo@1
2
 When using `npm init -w <dir>` the cli will
create the folders and boilerplate expected while also adding a reference
to your project `package


Given a project with no workspaces, e
json` file, while also updating
your top-level `package
json` to add the reference to this new workspace:

```


+-- package
json
`-- packages
   `-- a
       `-- package
json
```

The workspaces init also supports the `npm init <initializer> -w <dir>`
syntax, following the same set of rules explained earlier in the initial
**Description** section of this page

```

This will make sure to generate your react app as expected, one important
consideration to have in mind is that `npm exec` is going to be run in the
context of the newly created folder for that workspace, and that's the reason
why in this example the initializer uses the initializer name followed with a
dot to represent the current directory in that context, e
`:

```


+-- package
json
`-- packages
   +-- a
   |   `-- package


* Allow clobbering non-npm files in global installs

* Allow installing packages that have an `engines` declaration requiring a
  different version of npm

* Allow `npm audit fix` to install modules outside your stated dependency
  range (including SemVer-major changes)

* Allow unpublishing all versions of a published package

* Allow conflicting peerDependencies to be installed in the root project

* Implicitly set `--yes` during `npm init`


Useful when logging in to or out of a private registry:

```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry


This value is not exported to the environment for child processes


#### `workspaces-update`

* Default: true
* Type: Boolean

If set to true, the npm cli will run an update after operations that may
possibly change the workspaces installed to the `node_modules` folder


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project
im/init-package-json)
* [package
 nested: (formerly --legacy-bundling) install in
place, no hoisting
store,
link in place, unhoisted

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk
json` or `npm-shrinkwrap
 They are just not
physically installed on disk


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes
 This option has no effect on
workspaces




### See Also

* [npm install-test](/commands/npm-install-test)
* [npm ci](/commands/npm-ci)
* [npm test](/commands/npm-test)

---
title: npm-install-test
section: 1
description: Install package(s) and run tests
---

### Synopsis

```bash
npm install-test [<package-spec> 
]

alias: it
```

### Description

This command runs an `npm install` followed immediately by an `npm test`
json` file as dependencies


When used with the `npm rm` command, removes the dependency from
`package
json`


Will also prevent writing to `package-lock
json` if set to `false`
 shallow (formerly --global-style) only install direct
deps at top-level




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies
json` or `npm-shrinkwrap
json` file


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved
json` if `save` is true
json`,
ignoring `node_modules`


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 See [`npm
fund`](/commands/npm-fund) for details




#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done




#### `os`

* Default: null
* Type: null or String

Override OS of native modules to install
json



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project
 This option has no effect on
workspaces
]

aliases: add, i, in, ins, inst, insta, instal, isnt, isnta, isntal, isntall
```

### Description

This command installs a package and any packages that it depends on
json`
* `yarn
json](/configuring-npm/package-lock-json) and
[`npm shrinkwrap`](/commands/npm-shrinkwrap)
json`](/configuring-npm/package-json) file
* b) a gzipped tarball containing (a)
* c) a url that resolves to (b)
* d) a `<name>@<version>` that is published on the registry (see
  [`registry`](/using-npm/registry)) with (c)
* e) a `<name>@<tag>` (see [`npm dist-tag`](/commands/npm-dist-tag)) that
  points to (d)
* f) a `<name>` that has a ""latest"" tag satisfying (e)
* g) a `<git remote url>` that resolves to (a)

Even if you never publish your package, you can still get a lot of benefits
of using npm if you just want to write a node program (a), and perhaps if
you also want to be able to easily install it elsewhere after packing it up
into a tarball (b)
json`](/configuring-npm/package-json)


    With the `--production` flag (or when the `NODE_ENV` environment
    variable is set to `production`), npm will not install modules listed
    in `devDependencies`


    > NOTE: If you want to install the content of a directory like a package from the registry instead of creating a link, you would need to use the `--install-links` option

/other-package --install-links
    npm install 


    Example:

    ```bash
    npm install 
5


    Example:

    ```bash
    npm install sax
    ```

    `npm install` saves any specified packages into `dependencies` by default


    * `-D, --save-dev`: Package will appear in your `devDependencies`


    Further, if you have an `npm-shrinkwrap
json` or `package-lock


    Note: if you do not include the @-symbol on your scope name, npm will
    interpret this as a GitHub repository instead, see below


    Examples:

    ```bash
    npm install sax
    npm install githubname/reponame
    npm install @myorg/privatepackage
    npm install node-tap --save-dev
    npm install dtrace-provider --save-optional
    npm install readable-stream --save-exact
    npm install ansi-regex --save-bundle
    ```

    **Note**: If there is a file or folder named `<name>` in the current
    working directory, then it will try to install that, and only try to
    fetch the package by name if it is not valid

    If the tag does not exist in the registry data for that package, then this
    will fail


    Example:

    ```bash
    npm install sax@latest
    npm install @myorg/mypackage@latest
    ```

* `npm install [<@scope>/]<name>@<version>`:

    Install the specified version of the package
1


    Note that most version ranges must be put in quotes so that your shell
    will treat it as a single argument
0 <0


    If `#<commit-ish>` is provided, it will be used to clone exactly that
    commit
 If neither `#<commit-ish>` or
    `#semver:<semver>` is specified, then the default branch of the
    repository is used


    The following git environment variables are recognized by npm and will
    be added to the environment when running git:

    * `GIT_ASKPASS`
    * `GIT_EXEC_PATH`
    * `GIT_PROXY_COMMAND`
    * `GIT_SSH`
    * `GIT_SSH_COMMAND`
    * `GIT_SSL_CAINFO`
    * `GIT_SSL_NO_VERIFY`

    See the git man page for details


    Examples:

    ```bash
    npm install git+ssh://git@github
0
27
    npm install git+ssh://git@github
com:npm/cli#semver:^5
27
    GIT_SSH_COMMAND='ssh -i ~/
ssh/custom_ident' npm install git+ssh://git@github
com/gistID` by attempting to
    clone it using `git`
 The GitHub username associated with the gist is
    optional and will not be saved in `package
 If the commit-ish has the format `#semver:<semver>`, `<semver>` can
    be any valid semver range or exact version, and npm will look for any tags
    or refs matching that range in the remote repository, much as it would for a
    registry dependency
 If neither `#<commit-ish>` or `#semver:<semver>` is
    specified, then `master` is used
 If the commit-ish has the format `#semver:<semver>`, `<semver>` can
    be any valid semver range or exact version, and npm will look for any tags
    or refs matching that range in the remote repository, much as it would for a
    registry dependency


    As with regular git dependencies, `dependencies` and `devDependencies` will
    be installed if the package has a `prepare` script before the package is
    done installing


    Example:

    ```bash
    npm install gitlab:mygitlabuser/myproject
    npm install gitlab:myusr/myproj#semver:^5
0
    ```

You may combine multiple arguments and even multiple types of arguments
json`, instead of checking `node_modules` and downloading
dependencies


The `-f` or `--force` argument will force npm to fetch remote resources
even if a local copy exists on disk


Will also prevent writing to `package-lock




#### `save-exact`

* Default: false
* Type: Boolean

Dependencies saved to package




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 linked: (experimental) install in node_modules/
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating
 Sets `--install-strategy=shallow`


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock
json` will be updated,
instead of checking `node_modules` and downloading dependencies




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
cmd` shims on Windows) for package
executables
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems
 See [`npm
fund`](/commands/npm-fund) for details




#### `os`

* Default: null
* Type: null or String

Override OS of native modules to install
json, which comes from `process
 Acceptable values are same as
`libc` field of package


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project
 This option has no effect on
workspaces




### Algorithm

Given a `package{dep}` structure: `A{B,C}, B{C}, C{D}`,
the npm install algorithm produces:

```bash
A
+-- B
+-- C
+-- D
```

That is, the dependency from B to C is satisfied by the fact that A already
caused C to be installed at a higher level


For `A{B,C}, B{C,D@1}, C{D@2}`, this algorithm produces:

```bash
A
+-- B
+-- C
   `-- D@2
+-- D@1
```

Because B's D@1 will be installed in the top-level, C now has to install
D@2 privately for itself


### See Also

* [npm folders](/configuring-npm/folders)
* [npm update](/commands/npm-update)
* [npm audit](/commands/npm-audit)
* [npm fund](/commands/npm-fund)
* [npm link](/commands/npm-link)
* [npm rebuild](/commands/npm-rebuild)
* [npm scripts](/using-npm/scripts)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm registry](/using-npm/registry)
* [npm dist-tag](/commands/npm-dist-tag)
* [npm uninstall](/commands/npm-uninstall)
* [npm shrinkwrap](/commands/npm-shrinkwrap)
* [package
  The scope must be preceded by an @-symbol and
followed by a slash


When creating tarballs for `npm publish`, the linked packages are
""snapshotted"" to their current state by resolving the symbolic links, if
they are included in `bundleDependencies`


For example:

```bash
cd ~/projects/node-redis    # go into the package directory
npm link                    # creates global link
cd ~/projects/node-bloggy   # go into some other package directory

npm link redis              # link-install the package
```

Now, any changes to `~/projects/node-redis` will be reflected in
`~/projects/node-bloggy/node_modules/node-redis/`
 Note that the link
should be to the package name, not the directory name for that package

/node-redis     # link the dir of your dependency
```

The second line is the equivalent of doing:

```bash
(cd 


Note that in this case, you are referring to the directory name,
`node-redis`, rather than the package name `redis`
g


```bash
npm link @myorg/privatepackage
```

### Caveat

Note that package dependencies linked in this way are _not_ saved to
`package
json` by default, on the assumption that the intention is to have
a link stand in for a regular non-link dependency
  Otherwise, for example,
if you depend on `redis@^3



### Workspace Usage

`npm link <pkg> --workspace <name>` will link the relevant package as a
dependency of the specified workspace(s)


`npm link --workspace <name>` will create a global link to the specified
workspace(s)
json`


Will also prevent writing to `package-lock
json` if set to `false`

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
store,
link in place, unhoisted
 Sets `--install-strategy=nested`




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies
 If `--strict-peer-deps` is set, then
this warning is treated as a failure




#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json` files when installing
json` if `save` is true
 They are just not
physically installed on disk


This is the inverse of `--omit=<type>`


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts
 See the
documentation for [`npm audit`](/commands/npm-audit) for details on what is
submitted




#### `bin-links`

* Default: true
* Type: Boolean

Tells npm to create symlinks (or `
cmd` shims on Windows) for package
executables


Set to false to have it not do this
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink




### See Also

* [package spec](/using-npm/package-spec)
* [npm developers](/using-npm/developers)
* [package
npmjs
npmjs


This will also cause `npm init` to create a scoped package


```
# accept all defaults, and create a package named ""@foo/whatever"",
# instead of just named ""whatever""
npm init --scope=@foo --yes
```



#### `auth-type`

* Default: ""web""
* Type: ""legacy"" or ""web""

What authentication strategy to use with `login`
 Note that if an `otp`
config is given, this value will always be set to `legacy`




### See Also

* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm owner](/commands/npm-owner)
* [npm whoami](/commands/npm-whoami)
* [npm token](/commands/npm-token)
* [npm profile](/commands/npm-profile)

---
title: npm-logout
section: 1
description: Log out of the registry
---

### Synopsis

```bash
npm logout
```

Note: This command is unaware of workspaces
 This will invalidate the token
everywhere you're using it, not just for the current environment


If `--scope` is provided, this will find the credentials for the registry
connected to that scope, if set
org/""
* Type: URL

The base URL of the npm registry




#### `scope`

* Default: the scope of the current project, if any, or """"
* Type: String

Associate an operation with a scope for a scoped registry
mycorp


This will also cause `npm init` to create a scoped package


Positional arguments are `name@version-range` identifiers, which will limit
the results to only the paths to the packages named
  Note that nested
packages will *also* show the paths to the specified packages

However, without using `npm ls -l`, it became impossible to show _where_ a
package was actually installed much of the time!

With the advent of automatic installation of `peerDependencies` in npm v7,
this gets even more curious, as `peerDependencies` are logically
""underneath"" their dependents in the dependency graph, but are always
physically at or above their location on disk


* In `npm pkg set` it enables parsing set values with JSON
json`
 For
`npm search`, this will be tab-separated table format

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `depth`

* Default: `Infinity` if `--all` is set, otherwise `1`
* Type: null or Number

The depth to go when recursing packages for `npm ls`


If not set, `npm ls` will show only the immediate dependencies of the root
project




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty


Note that these dependencies _are_ still resolved and added to the
`package-lock
json` or `npm-shrinkwrap
json` file


For `update` this means only the `package-lock
json` will be updated,
instead of checking `node_modules` and downloading dependencies

* Type: Boolean

When set to true, npm uses unicode characters in the tree output


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project




### See Also

* [package spec](/using-npm/package-spec)
* [npm explain](/commands/npm-explain)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm folders](/configuring-npm/folders)
* [npm explain](/commands/npm-explain)
* [npm install](/commands/npm-install)
* [npm link](/commands/npm-link)
* [npm prune](/commands/npm-prune)
* [npm outdated](/commands/npm-outdated)
* [npm update](/commands/npm-update)

---
title: npm-org
section: 1
description: Manage orgs
---

### Synopsis

```bash
npm org set orgname username [developer | admin | owner]
npm org rm orgname username
npm org ls orgname [<username>]

alias: ogr
```

Note: This command is unaware of workspaces
  It supports adding and removing users, changing their roles,
listing them, and finding specific ones and their roles
npmjs
org/""
* Type: URL

The base URL of the npm registry




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* In `npm pkg set` it enables parsing set values with JSON

json`
 If there's no available semver range
  (i
e

* `latest` is the version of the package tagged as latest in the registry

* `depended by` shows which package depends on the displayed dependency
* `package type` (when using `--long` / `-l`) tells you whether this
  package is a `dependency` or a dev/peer/optional dependency


### An example

```bash
$ npm outdated
Package      Current   Wanted   Latest  Location                  Depended by
glob          5
0
1  node_modules/glob         dependent-package-name
nothingness    0
2    3
0
3    1
3
3  node_modules/once         dependent-package-name
```

With these `dependencies`:
```json
{
  ""glob"": ""^5
0
15"",
  ""nothingness"": ""github:othiym23/nothingness#master"",
  ""npm"": ""^3

  This is why currently doing a reinstall of a Git dependency always forces
  a new clone and install

* `npm@3
2` is marked as ""wanted"", but ""latest"" is `npm@3
5
1` because
  npm uses dist-tags to manage its `latest` and `next` release channels

  `npm update` will install the _newest_ version, but `npm install npm`
  (with no semver range) will install whatever's tagged as `latest`


### Configuration

#### `all`

* Default: false
* Type: Boolean

When running `npm outdated` and `npm ls`, setting `--all` will show all
outdated or installed packages, rather than only those directly depended
upon by the current project
parse() before
  saving them to your `package




#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`


This value is not exported to the environment for child processes
  This user is enabled
  to modify metadata, publish new versions, and add other owners


Note that there is only one level of access
  Future versions may contain more fine-grained access levels, but
that is not implemented at this time




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


### See Also

* [package spec](/using-npm/package-spec)
* [npm profile](/commands/npm-profile)
* [npm publish](/commands/npm-publish)
* [npm registry](/using-npm/registry)
* [npm adduser](/commands/npm-adduser)

---
title: npm-pack
section: 1
description: Create a tarball from a package
---

### Synopsis

```bash
npm pack <package-spec>
```

### Configuration

#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done




#### `pack-destination`

* Default: ""


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
 - Commands that do
other things (test, exec, publish, etc


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


### Description

For anything that's installable (that is, a package folder, tarball,
tarball url, git url, name@tag, name@version, name, or scoped name), this
command will fetch it to the cache, copy the tarball to the current working
directory as `<name>-<version>


### See Also

* [package spec](/using-npm/package-spec)
* [npm-packlist package](http://npm
com/-/ping?write=true
```

### Configuration

#### `registry`

* Default: ""https://registry
<key>=<value> 
]
npm pkg set [<array>[]
json` files
json`
 To retrieve
    the value of a test `script` value, you would run the following command:

    ```bash
    npm pkg get scripts
test
    ```

    For fields that are arrays, requesting a non-numeric field will return
    all of the values from the objects in the list
 For example, to get all
    the contributor emails for a package, you would run:

    ```bash
    npm pkg get contributors
 To just get the email address of the first
    contributor in the list, you can run:

    ```bash
    npm pkg get contributors[0]
require""
    ```

* `npm pkg set <field>=<value>`

    Sets a `value` in your `package


    The same syntax used to retrieve values from your package can also be used
    to define new properties or overriding existing ones, below are some
    examples of how the dot separated syntax can be used to edit your
    `package


    Defining a new bin named `mynewcommand` in your `package
node='>=10'
    ```

    It's also possible to add to array values, for example to add a new
    contributor entry:

    ```bash
    npm pkg set contributors[0]
ca'
    ```

    You may also append items to the end of an array using the special
    empty bracket notation:

    ```bash
    npm pkg set contributors[]
timeout=60 --json
    ```

* `npm pkg delete <key>`

    Deletes a `key` from your `package
json`

    The same syntax used to set values from your package can also be used
    to remove existing ones
json`
json` file and the
    manifest that npm uses during installation


### Workspaces support

You can set/get/delete items across your configured workspaces by using the
[`workspace`](/using-npm/config#workspace) or
[`workspaces`](/using-npm/config#workspaces) config options

* Allow unpublishing all versions of a published package

* Allow conflicting peerDependencies to be installed in the root project

* Implicitly set `--yes` during `npm init`


Not supported by all npm commands


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
)
will link workspaces into the `node_modules` folder


This value is not exported to the environment for child processes

## See Also

* [npm install](/commands/npm-install)
* [npm init](/commands/npm-init)
* [npm config](/commands/npm-config)
* [workspaces](/using-npm/workspaces)

---
title: npm-prefix
section: 1
description: Display prefix
---

### Synopsis

```bash
npm prefix [-g]
```

Note: This command is unaware of workspaces
json` file or `node_modules` directory, unless `-g` is
also specified
 See
[folders](/configuring-npm/folders) for more on the differences in behavior
  Note that this command
depends on the registry implementation, so third-party registries may not
support this interface


* `npm profile get [<property>]`: Display all of the properties of your
  profile, or one or more specific properties
  It looks like:

```bash
+-----------------+---------------------------+
| name            | example                   |
+-----------------+---------------------------+
| email           | me@example
com (verified) |
+-----------------+---------------------------+
| two factor auth | auth-and-writes           |
+-----------------+---------------------------+
| fullname        | Example User              |
+-----------------+---------------------------+
| homepage        |                           |
+-----------------+---------------------------+
| freenode        |                           |
+-----------------+---------------------------+
| twitter         |                           |
+-----------------+---------------------------+
| github          |                           |
+-----------------+---------------------------+
| created         | 2015-02-26T01:38:35
892Z  |
+-----------------+---------------------------+
| updated         | 2017-10-02T21:29:45
922Z  |
+-----------------+---------------------------+
```

* `npm profile set <property> <value>`: Set the value of a profile
  property
  You'll
  also be prompted for an OTP if you have two-factor authentication
  enabled


* `npm profile enable-2fa [auth-and-writes|auth-only]`: Enables two-factor
  authentication
 Defaults to `auth-and-writes` mode




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output
 For
`npm search`, this will be tab-separated table format
 It's needed
when publishing or changing package permissions with `npm access`




### See Also

* [npm adduser](/commands/npm-adduser)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm owner](/commands/npm-owner)
* [npm whoami](/commands/npm-whoami)
* [npm token](/commands/npm-token)

---
title: npm-prune
section: 1
description: Remove extraneous packages
---

### Synopsis

```bash
npm prune [[<@scope>/]<pkg>


If the `--dry-run` flag is used then no changes will actually be made


### Configuration

#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty
json` or `npm-shrinkwrap
json` file


* In `npm pkg set` it enables parsing set values with JSON


Not supported by all npm commands




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces


By default npm will publish to the public registry


Similar to `--dry-run` see [`npm pack`](/commands/npm-pack), which figures
out the files to be included and packs them into a tarball to be uploaded
to the registry
json`](/configuring-npm/package-json), then only the files
  specified will be included
gitignore` is ignored, and only the
  `


  `
json`, or
  un-ignored with a `!` rule in a `
npmignore` or `




#### `access`

* Default: 'public' for new packages, existing packages it will not change the
  current level
* Type: null, ""restricted"", or ""public""

If you do not want your scoped package to be publicly viewable (and
installable) set `--access=restricted`
 It's needed
when publishing or changing package permissions with `npm access`




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


This value is not exported to the environment for child processes
workspace

// all workspaces that have peer deps

peer)

// any dep named ""lodash""
// equivalent to [name=""lodash""]
#lodash

// any deps named ""lodash"" & within semver range ^""1
3""
#lodash@^1
2
3
// equivalent to
2
5
// equivalent to

[name=""lodash""][version=""2
1
com],
[repository^=http://github
com],
[repository^=https://github



```

### Expecting a certain number of results

One common use of `npm query` is to make sure there is only one version of
a certain dependency in your tree
  You
can use the `--expect-results` or `--expect-result-count` in your setup
to ensure that npm will exit with an exit code if your tree doesn't look
like you want it to



```sh
$ npm query '#react' --expect-result-count=1
```

Perhaps you want to quickly check if there are any production
dependencies that could be updated:

```sh
$ npm query ':root>:outdated(in-range)


### Configuration

#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command




#### `expect-results`

* Default: null
* Type: null or Boolean

Tells npm whether or not to expect results from the command
 Can be either
true (expect some results) or false (expect no results)


2
 Installing with `--ignore-scripts` and `--no-bin-links`, to explicitly choose which packages to build and/or link bins
json` has its own `install` or `preinstall` scripts
 This can be used to work around the
fact that some file systems don't support symlinks, even on ostensibly Unix
systems




#### `foreground-scripts`

* Default: `false` unless when using `npm pack` or `npm publish` where it
  defaults to `true`
* Type: Boolean

Run all build scripts (ie, `preinstall`, `install`, and `postinstall`)
scripts for installed packages in the foreground process, sharing standard
input, output, and error with the main npm process




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


This value is not exported to the environment for child processes


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether




### See Also

* [package spec](/using-npm/package-spec)
* [npm install](/commands/npm-install)

---
title: npm-repo
section: 1
description: Open package repository page in the browser
---

### Synopsis

```bash
npm repo [<pkgname> [<pkgname> 
 If no package name is
provided, it will search for a `package


### Configuration

#### `browser`

* Default: OS X: `""open""`, Windows: `""start""`, Others: `""xdg-open""`
* Type: null, Boolean, or String

The browser that is called by npm commands to open websites


Set to `true` to use default system URL opener




#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes
 restart
3
 prerestart
2
 poststop
6
 postrestart

### Configuration

#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
json files


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts


### Description

Print the effective `node_modules` folder to standard out


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



### See Also

* [npm prefix](/commands/npm-prefix)
* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)

---
title: npm-run-script
section: 1
description: Run arbitrary package scripts
---

### Synopsis

```bash
npm run-script <command> [-- <args>]

aliases: run, rum, urn
```

### Description

This runs an arbitrary command from a package's `""scripts""` object
  If no
`""command""` is provided, it will list the available scripts


`run[-script]` is used by the test, start, restart, and stop commands, but
can be called directly, as well


Any positional arguments are passed to the specified script
 By default,
on Unix-like systems it is the `/bin/sh` command, on Windows it is
`cmd


Scripts are run from the root of the package folder, regardless of what the
current working directory is when `npm run` is called
 If you want your
script to use different behavior based on what subdirectory you're in, you
can use the `INIT_CWD` environment variable, which holds the full path you
were in when you ran `npm run`


If you try to run a script without having a `node_modules` directory and it
fails, you will be given a warning to run `npm install`, just in case you've
forgotten
 If no `""command""` is provided, it will list the available
scripts for each of these configured workspaces

+-- package
json
`-- packages
   +-- a
   |   `-- package
 When defining values for
the `workspace` config in the command line, it also possible to use `-w` as a
shorthand, e
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes


This value is not exported to the environment for child processes
 This is useful, for example, when
running scripts that may only apply for some builds in an otherwise generic
CI setup


#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package
dev/) or [CycloneDX](https://cyclonedx
org/) format
5
5"",
  ""serialNumber"": ""urn:uuid:09f55116-97e1-49cf-b3b8-44d0207e7730"",
  ""version"": 1,
  ""metadata"": {
    ""timestamp"": ""2023-09-01T00:00:00
0""
      }
    ],
    ""component"": {
      ""bom-ref"": ""simple@1
0"",
      ""scope"": ""required"",
      ""author"": ""John Doe"",
      ""description"": ""simple react app"",
      ""purl"": ""pkg:npm/simple@1
0"",
      ""properties"": [
        {
          ""name"": ""cdx:npm:package:path"",
          ""value"": """"
        }
      ],
      ""externalReferences"": [],
      ""licenses"": [
        {
          ""license"": {
            ""id"": ""MIT""
          }
        }
      ]
    }
  },
  ""components"": [
    {
      ""bom-ref"": ""lodash@4
21"",
      ""scope"": ""required"",
      ""author"": ""John-David Dalton"",
      ""description"": ""Lodash modular utilities
17
21
git""
        },
        {
          ""type"": ""website"",
          ""url"": ""https://lodash
17
17
0
org/spdxdocs/simple-1
0
0
"",
      ""downloadLocation"": ""https://registry
17
tgz"",
      ""filesAnalyzed"": false,
      ""homepage"": ""https://lodash
com/"",
      ""licenseDeclared"": ""MIT"",
      ""externalRefs"": [
        {
          ""referenceCategory"": ""PACKAGE-MANAGER"",
          ""referenceType"": ""purl"",
          ""referenceLocator"": ""pkg:npm/lodash@4
0
0"",
      ""relationshipType"": ""DESCRIBES""
    },
    {
      ""spdxElementId"": ""SPDXRef-Package-simple-1
0"",
      ""relatedSpdxElement"": ""SPDXRef-Package-lodash-4
  This means that information from the
package
json files of your dependencies will not be included in the
result set (e

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk
json` or `npm-shrinkwrap
 They are just not
physically installed on disk
json`, rather than the contents of `node_modules`
 For SPDX, this is the
value for the `primaryPackagePurpose` field
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc

]

aliases: find, s, se
```

Note: This command is unaware of workspaces


### Description

Search the registry for packages matching the search terms
 If your terminal has color
support, it will further highlight the matches in the results


* In `npm pkg set` it enables parsing set values with JSON




#### `color`

* Default: true unless the NO_COLOR environ is set to something other than '0'
* Type: ""always"" or Boolean

If false, never shows colors




#### `parseable`

* Default: false
* Type: Boolean

Output parseable results from commands that write to standard output




#### `searchopts`

* Default: """"
* Type: String

Space-separated options that are always passed to search




#### `searchexclude`

* Default: """"
* Type: String

Space-separated options that limit the results from search
org/""
* Type: URL

The base URL of the npm registry




#### `prefer-online`

* Default: false
* Type: Boolean

If true, staleness checks for cached data will be forced, making the CLI
look for updates immediately even for fresh package data
 To force full offline mode, use
`--offline`




#### `offline`

* Default: false
* Type: Boolean

Force offline mode: no network requests will be done during install
im/npm-registry-fetch

---
title: npm-shrinkwrap
section: 1
description: Lock down dependency versions for publication
---

### Synopsis

```bash
npm shrinkwrap
```

Note: This command is unaware of workspaces
json](/configuring-npm/package-lock-json)
* [npm-shrinkwrap
]
```

Note: This command is unaware of workspaces
  It's
a vaguely positive way to show that you care
 Starring repeatedly has no additional effect
org/""
* Type: URL

The base URL of the npm registry
 When
false, it uses ascii characters instead of unicode glyphs




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator


### Description

If you have starred a lot of neat things and want to find them again
quickly this command lets you do just that


Note that this is different from the default node behavior of running
the file specified in a package's `""main""` attribute when evoking with
`node 
`

As of [`npm@2
0
 Refer to [`npm run-script`](/commands/npm-run-script) for more details
x start
> node foo


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts




### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm restart](/commands/npm-restart)
* [npm stop](/commands/npm-stop)

---
title: npm-stop
section: 1
description: Stop a package
---

### Synopsis

```bash
npm stop [-- <args>]
```

### Description

This runs a predefined command specified in the ""stop"" property of a
package's ""scripts"" object


### Example

```json
{
  ""scripts"": {
    ""stop"": ""node bar




#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd


  Adding a new user `username` to a team named `newteam` under the `org` org:

  ```bash
  npm team add @org:newteam username
  ```

  On success, you should see a message: `username added to @org:newteam`

* rm:
  Using `npm team rm` you can also remove users from a team they belong to


  Here's an example removing user `username` from `newteam` team
  in `org` organization:

  ```bash
  npm team rm @org:newteam username
  ```

  Once the user is removed a confirmation message is displayed:
  `username removed from @org:newteam`

* ls:
  If performed on an organization name, will return a list of existing teams
  under that organization


* In `npm pkg set` it enables parsing set values with JSON


Not supported by all npm commands
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands
 It can be `--read-only`, or accept
  a list of
  [CIDR](https://en
wikipedia
 Please refer to
  the [docs
  website](https://docs


```bash
+----------------+--------------------------------------+
| token          | a73c9572-f1b9-8983-983d-ba3ac3cc913d |
+----------------+--------------------------------------+
| cidr_whitelist |                                      |
+----------------+--------------------------------------+
| readonly       | false                                |
+----------------+--------------------------------------+
| created        | 2017-10-02T07:52:24
  You
  will no longer be able to use it
npmrc`), and ids as seen in the parseable or json
  output of `npm token list`
  This will NOT accept the truncated token
  found in the normal `npm token list` output




#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry



aliases: unlink, remove, rm, r, un
```

### Description

This uninstalls a package, completely removing everything npm installed
on its behalf


Further, if you have an `npm-shrinkwrap
json` or `package-lock
json`, and `package-lock
json`, or
`package-lock
json`,
`npm-shrinkwrap
json` file as dependencies


When used with the `npm rm` command, removes the dependency from
`package

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
)
will link workspaces into the `node_modules` folder
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes


The npm registry will return an error if you are not [logged
in](/commands/npm-adduser)


If you specify a package name but do not specify a version or if you
remove all of a package's versions then the registry will remove the
root package entry entirely


### Configuration

#### `dry-run`

* Default: false
* Type: Boolean

Indicates that you don't want npm to make any changes and that it should
only report what it would have done




#### `force`

* Default: false
* Type: Boolean

Removes various protections against unfortunate side effects, common
mistakes, unnecessary performance degradation, and malicious input


* Allow clobbering non-npm files in global installs

* Allow deleting the cache folder with `npm cache clean`

* Allow unpublishing all versions of a published package

* Implicitly set `--yes` during `npm init`


If you don't have a clear idea of what you want to do, it is strongly
recommended that you do not use this option!



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option
 - Commands that do
other things (test, exec, publish, etc


This value is not exported to the environment for child processes



### Description

""Unstarring"" a package is the opposite of [`npm star`](/commands/npm-star),
it removes an item from your list of favorite packages
npmjs




#### `unicode`

* Default: false on windows, true on mac/unix systems with a unicode locale,
  as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables


### Example

For the examples below, assume that the current package is `app` and it depends
on dependencies, `dep1` (`dep2`, 
 etc
  The published versions of `dep1`
are:

```json
{
  ""dist-tags"": { ""latest"": ""1
2
0"",
    ""1
1
1"",
    ""1
4
0"",
    ""0
2
2
2` is `latest` and
`1
1
  Even though the
`latest` tag points to `1
2`, this version does not satisfy `~1
1`, which is
equivalent to `>=1
0
0""
}
```

`npm update` will install `dep1@0
0`
1`, because that is the highest-sorting
version that satisfies `^0
0
0""
  }
}
```

and `dep2` itself depends on this limited range of `dep1`

```json
{
""name"": ""dep2"",
  ""dependencies"": {
    ""dep1"": ""~1
1
1



### Configuration

#### `save`

* Default: `true` unless when using `npm update` where it defaults to `false`
* Type: Boolean

Save installed packages to a `package
json`
 See
[folders](/configuring-npm/folders) for more on the differences in behavior
 hoisted
(default): Install non-duplicated in top-level, and duplicated as necessary
within directory structure
 nested: (formerly --legacy-bundling) install in
place, no hoisting
 shallow (formerly --global-style) only install direct
deps at top-level
 Sets `--install-strategy=nested`




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty
json` file
 They are just not
physically installed on disk


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line


Note that this will generally make installs run slower, and be much noisier,
but can be useful for debugging


This value is not exported to the environment for child processes
)
will link workspaces into the `node_modules` folder


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink




### See Also

* [npm install](/commands/npm-install)
* [npm outdated](/commands/npm-outdated)
* [npm shrinkwrap](/commands/npm-shrinkwrap)
* [npm registry](/using-npm/registry)
* [npm folders](/configuring-npm/folders)
* [npm ls](/commands/npm-ls)

---
title: npm-version
section: 1
description: Bump a package version
---

### Synopsis

```bash
npm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]

alias: verison
```

### Configuration

#### `allow-same-version`

* Default: false
* Type: Boolean

Prevents throwing an error when `npm version` is used to set the new version
to the same value as the current version




#### `commit-hooks`

* Default: true
* Type: Boolean

Run git commit hooks when using the `npm version` command


* In `npm pkg set` it enables parsing set values with JSON
parse() before
  saving them to your `package


Not supported by all npm commands




#### `preid`

* Default: """"
* Type: String

The ""prerelease identifier"" to use as a prefix for the ""prerelease"" part of
a semver




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
 - Commands that do
other things (test, exec, publish, etc


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


### Description

Run this in a package directory to bump the version and write the new data
back to `package
json`, `package-lock
com/npm/node-semver#functions) (one
of `patch`, `minor`, `major`, `prepatch`, `preminor`, `premajor`,
`prerelease`), or `from-git`
 In the second case, the existing version will
be incremented by 1 in the specified field

It will fail if the working directory is not clean, unless the `-f` or
`--force` flag is set


If supplied with `-m` or [`--message` config](/using-npm/config#message) option,
npm will use it as a commit message when creating a version commit
  If the
`message` config contains `%s` then that will be replaced with the resulting
version number
 For example:

```bash
npm version patch -m ""Upgrade to %s for reasons""
```

If the [`sign-git-tag` config](/using-npm/config#sign-git-tag) is set, then the
tag will be signed using the `-s` flag to git
 Check to make sure the git working directory is clean before we get
   started
  Your scripts may add files to the commit in future steps

   This step is skipped if the `--force` flag is set
json
  Any files you want added to the commit
   should be explicitly added using `git add`

3
 These scripts have access to the new `version`
   in package
json (so they can incorporate it into file headers in
   generated files for example)

5
 Then runs your
`build` script, and adds everything in the `dist` directory to the commit


### See Also

* [npm init](/commands/npm-init)
* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [package
json](/configuring-npm/package-json)
* [config](/using-npm/config)

---
title: npm-view
section: 1
description: View registry info
---

### Synopsis

```bash
npm view [<package-spec>] [<field>[
]

aliases: info, show, v
```

### Description

This command shows data about a package and prints it to stdout
3
e
 dependencies
```

You can view child fields by separating them with a period
 For example, to view all the data about the version of
`opts` that `ronn` depends on, you could write the following:

```bash
npm view opts@$(npm view ronn dependencies
 For example, to get all
the contributor email addresses for the `express` package, you would run:

```bash
npm view express contributors
email
```

You may also use numeric indices in square braces to specifically select
an item in an array field
 To just get the email address of the first
contributor in the list, you can run:

```bash
npm view express contributors[0]
email
```

If the field value you are querying for is a property of an object, you should run:

```bash
npm view express time'[4
8

For example, to get all the contributor names and email addresses, you
can do this:

```bash
npm view express contributors
  (See [`package
)

```bash
npm view npm contributors
```

If a version range is provided, then data will be printed for every
matching version of the package
  This will show which version of `jsdom`
was required by each matching version of `yui3`:

```bash
npm view yui3@'>0
5
jsdom
```

To show the `connect` package version history, you can do
this:

```bash
npm view connect versions
```

### Configuration

#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


This value is not exported to the environment for child processes


If multiple fields are requested, then each of them is prefixed with
the field name


If logged into a registry that uses Basic Auth, then simply print the
`username` portion of the authentication string
org/""
* Type: URL

The base URL of the npm registry




### See Also

* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm adduser](/commands/npm-adduser)

---
title: npm
section: 1
description: javascript package manager
---

### Synopsis

```bash
npm
```

Note: This command is unaware of workspaces
  It puts
modules in place so that node can find them, and manages dependency
conflicts intelligently
npmjs
com/policies/terms


You can configure npm to use any compatible registry you like, and even
run your own registry


The very first thing you will most likely want to run in any node
program is `npm install` to install its dependencies


You can also run `npm install blerg` to install the latest version of
""blerg""
  Check out [`npm install`](/commands/npm-install) for more
info
  Use `npm ls` to show everything you've installed


If one of the packages npm tries to install is a native node module and
requires compiling of C++ Code, npm will use
[node-gyp](https://github
com/nodejs/node-gyp/wiki)


In particular, npm has two modes of operation:

* local mode:
  npm installs packages into the current project directory, which
  defaults to the current working directory
/node_modules/
bin`


### Developer Usage

If you're using npm to develop and publish your code, check out the
following help topics:

* json:
  Make a package
json file
  See
  [`package

* link:
  Links your current working code into Node's path, so that you don't
  have to reinstall every time you make a change
  Especially, installing other peoples code from the registry is
  done via [`npm install`](/commands/npm-install)
* adduser:
  Create an account or log in
  When you do this, npm will store
  credentials in the user config file


#### Configuration

npm is extremely configurable
  It reads its configuration options from
5 places
  All keys take a value, even if they
  are booleans (the config parser doesn't know what the options are at
  the time of parsing)
npmrc` is an ini-formatted list of configs
  If
  present, it is parsed

* Global Configs:
  The file found at `

* Defaults:
  npm's default configuration options are defined in
  `lib/utils/config/definitions
md) and
check the issues list
com/npm/feedback>

Or suggest formal RFC proposals:

* <https://github
]
npx -c '<cmd> [args


  If no `--package` options
are provided, then npm will attempt to determine the executable name from
the package specifier provided as the first positional argument according
to the following heuristic:

- If the package has a single entry in its `bin` field in `package


To run a binary _other than_ the named binary, specify one or more
`--package` options, which will prevent npm from inferring the package from
the first command argument


### `npx` vs `npm exec`

When run via the `npx` binary, all flags and options *must* be set prior to
any positional arguments
js
$ npx tap --bail test/foo
js
```

Run a command _other than_ the command whose name matches the package name
by specifying a `--package` option:

```
$ npm exec --package=foo -- bar --bar-argument
# ~ or ~
$ npx --package=foo bar --bar-argument
```

Run an arbitrary shell script, in the context of the current project:

```
$ npm x -c 'eslint && say ""hooray, lint passed""'
$ npx -c 'eslint && say ""hooray, lint passed""'
```

### Compatibility with Older npx Versions

The `npx` binary was rewritten in npm v7
0, and the standalone `npx`
package deprecated at that time


This resulted in some shifts in its functionality:

- Any `npm` config value may be provided

- The `--no-install` option is deprecated, and will be converted to `--no`

- Shell fallback functionality is removed, as it is not advisable

- The `--npm` option is removed
  That's its job


This document will tell you what it puts where

* Global install (with `-g`): puts stuff in /usr/local or wherever node
  is installed

* Install it **globally** if you're going to run it on the command line
 On Unix systems, it's one level up, since node is typically
installed at `{prefix}/bin/node` rather than `{prefix}/node
exe`
g
 `npm install @myorg/package` would place
the package in `{prefix}/node_modules/@myorg/package`


If you wish to `require()` a package, then install it locally
/node_modules/
bin` so that they can be made available to scripts run
through npm
  (For example, so that a test runner will be in the path
when you run `npm test`


When in local mode, man pages are not installed
  If such a thing is found, then that is treated as the effective
""current directory"" for the purpose of running npm commands
  (This
behavior is inspired by and similar to git's 
2
/node_modules/foo`
/node_modules/


#### Cycles, Conflicts, and Folder Parsimony

Cycles are handled using the property of node's module system that it
walks up the directories looking for `node_modules` folders
  So, at every
stage, if a package is already installed in an ancestor `node_modules`
folder, then it is not installed at the current location


Consider the case above, where `foo -> bar -> baz`
  Imagine if, in
addition to that, baz depended on bar, so you'd have:
`foo -> bar -> baz -> bar -> baz 

  However, since the folder
structure is: `foo/node_modules/bar/node_modules/baz`, there's no need to
put another copy of bar into `
/baz/node_modules`, since when baz calls
`require(""bar"")`, it will get the copy that is installed in
`foo/node_modules/bar`


This shortcut is only used if the exact same
version would be installed in multiple nested `node_modules` folders
3
|   +-- blerg@1
7)
|   +-- baz@2
x
|   |   `-- quux@3
2
3) <---[B]
    |   +-- node_modules
    |       +-- baz (2
0
2) <---[C]
    +-- asdf (2
4)
    +-- baz (1
2
3` and `baz@1


Even though the latest copy of blerg is 1
3
7, foo has a specific
dependency on version 1
2
x`,
it does not install another copy under [B]
  Because it depends on `baz@2
2
3` installed in the parent `node_modules` folder [D],
and must install its own copy [C]

However, because bar is already in quux's ancestry [B], it does not
unpack another copy of bar into that folder
  See [`package
json`](/configuring-npm/package-json) for more information
js and the npm command line interface using either a Node
version manager or a Node installer
js](#checking-your-version-of-npm-and-nodejs)
- [Using a Node version manager to install Node
js and
  npm](#using-a-node-version-manager-to-install-nodejs-and-npm)
- [Using a Node installer to install Node
js and npm

Node version managers allow you to install and switch between multiple
versions of Node
js and npm on your system so you can test your
applications on multiple versions of npm to ensure they work for users on
different versions
com/search?q=node+version+manager+archived%3Afalse&type=repositories&ref=advsearch)


### Using a Node installer to install Node
js and npm on your system
com/nodesource/distributions)
 Other versions have not yet been
tested with npm
org/en/download/)

Or see [this page](https://nodejs
js on a variety of operating
systems, see [this page][pkg-mgr]
org/en/download/package-manager/

---
title: npm-shrinkwrap
json
section: 5
description: A publishable lockfile
---

### Description

`npm-shrinkwrap
 It is identical to
`package-lock


If both `package-lock
json` and `npm-shrinkwrap
json](/configuring-npm/package-lock-json)
json](/configuring-npm/package-lock-json)
* [package


The `npm config` command can be used to update and edit the contents of the
user and global npmrc files
npmrc` files are interpreted as comments when they begin with a
`;` or `#` character
com/npm/ini), which specifies this comment syntax


For example:

```bash
# last modified: 01 Jan 2016
; Set a new registry for a scoped package
@myscope:registry=https://mycustomregistry
  Environment
variables can be replaced as above
org/:`
 If it must be scoped to a
specific path on the host that path may also be provided, such as
`//my-custom-registry
com/another
//registry
npmjs
json file
  Changes to the package should come along with changes
to the version
 If you don't plan to publish your package, the name and
version fields are optional


The name is what your thing is called


Some rules:

* The name must be less than or equal to 214 characters

* The names of scoped packages can begin with a dot or an underscore

* The name ends up being part of a URL, an argument on the command line,
  and a folder name
 Therefore, the name can't contain any non-URL-safe
  characters

* You may want to check the npm registry to see if there's something by
  that name already, before you get too attached to it

  <https://www
npmjs
 The
name and version together form an identifier that is assumed to be
completely unique
com/npm/node-semver), which is bundled with
npm as a dependency
  (`npm install semver` to use it yourself
  It's a string
com/owner/project#readme""
```

### bugs

The URL to your project's issue tracker and / or the email address to which
issues should be reported
 These are helpful for people who encounter
issues with your package


It should look like this:

```json
{
  ""bugs"": {
    ""url"": ""https://github


If a URL is provided, it will be used by the `npm bugs` command
0
com/""
}
```

Or you can shorten that all into a single string, and npm will parse it for
you:

```json
{
  ""author"": ""Barney Rubble <b@rubble
com/)""
}
```

Both email and url are optional either way
com/donate""
    },
    ""http://example
 File
patterns follow a similar syntax to `
gitignore`, but reversed: including a
file, directory, or glob pattern (`*`, `**/*`, and such) will make it so
that file is included in the tarball when it's packed


Some special files and directories are also included or excluded regardless
of whether they exist in the `files` array (see below)
gitignore` file, and `
json`
* `README`
* `LICENSE` / `LICENCE`
* The file in the ""main"" field
* The file(s) in the ""bin"" field

`README` & `LICENSE` can have any case and extension
*
git`
* `
hg`
* `
json`](/configuring-npm/npm-shrinkwrap-json)
  if you wish it to be published)
* `pnpm-lock
lock`

Most of these ignored files can be included specifically if included in
the `files` globs
  Exceptions to this are:

* `
git`
* `


### main

The main field is a module ID that is the primary entry point to your
program


For most modules, it makes the most sense to have a main script and often
not much else
 (e
 npm makes this pretty easy (in fact, it uses this
feature to install the ""npm"" executable
json which is a map of
command name to local file name
 When this package is installed as a dependency in another
package, the file will be linked where it will be available to that package
either directly by `npm exec` or by name in other scripts when invoking them
via `npm run-script`
js` script to `/usr/local/bin/myapp` and in case of windows it
will create a cmd file usually at `C:\Users\{Username}\AppData\Roaming\npm\myapp
5"",
  ""bin"": ""
bin](#directoriesbin)


See [folders](/configuring-npm/folders#executables) for more info on
executables
/man/doc

So, this:

```json
{
  ""name"": ""foo"",
  ""version"": ""1
3"",
  ""description"": ""A packaged foo fooer for fooing foos"",
  ""main"": ""foo
1""
  ]
}
```

will create files to do `man foo` and `man foo-bar`


```json
{
  ""name"": ""foo"",
  ""version"": ""1
js"",
  ""man"": [
    ""
/man/foo
1"",
    ""
2""
  ]
}
```

will create entries for `man foo` and `man 2 foo`

### directories

The CommonJS [Packages](http://wiki
commonjs
json](https://registry
org/npm/latest), you'll see that it
has directories for doc, lib, and man
bin`, all the files in
that folder will be added
bin` is an error
  Sugar to generate a ""man"" array by
walking the folder


Do it like this:

```json
{
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""https://github
com/facebook/react


### config

A ""config"" object can be used to set configuration parameters used in
package scripts that persist across upgrades


### dependencies

Dependencies are specified in a simple object that maps a package name to a
version range
 The version range is a string which has one or more
space-separated descriptors


* `version` Must match `version` exactly
* `>version` Must be greater than `version`
* `>=version` etc
* `<version`
* `<=version`
* `~version` ""Approximately equivalent to version""  See
  [semver](https://github
com/npm/node-semver#versions)
* `^version` ""Compatible with version""  See [semver](https://github
x` 1
2
2
, but not 1


0
0
1"",
    ""qux"": ""<1
0
3
1 <2
tar
2"",
    ""elf"": ""~1
3"",
    ""two"": ""2

/dyl""
  }
}
```

#### URLs as Dependencies

You may specify a tarball URL in place of a version range


This tarball will be downloaded and installed locally to your package at
install time


Examples:

```bash
git+ssh://git@github
com:npm/cli
27
git+ssh://git@github
com/npm/cli
json` will cause npm to believe it needs to perform a build
1
  Just as with git URLs, a `commit-ish` suffix can be
included
0 you can provide a path to a local directory that
contains a package

 For example:

```json
{
  ""name"": ""baz"",
  ""dependencies"": {
    ""bar"": ""file:


### devDependencies

If someone is planning on downloading and using your module in their
program, then they probably don't want or need to download and build the
external test or documentation framework that you use


In this case, it's best to map these additional items in a
`devDependencies` object


These things will be installed when doing `npm link` or `npm install` from
the root of a package, and can be managed like any other npm configuration
param


For build steps that are not platform-specific, such as compiling
CoffeeScript or other languages to JavaScript, use the `prepare` script to
do this, and make the required package a devDependency
3"",
  ""devDependencies"": {
    ""coffee-script"": ""~1
 Notably, your module may be
exposing a specific interface, expected and specified by the host
documentation
3
 If you depend on features introduced in 1
5
3
5"",
  ""peerDependencies"": {
    ""tea"": ""2
2""
  },
  ""peerDependenciesMeta"": {
    ""soy-milk"": {
      ""optional"": true
    }
  }
}
```

Marking a peer dependency as optional ensures npm will not emit a warning
if the `soy-milk` package is not installed on the host
 This allows you to
integrate and interact with a variety of host packages without requiring
all of them to be installed


### bundleDependencies

This defines an array of package names that will be bundled when publishing
the package


For example:

If we define a package
0

This file contains the dependencies `renderized` and `super-streams` which
can be installed in a new project by executing `npm install
awesome-web-framework-1
0
tgz`


### optionalDependencies

If a dependency can be used, but you would like npm to proceed if it cannot
be found or fails to install, then you may put it in the
`optionalDependencies` object

doFooThings()
}
```

Entries in `optionalDependencies` will override entries of the same name in
`dependencies`, so it's usually best to only put in one place


### overrides

If you need to make specific changes to dependencies of your dependencies, for
example replacing the version of a dependency with a known security issue,
replacing an existing dependency with a fork, or making sure that the same
version of a package is used everywhere, then you may add an override


Overrides provide a way to replace a package in your dependency tree with
another version, or another package entirely
0
0`:

```json
{
  ""overrides"": {
    ""foo"": {
      ""
"": ""1
0
0` when it's a child (or grandchild, or great
grandchild, etc) of the package `bar`:

```json
{
  ""overrides"": {
    ""bar"": {
      ""foo"": ""1
0
 To override `foo` only when it's a
child of `bar` and only when `bar` is a child of `baz`:

```json
{
  ""overrides"": {
    ""baz"": {
      ""bar"": {
        ""foo"": ""1
0"": {
      ""foo"": ""1
 To make
this limitation easier to deal with, overrides may also be defined as a
reference to a spec for a direct dependency by prefixing the name of the
package you wish the version to match with a `$`


```json
{
  ""dependencies"": {
    ""foo"": ""^1
0
3 <15""
  }
}
```

And, like with dependencies, if you don't specify the version (or if you
specify ""\*"" as the version), then any version of node will do
0
20""
  }
}
```

Unless the user has set the
[`engine-strict` config](/using-npm/config#engine-strict) flag, this field is
advisory only and will only produce warnings when your package is installed as a
dependency


### os

You can specify which operating systems your
module will run on:

```json
{
  ""os"": [
    ""darwin"",
    ""linux""
  ]
}
```

You can also block instead of allowing operating systems, just prepend the
blocked os with a '!':

```json
{
  ""os"": [
    ""!win32""
  ]
}
```

The host operating system is determined by `process


```json
{
  ""cpu"": [
    ""x64"",
    ""ia32""
  ]
}
```

Like the `os` option, you can also block architectures:

```json
{
  ""cpu"": [
    ""!arm"",
    ""!mips""
  ]
}
```

The host architecture is determined by `process
arch`

### private

If you set `""private"": true` in your package


### publishConfig

This is a set of config values that will be used at publish-time


See [`config`](/using-npm/config) to see the list of config options that
can be overridden


### workspaces

The optional `workspaces` field is an array of file patterns that describes
locations within the local file system that the install client should look
up to find each [workspace](/using-npm/workspaces) that needs to be
symlinked to the top level `node_modules` folder
json` files inside them:

```json
{
  ""name"": ""workspace-example"",
  ""workspaces"": [
    ""
/packages/*""
  ]
}
```

See [`workspaces`](/using-npm/workspaces) for more examples
js`
gyp` file in the root of your package and you have
  not defined an `install` or `preinstall` script, npm will default the
  `install` command to compile using node-gyp

  Lines which start with a `#` or are blank, will be ignored


### SEE ALSO

* [semver](https://github
com/npm/node-semver#versions)
* [workspaces](/using-npm/workspaces)
* [npm init](/commands/npm-init)
* [npm version](/commands/npm-version)
* [npm config](/commands/npm-config)
* [npm help](/commands/npm-help)
* [npm install](/commands/npm-install)
* [npm publish](/commands/npm-publish)
* [npm uninstall](/commands/npm-uninstall)

---
title: package-lock
json
section: 5
description: A manifestation of the manifest
---

### Description

`package-lock


* Optimize the installation process by allowing npm to skip repeated
  metadata resolutions for previously-installed packages
json`
  files, and allowing for significant performance improvements
json` vs `npm-shrinkwrap


The difference is that `package-lock
json` cannot be published, and it will
be ignored if found in any place other than the root project


In contrast, [npm-shrinkwrap
json` and `npm-shrinkwrap
json` are present in the
root of a project, `npm-shrinkwrap
json` will take precedence and
`package-lock
  This contains information about the
tree, and is used in lieu of reading the entire `node_modules` hierarchy
provided that the following conditions are met:

- All package folders it references exist in the `node_modules` hierarchy

- The modified time of the file is at least as recent as all of the package
  folders it references
  If another CLI mutates
the tree in any way, this will be detected, and the hidden lockfile will be
ignored

For example, if you add a file to `node_modules/foo/lib/bar
package-lock
json`


As the hidden lockfile is ignored by older npm versions, it does not
contain the backwards compatibility affordances present in ""normal""
lockfiles
json`
 This will match
what's in `package


* No version provided: an ""ancient"" shrinkwrap file from a version of npm
  prior to npm v5
 Backwards compatible to v1
  lockfiles

* `3`: The lockfile version used by npm v9 and above
github


* link: A flag to indicate that this is a symbolic link


* dev, optional, devOptional: If the package is strictly part of the
  `devDependencies` tree, then `dev` will be true
  (An `optional` dependency of
  a `dev` dependency will have both `dev` and `optional` set
)

* inBundle: A flag to indicate that the package is a bundled dependency
json` file


* bin, license, engines, dependencies, optionalDependencies: fields from
  `package
json`

#### dependencies

Legacy data for supporting versions of npm that use `lockfileVersion: 1`

This is a mapping of package names to dependency objects
 (eg,
      `https://example
com/example-1
0
0
io/webappsec/specs/subresourceintegrity/)
  string for the artifact that was unpacked in this location
  If the tarball URL isn't on the same server as the
  registry URL then this is a complete URL


* dev: If true then this dependency is either a development dependency ONLY
  of the top level module or a transitive dependency of one
  This is
  false for dependencies that are both an optional dependency of the top
  level and a transitive dependency of a non-optional dependency of the top
  level


* requires: This is a mapping of module name to version
  The version should match via normal matching rules a
  dependency either in our `dependencies` or in a level higher than us
json](/configuring-npm/npm-shrinkwrap-json)
* [package
  Finally, `--flag1 --flag2 -- bar` will set
both configuration parameters to `true`, and the `bar` is taken
as a command argument
  Config
values are case-insensitive, so `NPM_CONFIG_FOO=bar` will work the
same
com/npm/npm/issues/14528)


#### npmrc Files

The four relevant files are:

* per-project configuration file (`/path/to/my/project/
npmrc`)
* per-user configuration file (defaults to `$HOME/


#### Default Configs

Run `npm config ls -l` to see a set of configuration parameters that are
internal to npm, and are defaults if nothing else is specified
  For example:

```bash
npm ls --par
# same as:
npm ls --parseable
```

If multiple single-character shorthands are strung together, and the
resulting combination is unambiguously not some other configuration
param, then it is expanded to its various component pieces


Unscoped packages can not be set to `restricted`


Note: This defaults to not changing the current access level for existing
packages




#### `audit`

* Default: true
* Type: Boolean

When ""true"" submit audit reports alongside the current npm command to the
default registry and all registries configured for scopes
 Note that if an `otp`
config is given, this value will always be set to `legacy`




#### `browser`

* Default: OS X: `""open""`, Windows: `""start""`, Others: `""xdg-open""`
* Type: null, Boolean, or String

The browser that is called by npm commands to open websites

npm`
* Type: Path

The location of npm's cache directory




#### `call`

* Default: """"
* Type: String

Optional companion option for `npm exec`, `npx` that allows for specifying a
custom command to be run along with the installed packages
 If `""always""` then always shows colors




#### `commit-hooks`

* Default: true
* Type: Boolean

Run git commit hooks when using the `npm version` command




#### `cpu`

* Default: null
* Type: null or String

Override CPU architecture of native modules to install


If not set, `npm ls` will show only the immediate dependencies of the root
project




#### `diff-ignore-all-space`

* Default: false
* Type: Boolean

Ignore whitespace when comparing lines in `npm diff`




#### `diff-src-prefix`

* Default: ""a/""
* Type: String

Source prefix to be used in `npm diff` output




#### `engine-strict`

* Default: false
* Type: Boolean

If set to true, then npm will stubbornly refuse to install (or even consider
installing) any package that claims to not be compatible with the current
Node
js version
 Can be either
true (expect some results) or false (expect no results)




#### `fetch-retry-factor`

* Default: 10
* Type: Number

The ""factor"" config for the `retry` module to use when fetching packages




#### `force`

* Default: false
* Type: Boolean

Removes various protections against unfortunate side effects, common
mistakes, unnecessary performance degradation, and malicious input


* Allow clobbering non-npm files in global installs

* Allow deleting the cache folder with `npm cache clean`

* Allow `npm audit fix` to install modules outside your stated dependency
  range (including SemVer-major changes)

* Allow clobbering existing values in `npm pkg`
* Allow unpublishing of entire packages (not just a single version)
json` as a human readable
file
 If git is installed on the computer,
but is not in the `PATH`, then set this to the full path to the git binary




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `globalconfig`

* Default: The global --prefix setting plus 'etc/npmrc'
 For example,
  '/usr/local/etc/npmrc'
* Type: Path

The config file to read for global config options
 This is useful, for example, when
running scripts that may only apply for some builds in an otherwise generic
CI setup


This value is not exported to the environment for child processes
json files


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `include-staged`

* Default: false
* Type: Boolean

Allow installing ""staged"" published packages, as defined by [npm RFC PR
#92](https://github


This value is not exported to the environment for child processes


#### `init-author-email`

* Default: """"
* Type: String

The value `npm init` should use by default for the package author's email
js""
* Type: Path

A module that will be loaded by the `npm init` command
0
0""
* Type: SemVer string

The value that `npm init` should use by default for the package version
number, if not already set in package
json
 nested: (formerly --legacy-bundling) install in
place, no hoisting
json`




#### `legacy-peer-deps`

* Default: false
* Type: Boolean

Causes npm to completely ignore `peerDependencies` when building a package
tree, as in npm versions 3 through 6
 Must be IPv4 in versions of Node prior to 0
 See
[folders](/configuring-npm/folders) for more on the differences in behavior


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory
json and
npm-shrinkwrap-json files
 Lacks some data that
is used during the install, resulting in slower and possibly less
deterministic installs


2: The default lockfile version used by npm version 7 and 8
 Smaller on
disk than lockfile version 2, but not interoperable with older npm versions




#### `loglevel`

* Default: ""notice""
* Type: ""silent"", ""error"", ""warn"", ""notice"", ""http"", ""info"", ""verbose"", or
  ""silly""

What level of logs to report


Any logs of a higher level than the setting are shown




#### `maxsockets`

* Default: 15
* Type: Number

The maximum number of connections to use per origin (protocol/host/port
combination)




#### `message`

* Default: ""%s""
* Type: String

Commit message which is used by `npm version` when creating version commit


Any ""%s"" in the message will be replaced with the version number




#### `node-options`

* Default: null
* Type: null or String

Options to pass through to Node
 This does not impact how npm itself is executed but it does impact
how lifecycle scripts are called




#### `offline`

* Default: false
* Type: Boolean

Force offline mode: no network requests will be done during install




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty
json` file
 They are just not
physically installed on disk


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts




#### `omit-lockfile-registry-resolved`

* Default: false
* Type: Boolean

This option causes npm to create lock files without a `resolved` key for
registry dependencies
 Acceptable values are same as `os`
field of package
json, which comes from `process




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator
""
* Type: String

Directory in which `npm pack` will save tarballs




#### `package-lock-only`

* Default: false
* Type: Boolean

If set to true, the current operation will only use the `package-lock




#### `prefer-offline`

* Default: false
* Type: Boolean

If true, staleness checks for cached data will be bypassed, but missing data
will be requested from the server




#### `prefer-online`

* Default: false
* Type: Boolean

If true, staleness checks for cached data will be forced, making the CLI
look for updates immediately even for fresh package data




#### `prefix`

* Default: In global mode, the folder where the node executable is installed

  Otherwise, the nearest parent folder containing either a package
json file
  or a node_modules folder
 If set on the command line, then it
forces non-global commands to run in the specified folder




#### `preid`

* Default: """"
* Type: String

The ""prerelease identifier"" to use as a prefix for the ""prerelease"" part of
a semver
 Like the `rc` in `1
0-rc


Set to `false` to suppress the progress bar




#### `rebuild-bundle`

* Default: true
* Type: Boolean

Rebuild bundled dependencies after installation
npmjs




#### `replace-registry-host`

* Default: ""npmjs""
* Type: ""npmjs"", ""never"", ""always"", or String

Defines behavior for replacing the registry host in a lockfile with the
configured registry
npmjs
 If set to
""never"", then use the registry value
 If set to ""always"", then replace the
registry host with the configured host every time


You may also specify a bare hostname (e
org"")
json` file as dependencies
json`
json` if set to `false`




#### `save-bundle`

* Default: false
* Type: Boolean

If a package would be saved at install time by the use of `--save`,
`--save-dev`, or `--save-optional`, then also put it in the
`bundleDependencies` list




#### `save-peer`

* Default: false
* Type: Boolean

Save installed packages to a package
json file via
`--save` or `--save-dev` get prefixed
3` which allows minor upgrades for that package, but after `npm
config set save-prefix='~'` it would be set to `~1
3` which only allows
patch upgrades




#### `sbom-format`

* Default: null
* Type: ""cyclonedx"" or ""spdx""

SBOM format to use when generating SBOMs
 For CycloneDX, this is the
value for the `type` field
com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

This will cause `@mycorp` to be mapped to the registry for future
installation of packages specified according to the pattern
`@mycorp/package`


```
# accept all defaults, and create a package named ""@foo/whatever"",
# instead of just named ""whatever""
npm init --scope=@foo --yes
```



#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands




#### `searchstaleness`

* Default: 900
* Type: Number

The age of the cache, in seconds, before another registry request is made if
using legacy search endpoint




#### `sign-git-commit`

* Default: false
* Type: Boolean

If set to true, then the `npm version` command will commit the new package
version using `-S` to add a signature


Note that git requires you to have set up GPG keys in your git configs for
this to work properly




#### `sign-git-tag`

* Default: false
* Type: Boolean

If set to true, then the `npm version` command will tag the version using
`-s` to add a signature




#### `strict-peer-deps`

* Default: false
* Type: Boolean

If set to `true`, and `--legacy-peer-deps` is not set, then _any_
conflicting `peerDependencies` will be treated as an install failure, even
if npm could reasonably guess the appropriate resolution based on non-peer
dependency relationships


By default, conflicting `peerDependencies` deep in the dependency graph will
be resolved using the nearest non-peer dependency specification, even if
doing so will result in some packages receiving a peer dependency outside
the range set in their package's `peerDependencies` object
 If `--strict-peer-deps` is set, then
this warning is treated as a failure
 To remove the prefix altogether, set
it to the empty string: `""""`
0
0`, _only use this property if it is absolutely necessary_




#### `umask`

* Default: 0
* Type: Octal numeric string in range 0000
0777 (0


Note that the underlying system will _also_ apply its own umask value to
files and folders that are created, and npm does not circumvent this, but
rather adds the `--umask` config to it
 The following fields are replaced with
their actual counterparts:

* `{npm-version}` - The npm version in use
* `{node-version}` - The Node
npmrc""
* Type: Path

The location of user-level configuration settings




#### `version`

* Default: false
* Type: Boolean

If true, output the npm version and exit successfully


Only relevant when specified explicitly on the command line


Only relevant when specified explicitly on the command line




#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


#### `workspaces-update`

* Default: true
* Type: Boolean

If set to true, the npm cli will run an update after operations that may
possibly change the workspaces installed to the `node_modules` folder




#### `also`

* Default: null
* Type: null, ""dev"", or ""development""
* DEPRECATED: Please use --include=dev instead




#### `cache-max`

* Default: Infinity
* Type: Number
* DEPRECATED: This option has been deprecated in favor of `--prefer-online`

`--cache-max=0` is an alias for `--prefer-online`



#### `cache-min`

* Default: 0
* Type: Number
* DEPRECATED: This option has been deprecated in favor of `--prefer-offline`
 Example:
  //other-registry
pem
  //other-registry
 For example:

```ini
cert=""-----BEGIN CERTIFICATE-----\nXXXX\nXXXX\n-----END CERTIFICATE-----""
```

It is _not_ the path to a certificate file, though you can set a
registry-scoped ""certfile"" path like
""//other-registry




#### `init


Alias for `--init-author-name`



#### `init
url`

* Default: """"
* Type: """" or URL
* DEPRECATED: Use `--init-author-url` instead
0""
* Type: SemVer string
* DEPRECATED: Use `--init-version` instead


Alias for `--init-version`



#### `key`

* Default: null
* Type: null or String
* DEPRECATED: `key` and `cert` are no longer used for most registry
  operations
 Use registry scoped `keyfile` and `certfile` instead
tld/:keyfile=/path/to/key
pem
  //other-registry
tld/:certfile=/path/to/cert
tld/:keyfile=/path/to/key
pem""
 Sets `--install-strategy=nested`


Alias for `--omit=dev`



#### `shrinkwrap`

* Default: true
* Type: Boolean
* DEPRECATED: Use the --package-lock setting instead

)

### Dependency Selector Syntax

#### Overview:

- there is no ""type"" or ""tag"" selectors (ex


peer` dependency found in the `peerDependencies` section of `package
json`
- `
workspace` dependency found in the [`workspaces`](https://docs
bundled` dependency found in the `bundleDependencies` section of `package
json`, or is a child of said dependency

#### Pseudo Selectors
- [`:not(<selector>)`](https://developer
mozilla
org/en-US/docs/Web/CSS/:empty) when a dependency has no dependencies
- [`:private`](https://docs
com/cli/v8/commands/npm-link)
- `:deduped` when a dependency has been deduped (note that this does *not* always mean the dependency has been hoisted to the root of node_modules)
- `:overridden` when a dependency has been overridden
- `:extraneous` when a dependency exists but is not defined as a dependency of any node
- `:invalid` when a dependency version is out of its ancestors specified range
- `:missing` when a dependency is not found on disk
- `:semver(<spec>, [selector], [function])` match a valid [`node-semver`](https://github
com/package/glob) matching based on dependencies path relative to the project
- `:type(<type>)` [based on currently recognized types](https://github
com/npm/npm-package-arg#result-object)
- `:outdated(<type>)` when a dependency is outdated
- `:vuln(<selector>)` when a dependency has a known vulnerability

##### `:semver(<spec>, [selector], [function])`

The `:semver()` pseudo selector allows comparing fields from each node's `package
json` using [semver](https://github
 It accepts up to 3 parameters, all but the first of which are optional
valid()`, `eq` is used
 If both values are ranges, according to `!semver
0
0)` returns every node that has a `version` satisfied by the provided range `^1
node` property satisfying the version `16
0`
- `:semver(1


- `versions` an array of every available version of the given node
- `outdated
inRange` an array of objects, each with a `from` and `versions`, where `from` is the on-disk location of the node that depends on the current node and `versions` is an array of all available versions that satisfies that dependency

- `outdated
  Only dependencies whose current version matches a vulnerability will be returned
  For example if you have `semver@7
6
  Note that severity filtering is done per severity, it does not include severities ""higher"" or ""lower"" than the one specified
prod:vuln` returns direct production dependencies with any known vulnerability
- `:vuln([severity=high])` returns only dependencies with a vulnerability with a `high` severity

- `:vuln([cwe=1333])` returns only dependencies with a vulnerability that includes CWE-1333 (ReDoS)

#### [Attribute Selectors](https://developer
 existence of attribute)
- `[attribute=value]` attribute value is equivalent




- `[attribute$=value]` attribute value ends with


#### `Array` & `Object` Attribute Selectors

The generic `:attr()` pseudo selector standardizes a pattern which can be used for attribute selection of `Object`s, `Array`s or `Arrays` of `Object`s accessible via `Arborist`'s `Node
 This allows for iterative attribute selection beyond top-level `String` evaluation
test` containing `""tap""` */
*:attr(scripts, [test~=tap])
```

#### Nested `Objects`

Nested objects are expressed as sequential arguments to `:attr()`
dev
bundled`)
loadActual()
then(async (tree) => {
  // query all production dependencies
  const results = await tree
log(results)
})
```

```js
// iterative
arb
querySelectorAll(':type(git)')
  console


Fantastic!

There are a few things that you need to do above the simple steps
that your users will do to install your program


### What is a Package

A package is:

* a) a folder containing a program described by a package


Even if you never publish your package, you can still get a lot of
benefits of using npm if you just want to write a node program (a), and
perhaps if you also want to be able to easily install it elsewhere
after packing it up into a tarball (b)
com/user/project
  The default is whatever the repository uses
as its default branch


### The package


See [`package
  At the very least, you need:

* name: This should be a string that identifies your project
  Please do
  not use the name to specify that it runs on node, or is in JavaScript


  It does not necessarily need to match your github repository name


* version: A semver-compatible version


* scripts: If you have a special compilation or installation script, then
  you should put it in the `scripts` object
  See [`npm
init`](/commands/npm-init) for more info


### Keeping files *out* of your Package

Use a `
  If there's no
`
gitignore` file, then npm will ignore
the stuff matched by the `
gitignore` file
  If you *want* to include
something that is excluded by your `
gitignore` file, you can create an
empty `
npmignore` file to override it
DS_Store`
* `
git`
* `
 npm automatically handles this for you, so don't
bother adding `node_modules` to `
npmignore`
npmignore` to be a
maintenance headache, you might instead try populating the `files`
property of `package


### Link Packages

`npm link` is designed to install a development package and see the
changes in real time without having to keep re-installing it
 -g
```

That'll show you that it's working
  It works like this:

```bash
npm adduser
```

and then follow the prompts


### Publish your Package

This part's easy


### Brag about it

Send emails, write blogs, blab in IRC
json](/configuring-npm/package-json)
* [npm scripts](/using-npm/scripts)
* [npm publish](/commands/npm-publish)
* [npm adduser](/commands/npm-adduser)
* [npm registry](/using-npm/registry)

---
title: Logging
section: 7
description: Why, What & How We Log
---

### Description

The `npm` CLI has various mechanisms for showing different levels of information back to end-users for certain commands, configurations & environments
 This can be changed with the `logs-dir` config option


For example, if you wanted to write all your logs to the current working directory, you could run: `npm install --logs-dir=
 Write timing information to a process specific timing file in the cache or `logs-dir`
1


Sometimes it is helpful to get timing information without outputting anything to the terminal
 In this case you can use
`--timing --silent` which will still write the timing file, but not output anything to the terminal
while running


### Logs and Sensitive Information

The `npm` CLI makes a best effort to redact the following from terminal output and log files:

- Passwords inside basic auth URLs
- npm tokens

However, this behavior should not be relied on to keep all possible sensitive information redacted
 If you are concerned about secrets in your log file or terminal output, you can use `--loglevel=silent` and `--logs-max=0` to ensure no logs are written to your terminal or filesystem
  

The super admin is the only person who can add users to the org because it impacts the monthly bill
 The super admin will use the website to manage membership
 Every org has a `developers` team that all users are automatically added to
 `npm access` see [npm access](/commands/npm-access) for more details

### Team Admins create teams

* Check who you’ve added to your org:

```bash
npm team ls <org>:developers
```

* Each org is automatically given a `developers` team, so you can see the whole list of team members in your org
 This team automatically gets read-write access to all packages, but you can change that with the `access` command
  Examples include a package name,
git url, tarball, or local directory
  These will generally be referred
to as `<package-spec>` in the help output for the npm commands that use
this package name specifier
  This is typically used in combination
with the [registry](/using-npm/config#registry) config to refer to a
package in a registry
13


See `Package name` above for more info on referring to a package by
name, and [registry](/using-npm/config#registry) for configuring which
registry is used when referring to a package by name


Examples:

* `
  This is the format that packages exist in when
uploaded to a registry


### git urls

* `<git:// url>`
* `<github username>/<github project>`

Refers to a package in a git repo
  This can be a full git url, git
shorthand, or a username/package on GitHub
git`
* `git@github
com:npm/cli
git`
* `git+ssh://git@github
0`
* `github:npm/cli#HEAD`
* `npm/cli#c12ea07`

### See also

* [npm-package-arg](https://npm
 Use of the npm public registry is
subject to terms of use available at <https://docs


npm's package registry implementation supports several
write APIs as well, to allow for publishing packages and managing user
account information


The npm public registry is powered by a CouchDB database,
of which there is a public mirror at <https://skimdb
  See [`npm config`](/commands/npm-config),
[`npmrc`](/configuring-npm/npmrc), and [`config`](/using-npm/config) for more on
managing npm's configuration
 See
[Auth Related Configuration](/configuring-npm/npmrc#auth-related-configuration)

When the default registry is used in a package-lock or shrinkwrap it has the
special meaning of ""the currently configured registry""
 If you create a lock
file while using the default registry you can switch to another registry and
npm will install packages from the new registry, but if you create a lock
file while using a custom registry packages will be installed from that
registry even after you change to another registry

* `Npm-In-CI` – Set to ""true"" if npm believes this install is running in a
  continuous integration environment, ""false"" otherwise
buildKey`

  This is used to gather better metrics on how npm is used by humans, versus
  build farms
json`](/configuring-npm/package-json) for more info on what goes in the package
json file
npmjs
com/>

### See also

* [npm config](/commands/npm-config)
* [config](/using-npm/config)
* [npmrc](/configuring-npm/npmrc)
* [npm developers](/using-npm/developers)

---
title: removal
section: 7
description: Cleaning the Slate
---

### Synopsis

So sad to see you go


If that doesn't work, or if you require more drastic measures,
continue reading


Note that this is only necessary for globally-installed packages
  Delete that folder, and everything is gone unless a package's
install script is particularly ill-behaved
npm,_modules},bin,share/man}/npm*
```

If you installed things *with* npm, then your best bet is to uninstall
them with npm first, and then install them again once you have a
proper install
  This can help find any symlinks that are lying
around:

```bash
ls -laF /usr/local/{lib/node{,/
3, npm used shim files for executables and node
modules
 Some package names also have a scope
g


```bash
@somescope/somepackagename
```

Scopes are a way of grouping related packages together, and also affect a few
things about the way npm treats the package


Each npm user/organization has their own scope, and only you can add packages
in your scope
 Thus it is also a good way to signal official packages
for organizations


Scoped packages can be published and installed as of `npm@2` and are supported
by the primary npm registry


### Installing scoped packages

Scoped packages are installed to a sub-folder of the regular installation
folder, e


A scoped package is installed by referencing it by name, preceded by an
`@` symbol, in `npm install`:

```bash
npm install @myorg/mypackage
```

Or in `package
3


```javascript
require('@myorg/mypackage')
```

There is nothing special about the way Node treats scope folders
 This
simply requires the `mypackage` module in the folder named `@myorg`


(As of 2015-04-19, and with npm 2


#### Publishing public scoped packages to the primary npm registry

Publishing to a scope, you have two options:

- Publishing to your user scope (example: `@username/module`)
- Publishing to an organization scope (example: `@org/module`)

If publishing a public module to an organization scope, you must
first either create an organization with the name of the scope
that you'd like to publish to or be added to an existing organization
with the appropriate permissions
  You will need to specify
`--access public` with the initial `npm publish` command
  This will publish
the package and set access to `public` as if you had run `npm access public`
after publishing


You can then publish the module with `npm publish` or `npm publish
--access restricted`, and it will be present in the npm registry, with
restricted access
 You can then change the access permissions, if
desired, with `npm access` or on the npmjs
com website
 This allows you to
seamlessly use a mix of packages from the primary npm registry and one or more
private registries, such as [GitHub Packages](https://github
json` file supports a number
of built-in scripts and their preset life cycle events as well as
arbitrary scripts
 These all can be executed by running
`npm run-script <stage>` or `npm run <stage>` for short
 *Pre* and *post*
commands with matching names will be run for those as well (e
 Scripts from dependencies can be run with
`npm explore <pkg> -- npm run <stage>`


### Pre & Post Scripts

To create ""pre"" or ""post"" scripts for any scripts defined in the
`""scripts""` section of the `package
 during `npm publish`
    and `npm pack`
* Runs on local `npm install` without any arguments
* Runs AFTER `prepublish`, but BEFORE `prepublishOnly`

* NOTE: If a package being installed through git contains a `prepare`
 script, its `dependencies` and `devDependencies` will be installed, and
 the prepare script will be run, before the package is packaged and
 installed


**prepublish** (DEPRECATED)
* Does not run during `npm publish`, but does run during `npm ci`
  and `npm install`

* Does NOT run in global mode

#### Prepare and Prepublish

**Deprecation Note: prepublish**

Since `npm@1
1
com/npm/npm/issues/10074)
0`, a new event has been introduced, `prepare`, that preserves this existing behavior
 This includes tasks such as:

* Compiling CoffeeScript source code into JavaScript

* Creating minified versions of JavaScript source code

* Fetching remote resources that your package will use


The advantage of doing these things at `prepublish` time is that they can be done once, in a single place, thus reducing complexity and variability
 Additionally, this means that:

* You can depend on `coffee-script` as a `devDependency`, and thus
  your users don't need to have it installed
 It is run AFTER the changes have been applied and the `package
json` files have been updated
gyp` file in the root of your package and you
haven't defined your own `install` or `preinstall` scripts, npm will
default the `install` command to compile using node-gyp via `node-gyp
rebuild`

These are run from the scripts of `<pkg-name>`

#### [`npm pack`](/commands/npm-pack)

* `prepack`
* `prepare`
* `postpack`

#### [`npm publish`](/commands/npm-publish)

* `prepublishOnly`
* `prepack`
* `prepare`
* `postpack`
* `publish`
* `postpublish`

#### [`npm rebuild`](/commands/npm-rebuild)

* `preinstall`
* `install`
* `postinstall`
* `prepare`

`prepare` is only run if the current directory is a symlink (e
g
 Removal of a package can happen for a wide variety of reasons, and there's no clear way to currently give the script enough context to be useful
1
x""
  },
  ""scripts"": {
    ""start"" : ""bar 
json fields are tacked onto the `npm_package_` prefix
 So,
for instance, if you had `{""name"":""foo"", ""version"":""1
json file, then your package scripts would have the
`npm_package_name` environment variable set to ""foo"", and the
`npm_package_version` set to ""1
2
5""
json`](/configuring-npm/package-json) for more on package configs
 So, you could have a
single script used for different parts of the process which switches
based on what's currently happening
js""}}` in your package
json, then you'd
see this in the script:

```bash
process
js""
```

### Examples

For example, if your package
  Since `scripts/install


If the script exits with a code other than 0, then this will abort the
process
 They just have to be some kind of executable
file
  For instance, if
  the `npm_config_binroot` environment variable is set to `/home/user/bin`, then
  don't try to install executables into `/usr/local/bin`
gyp` file for compilation, and `prepare`
  for anything else
 If you are doing this, please consider if
  there is another option
 If you want your
  script to use different behavior based on what subdirectory you're in, you
  can use the `INIT_CWD` environment variable, which holds the full path you
  were in when you ran `npm run`
json](/configuring-npm/package-json)
* [npm developers](/using-npm/developers)
* [npm install](/commands/npm-install)

---
title: workspaces
section: 7
description: Working with workspaces
---

### Description

**Workspaces** is a generic term that refers to the set of features in the
npm cli that provides support for managing multiple packages from your local
file system from within a singular top-level, root package


This set of features makes up for a much more streamlined workflow handling
linked packages from the local file system
 It automates the linking process
as part of `npm install` and removes the need to manually use `npm link` in
order to add references to packages that should be symlinked into the current
`node_modules` folder
json`](/configuring-npm/package-json#workspaces) file, e
g:

```json
{
  ""name"": ""my-workspaces-powered-project"",
  ""workspaces"": [
    ""packages/a""
  ]
}
```

Given the above `package
json
`-- packages
   +-- a
   |   `-- package
/packages/a
+-- package-lock
json
+-- package
json
`-- packages
   +-- a
   |   `-- package
json` defined you can run:

```
npm init -w 
/packages/a
```

This command will create the missing folders and a new `package
json`
file (if needed) while also making sure to properly configure the
`""workspaces""` property of your root project `package


For example, assuming the following structure:

```


+-- package


### Using workspaces

Given the [specifics of how Node
x/docs/api/modules
json` `name`
 Continuing from the example defined
above, let's also create a Node
js
module
exports = 'a'

// 
log(moduleA) // -> a
```

When running it with:

`node lib/index
js`

This demonstrates how the nature of `node_modules` resolution allows for
**workspaces** to enable a portable workflow for requiring each **workspace**
in such a way that is also easy to [publish](/commands/npm-publish) these
nested workspaces to be consumed elsewhere
json
```

By running a command using the `workspace` option, it's possible to run the
given command in the context of that specific workspace


```
cd packages/a && npm run test
```

Either will run the `test` script defined within the
`
g:

```
npm run test --workspace=a --workspace=b
```

Or run the command for each workspace within the 'packages' folder:
```
npm run test --workspace=packages
```

It's also possible to use the `workspaces` (plural) configuration option to
enable the same behavior but running that command in the context of **all**
configured workspaces
 e
/packages/b`


Commands will be run in each workspace in the order they appear in your `package


By running the command with the `--if-present` flag, npm will ignore workspaces missing target script


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS

















<!-- This file is automatically added by @npmcli/template-oss
 Do not edit
 -->

ISC License

Copyright npm, Inc


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE
shields
io/npm/v/@npmcli/arborist
svg)](https://npm
yml/badge
svg)](https://github
com/npm/arborist/main/docs/logo

  path: '/path/to/package/root',

  // url to the default registry

  // Arborist doesn't do anything with these, it just passes them down
  // the chain to pacote and npm-registry-fetch
only
foo
  reads the actual contents of node_modules
arb
loadActual()

arb
json or package
then(() => {
  // next step is to reify that ideal tree onto disk
)
  //   The dep will be saved in the location where it already exists,
  //   (or pkg

  // saveType: Save added packages in a specific dependency set
  Prune extraneous nodes from the tree

})

// WRITING

// Make the idealTree be the thing that's on disk
arb
  The physical structure of the
folder tree is represented by the `node
target` is a reference to the actual node


An `Edge` represents a dependency relationship
to` is a reference to the node that
requires the dependency
  In other words,
`edge


### class Node

All arborist trees are `Node` objects


* `node
name` The name of this node's folder in `node_modules`

* `node
  The package in whose
  `node_modules` folder this package lives


* `node
package` The contents of this node's `package
  If the node is a link, then this
  is the path to the link, not to the link target
realpath` The full real filepath on disk where this node lives
isLink` Whether this represents a symlink
  Always `false` for Node
  objects, always `true` for Link objects
  (Ie, if `node
root ===
  node`
)
* `node
root` The root node where we are working
)
* `node
isTop` True if this node is the top of its tree (ie, has no
  `parent`, false otherwise)
dev`, `node

  These flags are relevant when pruning dependencies out of the tree or
  deciding what to reify
  False for top of tree
errors` Array of errors encountered while parsing package
json or
  version specifiers

* `link


### class Edge

Edge objects represent a dependency relationship a package node to the
point in the tree where the dependency will be loaded

* `edge

* `edge
type` The type of dependency

* `edge
name` The name of the dependency

* `edge
spec` The specifier that is required
  Any specifier allowed by npm
  is supported

* `edge
to` Automatically set to the node in the tree that matches the
  `name` field
to` satisfies the specifier

* `edge

    * `MISSING` Indicates that the dependency is unmet

    * `PEER LOCAL` Indicates that a `peerDependency` is found in the
      node's local `node_modules` folder, and the node is not the top of
      the tree
spec`

* `edge
to`
  These
are updated by arborist when necessary whenever the tree is modified in
such a way that the dependency graph can change, and are relevant when
pruning nodes from the tree
  It should be pruned if _either_ dev or optional deps are
  being removed

* If `node
  It should be pruned if dev
  dependencies are being removed
devOptional` is set, then the node is a (non-optional)
  dependency within the devDependency hierarchy, _and_ a dependency
  within the `optionalDependency` hierarchy

* If `node
peer` is set, then all the same semantics apply as above, except
  that the dep is brought in by a peer dep at some point, rather than a
  normal non-peer dependency


## BIN

Arborist ships with a cli that can be used to run arborist specific commands outside of the context of the npm CLI


This module is the spiritual descendant of
[`npmconf`](http://npm


The only exceptions:

- The `prefix` config value has some special semantics, setting the local
  prefix if specified on the CLI options and not in global mode, or the
  global prefix otherwise
npmrc`, is used to load user configs

- The `globalconfig` value, as set by the environment, CLI, and
  `userconfig` file (defaulting to `$PREFIX/etc/npmrc`) is used to load
  global configs
  eg `npm_config_some_key=some_value` in the
  environment

- INI-formatted project configs
  eg `some-key = some-value` in the
  `localPrefix` folder (ie, the `cwd`, or its nearest parent that contains
  either a `node_modules` folder or `package

  The `userconfig` config value can be overridden by the `cli`, `env`, or
  `project` configs to change this value

- INI-formatted globalconfig file
  eg `some-key = some-value` in
  the `globalPrefix` folder, which is inferred by looking at the location
  of the node executable, or the `prefix` setting in the `cli`, `env`,
  `project`, or `userconfig`

- Default values (passed in by npm when it loads this module)
argv
  // argv: [] <- if you are using this package in your own cli
  //             and dont want to have colliding argv
  argv: process
env
  env: process
env,
  // optional, defaults to process
execPath,
  // optional, defaults to process
on('log', (level, 
args) => {
  console
log(level, 
log('loaded ok! some-key = ' + conf
get('some-key'))
})
catch(er => {
  console
typeDefs`

The type definitions passed to `nopt` for CLI option parsing and known
configuration validation

- `shorthands` An object mapping a shorthand value to an array of CLI
  arguments that replace it

- `cwd` Optional, defaults to `process
  Used when inferring
  the `globalPrefix` from the `execPath`, since this is done diferently on
  Windows
execPath`
env`
  Set by the
  `prefix` config value, or defaults based on the location of the
  `execPath` option
json`
  file

- `config

- `config

  - `loadError` Any errors encountered that prevented the loading of this
    config data
list[0]` is the `cli` level,
  `config
get('global')` is true, then `globalPrefix`,
  otherwise `localPrefix`
- `home` The user's home directory, found by looking at `env
HOME` or
  calling `os
)` will be
  re-evaluated when `config

Returns one of: `cli`, `env`, `project`, `user`, `global`, `builtin`, or
`default`
set(key, value, where = 'cli')`

Set the key to the specified value, at the specified level in the config
stack


### `config
valid`, since each data object is marked for re-evaluation on every
`config
set()` operation


### `config


### `config
isDefault(key)`

Returns `true` if the value is coming directly from the
default definitions, if the current value for the key config is
coming from any other source, returns `false`


This method can be used for avoiding or tweaking default values, e
get('foo')
>  ```
>
>  Now in a different place of your app it's possible to avoid using the `foo`
>  default value, by checking to see if the current config value is currently
>  one that was defined by the default definitions:
>
>  ```js
>     const save = config
isDefault('foo') ? 'bar' : config
get('foo')
>  ```

### `config
 Do not edit


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies


This is useful if you want to remove a package node from the tree _without_
removing its child nodes, for example to extract a new version of the
dependency into place safely
bin/foo
node_modules/bundle-some/node_modules/foo
```

CLI options:

```
Usage:
  installed-package-contents <path> [-d<n> --depth=<n>]

Lists the files installed for a package specified by <path>
  If set to `0` or a
    negative number, returns the path provided and (if it is a package) its
    set of linked bins
  Path to the package in `node_modules` where traversal
    should begin
  This includes all bundled dependencies in
`node_modules`, and any linked executables in `node_modules/

- If all linked bin scripts were removed, then an empty `node_modules/


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS













































































ISC License

Copyright npm, Inc



(MIT)

Copyright (c) 2013 Julian Gruber &lt;julian@juliangruber
 IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE
org/isaacs/color-support) [![Coverage Status](https://coveralls
svg?branch=master)](https://coveralls


3


4
 If on Windows, then support 16 colors


5


7


6
 Guess based on the `TERM_PROGRAM` environ
x supports 16m colors, below support 256
    - `MacTerm` supports 16m colors
    - `Apple_Terminal` supports 256 colors
    - Have more things that belong on this list?  Send a PR!

8
  Any
   `xterm-256color` will get 256 colors


10
 At this point, we assume that color is not supported
log('color is not supported')
} else if (colorSupport
log('\x1b[38;5;119m256 colors\x1b[0m')
} else if (colorSupport
hasBasic) {
  console
log('colors are not supported')
}
```

## Options

You can pass in the following options

* ignoreDumb - default false
  Ignore `TERM=dumb` environ check
  Ignore `CI` environ check

* env - Object for environment vars
env`
 Defaults to `process
  It takes no command line arguments
im/~sindresorhus)


Finds the first instance of a specified executable in the PATH
environment variable

 })

// sync usage
// throws if not found
var resolved = which
sync('node')

// if nothrow option is used, returns null if not found
resolved = which
sync('node', {nothrow: true})

// Pass options to override the PATH and PATHEXT environment vars
svg?branch=master)](https://travis-ci
org/mathiasbynens/cssesc) [![Code coverage status](https://img
io/codecov/c/github/mathiasbynens/cssesc
io/gh/mathiasbynens/cssesc)

A JavaScript library for escaping CSS strings and identifiers while generating the shortest possible ASCII-only output
be/notes/css-escapes) while generating the shortest possible valid ASCII-only output
 [Here’s an online demo
npmjs
js""></script>
```

In [Node
js](https://nodejs
org/):

```js
const cssesc = require('cssesc');
```

In Ruby using [the `ruby-cssesc` wrapper gem](https://github
com/borodean/ruby-cssesc):

```bash
gem install ruby-cssesc
```

```ruby
require 'ruby-cssesc'
CSSEsc
');
// → 'Lorem ipsum ""dolor"" sit \\\'amet\\\' etc
""

cssesc('Lorem ipsum ""dolor"" sit \'amet\' etc


```js
cssesc('Lorem ipsum ""dolor"" sit \'amet\' etc
'
// → ""Lorem ipsum \\\""dolor\\\"" sit 'amet' etc
""
```

#### `wrap`

The `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled)
 When enabled, the output will be a valid CSS string literal wrapped in quotes
 The type of quotes can be specified through the `quotes` setting
', {
  'quotes': 'single',
  'wrap': true
});
// → '\'Lorem ipsum ""dolor"" sit \\\'amet\\\' etc
', {
  'quotes': 'double',
  'wrap': true
});
// → '""Lorem ipsum \\""dolor\\"" sit \'amet\' etc


```js
// Read the global default setting for `escapeEverything`:
cssesc
js and browser versions mentioned in [`
1
1
com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter
com/mathias ""Follow @mathias on Twitter"") |
|---|
| [Mathias Bynens](https://mathiasbynens


Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
 -->

ISC License

Copyright npm, Inc


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS


The most correct and second fastest glob implementation in
JavaScript
 (See **Comparison to Other JavaScript Glob
Implementations** at the bottom of this readme
com/isaacs/node-glob/raw/main/logo/glob
 Just `glob`
js', { ignore: 'node_modules/**' })

// pass in a signal to cancel the glob walk
const stopAfter100ms = await glob('**/*
css', {
  signal: AbortSignal
dat', 'logs/**/*

const g = new Glob('**/foo', {})
// glob objects are async iterators, can also do globIterate() or
// g
readdirSync()
map(e => e
map(path => path
map(path => path
fullpath())

// custom ignores can be done like this, for example by saying
// you'll ignore all markdown files, and all folders named 'docs'
const customIgnoreResults = await glob('**', {
  ignore: {
    ignored: p => /\
md$/
test(p
ts') || p
mtime > 60 * 60 * 1000
    },
    // could add similar childrenIgnored here as well, but
    // directory mtime is inconsistent across platforms, so
    // probably better not to, unless you know the system
    // tracks this reliably


                         For example, if 'app/*
exe, 'glob app/*
ts'
                         will expand to 'app/[id]
 Then glob
                         will look for a file matching 'app/[id]
ts' (ie,
                         'app/i


                         When setting this option, be sure to enquote arguments
                         so that the shell will not expand them prior to passing
                         them to the glob command process
 Drive letter
                         absolute matches on Windows will be expanded to their
                         full resolved UNC maths, eg instead of 'C:\foo\bar', it
                         will expand to '//?/C:/foo/bar'
realpath' on all of the results


  -s --stat              Call 'fs


  -b --match-base        Perform a basename-only match if the pattern does not
                         contain any slash characters
js' would be
                         treated as equivalent to '**/*
', even if the pattern does not start with '
} patterns
  --nocase               Perform a case-insensitive match


                         Note: 'nocase' should only be explicitly set when it is
                         known that the filesystem's case sensitivity differs
                         from the platform default


  --nodir                Do not match directories, only files


                         To start absolute and non-absolute patterns in the same
                         path, you can use '--root=' to set it to the empty
                         string
 Setting --platform=win32
                         on non-Windows systems may cause strange behavior!

  -i<ignore> --ignore=<ignore>
                         Glob patterns to ignore Can be set multiple times
  -v --debug             Output a huge amount of noisy debug information about
                         patterns as they are parsed and used to match files
github
sync()`

## `globIterate(pattern: string | string[], options?: GlobOptions) => AsyncGenerator<string>`

Return an async iterator for walking glob pattern matches
stream()`

## `globStreamSync(pattern: string | string[], options?: GlobOptions) => Minipass<string | Path>`

Syncronous form of `globStream()`


Alias: `glob
stream
sync()`, `glob
sync
stream()`

## `hasMagic(pattern: string | string[], options?: GlobOptions) => boolean`

Returns `true` if the provided pattern contains any ""magic"" glob
characters, given the options provided


## `escape(pattern: string, options?: GlobOptions) => string`

Escape all magic characters in a glob pattern, so that it will
only ever match literal strings

If the `windowsPathsNoEscape` option is used, then characters are
escaped by wrapping in `[]`, because a magic character wrapped in
a character class can only be satisfied by that exact character


Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot
be escaped or unescaped


## `unescape(pattern: string, options?: GlobOptions) => string`

Un-escape a glob string that may contain some escaped characters


If the `windowsPathsNoEscape` option is used, then square-brace
escapes are removed, but not backslash escapes


When `windowsPathsNoEscape` is not set, then both brace escapes
and backslash escapes are removed


## Class `Glob`

An object that can perform glob pattern traversals
 Returns an AsyncGenerator that
iterates over the results


### `g

- `patterns` An array of parsed immutable `Pattern` objects


## Options

Exported as `GlobOptions` TypeScript interface
 A `GlobOptions`
object may be provided to any of the exported methods, and must
be provided to the `Glob` constructor


All resolved options are added to the Glob object as properties
 The
  current working directory in which to search
 Defaults to
  `process


  This option may be either a string path or a `file://` URL
  object or string


  To start absolute and non-absolute patterns in the same
  path, you can use `{root:''}`


- `windowsPathsNoEscape` Use `\\` as a path separator _only_, and
  _never_ as an escape character
 Please use with
  caution, and be mindful of [the caveat below about Windows
  paths](#windows)
 (For legacy reasons, this is also set if
  `allowWindowsEscape` is set to the exact value `false`
)

- `dot` Include `


- `magicalBraces` Treat brace expansion like `{a,b}` as a ""magic""
  pattern
 Has no effect if {@link nobrace} is set
/foo/bar'`, they are returned as
  `'foo/bar'`
/'` are not prepended with
  `


- `nobrace` Do not expand `{a,b}` and `{1
3}` brace sets


  **Note** `nocase` should only be explicitly set when it is
  known that the filesystem's case sensitivity differs from the
  platform default


- `maxDepth` Specify a number to limit the depth of the directory
  traversal to this many levels below the `cwd`
)

  Note: when `follow` and `nodir` are both set, then symbolic
  links to directories are also omitted
 Note that this will
  incur a performance cost due to the added system calls


- `ignore` string or string[], or an object with `ignore` and
  `ignoreChildren` methods

  To ignore all children within a directory, as well as the entry
  itself, append `'/**'` to the ignore pattern
 In the case of an entry that cannot be resolved, the
  entry is omitted
 This incurs a slight performance penalty, of
  course, because of the added system calls


  This does _not_ make an extra system call to get the realpath,
  it only does string path resolution
 Setting `platform:'win32'` on
  non-Windows systems may cause strange behavior
im/path-scurry)
  `Path` objects instead of strings

  See [PathScurry docs](http://npm
im/path-scurry) for what can
  be overridden


- `scurry` A [PathScurry](http://npm
im/path-scurry) object used
  to traverse the file system


""Globs"" are the patterns you type when you do stuff like `ls
*
 Braced
sections may contain slash characters, so `a{/b/c,bcd}` would
expand into `a/b/c` and `abcd`
 With the exception of `**`, none of these match
path separators (ie, `/` on all platforms, and `\` on Windows)

- `?` Matches 1 character
` character at the start of a
  path portion

- `[

 If the first
  character is `]`, then it will be considered the same as `\]`,
  rather than the end of the character class

- `!(pattern|pattern|pattern)` Matches anything that does not
  match any of the patterns provided

- `?(pattern|pattern|pattern)` Matches zero or one occurrence of
  the patterns provided
 May _not_ contain `/` characters
 It does not crawl symlinked directories, unless
  `{follow:true}` is passed in the options object
 A pattern
  like `a/b/**` will only match `a/b` if it is a directory
symbol
]` style class patterns are not
` as the first
character, then it will not match any glob pattern unless that
pattern's corresponding path part also has a `


For example, the pattern `a/
 However the pattern `a/*/c` would not, because `*` does
not start with a dot character
 This prevents infinite loops and duplicates and
the like
)

If brace expansion is not disabled, then it is performed before
any other interpretation of the glob pattern


The character class patterns `[:class:]` (posix standard named
classes) style class patterns are supported and unicode-aware,
but `[=c=]` (locale-specific character collation weight), and
`[


### Repeated Slashes

Unlike Bash and zsh, repeated `/` are always coalesced into a
single path separator
txt`


On Windows systems, the behavior is similar, but the concept of
an ""absolute path"" is somewhat more involved
 A pattern like
`//ComputerName/Share/*` will return all files in the associated
share
resolve('/')`


As a result, it is possible that a file that exists when glob
looks for it may have been deleted or modified by the time it
returns the result


By design, this implementation caches all readdir calls that it
makes, in order to cut down on system overhead
 For the vast
majority of operations, this is never a problem


### See Also:

- `man sh`
- `man bash` [Pattern
  Matching](https://www


The logo is licensed under a [Creative Commons
Attribution-ShareAlike 4

- If you are reasonably sure that the patterns you will encounter
  are relatively simple, and want the convenience of
  automatically respecting `
im/globby)_


There are some other glob matcher libraries on npm, but these
three are (in my opinion, as of 2023) the best
 Other than this library, I can personally
recommend both [globby](http://npm


`fast-glob` is, as far as I am aware, the fastest glob
implementation in JavaScript today
 However, there are some inconsistencies
with Bash matching behavior that this module does not suffer
from:

- `**` only matches files, not directories
- `


- Support for `

- Support for negated globs (ie, patterns starting with `!`
  rather than using a separate `ignore` option)


The priority of this module is ""correctness"" in the sense of
performing a glob pattern expansion as faithfully as possible to
the behavior of Bash and other sh-like shells, with as much speed
as possible
com/isaacs/node-glob/raw/main/oh-my-glob
gif)

### Benchmark Results

First number is time, smaller is better


Second number is the count of results returned
509s  200364
node current glob async mjs     0m0
463s  222656
node current glob stream        0m0

486s  0
node globby sync                0m0
769s  200364
node current globSync mjs       0m0
517s  10
node current globSync mjs       0m0
550s  10
~~ async ~~
node fast-glob async            0m0
290s  10
node globby async               0m0
528s  160
node current globSync mjs       0m0
283s  160
node globby async               0m0
301s  160
node current glob async mjs     0m0
/**/0/**/0/**/*
544s  5230
node current glob syncStream    0m0
285s  5230
node globby async               0m0
305s  5230
node current glob async mjs     0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
349s  200023
node globby async               0m0
509s  200023
node current glob async mjs     0m0
427s  200023
node current glob stream        0m0
txt,**/?/**/*
txt}' ---
~~ sync ~~
node fast-glob sync             0m0
716s  200023
node current glob syncStream    0m0
/**/0/**/
/[01]/**/0/
txt' ---
~~ sync ~~
node fast-glob sync             0m0
484s  0
node globby sync                0m0
327s  4880
node current glob stream        0m0
547s  100000
node globby sync                0m0
673s  100000
node current globSync mjs       0m0
/{**/?{/**/?{/**/?{/**/?,,,,},,,,},,,,},,,}/**/*
588s  100000
node globby sync                0m0
717s  200023
node current glob syncStream    0m0
687s  200023
~~ async ~~
node fast-glob async            0m0
573s  160023
node globby sync                0m0
731s  160023
node current globSync mjs       0m0
476s  160023
node current glob async mjs     0m0
/{*/**/

/{*/**/

/{*/**,,,,},,,,},,,,},,,,},,,,}/*
617s  200023
node current glob stream        0m0
568s  200023

--- pattern: '
/*/**/
/*/**/


/*/**/
740s  200023
~~ async ~~
node fast-glob async            0m0
281s  0
node globby async               0m0
/*/**/
486s  0
node globby sync                0m0
734s  200023
node current glob syncStream    0m0

/2/**/

/3/**/

/4/**/

/6/**/
067s  0

--- pattern: '
651s  100000
node current globSync mjs       0m0
617s  100000
~~ async ~~
node fast-glob async            0m0
372s  100000
node current glob stream        0m0
603s  200113
node globby sync                0m0
730s  222137
node current glob syncStream    0m0
/**/*/**/*/**/*/**/*/**/*
695s  200000
~~ async ~~
node fast-glob async            0m0
369s  200000
node globby async               0m0
481s  200000

--- pattern: '**/*
txt' ---
~~ sync ~~
node fast-glob sync             0m0
588s  200023
node globby sync                0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
766s  200023
node current globSync mjs       0m0
652s  200023
~~ async ~~
node fast-glob async            0m0
592s  200023
node globby sync                0m0
659s  200023
~~ async ~~
node fast-glob async            0m0
357s  200023
node globby async               0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
585s  200023
node globby sync                0m0
766s  200023
node current globSync mjs       0m0
694s  200023
node current glob syncStream    0m0
350s  200023
node globby async               0m0
424s  200023

--- pattern: '**/[0-9]/**/*
544s  100000
node globby sync                0m0
636s  100000
node current globSync mjs       0m0


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies
0

## Purpose

This license gives everyone as much permission to work with
this software as possible, while protecting contributors
from liability

You must not do anything with this software that triggers
a rule that you cannot or will not follow


## Patent

Each contributor licenses you to do everything with this
software that would otherwise infringe any patent claims
they can license or become able to license


THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE


---

This library is a fork of 'better-json-errors' by Kat Marchán, extended and
distributed under the terms of the MIT license above
io/npm/l/libnpmaccess
svg)](https://github

console
log(Object
getPackages('zkat', opts)))
```

### API

#### `opts` for all `libnpmaccess` commands

`libnpmaccess` uses [`npm-registry-fetch`](https://npm
getVisibility(spec, opts) -> Promise<Object>`

Gets the visibility of a given package

#### `access
  Level must be one of the
following

`none`: mfa is not required to publish this package
setPermissions(team, spec, permssions, opts) -> Promise<Boolean>`

Sets permissions levels for a given team to a package
io/npm/v/libnpmdiff
io/npm/l/libnpmdiff
yml/badge
com/npm/cli/actions/workflows/ci-libnpmdiff
yml)
The registry diff lib


## Table of Contents

* [Example](#example)
* [Install](#install)
* [Contributing](#contributing)
* [API](#api)
* [LICENSE](#license)

## Example

```js
const libdiff = require('libnpmdiff')

const patch = await libdiff([
  'abbrev@1
0',
  'abbrev@1
v1
1
0"",
+  ""version"": ""1
1
1"",
   ""description"": ""Like ruby's abbrev module, but in js"",
   ""author"": ""Isaac Z
com/npm/cli/blob/latest/CONTRIBUTING


All participants and maintainers in this project are expected to follow the
[npm Code of Conduct](https://docs
com/policies/conduct), and just
generally be excellent to each other


Happy hacking!

### API

#### `> libnpmdif([ a, b ], [opts]) -> Promise<String>`

Fetches the registry tarballs and compare files between a spec `a` and spec `b`
com/npm/npm-package-arg)

- `tagVersionPrefix <Sring>`: What prefix should be used to define version numbers
 Defaults to `3`

- `diffIgnoreAllSpace <Boolean>`: Whether or not should ignore changes in whitespace (very useful to avoid indentation changes extra diff lines)

- `diffSrcPrefix <String>`: Prefix to be used in the filenames from `a`
 Defaults to `a/`
 Defaults to `b/`

- `diffText <Boolean>`: Should treat all files as text and try to print diff for binary files

- 


## LICENSE

[ISC](
io/npm/v/libnpmexec
svg)](https://npm
im/libnpmexec)
[![license](https://img
svg)](https://npm
com/npm/cli/actions/workflows/ci-libnpmexec
bin`
 **libexec** will walk up the directory structure looking for `node_modules/
bin` folders in parent folders that might satisfy the current `arg` and will use that bin if found

  - `locationMsg`: Overrides ""at location"" message when entering interactive mode **String**
  - `globalBin`: Location to the global space bin folder, same as: `$(npm bin -g)` **String**, defaults to empty string
`
  - `scriptShell`: Default shell to be used **String**, defaults to `sh` on POSIX systems, `process
env
ComSpec` OR `cmd` on Windows
  - `yes`: Should skip download confirmation prompt when fetching missing packages from the registry? **Boolean**
  - `registry`, `cache`, and more options that are forwarded to [@npmcli/arborist](https://github
shields
im/libnpmfund)
[![CI - libnpmfund](https://github
com/npm/cli/actions/workflows/ci-libnpmfund
yml/badge
yml)

[`libnpmfund`](https://github
log(
  JSON
0
0',
      funding: { url: 'http://collective
example
com' }
    }
  }
}
```

## Install

`$ npm install libnpmfund`

### Contributing

The npm team enthusiastically welcomes contributions and project participation!
There's a bunch of things you can do if you want to contribute! The
[Contributor Guide](https://github
md)
outlines the process for community interaction and contribution
 Please don't
hesitate to jump in if you'd like to, or even ask us questions if something
isn't clear
npmjs


Please refer to the [Changelog](CHANGELOG
com/npm/arborist) tree to be used, e


##### <a name=""fund
normalizeFunding""></a> `> fund
com')
// => {
  url: 'http://example
com'
}
```

##### <a name=""fund
g:

```js
isValidFunding({ foo: 'not a valid funding obj' })
// => false

isValidFunding('http://example


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE COPYRIGHT HOLDER DISCLAIMS
ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE
shields
im/libnpmhook)
[![CI - libnpmhook](https://github
com/npm/cli/actions/workflows/ci-libnpmhook
svg)](https://github
com/npm/cli/actions/workflows/ci-libnpmhook


For a more general introduction to managing hooks, see [the introductory blog
post](https://blog
stream()`](#ls-stream)
  * [`update()`](#update)

## Example

```js
const hooks = require('libnpmhook')

console

```

## Install

`$ npm install libnpmhook`

### API

#### <a name=""opts""></a> `opts` for `libnpmhook` commands

`libnpmhook` uses [`npm-registry-fetch`](https://npm

All options are passed through directly to that library, so please refer to [its
own `opts`
documentation](https://www
npmjs


A couple of options of note for those in a hurry:

* `opts
code === EOTP`, please retry the request with `{otp: <2fa token>}`

#### <a name=""add""></a> `> hooks

Each type will attach to different events


The returned Promise resolves to the full hook object that was created,
including its generated `id`
add('~zkat', 'https://example


The returned Promise resolves to the full hook object that was found, or error
with `err


See also: [`GET
/v1/hooks/hook/:id`](https://github
md#get-v1hookshookid)

##### Example

```javascript
await hooks
find('16f7xoal', {token: 'myregistrytoken'})

=>

{ id: '16f7xoal',
  username: 'zkat',
  name: 'zkat',
  endpoint: 'https://example


See also: [`DELETE
/v1/hooks/hook/:id`](https://github
com/api/added',
  secret: 'supersekrit',
  type: 'owner',
  created: '2018-08-21T20:05:25
125Z',
  updated: '2018-08-21T20:05:25
 `secret` is a shared secret that the
hook will send to that endpoint to verify that it's actually coming from the
registry hook
com/api/other', 'newsekrit', {
  token: 'myregistrytoken',
  otp: '694207'
})

=>

{ id: '16f7xoal',
  username: 'zkat',
  name: 'zkat',
  endpoint: 'https://example
125Z',
  updated: '2018-08-21T20:14:41


Results can be further filtered with three values that can be passed in through
`opts`:

* `opts
limit` - maximum number of hooks to return
* `opts
com/npm/registry/blob/master/docs/hooks/endpoints




]
```

#### <a name=""ls-stream""></a> `> hooks
stream([opts]) -> Stream`

Returns a stream of hook objects associated with the account you're
authenticated as
com/npm/registry/blob/master/docs/hooks/endpoints
io/npm/v/libnpmorg
im/libnpmorg)
[![license](https://img
shields
svg)](https://npm
com/npm/cli/actions/workflows/ci-libnpmorg
com/npm/cli/actions/workflows/ci-libnpmorg
yml)

[`libnpmorg`](https://github
md#membership-detail)
log(await org
com/package/npm-registry-fetch#fetch-options)
for options that can be passed in
otp` - certain operations will require an OTP token to be passed in
 If a `libnpmorg` command fails with `err
set(org, user, [role], [opts]) -> Promise`

The returned Promise resolves to a [Membership
Detail](https://github

`developer` is the default if no `role` is provided


`org` and `user` must be scope names for the org name and user name
respectively
 They can optionally be prefixed with `@`
rm(org, user, [opts]) -> Promise`

The Promise resolves to `null` on success
md#org-membership-delete)

##### Example

```javascript
await org


See also: [`GET
/-/org/:scope/user`](https://github
com/npm/registry/blob/master/docs/orgs/memberships
ls


See also: [`GET
/-/org/:scope/user`](https://github
io/npm/v/libnpmpack
im/libnpmpack)
[![license](https://img
svg)](https://npm
yml)

[`libnpmpack`](https://github
js library for
programmatically packing tarballs from a local directory or from a registry or github spec
npmjs
com/package/pacote#options)
for options that can be passed in
0
io/npm/v/libnpmpublish
svg)](https://npm
yml/badge
svg)](https://github
 Give
it a manifest as an object and a tarball as a Buffer, and it'll put them on
the registry for you
im/npm-registry-fetch)


* `opts
provenanceFile` - specifies the path to an externally-generated
  provenance statement to be published alongside the package


`manifest` should be the parsed `package
npmVersion` is passed in, it will be used as the `_npmVersion`
field in the outgoing packument
integrity = 'sha512-deadbeefbadc0ffee'`

Any algorithm supported by your current node version is allowed -- npm
clients that do not support those algorithms will simply ignore the
unsupported hashes

const path = '/a/path/to/your/source/code'
const pacote = require('pacote') // see: http://npm
tarball(path)
await libpub
publish(manifest, tarData, {
  npmVersion: 'my-pub-script@1
2',
  token: 'my-auth-token-here'
}, opts)
// Package has been published to the npm registry
unpublish(spec, [opts]) -> Promise`

Unpublishes `spec` from the appropriate registry
im/npm-package-arg) parsed spec object
im/libnpmsearch)
[![license](https://img
shields
com/npm/cli/actions/workflows/ci-libnpmsearch


## Table of Contents

* [Example](#example)
* [Install](#install)
* [Contributing](#contributing)
* [API](#api)
  * [search opts](#opts)
  * [`search()`](#search)
  * [`search




more
]
```

## Install

`$ npm install libnpmsearch`

### API

#### <a name=""opts""></a> `opts` for `libnpmsearch` commands

The following opts are used directly by `libnpmsearch` itself:

* `opts
 Default: 20
* `opts
from` - Offset number for results
limit` for pagination
 Useful for UIs
sortBy` - Used as a shorthand to set `opts
 Should be one of `'optimal'`, `'quality'`, `'maintenance'`, or `'popularity'`
quality` - Decimal number between `0` and `1` that defines the weight of `quality` metrics when scoring and sorting packages
sortBy: 'optimal'`)

`libnpmsearch` uses [`npm-registry-fetch`](https://npm
im/npm-registry-fetch)

Most options are passed through directly to that library, so please refer to
[its own `opts`
documentation](https://www
 For other ways to pass in auth details, see the n-r-f docs


If `opts
limit` is provided, it will be sent to the API to constrain the number
of returned results




##### Example

```javascript
await search('libnpm')
=>
[
  {
    name: 'libnpm',
    description: 'programmatic npm API',
    

more
]
```

#### <a name=""search-stream""></a> `> search
on('data', console
log)
=>
// entry 1
{
  name: 'libnpm',
  description: 'programmatic npm API',
  

etc
}
// etc
```



# libnpmteam

[![npm version](https://img
io/npm/l/libnpmteam
svg)](https://npm
com/npm/cli/actions/workflows/ci-libnpmteam
yml/badge
com/npm/cli/actions/workflows/ci-libnpmteam
yml)

[`libnpmteam`](https://github


## Example

```javascript
const team = require('libnpmteam')

// List all teams for the @npm org
log(await team
md
    ```bash
    $ git commit -m ""chore: updated CHANGELOG
 Runs `npm publish`; publishing directory with **unpushed commit**
    # 4
 Runs `git push origin --follow-tags`
    ```

## Table of Contents

* [Installing](#install)
* [Example](#example)
* [API](#api)
  * [team opts](#opts)
  * [`create()`](#create)
  * [`destroy()`](#destroy)
  * [`add()`](#add)
  * [`rm()`](#rm)
  * [`lsTeams()`](#ls-teams)
  * [`lsTeams
create(team, [opts]) -> Promise`

Creates a team named `team`
create('@npm:cli', {token: 'myregistrytoken'})
// The @npm:cli team now exists
destroy('@npm:cli', {token: 'myregistrytoken'})
// The @npm:cli team has been destroyed

```

#### <a name=""add""></a> `> team
rm(user, team, [opts]) -> Promise`

Removes `user` from `team`
rm('zkat', '@npm:cli', {token: 'myregistrytoken'})
// @zkat is no longer part of the @npm:cli team

```

#### <a name=""ls-teams""></a> `> team
lsTeams(scope, [opts]) -> Promise`

Resolves to an array of team names belonging to `scope`
lsUsers
stream('@npm:cli', {token: 'myregistrytoken'})) {
  console
log(user)
}

// outputs
// iarna
// zkat
```



# libnpmversion

[![npm version](https://img
io/npm/l/libnpmversion

  tagVersionPrefix: 'v', // tag as 'v1
2


The `newversion` argument should be a valid semver string, a valid second
argument to [semver
inc](https://github
com/npm/node-semver#functions) (one
of `patch`, `minor`, `major`, `prepatch`, `preminor`, `premajor`,
`prerelease`), or `from-git`


If run in a git repo, it will also create a version commit and tag


If supplied with a `message` string option, it will
use it as a commit message when creating a version commit
  If the
`message` option contains `%s` then that will be replaced with the
resulting version number
 Check to make sure the git working directory is clean before we get
   started

   This step is skipped if the `force` flag is set

2
 Run the `preversion` script
json
  Any files you want added to the commit
   should be explicitly added using `git add`
 Bump `version` in `package
json` as requested (`patch`, `minor`,
   `major`, explicit version number, etc)
json (so they can incorporate it into file headers in
   generated files for example)
  Again, scripts should explicitly add
   generated files to the commit using `git add`
 Use it to clean up the file system or
   automatically push the commit and/or tag
 Then runs your
`build` script, and adds everything in the `dist` directory to the commit


### Options

#### `path` String

The path to the package being versionified


#### `allowSameVersion` Boolean

Allow setting the version to the current version in package
json


#### `preid` String
When the `newversion` is pre, premajor, preminor, or prepatch, this
defines the prerelease string, like 'beta' etc
2


#### `signGitCommit` Boolean

GPG sign the git commit
  Default `false`


#### `force` Boolean

Push forward recklessly if any problems happen


#### `ignoreScripts` Boolean

Do not run pre/post/version lifecycle scripts


#### `scriptShell` String

Path to the shell, which should execute the lifecycle scripts
exe` on windows


#### `message` String

The message for the git commit and annotated git tag that are created
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
com/nodejs/node-gyp/actions?query=workflow%3ATests+branch%3Amain)
![npm](https://img
io/npm/dm/node-gyp)

`node-gyp` is a cross-platform command-line tool written in Node
js for
compiling native addon modules for Node
 It contains a vendored copy of the
[gyp-next](https://github
js are supported


## Features

 * The same build commands work on any of the supported platforms
 * Supports the targeting of different versions of Node
org/versions/)
   * `Xcode Command Line Tools` which will install `clang`, `clang++`, and `make`

python
com/store/search?publisher=Python+Software+Foundation)
microsoft
com/thank-you-downloading-visual-studio/?sku=Community)
  For a version older than Visual Studio 2019, install [Visual Studio Build Tools](https://visualstudio
com/Microsoft/nodejs-guidelines/blob/master/windows-environment


   To use the native ARM64 C++ compiler on Windows on ARM, ensure that you have Visual Studio 2022 [17
4 or later](https://devblogs
powershell) using `Install-Module VSSetup -Scope CurrentUser`
 by setting the `--python` command-line option, e
g
 If the `PYTHON` environment variable is set to the path of a Python executable,
then that version will be used if it is a supported version


Also when `--dist-url` or `--nodedir` flags are passed, node-gyp will use the
`config
gypi` shipped in the headers distribution to generate build
configurations, which is different from the default mode that would use the
`process
config` object of the running Node


Some old versions of Electron shipped malformed `config
gypi` in their headers
distributions, and you might need to pass `--force-process-config` to node-gyp
to work around configuration errors


## How to Use

To compile your native addon first go to its root directory:

``` bash
cd my_node_addon
```

The next step is to generate the appropriate project build files for the current
platform
gyp` file in the current
directory to process


Now you will have either a `Makefile` (on Unix platforms) or a `vcxproj` file
(on Windows) in the `build/` directory
 Next, invoke the `build` command:

``` bash
node-gyp build
```

Now you have your compiled `
 This file gets placed in the root of your package, alongside
`package
/docs/)** directory contains additional documentation on specific node-gyp topics that may be useful if you are experiencing problems installing or building addons using node-gyp


Some additional resources for Node
js native addons and writing `gyp` configuration files:

 * [""Going Native"" a nodeschool
io tutorial](http://nodeschool
/docs/binding
js version to build for (default is `process
version`)
| `--silly`, `--loglevel=silly`     | Log all progress to console
| `--verbose`, `--loglevel=verbose` | Log most progress to console
| `--silent`, `--loglevel=silent`   | Don't log anything to console
| `debug`, `--debug`                | Make Debug build (default is `Release`)
| `--release`, `--no-debug`         | Make Release build
| `-C $dir`, `--directory=$dir`     | Run command in different directory
| `--make=$make`                    | Override `make` command (e
g
gyp
```

### `npm` configuration for npm versions before v9

Use the form `OPTION_NAME` for any of the command options listed above
  The Right Way, and the Wrong Way
  We've all done
that
  You probably won't end up with a
good one of those, but if you don't give up, and you are relentless and
diligent enough in your procrastination, you may just end up with a very
nice option parser
js
var nopt = require(""nopt"")
  , Stream = require(""stream"")
log(parsed)
```

This would give you support for any of the following:

```console
$ node my-program

{ foo: ""Mr
js --blatzk=1000 -fp # but you need to use = if they have a value
{ blatzk: 1000, flag: true, pick: true }

$ node my-program
  The other types provided
# specify what types are allowed in the list
js --many2 foo --many2 bar
{ many2: [""/path/to/foo"", ""path/to/bar""] }
```

Read the tests at the bottom of `lib/nopt

* path: A file system path
 If it does, and `Date` is one of the options,
  then it will return a Date object, not a string

* Boolean: Must be either `true` or `false`
  This means that multiple values
  can be specified, and that the value will always be an array


If a type is an array of values not on this list, then those are
considered valid values
  For instance, in the example above, the
`--bloo` option can only be one of `""big""`, `""medium""`, or `""small""`,
and any other value will be rejected


When parsing unknown fields, `""true""`, `""false""`, and `""null""` will be
interpreted as their JavaScript equivalents


You can also mix types and values, or multiple types, in a list
  For
instance `{ blah: [Number, null] }` would allow a value to be set to
either a Number or null
clean(data, types, typeDefs)` to clean up a
config object and remove its invalid properties


## Error Handling

By default, nopt outputs a warning to standard error when invalid values for
known options are found
  If it is assigned to boolean `false` then the warning is
suppressed
  If you define options like this:

```javascript
{ ""foolhardyelephants"" : Boolean
, ""pileofmonkeys"" : Boolean }
```

Then this will work:

```bash
node program

* `original`: The args as they originally appeared

* `cooked`: The args after flags and shorthands are expanded

As such, `argv[0]` is always `node` and `argv[1]` is always the
JavaScript program being run


Permission to use, copy, modify, and/or distribute this
software for any purpose with or without fee is hereby
granted, provided that the above copyright notice and this
permission notice appear in all copies




<!-- This file is automatically added by @npmcli/template-oss
 Do not edit
 -->

ISC License

Copyright npm, Inc
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
x')
then(manifest => console
log('got it', manifest))

// extract a package into a folder
pacote
then(({from, resolved, integrity}) => {
    console
tarball('https://server
  (In fact, that's
exactly what the npm CLI does


`prepare` scripts will be run when generating tarballs from `git` and
`directory` locations, to simulate what _would_ be published to the
registry, so that you get a working package instead of just raw source
code that might need to be transpiled
  Run `pacote -h` to learn more
1

Usage:

  pacote resolve <spec>
    Resolve a specifier and output the fully resolved target
    Returns integrity and from if '--long' flag is set


  pacote manifest <spec>
    Fetch a manifest and print to stdout

  pacote packument <spec>
    Fetch a full packument and print to stdout

  pacote tarball <spec> [<filename>]
    Fetch a package tarball and save to <filename>
    If <filename> is missing or '-', the tarball will be streamed to stdout
  Additional flags for this executable:

  --long     Print an object from 'resolve', including integrity and spec

If you can pass it to the npm CLI, you can pass it to pacote
  (In fact,
that's exactly what the npm CLI does


* `pacote
resolve(spec, opts)` Resolve a specifier like `foo@latest` or
  `github:user/project` all the way to a tarball url, tarball file, or git
  repo with commit hash
  Returns a promise that resolves to the
  `{from,resolved,integrity}` of the extracted package


* `pacote
tarball(spec, opts)`  Get a package tarball data as a buffer in
  memory
  Returns a Promise that resolves to
  `{from,integrity,resolved}` of the fetched tarball


* `pacote
im/cacache), so in addition to these, anything for
those modules can be given to pacote as well
  Defaults to the same cache directory
  that npm will use by default, based on platform and environment

* `where` Base folder for resolving relative `file:` dependencies
  Should be specified
  if known

* `umask` Permission mode mask for extracted files and directories

  Defaults to `0o22`
  See ""Extracted File Modes"" below
  See ""Extracted File Modes"" below
  Default `null`
npmjs
  There must be a
    configured `_keys` entry in the config that is scoped to the
    registry the manifest is being fetched from
 There must be a configured `_keys` entry in the
    config that is scoped to the registry the manifest is being fetched from


It also prevents files from being group- or world-writable without explicit
opt-in by the user, because all file and directory modes are masked against
the `umask` value
  To respect exactly
what is in the package tarball (even if this makes an unusable system), set
both `dmode` and `fmode` options to `0`


## Extracted File Ownership

When running as `root` on Unix systems, all extracted files and folders
will have their owning `uid` and `gid` values set to match the ownership
of the containing folder


This prevents `root`-owned files showing up in a project's `node_modules`
folder when a user runs `sudo npm install`


## Manifests

A `manifest` is similar to a `package
_integrity` The integrity value for the package artifact
_id` The canonical spec of this package version: name@version
integrity` is not present
  Includes the keyid that
        correlates to a [`key from the npm
        registry`](https://registry
npmjs


When a packument is fetched with `accept:
application/vnd
install-v1+json` in the HTTP headers, only the most
minimum necessary metadata is returned
  This is how
  `foo@latest` gets turned into `foo@1
2
3`


## Copyright

Each contributor licenses you to do everything with this
software that would otherwise infringe that contributor's
copyright in it
0>


## Patent

Each contributor licenses you to do everything with this
software that would otherwise infringe any patent claims
they can license or become able to license
generate('This will be a QRCode, eh!');

You can even specify the error level (default is 'L'):
    
    qrcode
setErrorLevel('Q');
    qrcode
generate('This will be a QRCode with error level Q!');

If you don't want to display to the terminal but just want to string you can provide a callback:

    qrcode
com', function (qrcode) {
        console
log(qrcode)
    });

# Command-Line

## Install

    $ npm install -g qrcode-terminal

## Usage

    $ qrcode-terminal --help
    $ qrcode-terminal 'http://github
com'
    $ echo 'http://github
com' | qrcode-terminal

# Support

- OS X
- Linux
- Windows

# Server-side

[node-qrcode][node-qrcode-url] is a popular server-side QRCode generator that
renders to a `canvas` object


# Developing

To setup the development envrionment run `npm install`

To run tests run `npm test`

# Contributers

    Gord Tanner <gtanner@gmail
com>
    Micheal Brooks <michael@michaelbrooks
ca>

[travis-ci-img]: https://travis-ci
png
[travis-ci-url]: https://travis-ci
png
[node-qrcode-url]: https://github
com/soldair/node-qrcode


























semver(1) -- The semantic versioner for npm
===========================================

## Install

```bash
npm install semver
````

## Usage

As a node module:

```js
const semver = require('semver')

semver
valid('1
3') // '1
c') // null
semver
clean('  =v1
2
2
5
0 || 5
0
2
gt('1
7') // false
semver
8
0
coerce('v2')) // '2
0'
semver
valid(semver
3-alpha')) // '42

]]
Prints valid versions sorted by SemVer precedence

Options:
-r --range <range>
        Print versions that match the specified range


-i --increment [<level>]
        Increment a version by the specified level
  Level can
        be one of: major, minor, patch, premajor, preminor,
        prepatch, or prerelease
  Default level is 'patch'

        Only one version may be specified


-l --loose
        Interpret versions and ranges loosely

-n <0|1>
        This is the base to be used for the prerelease identifier


-p --include-prerelease
        Always include prerelease versions in range matching

-c --coerce
        Coerce a string into SemVer if possible
        (does not imply --loose)

--rtl
        Coerce version strings right to left

--ltr
        Coerce version strings left to right (default)

Program exits successfully if any valid version satisfies
all supplied ranges, and prints all satisfying versions


If no satisfying versions are found, then exits failure


A leading `""=""` or `""v""` character is stripped off and ignored


## Ranges

A `version range` is a set of `comparators` which specify versions
that satisfy the range
  The set
of primitive `operators` is:

* `<` Less than
* `<=` Less than or equal to
* `>` Greater than
* `>=` Greater than or equal to
* `=` Equal
8`, `2
5
3`, and `1
9`, but not the versions `1
0`
 The comparator `>1` is equivalent to `>=2
0
0` and
would match the versions `2
1
0
1
7`, `1
3
0`,
or `1
0
2
6`, but not the versions `1
2
0
3`) then
it will only be allowed to satisfy comparator sets if at least one
comparator with the same `[major, minor, patch]` tuple also has a
prerelease tag


For example, the range `>1
3` would be allowed to match the
version `1
5-alpha
9`, even though `3
4
9` is technically ""greater
than"" `1
2
3` according to the SemVer sort rules
4


The purpose for this behavior is twofold
  However, it
is still not appropriate to assume that they have opted into taking a
similar risk on the *next* set of prerelease versions


Note that this behavior can be suppressed (treating all prerelease
versions as if they were normal versions, for the purpose of range
matching) by setting the `includePrerelease` flag on the options
object to any
[functions](https://github
inc` takes an additional `identifier` string argument that
will append the value of the string as a prerelease identifier:

```javascript
semver
2
3', 'prerelease', 'beta')
// '1
2
0
```

Which then can be used to increment further:

```bash
$ semver 1
2
4-beta

Set to `false` to omit the prerelease number altogether

If you do not specify this parameter, it will default to zero-based
2
inc('1
2
2
2
2
3 -i prerelease --preid beta -n false
1
2
C`

Specifies an inclusive set


* `1
2
3
4`

If a partial version is provided as the first version in the inclusive
range, then the missing pieces are replaced with zeroes
4`

If a partial version is provided as the second version in the
inclusive range, then all versions that start with the supplied parts
of the tuple are accepted, but nothing that would be greater than the
provided tuple parts
3` := `>=1
4
2
*` `*`

Any of `X`, `x`, or `*` may be used to ""stand in"" for one of the
numeric values in the `[major, minor, patch]` tuple
0
0` (Any non-prerelease version satisfies, unless
  `includePrerelease` is specified, in which case any version at all
  satisfies)
* `1
x` := `>=1
2
0 <1
3
0
0-0`
* `1
2` := `1
2
0 <1
3
  Allows minor-level changes if not
2
(2+1)
0` := `>=1
2` := `>=1
(2+1)
0-0` (Same as `1
0` := `>=1
0
0
0-0` (Same as `1
2
2
(2+1)
2
3 <0
0
0` := `>=0
0
0-0` (Same as `0
2` := `>=1
0-0` Note that prereleases in
  the `1
  So, `1
3-beta
4` would be allowed, but
  `1
2
2` would not, because it is a prerelease of a
  different `[major, minor, patch]` tuple
3` `^0
2
5` `^0
  In other words, this allows patch and
minor updates for versions `1


Many authors treat a `0
x` version as if the `x` were the major
""breaking-change"" indicator


Caret ranges are ideal when an author may make breaking changes
between `0
4` and `0

However, it presumes that there will *not* be breaking changes between
`0
4` and `0
2
5`
0
3` := `>=0
2
3
3-beta
2` := `>=1
3-beta
4` would be allowed, but
  `1
2
2` would not, because it is a prerelease of a
  different `[major, minor, patch]` tuple

* `^0
0
  So, `0
2` would be allowed
x` := `>=1
0-0`
* `^0
0
1


* `^1
x` := `>=1
0
x` := `>=0
0
' part ) *
part       ::= nr | [-0-9A-Za-z]+
```

## Functions

All methods and classes take a final `options` object argument
  All
options in this object are `false` by default

  (Any resulting output will always be 100% strict compliant, of
  course
 Example: `prerelease('1

* `patch(v)`: Return the patch version number

* `parse(v)`: Attempt to parse a string as a semantic version, returning either
  a `SemVer` object or `null`
  You already know how to
  compare strings

* `compare(v1, v2)`: Return `0` if `v1 == v2`, or `1` if `v1` is greater, or `-1` if
  `v2` is greater
  Sorts in ascending order if passed to `Array
2 <1
2
0` would have a hole from `1
9`
until `2
10` would not be greater than the
range (because `2
1` satisfies, which is higher), nor less than the
range (since `1


### Coercion

* `coerce(version, options)`: Coerces a string to semver if possible

This aims to provide a very forgiving translation of a non-semver string to
semver
3
9
6
4 replaces v3
3
0`)
  The maximum  length for any semver component considered for
coercion is 16 characters; longer components will be ignored
(`10000000000000000
4`)
7


If the `options
  For example, `1
3
4` in rtl mode, not
`4
0`
0


If the `options
  For example, `1
1+rev
 This does not work for
ranges
clean(' = v 2
clean(' = v 2
5-foo')`: `null`
* `s
5-foo'`
* `s
1
5')`: `'2
0
includes(arbitraryUserInput)) {
  console
SEMVER_SPEC_VERSION);
```

## Exported Modules

<!--
TODO: Make sure that all of these items are documented (classes aren't,
eg), and then pull the module name into the documentation for that specific
thing


The following modules are available:

* `require('semver')`
* `require('semver/classes')`
* `require('semver/classes/comparator')`
* `require('semver/classes/range')`
* `require('semver/classes/semver')`
* `require('semver/functions/clean')`
* `require('semver/functions/cmp')`
* `require('semver/functions/coerce')`
* `require('semver/functions/compare')`
* `require('semver/functions/compare-build')`
* `require('semver/functions/compare-loose')`
* `require('semver/functions/diff')`
* `require('semver/functions/eq')`
* `require('semver/functions/gt')`
* `require('semver/functions/gte')`
* `require('semver/functions/inc')`
* `require('semver/functions/lt')`
* `require('semver/functions/lte')`
* `require('semver/functions/major')`
* `require('semver/functions/minor')`
* `require('semver/functions/neq')`
* `require('semver/functions/parse')`
* `require('semver/functions/patch')`
* `require('semver/functions/prerelease')`
* `require('semver/functions/rcompare')`
* `require('semver/functions/rsort')`
* `require('semver/functions/satisfies')`
* `require('semver/functions/sort')`
* `require('semver/functions/valid')`
* `require('semver/ranges/gtr')`
* `require('semver/ranges/intersects')`
* `require('semver/ranges/ltr')`
* `require('semver/ranges/max-satisfying')`
* `require('semver/ranges/min-satisfying')`
* `require('semver/ranges/min-version')`
* `require('semver/ranges/outside')`
* `require('semver/ranges/to-comparators')`
* `require('semver/ranges/valid')`


Copyright (c) 2016, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS
md)

[Bind command](typescript/bindExample
md)

[Associate command](typescript/associateExample
md)

[Bind command](javascript/bindExample
 The server binds to a new UDP port and communicates the newly opened port back to the origin client


**Connection Steps**

1
createUDPFrame() and SocksClient
8
8
8', port: 53 }, // The remote host that replied with a UDP packet
    data: <Buffer 74 65 73 74 0a> // The data
  }
  */
});

const options = {
  proxy: {
    host: '104
0
0
log(info);
  /*
  {
    socket: <Socket 

8 on port 53 through the proxy

  });

  // Send packet
send(packet, info
port, info
remoteHost


This can be used for things such as FTP clients which require incoming TCP connections, etc


**Connection Steps**

1
 Client -(bind)-> Proxy    (Tells the proxy to bind to a new port)
2
 Client <-(port)- Proxy    (Tells the origin client which port it opened)
3
 Client2 --> Proxy    (Other client connects to the proxy on this port)
4

6



```typescript
const SocksClient = require('socks')
203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will connect to the SOCKS proxy server on the newly bound port
0

  destination: {
    host: '0
0',
    port: 0
  },

  command: 'bind'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new port for incoming connections

client

124
on('established', (info) => {
  console
log(info);
  /*
  {
    socket: <Socket 
>,
    remoteHost: { // This is the remote ip and port that connected to the SOCKS proxy on the newly bound port

      host: '1
socket is a regular net
Socket TCP connection between client and client2 (1

client
 It's worth noting that there are many socks-http-agents that can be used with the node http module (and libraries such as request
createConnection() factory function as well as by creating a SocksClient instance and using event handlers


### Using createConnection with async/await

Since SocksClient
131
124
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api
log(info

Socket that is established to the destination host through the given proxy servers)

    info
com\n\n');
    info
socket
com sees that the last proxy (104
131
203) is connected to it and not the origin client (you)
8326,
          ""lon"":-74
131
com', // host names are supported with SOCKS v4a and SOCKS v5
then(info => {
  console
socket);
  // <Socket 

socket
toString()); // ip-api
124

    /*
      HTTP/1
1307,
        ""org"":""Digital Ocean"",
        ""query"":""104
131
124
createConnection() optionally accepts a callback function as a second parameter
write('GET /json HTTP/1
on('data', (data) => {
      console
com sees that the last proxy (104
1 200 OK
        Access-Control-Allow-Origin: *
        Content-Type: application/json; charset=utf-8
        Date: Sun, 24 Dec 2017 03:47:51 GMT
        Content-Length: 300

        {
          ""as"":""AS14061 Digital Ocean, Inc
"",
          ""city"":""Clifton"",
          ""country"":""United States"",
          ""countryCode"":""US"",
          ""isp"":""Digital Ocean"",
          ""lat"":40
1307,
          ""org"":""Digital Ocean"",
          ""query"":""104
203"",
          ""region"":""NJ"",
          ""regionName"":""New Jersey"",
          ""status"":""success"",
          ""timezone"":""America/New_York"",
          ""zip"":""07014""
        }
      */
  }
})
```

### Using event handlers

SocksClient also supports instance creation of a SocksClient
 This allows for event based flow control
SocksClient;

const options  = {
  proxy: {
    ipaddress: '104
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api

    port: 80
  },

  command: 'connect'
};

const client = new SocksClient(options);

client
on('established', (info) => {
  console
log(info
socket);
  // <Socket 
log(data
124

    /*
      HTTP/1
1 200 OK
      Access-Control-Allow-Origin: *
      Content-Type: application/json; charset=utf-8
      Date: Sun, 24 Dec 2017 03:47:51 GMT
      Content-Length: 300

      {
        ""as"":""AS14061 Digital Ocean, Inc

client
on('error', () => {
  // Handle errors
});
```

# socks examples

## Example for SOCKS 'associate' command

The associate command tells the SOCKS proxy server to establish a UDP relay
 From here, any SOCKS UDP frame packets sent to this special UDP port on the Proxy server will be forwarded to the desired destination, and any responses will be forwarded back to the origin client (you)
 Client -(associate)-> Proxy (Tells the proxy to create a UDP relay and bind on a new port)
2
 Client <--(udp frame) <-- Proxy <-- Destination (The destination client responds to the udp packet sent in #3)

## Usage

The 'associate' command can only be used by creating a new SocksClient instance and listening for the 'established' event
createUDPFrame() and SocksClient
parseUDPFrame() create and parse these special UDP packets
createSocket('udp4');
udpSocket
bind();

// Listen for incoming UDP packets from the proxy server
8
8', port: 53 }, // The remote host that replied with a UDP packet
    data: <Buffer 74 65 73 74 0a> // The data
  }
  */
});

const options: SocksClientOptions = {
  proxy: {
    host: '104
131
124
0 as a wildcard address to accept UDP frames from any source

  destination: {
    host: '0
0',
    port: 0
  },

  command: 'associate'
};

const client = new SocksClient(options);

// This event is fired when the SOCKS server has started listening on a new UDP port for UDP relaying

client
124

  const packet = SocksClient
createUDPFrame({
    remoteHost: { host: '8
8
port, info
remoteHost
 Client <-(port)- Proxy    (Tells the origin client which port it opened)
3
 Client2 --> Proxy    (Other client connects to the proxy on this port)
4
 Original connection to the proxy is now a full TCP stream between client (you) and client2
203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will connect to the SOCKS proxy server on the newly bound port

  // Most SOCKS servers accept 0
0 as a wildcard address to accept any client

client

131

client
2
Socket TCP connection between client and client2 (1
)

  console

Socket that is established to the destination host through the given proxy servers)
});

// SOCKS proxy failed to bind
connect();
```
# socks examples

## Example for SOCKS 'connect' command

The connect command is the most common use-case for a SOCKS proxy
 This establishes a direct connection to a destination host through a proxy server
 It's worth noting that there are many socks-http-agents that can be used with the node http module (and libraries such as request
 This HTTP request is used as a simple example
createConnection returns a Promise, we can easily use async/await for flow control
131
socket);
    // <Socket 
1\nHost: ip-api
com\n\n');
    info
toString()); // ip-api
203) is connected to it and not the origin client (you)
203"",
          ""region"":""NJ"",
          ""regionName"":""New Jersey"",
          ""status"":""success"",
          ""timezone"":""America/New_York"",
          ""zip"":""07014""
        }
      */
    });
  } catch (err) {
    // Handle errors
  }
}

start();
```

### Using createConnection with Promises

```typescript
import { SocksClient, SocksClientOptions } from 'socks';

const options: SocksClientOptions = {
  proxy: {
    ipaddress: '104
124
com', // host names are supported with SOCKS v4a and SOCKS v5

    port: 80
  },

  command: 'connect'
};

SocksClient
createConnection(options)

1\nHost: ip-api

    /*
      HTTP/1
"",
        ""city"":""Clifton"",
        ""country"":""United States"",
        ""countryCode"":""US"",
        ""isp"":""Digital Ocean"",
        ""lat"":40
1307,
        ""org"":""Digital Ocean"",
        ""query"":""104
catch(err => {
  // handle errors
});
```

### Using createConnection with callbacks

SocksClient
131
203',
    port: 1081,
    type: 5
  },

  destination: {
    host: 'ip-api

Socket that is established to the destination host through the given proxy servers)

    info
com\n\n');
    info
log(data
toString()); // ip-api
131
1307,
          ""org"":""Digital Ocean"",
          ""query"":""104
131
203"",
          ""region"":""NJ"",
          ""regionName"":""New Jersey"",
          ""status"":""success"",
          ""timezone"":""America/New_York"",
          ""zip"":""07014""
        }
      */
    });
  }
})
```

### Using event handlers

SocksClient also supports instance creation of a SocksClient
on('established', (info) => {
  console

com\n\n');
  info
socket
log(data
toString()); // ip-api
131
"",
        ""city"":""Clifton"",
        ""country"":""United States"",
        ""countryCode"":""US"",
        ""isp"":""Digital Ocean"",
        ""lat"":40
8326,
        ""lon"":-74
1307,
        ""org"":""Digital Ocean"",
        ""query"":""104
124
/examples/index

- **In an options object, 'target' is now known as 'destination'
**
- Sockets are no longer paused after a SOCKS connection is made, so socket
resume() is no longer required
 (Please be sure to attach data handlers immediately to the Socket to avoid losing data)
 (BIND and ASSOCIATE must be used with a SocksClient instance via event handlers)
createConnection function callback is called with a single object rather than separate socket and info object

- A SOCKS http/https agent is no longer bundled into the library


For informational purposes, here is the original getting started example from v1 converted to work with v2
101
228

        socket
101
108"",
        port: 1080,
        type: 5
    },
    destination: {
        host: ""google
com\n\n"");
        result
on('data', function(data) {
            console

    }
});
```











ISC License

Copyright 2021 (c) npm, Inc


THE SOFTWARE IS PROVIDED ""AS IS"" AND THE COPYRIGHT HOLDER DISCLAIMS
ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS
 IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE


















MIT License

Copyright (c) 2017 Joseph Wynn

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software
 IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
org/onlinepubs/007904975/functions/wcwidth
html
http://www
opengroup
 Interoperability between terminal-line
applications and (teletype-style) character terminals using the
UTF-8 encoding requires agreement on which character should advance
the cursor by how many cell positions
 These routines are
a first attempt of defining such behavior based on simple rules
applied to data provided by the Unicode Consortium
) and not any typographic considerations
 It would nevertheless make sense
typographically to allocate two character cells to characters such
as for instance EM SPACE or VOLUME INTEGRAL, which cannot be
represented adequately with a single-width glyph


http://www
unicode
0)

Permission to use, copy, modify, and distribute this software
for any purpose and without fee is hereby granted
 The author
disclaims all warranties with regard to this software
sync('node', { nothrow: true })

// Pass options to override the PATH and PATHEXT environment vars

await which('node', { path: someOtherPath, pathExt: somePathExt })
```

## CLI USAGE

Just like the BSD `which(1)` binary but using `node-which`

- `pathExt`: Use instead of the `PATHEXT` environment variable

- `all`: Return all matches, instead of just the first one















Copyright (c) 2015, Rebecca Turner

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies
io/npm/v/npm
im/npm)
[![CI - cli](https://github
com/npm/cli/actions/workflows/ci
yml/badge
com/npm/cli/actions/workflows/benchmark
js](https://nodejs
org/en/download/) must be installed to run **`npm`**:

* `18
0`
* `20
0` or higher

### Installation

**`npm`** comes bundled with [**`node`**](https://nodejs
com/search?q=node+version+manager+archived%3Afalse&type=repositories&ref=advsearch)

### Usage

```bash
npm <command>
```

### Links & Resources

* [**Documentation**](https://docs
com/npm/feedback) - Contribute ideas & discussion around the npm registry, website & CLI
* [**RFCs**](https://github
calendar
google
com/support) - Experiencing problems with the **npm** [website](https://npmjs
org) by default; Usage of this registry is subject to **Terms of Use** available at [https://npmjs","

# <img src=""
md)

`packageManager@x
z` is required
org/@yarnpkg/cli-dist/-/cli-dist-3


- Or you're publishing your project to a system where the network is
  unavailable, in which case you'll preemptively generate a package manager
  archive from your local computer (using `corepack pack -o`) before storing
  it somewhere your container will be able to access (for example within your
  repository)
tgz>` to setup the cache


### `corepack install`

Download and install the package manager configured in the local project

 name[@<version>]]`

| Option                | Description                                |
| --------------------- | ------------------------------------------ |
| `--json `             | Print the output folder rather than logs   |
| `-o,--output `        | Path where to generate the archive         |

Download the selected package managers and store them inside a tarball
suitable for use with `corepack install -g`
 Should you need to upgrade to a new major, use an explicit
`corepack use {name}@latest` call (or simply `corepack use {name}`)
 By default, when Corepack is called
  explicitly (e
org`

- `COREPACK_NPM_TOKEN` sets a Bearer token authorization header when connecting
  to a npm type registry


- `HTTP_PROXY`, `HTTPS_PROXY`, and `NO_PROXY` are supported through
  [`node-proxy-agent`](https://github




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator
npmjs
im/libnpmaccess)
* [npm team](/commands/npm-team)
* [npm publish](/commands/npm-publish)
* [npm config](/commands/npm-config)
* [npm registry](/using-npm/registry)

---
title: npm-adduser
section: 1
description: Add a registry user account
---

### Synopsis

```bash
npm adduser

alias: add-user
```

Note: This command is unaware of workspaces


When using `legacy` for your `auth-type`, the username, password, and
email are read in from prompts


### Configuration

#### `registry`

* Default: ""https://registry
npmjs
mycorp
 Note that if an `otp`
config is given, this value will always be set to `legacy`


### Package lock

By default npm requires a package-lock or shrinkwrap in order to run the
audit
js


The npm CLI supports registry signatures and signing keys provided by any registry if the following conventions are followed:

1
4


npm will generate a JSON payload with the name and list of versions of each
package in the tree, and POST it to the default configured registry at
the path `/-/npm/v1/security/advisories/bulk`


### Exit Code

The `npm audit` command will exit with a 0 exit code if no vulnerabilities
were found

* Allow installing packages that have an `engines` declaration requiring a
  different version of npm
json`


Note that these dependencies _are_ still resolved and added to the
`package-lock


If a package type appears in both the `--include` and `--omit` lists, then
it will be included
]]

alias: issues
```

### Description

This command tries to guess at the likely location of a package's bug
tracker URL or the `mailto` URL of the support email, and then tries to
open it using the [`--browser` config](/using-npm/config#browser) param


This value is not exported to the environment for child processes


### Details

npm stores cache data in an opaque directory within the configured `cache`,
named `_cacache`
 For this reason, it should never be necessary to clear
the cache for any reason other than reclaiming disk space, thus why `clean`
now requires `--force` to run
npmrc` file to your repo
travis




#### `global-style`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=shallow`

Only install direct dependencies in the top level `node_modules`, but hoist
on deeper dependencies


When such an override is performed, a warning is printed, explaining the
conflict and the packages involved


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc


This value is not exported to the environment for child processes
 This option has no effect on
workspaces


### Description

npm gets its config settings from the command line, environment
variables, `npmrc` files, and in some cases, the `package


See [config](/using-npm/config) for a more thorough explanation of the
mechanisms involved, and a full list of config options available

json`
 See
[folders](/configuring-npm/folders) for more on the differences in behavior
x
|   `-- c@1
9


This is the inverse of `--omit=<type>`
 See [`npm
fund`](/commands/npm-fund) for details


You must be the package owner to deprecate something
 Note that you must use double quotes with no space between them to
format an empty string
0 --diff=pkg-fork@1
1


* `npm diff --diff=<pkg-name>` (in a package directory):

    When using a single package name (with no version or tag specifier) as an
    argument, `npm diff` will work in a similar way to
    [`npm-outdated`](npm-outdated) and reach for the registry to figure out
    what current published version of the package named `<pkg-name>`
    will satisfy its dependent declared semver-range


    Given a package named `abbrev` that is currently installed:

    ```bash
    npm diff --diff=abbrev
    ```

    That will request from the registry its most up to date version and
    will print a diff output comparing the currently installed version to this
    newer one if the version numbers are not the same
0
0 --diff=1
g:

  ```bash
  npm diff --diff=pkg@2 


When used by the `npm diff` command, this is the tag used to fetch the
tarball that will be compared with the local files by default


This value is not exported to the environment for child processes
g
4
0`


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc
)
will link workspaces into the `node_modules` folder
 You can pass multiple
package names at once
org/""
* Type: URL

The base URL of the npm registry


#### `workspaces`

* Default: null
* Type: null or Boolean

Set to true to run the command in the context of **all** configured
workspaces
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc


#### `npm -v`

While Node
 The team believes that the latest tested version of npm is almost
always likely to be the most functional and defect-free version of npm
 Those of you who want access to new
ECMAscript features or bleeding-edge changes to Node's standard library may
be running a newer version, and some may be required to run an older
version of Node because of enterprise change control policies

Sometimes, this may entail changing the registry you're pointing at


#### Validate the checksums of cached packages

When an npm package is published, the publishing process generates a
checksum that npm uses at install time to verify that the package didn't
get corrupted in transit
 `npm doctor` uses these checksums to validate the
package tarballs in your local cache (you can see where that cache is
located with `npm config get cache`)
]'

alias: x
```

### Description

This command allows you to run an arbitrary command from an npm package
(either one installed locally, or fetched remotely), in a similar context
as running it via `npm run`
json`,
  or if all entries are aliases of the same command, then that command
  will be used


```bash
npm exec --package yo --package generator-node --call ""yo node""
```



#### `workspace`

* Default:
* Type: String (can be set multiple times)

Enable running a command in the context of the configured workspaces of the
current project while filtering by running only the workspaces defined by
this configuration option


This value is not exported to the environment for child processes


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
g:

```

  `npx` uses the `npm exec`
command instead of a separate argument parser and install process, with
some affordances to maintain backwards compatibility with the arguments it
accepted in previous versions


This resulted in some shifts in its functionality:

- Any `npm` config value may be provided
  Locally installed bins are
  always present in the executed process `PATH`


#### offline

Forces full offline mode
6
2
  node_modules/tacks/node_modules/rimraf
    rimraf@""^2


If a command is specified, then it is run in the subshell, which then
immediately terminates
 linked: (experimental) install in node_modules/
 This
will also prevent _writing_ `package-lock
json files
)
will link workspaces into the `node_modules` folder
 - Commands that do
other things (test, exec, publish, etc
0
json`
 When
false, it uses ascii characters instead of unicode glyphs


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


This value is not exported to the environment for child processes


If the argument to `npm help` is not a known help topic, then it will call
`help-search`
  It is rarely if ever necessary to call this command
directly


### Description

Allows you to manage [npm
hooks](https://blog
here/
```

Remove a hook:

```bash
$ npm hook rm id-deadbeef
```

### Configuration

#### `registry`

* Default: ""https://registry
org/""
* Type: URL

The base URL of the npm registry
json file
---

### Synopsis

```bash
npm init <package-spec> (same as `npx <package-spec>`)
npm init <@scope> (same as `npx <@scope>/create`)

aliases: create, innit
```

### Description

`npm init <initializer>` can be used to set up a new or existing npm
package


`initializer` in this case is an npm package named `create-<initializer>`,
which will be installed by [`npm-exec`](/commands/npm-exec), and then have its
main bin executed -- presumably creating or updating `package
0` -> `npm exec @usr/create@2
json
```

You may generate a new workspace using the legacy init:

```bash
$ npm init -w packages/a
```

That will generate a new folder and `package


```

### Configuration

#### `init-author-name`

* Default: """"
* Type: String

The value `npm init` should use by default for the package author's name




#### `init-author-url`

* Default: """"
* Type: """" or URL

The value `npm init` should use by default for the package author's
homepage
com/npm/init-package-json) module for
more information, or [npm init](/commands/npm-init)
0


This will also cause `npm init` to create a scoped package


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
 - Commands that do
other things (test, exec, publish, etc
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


This value is not exported to the environment for child processes




#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command


### See Also

* [package spec](/using-npm/package-spec)
* [init-package-json module](http://npm
 Sets `--install-strategy=nested`




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty
cmd` shims on Windows) for package
executables


This value is not exported to the environment for child processes




#### `save-exact`

* Default: false
* Type: Boolean

Dependencies saved to package
 See
[folders](/configuring-npm/folders) for more on the differences in behavior
 If `--strict-peer-deps` is set, then
this warning is treated as a failure
json` will be updated,
instead of checking `node_modules` and downloading dependencies
json`, rather than the contents of `node_modules`
cmd` shims on Windows) for package
executables
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`
json`
* `package-lock


* `npm install <folder>`:

    If `<folder>` sits inside the root of your project, its dependencies will be installed and may
    be hoisted to the top-level `node_modules` as they would for other
    types of dependencies


    Example:

    ```bash
    npm install 
 The config's default value is `latest`


* `npm install <alias>@npm:<name>`:

    Install a package under a custom alias
1


    If the package being installed contains a `prepare` script, its
    `dependencies` and `devDependencies` will be installed, and the prepare
    script will be run, before the package is packaged and installed
git#v1
com:npm/cli#pull/273
    npm install git+ssh://git@github
0
    npm install git+https://isaacs@github
git
    ```

* `npm install <githubname>/<githubrepo>[#<commit-ish>]`:
* `npm install github:<githubname>/<githubrepo>[#<commit-ish>]`:

    Install the package at `https://github


    As with regular git dependencies, `dependencies` and `devDependencies`
    will be installed if the package has a `prepare` script before the
    package is done installing


    If `#<commit-ish>` is provided, it will be used to clone exactly that
    commit


    As with regular git dependencies, `dependencies` and `devDependencies` will
    be installed if the package has a `prepare` script before the package is
    done installing
com/gitlabname/gitlabrepo`
    by attempting to clone it using `git`


The `--dry-run` argument will report in the usual way what the install
would have done without actually installing anything


The `--package-lock-only` argument will only update the
`package-lock
store,
link in place, unhoisted
 They are just not
physically installed on disk




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc
 Acceptable values are same as `os`
field of package




#### `libc`

* Default: null
* Type: null or String

Override libc of native modules to install


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether


This value is not exported to the environment for child processes
 D is still installed at the top
level because nothing conflicts with it
  For example, to do the
above use-case in a shorter way:

```bash
cd ~/projects/node-bloggy  # go into the dir of your main project
npm link 



If your linked package is scoped (see [`scope`](/using-npm/scope)) your
link command must include that scope, e


If you _want_ to save the `file:` reference in your `package




#### `omit`

* Default: 'dev' if the `NODE_ENV` environment variable is set to
  'production', otherwise empty


If a package type appears in both the `--include` and `--omit` lists, then
it will be included


If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment
variable will be set to `'production'` for all lifecycle scripts


Dependency types specified in `--include` will not be omitted, regardless of
the order in which omit/include are specified on the command-line




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package


This value is not exported to the environment for child processes


This value is not exported to the environment for child processes
 This option has no effect on
workspaces


### Description

Verify a user in the specified registry, and save the credentials to the
`
 If no registry is specified, the default registry will be
used (see [`config`](/using-npm/config))


### Configuration

#### `registry`

* Default: ""https://registry
npmjs
com

# log out, removing the link and the auth token
npm logout --scope=@mycorp
```

This will cause `@mycorp` to be mapped to the registry for future
installation of packages specified according to the pattern
`@mycorp/package`
parse() before
  saving them to your `package




#### `global`

* Default: false
* Type: Boolean

Operates in ""global"" mode, so that packages are installed into the `prefix`
folder instead of the current working directory




#### `include`

* Default:
* Type: ""prod"", ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Option that allows for defining which types of dependencies to install


This is the inverse of `--omit=<type>`




#### `unicode`

* Default: false on windows, true on mac/unix systems with a unicode locale,
  as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables
 When
false, it uses ascii characters instead of unicode glyphs


#### `include-workspace-root`

* Default: false
* Type: Boolean

Include the workspace root when workspaces are enabled for a command
json`
 Packages not
  included in `package
0
15   5
3      git      git  node_modules/nothingness  dependent-package-name
npm            3
3




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output
 For
`npm search`, this will be tab-separated table format
)
will link workspaces into the `node_modules` folder
 This can be passed into any of the
commands that modify your local installation, eg, `install`, `update`,
`dedupe`, `uninstall`, as well as `pack` and `publish`


* In `npm pkg set` it enables parsing set values with JSON


If no arguments are supplied, then npm packs the current package folder

If it works it will output something like:

```bash
npm notice PING https://registry
npmjs
foo
<key>=<value> 



* `npm pkg get <field>`

    Retrieves a value `key`, defined in your `package
 This is especially helpful
    with the exports object:

    ```bash
    npm pkg get ""exports[
 When
    saving to your `package
name='Bar'
    ```

    It's also possible to parse values as json prior to saving them to your
    `package
g:

```
npm pkg get name version --ws
{
  ""a"": {
    ""name"": ""a"",
    ""version"": ""1

* Allow installing packages that have an `engines` declaration requiring a
  different version of npm
 See
[`npm config`](/commands/npm-config) for more detail


* In `npm pkg set` it enables parsing set values with JSON
  When crashes or mistakes happen,
this command can help clean up any resulting garbage


If a package type appears in both the `--include` and `--omit` lists, then
it will be included




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts
 - Commands that do
other things (test, exec, publish, etc
 This can be
overridden by specifying a different default registry or using a
[`scope`](/using-npm/scope) in the name, combined with a
scope-configured registry (see
[`package
md`,
  `LICENSE`, and so on
gitignore` or `


### Configuration

#### `tag`

* Default: ""latest""
* Type: String

If you ask npm to install a package and don't tell it a specific version,
then it will install the specified tag


Also the tag that is added to the package@version specified by the `npm tag`
command, if no explicit tag is given


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether

3)

// get the hoisted node for a given semver range
#lodash@^1
com],
[repository^=+git:
dev)

// get dependencies with specific licenses
[license=MIT], [license=ISC]

// find all packages that have @ruyadorno as a contributor
:attr(contributors, [email=ruyadorno@github

  },
  


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether


For `update` this means only the `package-lock


This config can not be used with: `expect-result-count`

#### `expect-result-count`

* Default: null
* Type: null or Number

Tells to expect a specific number of results from the command
]

alias: rb
```

### Description

This command does the following:

1
 Installing a new version of **node


Note that commands explicitly intended to run a particular script, such as
`npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script`
will still run their intended script if `ignore-scripts` is set, but they
will *not* run any pre- or post-scripts


Valid values for the `workspace` config are either:

* Workspace names
* Path to a workspace directory
* Path to a parent workspace directory (will result in selecting all
  workspaces within that folder)

When set for the `npm init` command, this may be set to the folder of a
workspace which does not yet exist, to create the folder and set it up as a
brand new workspace within the project
 When not set explicitly:

- Commands that operate on the `node_modules` tree (install, update, etc


#### `install-links`

* Default: false
* Type: Boolean

When set file: protocol dependencies will be packed and installed as regular
dependencies instead of creating a symlink
 This option has no effect on
workspaces
]]
```

### Description

This command tries to guess at the likely location of a package's
repository URL, and then tries to open it using the
[`--browser` config](/using-npm/config#browser) param
) will operate on the root project,
_unless_ one or more workspaces are specified in the `workspace` config


### See Also

* [npm docs](/commands/npm-docs)
* [npm config](/commands/npm-config)

---
title: npm-restart
section: 1
description: Restart a package
---

### Synopsis

```bash
npm restart [-- <args>]
```

### Description

This restarts a project
  Use `--` to
pass `-`-prefixed flags and options which would otherwise be parsed by npm


In addition to the shell's pre-existing `PATH`, `npm run` adds
`node_modules/


Given a project with configured workspaces, e
g:

```
{
    ""workspaces"": [ ""
/packages/a` and `


This value is not exported to the environment for child processes
0"",
      ""dependsOn"": [
        ""lodash@4
21""
      ]
    },
    {
      ""ref"": ""lodash@4
21"",
      ""dependsOn"": []
    }
  ]
}
```

### Example SPDX SBOM

```json
{
  ""spdxVersion"": ""SPDX-2
3"",
  ""dataLicense"": ""CC0-1
001Z"",
    ""creators"": [
      ""Tool: npm/cli-10
21"",
      ""packageFileName"": ""node_modules/lodash"",
      ""description"": ""Lodash modular utilities
g


For `list` this means the output will be based on the tree described by the
`package-lock




#### `sbom-type`

* Default: ""library""
* Type: ""library"", ""application"", or ""framework""

The type of package described by the generated SBOM


If a term starts with `/`, then it's interpreted as a regular expression
and supports standard JavaScript RegExp syntax
)

### Configuration

#### `long`

* Default: false
* Type: Boolean

Show extended information in `ls`, `search`, and `help-search`
parse() before
  saving them to your `package




#### `registry`

* Default: ""https://registry
 To
allow the CLI to fill in missing cache data, see `--prefer-offline`


### See Also

* [npm install](/commands/npm-install)
* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [package


If not set, and a registry response fails with a challenge for a one-time
password, npm will prompt on the command line for one
js`
x
js output would be here)

```

### Configuration

#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package




#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd
json files
exe' on Windows
* Type: null or String

The shell to use for scripts run with the `npm exec`, `npm run` and `npm
init <package-spec>` commands




### See Also

* [npm run-script](/commands/npm-run-script)
* [npm scripts](/using-npm/scripts)
* [npm test](/commands/npm-test)
* [npm start](/commands/npm-start)
* [npm restart](/commands/npm-restart)

---
title: npm-team
section: 1
description: Manage organization teams and team memberships
---

### Synopsis

```bash
npm team create <scope:team> [--otp <otpcode>]
npm team destroy <scope:team> [--otp <otpcode>]
npm team add <scope:team> <user> [--otp <otpcode>]
npm team rm <scope:team> <user> [--otp <otpcode>]
npm team ls <scope>|<scope:team>
```

Note: This command is unaware of workspaces
 Note: You cannot remove the
  `developers` team, [learn more




#### `otp`

* Default: null
* Type: null or String

This is a one-time password from a two-factor authenticator
js""
  }
}
```

```bash
npm test
> npm@x




#### `script-shell`

* Default: '/bin/sh' on POSIX systems, 'cmd
npmjs


### Configuration

#### `read-only`

* Default: false
* Type: Boolean

This is used to mark a token as unable to publish when configuring limited
access tokens with the `npm token create` command




#### `cidr`

* Default: null
* Type: null or String (can be set multiple times)

This is a list of CIDR address to be used when configuring limited access
tokens with the `npm token create` command
 It's needed
when publishing or changing package permissions with `npm access`


It also removes the package from the `dependencies`, `devDependencies`,
`optionalDependencies`, and `peerDependencies` objects in your
`package
json`
json`, `npm-shrinkwrap
json` files

This is the default, but you may need to use this if you have for
instance `save=false` in your `npmrc` file

In global mode (ie, with `-g` or `--global` appended to the command),
it uninstalls the current package context as a global package
json`, `npm-shrinkwrap
json`, or `package-lock
 - Commands that do
other things (test, exec, publish, etc


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project


### Warning

Consider using the [`deprecate`](/commands/npm-deprecate) command instead,
if your intent is to encourage users to upgrade, or if you no longer
want to maintain a package


If you do not specify a package name at all, the name and version to be
unpublished will be pulled from the project in the current directory


Even if you unpublish a package version, that specific name and version
combination can never be reused


Note: This is NOT honored by other network related commands, eg `dist-tags`,
`owner`, etc

* Allow installing packages that have an `engines` declaration requiring a
  different version of npm

* Allow installing packages that have an `engines` declaration requiring a
  different version of `node`, even if `--engine-strict` is enabled

* Allow conflicting peerDependencies to be installed in the root project


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
]
```

Note: This command is unaware of workspaces


If the `-g` flag is specified, this command will update globally installed
packages
json` you can run: `npm update --save` (or add the
`save=true` option to a [configuration file](/configuring-npm/npmrc)
to make that the default behavior)
)
2
1"",
    ""0
1""
}
```

In this case, running `npm update` will install `dep1@1
2
4
4
0"",
      ""dep2"": ""1
1""
  }
}
```

Then `npm update` will install `dep1@1
store,
link in place, unhoisted

* Type: ""dev"", ""optional"", or ""peer"" (can be set multiple times)

Dependency types to omit from the installation tree on disk




#### `ignore-scripts`

* Default: false
* Type: Boolean

If true, npm does not run scripts specified in package




#### `fund`

* Default: true
* Type: Boolean

When ""true"" displays the message at the end of each `npm install`
acknowledging the number of dependencies looking for funding
 See [`npm
fund`](/commands/npm-fund) for details


Explicitly setting this to false will cause commands like `install` to
ignore workspaces altogether
2
8`
json`


Take the following example:

```json
{
  ""scripts"": {
    ""preversion"": ""npm test"",
    ""version"": ""npm run build && git add -A dist"",
    ""postversion"": ""git push && git push --tags && rm -rf build/temp""
  }
}
```

This runs all your tests and proceeds only if they pass
json`)
opts)
```

For fields that are arrays, requesting a non-numeric field will return
all of the values from the objects in the list
0]'
```

Multiple fields may be specified, and will be printed one after another
  So, for example, this will show the list of `npm` contributors in
the shortened string format


If the version range matches multiple versions then each printed value
will be prefixed with the version it applies to


### See Also

* [package spec](/using-npm/package-spec)
* [npm search](/commands/npm-search)
* [npm registry](/using-npm/registry)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm docs](/commands/npm-docs)

---
title: npm-whoami
section: 1
description: Display npm username
---

### Synopsis

```bash
npm whoami
```

Note: This command is unaware of workspaces
npmjs


It is extremely configurable to support a variety of use cases


### Dependencies

If a package lists a dependency using a git URL, npm will install that
dependency using the [`git`](https://github

For a Unix system, [node-gyp](https://github
  If you do not provide a value (`--key`) then
  the option is set to boolean `true`
  If the `userconfig` option is set in the cli
  or env, that file will be used instead
js`
com/npm/cli/blob/latest/CONTRIBUTING
json](/configuring-npm/package-json)
* [npmrc](/configuring-npm/npmrc)
* [npm config](/commands/npm-config)
* [npm install](/commands/npm-install)
* [npm prefix](/commands/npm-prefix)
* [npm publish](/commands/npm-publish)

---
title: npx
section: 1
description: Run a command from a local or remote npm package
---

### Synopsis

```bash
npx -- <pkg>[@<version>] [args


 On most systems, this is `/usr/local`

When installing locally, this means that you can
`require(""packagename"")` to load its main module, or
`require(""packagename/lib/path/to/sub/module"")` to load other modules


Global installs on Unix systems go to `{prefix}/lib/node_modules`
 See
[`scope`](/using-npm/scope) for more details
  Ensure that path is in your
terminal's `PATH` environment to run them


Man pages are not installed on Windows systems


### More Information

When installing locally, npm first tries to find an appropriate
`prefix` folder
  This is so that `npm install foo@1
git-folder seeking
logic when running git commands in a working dir


When you run `npm install foo@1
bin/`, so that they may
be found by npm scripts when necessary


For global installation, packages are installed roughly the same way,
but using the folders described above
`

2
 Likewise, quux's [E]
folder tree is empty, because its dependency on bar is satisfied
by the parent folder copy installed at [B]


#### Publishing

Upon publishing, npm will look in the `node_modules` folder
json](/configuring-npm/package-json)
* [npm install](/commands/npm-install)
* [npm pack](/commands/npm-pack)
* [npm cache](/commands/npm-cache)
* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [config](/using-npm/config)
* [npm publish](/commands/npm-publish)

---
title: install
section: 5
description: Download and install node and npm
---

### Description

To publish and install packages to and from the public npm registry, you
must install Node
  You can
[search for them on GitHub](https://github


* [Node
js installer](https://nodejs
 If
  you use Linux, we recommend that you use a NodeSource installer
 Be sure to
install the version labeled **LTS**
com/nodesource/distributions)
  (recommended)
- One of the installers on the [Node
json` is a file created by [`npm
shrinkwrap`](/commands/npm-shrinkwrap)
json`, with one major caveat: Unlike `package-lock
 It's
strongly discouraged for library authors to publish this file, since that
would prevent end users from having control over transitive dependency
updates


For full details and description of the `npm-shrinkwrap
json](/configuring-npm/package-json)
* [npm install](/commands/npm-install)

---
title: npmrc
section: 5
description: The npm config files
---

### Description

npm gets its config settings from the command line, environment variables,
and `npmrc` files


### Files

The four relevant files are:

* per-project config file (`/path/to/my/project/
npmrc`)
* global config file (`$PREFIX/etc/npmrc`)
* npm builtin config file (`/path/to/npm/npmrc`)

All npm config files are an ini-formatted list of `key = value` parameters
 For example:

```bash
key[] = ""first value""
key[] = ""second value""
```

#### Comments

Lines in `
 `


Note that this only applies to the root of the project that you're running
npm in


Additionally, this file is not read in global mode, such as when running
`npm install -g`
com/another/:_authToken=MYTOKEN2
```

### See also

* [npm folders](/configuring-npm/folders)
* [npm config](/commands/npm-config)
* [config](/using-npm/config)
* [package
  It must be actual JSON, not just a JavaScript object
literal


### name

If you plan to publish your package, the *most* important things in your
package
json are the name and version fields as they will be required
  It's assumed that it's js, since
  you're writing a package


Example:

```json
""homepage"": ""https://github
 If you want to provide only a
URL, you can specify the value for ""bugs"" as a simple string instead of an
object
com> (http://barnyrubble
npmignore` file in the root of your package or in
subdirectories, which will keep files from being included
gypi`
* `node_modules`
* `npm-debug
json`
* `pnpm-lock
  For example:

```json
{
  ""name"": ""my-program"",
  ""version"": ""1


### man

Specify either a single file or an array of filenames to put in place for
the `man` program to find
1""
}
```

would link the `
/man/doc
2"",
    ""baz"": "">1
4"",
    ""boo"": ""2
0


#### Git URLs as Dependencies

Git URLs are of the form:

```bash
<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]
```

`<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or
`git+file`
com:npm/cli#semver:^5
0
 Local paths can be saved using `npm install -S` or `npm
install --save`, using any of these forms:

```bash

  See [`config`](/using-npm/config) for more on the topic
js""
}
```

The `prepare` script will be run before publishing, so that users can
consume the functionality without requiring them to compile it themselves
5"",
  ""peerDependencies"": {
    ""tea"": ""2
 `npm install
tea-latte` could possibly yield the following dependency graph:

```bash
├── tea-latte@1
0
```

In npm versions 3 through 6, `peerDependencies` were not automatically
installed, and would raise a warning if an invalid version of the peer
dependency was found in the tree
 Thus, if you've
worked with every 1
x"",
    ""soy-milk"": ""1
tgz` file by running `npm pack`
  Note that the package names do not
include any versions, as that information is specified in `dependencies`
 A
value of `true` will bundle all dependencies, a value of `false` will bundle
none
 These changes can be scoped as
specific or as vague as desired


To make sure the package `foo` is always installed as version `1
 This will cause
`foo` to always be `1
0`, but only when it's a child of `bar@2
0`:

```json
{
  ""overrides"": {
    ""bar@2
0""
    }
  }
}
```

You may not set an override for a package that you directly depend on unless
both the dependency and the override itself share the exact same spec
0
js""}`

  If there is a `server
js` file in the root of your package, then npm will
  default the `start` command to `node server
 It describes the
exact tree that was generated, such that subsequent installs are able to
generate identical trees, regardless of intermediate dependency updates


* Provide a facility for users to ""time-travel"" to previous states of
  `node_modules` without having to commit the directory itself


* As of npm v7, lockfiles include enough information to gain a complete
  picture of the package tree, reducing the need to read `package
package-lock
js`, then the
modified time on `node_modules/foo` will not reflect this change
json`
 Backwards compatible to npm v7
  In the case of link dependencies, this will be the
  location of the link target
npmjs
  If this is
  present, no other fields are specified, since the link target will also
  be included in the lockfile


Dependency objects have the following fields:

* version: a specifier that varies depending on the nature of the package,
  and is usable in fetching a new copy of it
2
com/foo/bar#115311855adb0789a0466714ed48a1499ffea97e`)
    * http tarball sources: This is the URL of the tarball
 (eg
      `file:///opt/storage/example-1
 It is
safer to use a registry-provided authentication bearer token stored in the
~/
 Specifying a value of `restricted` or `public` during publish will
change the access for an existing package the same way that `npm access set
status` would


If the requested version is a `dist-tag` and the given tag does not pass the
`--before` filter, the most recent version less than or equal to that tag
will be used
0`





#### `diff-name-only`

* Default: false
* Type: Boolean

Prints only filenames when using `npm diff`




#### `editor`

* Default: The EDITOR or VISUAL environment variables, or
  '%SYSTEMROOT%\notepad


* packages are installed into the `{prefix}/lib/node_modules` folder, instead
  of the current working directory


When false, specifying individual workspaces via the `workspace` config, or
all workspaces via the `workspaces` flag, will cause npm to operate only on
the specified workspaces, and not on the root project




#### `init-author-url`

* Default: """"
* Type: """" or URL

The value `npm init` should use by default for the package author's
homepage




#### `init-version`

* Default: ""1




#### `install-strategy`

* Default: ""hoisted""
* Type: ""hoisted"", ""nested"", ""shallow"", or ""linked""

Sets the strategy for installing packages in node_modules
 linked: (experimental) install in node_modules/




#### `json`

* Default: false
* Type: Boolean

Whether or not to output JSON data, rather than the normal output


* In `npm pkg set` it enables parsing set values with JSON




#### `location`

* Default: ""user"" unless `--global` is passed, which will also set this value
  to ""global""
* Type: ""global"", ""user"", or ""project""

When passed to `npm config` this refers to which config file to use

* bin files are linked to `{prefix}/bin`
* man pages are linked to `{prefix}/share/man`



#### `lockfile-version`

* Default: Version 3 if no lockfile, auto-converting v1 lockfiles to v3,
  otherwise maintain current lockfile version


If set to 0, no log files will be written for the current run
js via the `NODE_OPTIONS` environment
variable




#### `package`

* Default:
* Type: String (can be set multiple times)

The package or packages to install for [`npm exec`](/commands/npm-exec)



#### `package-lock`

* Default: true
* Type: Boolean

If set to false, then ignore `package-lock
json`, rather than the contents of `node_modules`

* Type: Path

The location to install global items


This config can not be used with: `provenance-file`

#### `provenance-file`

* Default: null
* Type: Path

When publishing, the provenance bundle at the given path will be used
org/""
* Type: URL

The base URL of the npm registry


The default behavior is to replace package dist URLs from the default
registry (https://registry


When used with the `npm rm` command, removes the dependency from
`package
json will be configured with an exact version
rather than using npm's default semver range operator
json file as `peerDependencies`



#### `save-prefix`

* Default: ""^""
* Type: String

Configure how versions of packages installed to a package


For example if a package has version `1
3`, by default its version is set
to `^1




#### `save-prod`

* Default: false
* Type: Boolean

Save installed packages into `dependencies` specifically




#### `scope`

* Default: the scope of the current project, if any, or """"
* Type: String

Associate an operation with a scope for a scoped registry


Useful when logging in to or out of a private registry:

```
# log in, linking the scope to the custom registry
npm login --scope=@mycorp --registry=https://registry


Note that git requires you to have set up GPG keys in your git configs for
this to work properly




#### `tag`

* Default: ""latest""
* Type: String

If you ask npm to install a package and don't tell it a specific version,
then it will install the specified tag


Also the tag that is added to the package@version specified by the `npm tag`
command, if no explicit tag is given


Because other tools may rely on the convention that npm version tags look
like `v1
 The file name ends with `-timing
 To suppress this
while still writing the timing file, use `--silent`

* Type: Boolean

When set to true, npm uses unicode characters in the tree output




#### `versions`

* Default: false
* Type: Boolean

If true, output the npm version as well as node's `process


Set to `""browser""` to view html help content in the default web browser




#### `cert`

* Default: null
* Type: null or String
* DEPRECATED: `key` and `cert` are no longer used for most registry
  operations
 Use registry scoped `keyfile` and `certfile` instead
CER)"") with
newlines replaced by the string ""\n""
js""
* Type: Path
* DEPRECATED: Use `--init-module` instead
crt

A client key to pass when accessing the registry




#### `legacy-bundling`

* Default: false
* Type: Boolean
* DEPRECATED: This option has been deprecated in favor of
  `--install-strategy=nested`

Instead of hoisting package installs in `node_modules`, install packages in
the same manner that they are depended on
 This may cause very deep
directory structures and duplicate package installs as there is no
de-duplicating




#### `optional`

* Default: null
* Type: null or Boolean
* DEPRECATED: Use `--omit=optional` to exclude optional dependencies, or
  `--include=optional` to include them


Alias for --package-lock



### See also

* [npm config](/commands/npm-config)
* [npmrc](/configuring-npm/npmrc)
* [npm scripts](/using-npm/scripts)
* [npm folders](/configuring-npm/folders)
* [npm](/commands/npm)

---
title: Dependency Selector Syntax & Querying
section: 7
description: Dependency Selector Syntax & Querying
---

### Description

The [`npm query`](/commands/npm-query) command exposes a new dependency selector syntax (informed by & respecting many aspects of the [CSS Selectors 4 Spec](https://dev
 `npm fund`, `npm ls`, `npm outdated`, `npm audit` 
mozilla
org/en-US/docs/Web/CSS/:root) matches the root node/dependency
- [`:scope`](https://developer
mozilla
valid()`, `intersects` is used
0, [version], lt)` every node with a `version` less than `1
 The following data can be found under the `queryContext` property of each node
prod:outdated(in-range)` returns production dependencies that have a new release that satisfies at least one of its parent's dependencies

##### `:vuln`

The `:vuln` pseudo selector retrieves data from the registry and returns information about which if your dependencies has a known vulnerability
0` in your tree, a vulnerability for `semver` which affects versions `<=6

- `:vuln([severity=high],[severity=moderate])` returns only dependencies with a vulnerability with a `high`  or `moderate` severity


- `[]` attribute selector (ie

package` metadata
com])
```

### Groups

Dependency groups are defined by the package relationships to their ancestors (ie
 the dependency types that are defined in `package
prod


- `
root` dependency is also considered a `prod` dependency


### About These Documents

These are man pages
git#commit-ish
git+https://user@hostname/project/blah


* author: Take some credit
npmignore`
* `
lock-wscript`
* `
gypi`
* `CVS`
* `npm-debug
`


The default value of `loglevel` is `""notice""` but there are several levels/types of logs available, including:

- `""silent""`
- `""error""`
- `""warn""`
- `""notice""`
- `""http""`
- `""info""`
- `""verbose""`
- `""silly""`

All logs pertaining to a level proceeding the current setting will be shown
 Always shows the full path to the debug log regardless of command exit status
1
 Output timing information to the terminal

This file contains a `timers` object where the keys are an identifier for the
portion of the process being timed and the value is the number of milliseconds it took to complete
2

npm currently will parse a string with more than one `/` in it as a
folder, but this is legacy behavior that may be removed in a future
version
tgz`

Refers to a package in a tarball format, either on the local filesystem
or remotely via url
npmjs
npmjs


You can configure npm to use any compatible registry you like, and even run
your own registry
 Use of someone else's registry may be governed by their
terms of use
 This is detected by
  looking for the following environment variables: `CI`, `TDDIUM`,
  `JENKINS_URL`, `bamboo
json` to prevent it from being
published at all, or
`""publishConfig"":{""registry"":""http://my-internal-registry
local""}`
to force it to be published only to your internal/private registry


This assumes that you installed node and npm in the default place
 A scope
follows the usual rules for package names (URL-safe characters, no leading dots
or underscores)
 When used in package names, scopes are preceded by an `@` symbol
and followed by a slash, e
 This means you don't have to worry about someone taking your
package name ahead of you
 For example, if you'd like to
publish to `@org`, you would  need to create the `org` organization
on npmjs
com/private-modules/intro)
account
g
json`, simply create another script
*with a matching name* and add ""pre"" or ""post"" to the beginning of them


* `prepare`, `prepublish`, `prepublishOnly`, `prepack`, `postpack`, `dependencies`

**prepare** (since `npm@4
0
0
 with
linked packages)

#### [`npm restart`](/commands/npm-restart)

If there is a `restart` script defined, these events are run, otherwise
`stop` and `start` are both run if present, including their `pre` and
`post` iterations)

* `prerestart`
* `restart`
* `postrestart`

#### [`npm run <user defined>`](/commands/npm-run-script)

* `pre<user-defined>`
* `<user-defined>`
* `post<user-defined>`

#### [`npm start`](/commands/npm-start)

* `prestart`
* `start`
* `poststart`

If there is a `server


Reasons for a package removal include:

* a user directly uninstalled this package
* a user uninstalled a dependant package and so this dependency is being uninstalled
* a user uninstalled a dependant package but another package also depends on this version
* this version has been merged as a duplicate with another version
* etc
env
npm_package_scripts_install === ""foo
js"",
    ""postinstall"" : ""scripts/install
js` is running for two
different phases, it would be wise in this case to look at the
`npm_lifecycle_event` environment variable


### Best Practices

* Don't exit with a non-zero error code unless you *really* mean it

* Inspect the env to determine where to put things
 Use a `

* Scripts are run from the root of the package folder, regardless of what the
  current working directory is when `npm` is invoked
json` example living at a current working
directory `
json`


### Adding dependencies to a workspace

It's possible to directly add/remove/update dependencies of your workspaces
using the [`workspace` config](/using-npm/config#workspace)
json
`-- packages
   +-- a
   |   `-- package


Following is a quick example on how to use the `npm run` command in the context
of nested workspaces
 For a project containing multiple workspaces, e
io/npm/l/@npmcli/arborist


![a tree with the word ARBORIST superimposed on it](https://raw
  defaults to npm's default registry
  registry: 'https://registry
 basic auth, username:password, base64 encoded
  auth: 'aXNhYWNzOm5vdCBteSByZWFsIHBhc3N3b3Jk',
  // 4
json/npm-shrinkwrap says
// This *also* loads the yarn

arb

  // preferDedupe: prefer to deduplicate packages if possible, rather than
  //   choosing a newer version of a dependency
  Each edge has a `type` which specifies what
kind of dependency it represents: `'prod'` for regular dependencies,
`'peer'` for peerDependencies, `'dev'` for devDependencies, and
`'optional'` for optionalDependencies


    Setting `node

* `node

* `node
edgesIn` Edges in the dependency graph indicating nodes that depend
  on this node
  If this is a Node already present within the tree, then it
  will be the same object

    * `INVALID` Indicates that the dependency does not satisfy `edge
dev` and `node
optional` is not, then the node is
  required in the devDependency hierarchy
optional` is set, but `node
json` file, or `package-lock
  eg `--some-key=some-value` on the command line
json` file
  eg `some-key = some-value` in `~/
npmrc`
platform
  platform: process

args)
})

// returns a promise that fails if config loading fails, and
// resolves when the config object is ready for action
conf
argv`
localPrefix` The prefix for `local` operations
list[1]` is the `env` level, and so on
find(key)`

Find the effective place in the configuration levels a given key is set


### `config


If `where` is not set, then all config objects are validated


Note that you must `await config
g:

>  Given a global default definition of foo='foo' it's possible to read that
>  value such as:
>
>  ```js
>     const save = config
save(where)`

Save the config file specified by the `where` param
  Must be one of
`project`, `user`, `global`, `builtin`
 IN NO
EVENT SHALL NPM BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE
then(files => {
  // files is an array of items that need to be passed to
  // rimraf or moved out of the way to make the folder empty
  // if foo bundled dependencies, those will be included

  // It will not traverse into child directories, because we set
  // depth:1 in the options
then(files => {
  // setting depth:Infinity tells it to keep walking forever
  // until it hits something that isn't a directory, so we'll
  // just get the list of all files, but not their containing
  // directories


Options:
  -d<n> --depth=<n>   Provide a numeric value (""Infinity"" is allowed)
                      to specify how deep in the file tree to traverse


## RETURN VALUE

A Promise that resolves to an array of fully-resolved files and folders
matching the criteria

- If all child packages within a given scope were bundled dependencies,
    then the `node_modules/@scope` folder will remain
  However, if the intent is to
pass these arguments to `rimraf`, it hardly makes sense to do _two_
`readdir` calls just so that we can have the luxury of having to make a
third


[![Build Status](https://travis-ci
svg?branch=master)](https://travis-ci


2
 If the `TERM` environ is `dumb`, not supported, unless the
   `ignoreDumb` option is set
  Ignore the `isTTY` check
  Return an object when colors aren't
  supported (instead of returning `false`)


Otherwise, the return object has the following fields:

* `level` - A number from 0 to 3
    * `0` - No color support
    * `1` - Basic (16) color support
    * `2` - 256 color support
    * `3` - 16 million (true) color support
* `hasBasic` - Boolean
* `has256` - Boolean
* `has16m` - Boolean

## CLI

You can run the `color-support` bin from the command line which will
just dump the values as this module calculates them in whatever env
it's run


## USAGE

```javascript
var which = require('which')

// async usage
which('node', function (er, resolvedPath) {
  // er is returned if no ""node"" is found on the PATH
  // if it is found, then the absolute path to the exec is returned
})

// or promise
which('node')


- `path`: Use instead of the `PATH` environment variable


```js
cssesc('Ich ♥ Bücher');
// → 'Ich \\2665  B\\FC cher'

cssesc('foo 𝌆 bar');
// → 'foo \\1D306  bar'
```

By default, `cssesc` returns a string that can be used as part of a CSS string


```js
cssesc('Lorem ipsum ""dolor"" sit \'amet\' etc
babelrc`](https://github


```js
// load using import
import { glob, globSync, globStream, globStreamSync, Glob } from 'glob'
// or using commonjs, that's fine, too
const {
  glob,
  globSync,
  globStream,
  globStreamSync,
  Glob,
} = require('glob')

// the main glob() and globSync() resolve/return array of filenames

// all js files, but don't look in node_modules
const jsfiles = await glob('**/*
{png,jpeg}', 'public/*
im/path-scurry for more info on their API
const g3 = new Glob('**/baz/**', { withFileTypes: true })
g3
stream()
isDirectory(),
    path
mtimeMs - b


                         This prevents double-expanding, in case the shell
                         expands an argument whose filename is a glob
                         expression


  --dot                  Allow patterns to match files/directories that start
                         with '
iterate()`

## `globIterateSync(pattern: string | string[], options?: GlobOptions) => Generator<string>`

Return a sync iterator for walking glob pattern matches
 Will read all the matches as
fast as you consume them, even all in a single tick if you
consume them immediately, but will still respond to backpressure
if they're not consumed immediately


Note that a previous `Glob` object can be passed as the
`GlobOptions` to another `Glob` instantiation to re-use settings
and caches with a new pattern
streamSync()`

Stream results synchronously
walkSync()`

Returns a results array


  Note that this makes it **impossible** to match against paths
  containing literal glob pattern characters, but allows matching
  with patterns constructed using `path

 (Ie,
  treat it as a normal `*` instead
js`, matching all js files in
  all directories
 (Note: to match
  _only_ directories, put a `/` at the end of the pattern


- `stat` Call `lstat()` on all entries, whether required or not
  to determine whether it's a valid match


  By default, when this option is not set, absolute paths are
  returned for patterns that are absolute, and otherwise paths
  are returned that are relative to the `cwd` setting
 On posix systems, this has no effect


- `platform` Defaults to value of `process
` character at the start of a path portion
 If the first character of the range is `!` or `^` then
  it matches any character not in the range


### Basename Matching

If you set `matchBase:true` in the options, and the pattern has
no slashes in it, then it will seek for any file anywhere in the
tree with a matching basename


### Empty Sets

If no matching files are found, then an empty array is returned
 This is supported in the manner of
bsdglob and bash 5, where `**` only has special significance if
it is the only thing in a path part
symbol
]` (collating symbol), are not


### Comments and Negation

Previously, this module let you mark a pattern as a ""comment"" if
it started with a `#` character, or a ""negated"" pattern if it
started with a `!` character


## Windows

**Please only use forward-slashes in glob expressions


Results from absolute patterns such as `/foo/*` are mounted onto
the root setting using `path
)

## Race Conditions

Glob searching, by its very nature, is susceptible to race
conditions, since it relies on directory walking


Users are thus advised not to use a glob result as a guarantee of
filesystem state in the face of rapid changes
im/globby) and
[fast-glob](http://npm


Both have very nice APIs and are reasonably fast
txt` will not match `9999

- Extglob patterns are allowed to contain `/` characters

Former versions of this module are far too slow for any cases
where performance matters at all, and were designed with APIs
that are extremely dated by current JavaScript standards
</small>

![lumpy space princess saying 'oh my GLOB'](https://github


```
--- pattern: '**' ---
~~ sync ~~
node fast-glob sync             0m0
598s  200364
node globby sync                0m0
312s  2242

--- pattern: '
573s  160
~~ async ~~
node fast-glob async            0m0
527s  5230
node current globSync mjs       0m0
685s  200023
node current glob syncStream    0m0
351s  200023
node globby async               0m0
462s  200023
node current glob stream        0m0
468s  200023

--- pattern: '**/5555/0000/*
519s  1000
node current globSync mjs       0m0
507s  0
node current globSync mjs       0m0
280s  0
node globby async               0m0
324s  4880

--- pattern: '**/????/????/????/????/*
626s  100000
node current glob syncStream    0m0
345s  100000

--- pattern: '
418s  100000
node current glob async mjs     0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
345s  160023
node globby async               0m0

/{*/**/
483s  0
node globby sync                0m0
/*/**/*
485s  0
node globby sync                0m0
507s  0
node current globSync mjs       0m0
759s  200023
node current glob syncStream    0m0
297s  0
node current glob async mjs     0m0
544s  200023
node current glob stream        0m0

066s  0
node current glob stream        0m0
508s  222137
node current glob stream        0m0
384s  200023

--- pattern: '
589s  200023
node globby sync                0m0
523s  200023
node current glob async mjs     0m0
txt' ---
~~ sync ~~
node fast-glob sync             0m0
626s  100000
node current glob syncStream    0m0
352s  100000
```























ISC License

Copyright npm, Inc
0>
***




Copyright 2017 Kat Marchán
Copyright npm, Inc
svg)](https://npm
keys(await access


#### `spec` parameter for all `libnpmaccess` commands

`spec` must be an [`npm-package-arg`](https://npm


#### `access
getPackages(user|scope|team, opts) -> Promise<Object>`

Gets all packages for a given user, scope, or team


Teams should be in the format `scope:team` or `@scope:team`

#### `access


#### access
svg)](https://npm
json b/package
json
index v1
0
 Defaults to `false`

- `diffDstPrefix <String>`: Prefix to be used in the filenames from `b`
/LICENSE)



# libnpmexec

[![npm version](https://img
shields
yml)

The `npm exec` (`npx`) Programmatic API

## Install

`npm install libnpmexec`

## Usage:

```js
const libexec = require('libnpmexec')
await libexec({
  args: ['yosay', 'Bom dia!'],
  cache: '~/
bin` folder of the local project to start scanning for bin files **String**, defaults to `
/LICENSE)



# libnpmfund

[![npm version](https://img
shields
0',
  funding: { url: 'https://example


Permission to use, copy, modify, and/or distribute this software for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies
shields
com/npm/libnpmhook) is a Node


## Table of Contents

* [Example](#example)
* [Install](#install)
* [Contributing](#contributing)
* [API](#api)
  * [hook opts](#opts)
  * [`add()`](#add)
  * [`rm()`](#rm)
  * [`ls()`](#ls)
  * [`ls
com/package/npm-registry-fetch#fetch-options)
for options that can be passed in
add(name, endpoint, secret, [opts]) -> Promise`

`name` is the name of the package, org, or user/org scope to watch
125Z',
  deleted: true,
  delivered: false,
  last_delivery: null,
  response_code: 0,
  status: 'active' }

// Repeat it


The returned Promise resolves to the full hook object that was updated, if it
existed


See also: [`PUT
/v1/hooks/hook/:id`](https://github

ls
svg)](https://npm


`org` must be a scope name for an org, and can be optionally prefixed with `@`
stream(org, [opts]) -> Stream`

Returns a stream of entries for a
[Roster](https://github


## Table of Contents

* [Example](#example)
* [Install](#install)
* [API](#api)
  * [`pack()`](#pack)

## Example

```js
const pack = require('libnpmpack')
```

## Install

`$ npm install libnpmpack`

### API

#### <a name=""pack""></a> `> pack(spec, [opts]) -> Promise`

Packs a tarball from a local directory or from a registry or github spec and returns a Promise that resolves to the tarball data Buffer, with from, resolved, and integrity fields attached


##### Examples

```javascript
// packs from cwd
const tarball = await pack()

// packs from a local directory
const localTar = await pack('/Users/claudiahdz/projects/my-cool-pkg')

// packs from a registry spec
const registryTar = await pack('abbrev@1


## Table of Contents

* [Example](#example)
* [Install](#install)
* [API](#api)
  * [publish/unpublish opts](#opts)
  * [`publish()`](#publish)
  * [`unpublish()`](#unpublish)

## Example

```js
const { publish, unpublish } = require('libnpmpublish')
```

## Install

`$ npm install libnpmpublish`

### API

#### <a name=""opts""></a> `opts` for `libnpmpublish` commands

`libnpmpublish` uses
[`npm-registry-fetch`](https://npm


A couple of options of note:

* `opts
 For other ways to pass in auth details, see the
  n-r-f docs
 Mutually
  exclusive with the `provenance` option
manifest() and pacote
tarball() can also take
// any spec that npm can install

```

#### <a name=""unpublish""></a> `> libpub


##### Example

```js
await libpub
im/libnpmsearch)
[![CI - libnpmsearch](https://github
yml/badge
com/npm/libnpmsearch) is a Node
 Default: 0
* `opts
token` - can be passed in and will be used as the authentication token for the registry



If `opts

io/npm/v/libnpmteam
com/npm/libnpmteam) is a Node
lsTeams('npm'))
```

## Publishing
1
stream()`](#ls-teams-stream)
  * [`lsUsers()`](#ls-users)
  * [`lsUsers

* `opts
otp` - certain operations will require an OTP token to be passed in


For a Promise-based version of these results, see [`team
lsTeams
stream(team, [opts]) -> Stream`

Returns a stream of usernames belonging to `team`
im/libnpmversion)
[![CI - libnpmversion](https://github
svg)](https://github
yml)

Library to do the things that 'npm version' does
2


The exact order of execution is as follows:

1
 These scripts have access to the new `version`
   in package

After the commit, it pushes the new commit and tag up to the server, and
deletes the `build/temp` directory


#### `tagVersionPrefix` String

The prefix to add to the raw semver string for the tag name
  (So, by default it tags as 'v1
  Defaults to `/bin/sh` on unix, or `cmd







































The MIT License (MIT)

Copyright (c) 2020 Vercel, Inc


Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software
com/nodejs/gyp-next) project that was previously used
by the Chromium team and extended to support the development of Node
org/en/about/previous-releases)
 -- OR --
     * Alternatively, if you already have the [full Xcode installed](https://developer
`
org/versions/) from the
[Microsoft Store](https://apps
js Guidelines for Windows](https://github
 If `node-gyp` is called by way of `npm`, *and* you have multiple versions of
Python installed, then you can set the `npm_config_python` environment variable
to the appropriate path:
``` bash
export npm_config_python=/path/to/executable/python
```
&nbsp;&nbsp;&nbsp;&nbsp;Or on Windows:
```console
py --list-paths  # To see the installed Python versions
set npm_config_python=C:\path\to\python
js runtimes like Electron, which have
different build configurations from the official Node
 See below for instructions on creating a `binding
cc"" ]
    }
  ]
}
```

## Further reading

The **[docs](
io/#goingnative)
 * [""Hello World"" node addon example](https://github
md)
 * [gyp input format reference](https://gyp
gsrc
gyp`, you would:

Run this on Unix:

```bash
export npm_config_devdir=/tmp/






If you want to write an option parser, and have it be good, there are
two ways to do it

             // knownOpts and shorthands default to {}
             // arg list defaults to process
js -fp --foofoo
{ foo: ""Mr
js --no-blatzk -fp # unless they start with ""no-""
{ blatzk: false, flag: true, pick: true }

$ node my-program
js --baz b/a/z # known paths are resolved
  Gets resolved against cwd if not absolute

* url: A url
  Valuable
  for use when validating programmatically
typeDefs`


You can also call `nopt
  This method will be called with
the offending `nopt
invalidHandler(key, val, types)`
js --no-f --pileofmon
# etc


## Slicing

Node programs are called with more or less the exact argv as it appears
in C land, after the v8 and node-specific options have been plucked off


That's usually not very useful to you



















ISC License

Copyright (c) npm, Inc


THE SOFTWARE IS PROVIDED ""AS IS"" AND NPM DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS






# pacote

Fetches package manifests and tarballs from the npm registry


```
Pacote - The JavaScript Package Handler, v10
1


* `pacote
manifest(spec, opts)` Fetch (or simulate) a package's manifest
  (basically, the `package
packument(spec, opts)` Fetch (or simulate) a package's packument
  (basically, the top-level package document listing all the manifests that
  the registry returns)


* `pacote

* `resolved` Shortcut for looking up resolved values

* `dmode` Minimum permission mode for extracted directories
  See ""Extracted File Modes"" below

* `preferOnline` Prefer to revalidate cache entries, even when it would not
  be strictly necessary

* `fullReadJson` Use the slower `read-package-json` package insted of
  `read-package-json-fast` in order to include extra fields like ""readme"" in
  the manifest

* `packumentCache` For registry packuments only, you may provide a `Map`
  object which will be used to cache packument requests between pacote
  calls
  This allows you to easily avoid hitting the registry multiple
  times (even just to validate the cache) for a given packument, since it
  is unlikely to change in the span of a single command

* `verifyAttestations` A boolean that will make pacote verify Sigstore
    attestations, if present
json` fields, manifests include:

* `manifest
dist` Registry manifests (those included in a packument) have a
  `dist` object


    * `tarball` The url to the associated package artifact
_integrity`

    * `signatures` Signatures of the shasum
npm


For Pacote's purposes, the following fields are relevant:

* `versions` An object where each key is a version, and each value is the
  manifest for that version




<!-- This file is automatically added by @npmcli/template-oss
 -->

ISC License

Copyright npm, Inc


## Acceptance

In order to receive this license, you must agree to its
rules
  The rules of this license are both obligations
under that agreement and conditions to your license

You must not do anything with this software that triggers
a rule that you cannot or will not follow
generate('http://github
valid('a
b
3'
semver
0` specification found at
<https://semver
2
0
0`, but not the versions
`1
99`, but not the versions `1
2
2
7`,
`1
3-alpha
2
5` is greater than `1
1
```

#### Prerelease Identifier Base

The method `
3', 'prerelease', 'beta', '1')
// '1
3', 'prerelease', 'beta', false)
// '1
4-beta


Advanced ranges may be combined in the same way as primitive
comparators using white space or `||`
Z - A
2
0 <2
x` := `>=1
0-0` (Matching major and minor versions)

A partial version range is treated as an X-Range, so the special
character is in fact optional
3 <1
2
x`)
* `~1` := `>=1
3` := `>=0
0` := `>=0
3
2` := `>=0
0` and above, patch updates for
versions `0
1
0-0`
* `^0
2`
3` version *only* will be allowed, if they are greater than or
  equal to `beta`
0 <0
0` := `>=0
0


* `valid(v)`: Return the parsed version, or null if it's not valid

* `prerelease(v)`: Returns an array of prerelease components, or null
  if none exist
sort()`
sort()`

* `diff(v1, v2)`: Returns difference between two versions by the release type
  (`major`, `premajor`, `minor`, `preminor`, `patch`, `prepatch`, or `prerelease`),
  or null if the versions are the same


### Comparators

* `intersects(comparator)`: Return true if the comparators intersect

### Ranges

* `validRange(range)`: Return the valid range or null if it's not valid
* `satisfies(version, range)`: Return true if the version satisfies the
  range

* `minVersion(range)`: Return the lowest version that can possibly match
  the given range
0
2
3`)
1` becomes
`3
7
4` is likely invalid)
4` will return `2
2
4-rc
5-foo', { loose: true })`: `'2
1
5'`
* `s
md)
# socks examples

## Example for SOCKS 'associate' command

The associate command tells the SOCKS proxy server to establish a UDP relay


3
)
4
on('message', (message, rinfo) => {
  console
203',
    port: 1081,
    type: 5
  },

  // This should be the ip and port of the expected client that will be sending UDP frames to the newly opened UDP port on the server
0 as a wildcard address to accept UDP frames from any source
>,
    remoteHost: { // This is the remote port on the SOCKS proxy server to send UDP frame packets to

      host: '104
8', port: 53 },
    data: Buffer

  udpSocket
on('error', () => {
  // Handle errors
});
```

# socks examples

## Example for SOCKS 'bind' command

The bind command tells the SOCKS proxy server to bind and listen on a new TCP port for an incoming connection

  // Most SOCKS servers accept 0
on('bound', (info) => {
  console
log(info);
  /*
  {
    socket: <Socket 

      host: '104
)

  console
on('error', () => {
  // Handle errors
});
```
# socks examples

## Example for SOCKS 'connect' command

The connect command is the most common use-case for a SOCKS proxy


```typescript
const SocksClient = require('socks')
SocksClient;

const options  = {
  proxy: {
    host: '104
com', // host names are supported with SOCKS v4a and SOCKS v5
socket);
    // <Socket 
log(data
toString()); // ip-api

      /*
        HTTP/1
203"",
          ""region"":""NJ"",
          ""regionName"":""New Jersey"",
          ""status"":""success"",
          ""timezone"":""America/New_York"",
          ""zip"":""07014""
        }
      */
  } catch (err) {
    // Handle errors
  }
}

start();
```

### Using createConnection with Promises

```typescript
const SocksClient = require('socks')
SocksClient;

const options  = {
  proxy: {
    ipaddress: '104
>  (this is a raw net
log(data
203) is connected to it and not the origin client (you)
124
socket
toString()); // ip-api

>  (this is a raw net
203) is connected to it and not the origin client (you)
1307,
        ""org"":""Digital Ocean"",
        ""query"":""104
203"",
        ""region"":""NJ"",
        ""regionName"":""New Jersey"",
        ""status"":""success"",
        ""timezone"":""America/New_York"",
        ""zip"":""07014""
      }
    */
});

// Failed to establish proxy connection to destination
)
4
log(SocksClient
0
0
log(info);
  /*
  {
    socket: <Socket 
131
8
8
8 on port 53 through the proxy

  udpSocket
 It communicates the newly opened port back to the origin client

  destination: {
    host: '0
>,
    remoteHost: { // This is the remote ip and port of the SOCKS proxy that is now accepting incoming connections
on('error', () => {
  // Handle errors
});

// Start connection
client
js) to make this easier
124

      /*
        HTTP/1
1307,
          ""org"":""Digital Ocean"",
          ""query"":""104
131
131
Socket that is established to the destination host through the given proxy servers)

  info
toString()); // ip-api
203) is connected to it and not the origin client (you)
131

    port: 80
  },

  command: 'connect'
};

SocksClient
1\nHost: ip-api
203) is connected to it and not the origin client (you)
"",
          ""city"":""Clifton"",
          ""country"":""United States"",
          ""countryCode"":""US"",
          ""isp"":""Digital Ocean"",
          ""lat"":40
Socket that is established to the destination host through the given proxy servers)

  info
131
log(err);
    else {
        socket
com"",
        port: 80
    },
    command: 'connect'
};

SocksClient
createConnection(options, function(err, result) {
    if (err)
        console
log(err);
    else {
        result



For some graphical characters, the Unicode standard explicitly
defines a character-cell width via the definition of the East Asian
FullWidth (F), Wide (W), Half-width (H), and Narrow (Na) classes


Much less clear is the choice of width for the Not East Asian
(Neutral) class
 Existing practice does not dictate a width for any
of these characters
 This is not
entirely satisfactory and should be reconsidered before
establishing a formal standard in this area
ac
c













# which

Like the unix `which` utility
com/npm/node-which/pull/67)

## OPTIONS

You may pass an options object as the second argument
com/npm/cli/actions/workflows/benchmark
com/orgs/github/projects/4247/views/1?filterQuery=npm) - Track & follow along with our public roadmap
* [**Feedback**](https://github
com/npm/rfcs) - Contribute ideas & specifications for the API/design of the npm CLI
* [**Service Status**](https://status
google
com) - Keep track of our Open RFC calls, releases, meetups, conferences & more
* [**Support**](https://www
npmjs
npmjs


#### Is ""npm"" an acronym for ""Node Package Manager""?

Contrary to popular belief, **`npm`** **is not** in fact an acronym for ""Node Package Manager""; It is a recursive bacronymic abbreviation for **""npm is not an acronym""** (if the project was named ""ninaa"", then it would be an acronym)"
